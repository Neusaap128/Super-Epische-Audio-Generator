
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e0c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006028  08006028  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006030  08006030  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000060  08006098  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08006098  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019907  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031bf  00000000  00000000  000399da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001165  00000000  00000000  0003e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202ff  00000000  00000000  0003f365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a232  00000000  00000000  0005f664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000debcd  00000000  00000000  00079896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064d0  00000000  00000000  00158464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015e934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005fcc 	.word	0x08005fcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08005fcc 	.word	0x08005fcc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000cf4:	2340      	movs	r3, #64	; 0x40
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 f86f 	bl	8005ddc <malloc>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <InitDSP+0x2c>)
 8000d04:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f005 f866 	bl	8005ddc <malloc>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <InitDSP+0x30>)
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000007c 	.word	0x2000007c
 8000d20:	20000080 	.word	0x20000080

08000d24 <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const uint16_t* input, uint16_t* output, size_t bufferLength) {
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00c      	b.n	8000d50 <processBuffer+0x2c>
        output[i] = input[i];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	441a      	add	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	440b      	add	r3, r1
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferLength; i++) {
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8ee      	bhi.n	8000d36 <processBuffer+0x12>
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	371c      	adds	r7, #28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <HAL_ADC_ConvHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000d74:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000d7a:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000d7c:	2240      	movs	r2, #64	; 0x40
 8000d7e:	490b      	ldr	r1, [pc, #44]	; (8000dac <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000d82:	f7ff ffcf 	bl	8000d24 <processBuffer>

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f003 f823 	bl	8003dd8 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]

}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200004a4 	.word	0x200004a4
 8000da4:	200002a4 	.word	0x200002a4
 8000da8:	20000000 	.word	0x20000000
 8000dac:	200003a4 	.word	0x200003a4
 8000db0:	200004a8 	.word	0x200004a8

08000db4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_ADC_ConvCpltCallback+0x40>)
 8000dc0:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_ADC_ConvCpltCallback+0x48>)
 8000dc6:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)(adcBuf+AUDIO_BUFFER_SIZE/2), dacBuf, AUDIO_BUFFER_SIZE/2);
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_ADC_ConvCpltCallback+0x40>)
 8000dca:	2240      	movs	r2, #64	; 0x40
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffa8 	bl	8000d24 <processBuffer>
	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f002 fffc 	bl	8003dd8 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_ADC_ConvCpltCallback+0x50>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200004a4 	.word	0x200004a4
 8000df4:	20000324 	.word	0x20000324
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000424 	.word	0x20000424
 8000e00:	200003a4 	.word	0x200003a4
 8000e04:	200004a8 	.word	0x200004a8

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 fccc 	bl	80017aa <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f82b 	bl	8000e6c <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e16:	b662      	cpsie	i
}
 8000e18:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f9fd 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1e:	f000 f9c1 	bl	80011a4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e22:	f000 f923 	bl	800106c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000e26:	f000 f86d 	bl	8000f04 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e2a:	f000 f8e5 	bl	8000ff8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000e2e:	f000 f967 	bl	8001100 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <main+0x50>)
 8000e34:	f004 f814 	bl	8004e60 <HAL_TIM_Base_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  InitDSP();
 8000e38:	f7ff ff5a 	bl	8000cf0 <InitDSP>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, AUDIO_BUFFER_SIZE);
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	4907      	ldr	r1, [pc, #28]	; (8000e5c <main+0x54>)
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <main+0x58>)
 8000e42:	f001 f8c5 	bl	8001fd0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacBuf, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000e46:	2300      	movs	r3, #0
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <main+0x5c>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4805      	ldr	r0, [pc, #20]	; (8000e68 <main+0x60>)
 8000e52:	f002 f881 	bl	8002f58 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <main+0x4e>
 8000e58:	20000258 	.word	0x20000258
 8000e5c:	200002a4 	.word	0x200002a4
 8000e60:	20000084 	.word	0x20000084
 8000e64:	200003a4 	.word	0x200003a4
 8000e68:	20000150 	.word	0x20000150

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	; 0x50
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2238      	movs	r2, #56	; 0x38
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 f862 	bl	8005f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f002 ffbc 	bl	8003e0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9e:	2340      	movs	r3, #64	; 0x40
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000eae:	2355      	movs	r3, #85	; 0x55
 8000eb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 f856 	bl	8003f74 <HAL_RCC_OscConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ece:	f000 fa21 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	230f      	movs	r3, #15
 8000ed4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fb54 	bl	8004598 <HAL_RCC_ClockConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ef6:	f000 fa0d 	bl	8001314 <Error_Handler>
  }
}
 8000efa:	bf00      	nop
 8000efc:	3750      	adds	r7, #80	; 0x50
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2220      	movs	r2, #32
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f005 f811 	bl	8005f44 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f2a:	4b31      	ldr	r3, [pc, #196]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f2c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f38:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f44:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f56:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f6c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f90:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000f92:	f000 fe99 	bl	8001cc8 <HAL_ADC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f9c:	f000 f9ba 	bl	8001314 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000fac:	f001 fdfe 	bl	8002bac <HAL_ADCEx_MultiModeConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fb6:	f000 f9ad 	bl	8001314 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_ADC1_Init+0xf0>)
 8000fbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fc6:	237f      	movs	r3, #127	; 0x7f
 8000fc8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_ADC1_Init+0xec>)
 8000fd8:	f001 f8b8 	bl	800214c <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fe2:	f000 f997 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000084 	.word	0x20000084
 8000ff4:	04300002 	.word	0x04300002

08000ff8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2230      	movs	r2, #48	; 0x30
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f004 ff9d 	bl	8005f44 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_DAC1_Init+0x6c>)
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <MX_DAC1_Init+0x70>)
 800100e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001010:	4814      	ldr	r0, [pc, #80]	; (8001064 <MX_DAC1_Init+0x6c>)
 8001012:	f001 ff7e 	bl	8002f12 <HAL_DAC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800101c:	f000 f97a 	bl	8001314 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001020:	2302      	movs	r3, #2
 8001022:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001030:	231e      	movs	r3, #30
 8001032:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_DAC1_Init+0x6c>)
 800104c:	f002 f876 	bl	800313c <HAL_DAC_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001056:	f000 f95d 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3730      	adds	r7, #48	; 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000150 	.word	0x20000150
 8001068:	50000800 	.word	0x50000800

0800106c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <MX_LPUART1_UART_Init+0x90>)
 8001074:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 80010b0:	f004 f856 	bl	8005160 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010ba:	f000 f92b 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 80010c2:	f004 fdc1 	bl	8005c48 <HAL_UARTEx_SetTxFifoThreshold>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010cc:	f000 f922 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 80010d4:	f004 fdf6 	bl	8005cc4 <HAL_UARTEx_SetRxFifoThreshold>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010de:	f000 f919 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_LPUART1_UART_Init+0x8c>)
 80010e4:	f004 fd77 	bl	8005bd6 <HAL_UARTEx_DisableFifoMode>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010ee:	f000 f911 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001c4 	.word	0x200001c4
 80010fc:	40008000 	.word	0x40008000

08001100 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_TIM6_Init+0x98>)
 8001112:	4a22      	ldr	r2, [pc, #136]	; (800119c <MX_TIM6_Init+0x9c>)
 8001114:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_TIM6_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM6_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM6_Init+0x98>)
 8001124:	f640 7218 	movw	r2, #3864	; 0xf18
 8001128:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM6_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001130:	4819      	ldr	r0, [pc, #100]	; (8001198 <MX_TIM6_Init+0x98>)
 8001132:	f003 fe3d 	bl	8004db0 <HAL_TIM_Base_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800113c:	f000 f8ea 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001140:	2320      	movs	r3, #32
 8001142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <MX_TIM6_Init+0x98>)
 800114e:	f003 ff85 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001158:	f000 f8dc 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_TIM6_Init+0xa0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9ab 	bl	80004bc <__aeabi_i2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	a109      	add	r1, pc, #36	; (adr r1, 8001190 <MX_TIM6_Init+0x90>)
 800116c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001170:	f7ff fb38 	bl	80007e4 <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc1a 	bl	80009b4 <__aeabi_d2uiz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <MX_TIM6_Init+0x98>)
 8001184:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	41a443fd 	.word	0x41a443fd
 8001198:	20000258 	.word	0x20000258
 800119c:	40001000 	.word	0x40001000
 80011a0:	08005fe4 	.word	0x08005fe4

080011a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_DMA_Init+0x70>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <MX_DMA_Init+0x70>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6493      	str	r3, [r2, #72]	; 0x48
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_DMA_Init+0x70>)
 80011b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DMA_Init+0x70>)
 80011c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_DMA_Init+0x70>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6493      	str	r3, [r2, #72]	; 0x48
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA_Init+0x70>)
 80011d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200b      	movs	r0, #11
 80011e0:	f001 fe63 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f001 fe7a 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200c      	movs	r0, #12
 80011f0:	f001 fe5b 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011f4:	200c      	movs	r0, #12
 80011f6:	f001 fe72 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	205e      	movs	r0, #94	; 0x5e
 8001200:	f001 fe53 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001204:	205e      	movs	r0, #94	; 0x5e
 8001206:	f001 fe6a 	bl	8002ede <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a35      	ldr	r2, [pc, #212]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <MX_GPIO_Init+0xf0>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <MX_GPIO_Init+0xf0>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <MX_GPIO_Init+0xf0>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_GPIO_Init+0xf0>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f002 fd86 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2110      	movs	r1, #16
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <MX_GPIO_Init+0xf4>)
 80012a2:	f002 fd81 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_GPIO_Init+0xf8>)
 80012be:	f002 fbf1 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 80012c2:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f002 fbe1 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e2:	2310      	movs	r3, #16
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_GPIO_Init+0xf4>)
 80012fa:	f002 fbd3 	bl	8003aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_MspInit+0x44>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_MspInit+0x44>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6613      	str	r3, [r2, #96]	; 0x60
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_MspInit+0x44>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_MspInit+0x44>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_MspInit+0x44>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6593      	str	r3, [r2, #88]	; 0x58
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_MspInit+0x44>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001356:	f002 fdfd 	bl	8003f54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09a      	sub	sp, #104	; 0x68
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2244      	movs	r2, #68	; 0x44
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fddb 	bl	8005f44 <memset>
  if(hadc->Instance==ADC1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001396:	d160      	bne.n	800145a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800139c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800139e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fb11 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013b4:	f7ff ffae 	bl	8001314 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 80013e8:	2301      	movs	r3, #1
 80013ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f002 fb51 	bl	8003aa4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_ADC_MspInit+0x104>)
 8001406:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_ADC_MspInit+0x100>)
 800140a:	2205      	movs	r2, #5
 800140c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_ADC_MspInit+0x100>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_ADC_MspInit+0x100>)
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001432:	2220      	movs	r2, #32
 8001434:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001438:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800143c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001440:	f002 f8be 	bl	80035c0 <HAL_DMA_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800144a:	f7ff ff63 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3768      	adds	r7, #104	; 0x68
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	200000f0 	.word	0x200000f0
 800146c:	40020008 	.word	0x40020008

08001470 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2b      	ldr	r2, [pc, #172]	; (800153c <HAL_DAC_MspInit+0xcc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d150      	bne.n	8001534 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_DAC_MspInit+0xd0>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a2a      	ldr	r2, [pc, #168]	; (8001540 <HAL_DAC_MspInit+0xd0>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_DAC_MspInit+0xd0>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_DAC_MspInit+0xd0>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <HAL_DAC_MspInit+0xd0>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_DAC_MspInit+0xd0>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c2:	2310      	movs	r3, #16
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f002 fae4 	bl	8003aa4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 80014de:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_DAC_MspInit+0xd8>)
 80014e0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 80014e4:	2206      	movs	r2, #6
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 80014ea:	2210      	movs	r2, #16
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 80014fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001500:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 8001504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001508:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 800150c:	2220      	movs	r2, #32
 800150e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 8001512:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001518:	480a      	ldr	r0, [pc, #40]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 800151a:	f002 f851 	bl	80035c0 <HAL_DMA_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001524:	f7ff fef6 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	50000800 	.word	0x50000800
 8001540:	40021000 	.word	0x40021000
 8001544:	20000164 	.word	0x20000164
 8001548:	4002001c 	.word	0x4002001c

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b09a      	sub	sp, #104	; 0x68
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2244      	movs	r2, #68	; 0x44
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f004 fce9 	bl	8005f44 <memset>
  if(huart->Instance==LPUART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <HAL_UART_MspInit+0xa8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d136      	bne.n	80015ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800157c:	2320      	movs	r3, #32
 800157e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fa21 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001594:	f7ff febe 	bl	8001314 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_UART_MspInit+0xac>)
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <HAL_UART_MspInit+0xac>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_UART_MspInit+0xac>)
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_UART_MspInit+0xac>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_UART_MspInit+0xac>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_UART_MspInit+0xac>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80015c8:	230c      	movs	r3, #12
 80015ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80015d8:	230c      	movs	r3, #12
 80015da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f002 fa5d 	bl	8003aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3768      	adds	r7, #104	; 0x68
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40008000 	.word	0x40008000
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_TIM_Base_MspInit+0x38>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10b      	bne.n	8001626 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_TIM_Base_MspInit+0x3c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_TIM_Base_MspInit+0x3c>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_TIM_Base_MspInit+0x3c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40001000 	.word	0x40001000
 8001638:	40021000 	.word	0x40021000

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f8e2 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <DMA1_Channel1_IRQHandler+0x10>)
 8001696:	f002 f8b6 	bl	8003806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200000f0 	.word	0x200000f0

080016a4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <DMA1_Channel2_IRQHandler+0x10>)
 80016aa:	f002 f8ac 	bl	8003806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000164 	.word	0x20000164

080016b8 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f004 fc3c 	bl	8005f74 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20008000 	.word	0x20008000
 8001728:	00000400 	.word	0x00000400
 800172c:	200004ac 	.word	0x200004ac
 8001730:	20000600 	.word	0x20000600

08001734 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800175c:	f7ff ffea 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f004 fbfb 	bl	8005f80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fb3d 	bl	8000e08 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   r0, =_estack
 8001790:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800179c:	08006038 	.word	0x08006038
  ldr r2, =_sbss
 80017a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017a4:	200005fc 	.word	0x200005fc

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>

080017aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f001 fb6d 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f80e 	bl	80017dc <HAL_InitTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	71fb      	strb	r3, [r7, #7]
 80017ca:	e001      	b.n	80017d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017cc:	f7ff fda8 	bl	8001320 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017d0:	79fb      	ldrb	r3, [r7, #7]

}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <HAL_InitTick+0x68>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d022      	beq.n	8001836 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_InitTick+0x6c>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <HAL_InitTick+0x68>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	4618      	mov	r0, r3
 8001806:	f001 fb78 	bl	8002efa <HAL_SYSTICK_Config>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10f      	bne.n	8001830 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b0f      	cmp	r3, #15
 8001814:	d809      	bhi.n	800182a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001816:	2200      	movs	r2, #0
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	f04f 30ff 	mov.w	r0, #4294967295
 800181e:	f001 fb44 	bl	8002eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_InitTick+0x70>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e007      	b.n	800183a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e004      	b.n	800183a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e001      	b.n	800183a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000000c 	.word	0x2000000c
 8001848:	20000004 	.word	0x20000004
 800184c:	20000008 	.word	0x20000008

08001850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_IncTick+0x1c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_IncTick+0x20>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4413      	add	r3, r2
 800185e:	4a03      	ldr	r2, [pc, #12]	; (800186c <HAL_IncTick+0x1c>)
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	200004b0 	.word	0x200004b0
 8001870:	2000000c 	.word	0x2000000c

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200004b0 	.word	0x200004b0

0800188c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3360      	adds	r3, #96	; 0x60
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <LL_ADC_SetOffset+0x44>)
 8001916:	4013      	ands	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	4313      	orrs	r3, r2
 8001924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800192c:	bf00      	nop
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	03fff000 	.word	0x03fff000

0800193c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3360      	adds	r3, #96	; 0x60
 800194a:	461a      	mov	r2, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3360      	adds	r3, #96	; 0x60
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800199e:	b480      	push	{r7}
 80019a0:	b087      	sub	sp, #28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3360      	adds	r3, #96	; 0x60
 80019ae:	461a      	mov	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019c8:	bf00      	nop
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3360      	adds	r3, #96	; 0x60
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	615a      	str	r2, [r3, #20]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b087      	sub	sp, #28
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3330      	adds	r3, #48	; 0x30
 8001a66:	461a      	mov	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	4413      	add	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	211f      	movs	r1, #31
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	401a      	ands	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	f003 011f 	and.w	r1, r3, #31
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3314      	adds	r3, #20
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	0e5b      	lsrs	r3, r3, #25
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	0d1b      	lsrs	r3, r3, #20
 8001ad6:	f003 031f 	and.w	r3, r3, #31
 8001ada:	2107      	movs	r1, #7
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	0d1b      	lsrs	r3, r3, #20
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	431a      	orrs	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001af8:	bf00      	nop
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0318 	and.w	r3, r3, #24
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b28:	40d9      	lsrs	r1, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b32:	431a      	orrs	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	0007ffff 	.word	0x0007ffff

08001b4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 031f 	and.w	r3, r3, #31
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6093      	str	r3, [r2, #8]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba0:	d101      	bne.n	8001ba6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bf0:	d101      	bne.n	8001bf6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <LL_ADC_IsEnabled+0x18>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <LL_ADC_IsEnabled+0x1a>
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c66:	f043 0204 	orr.w	r2, r3, #4
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d101      	bne.n	8001c92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d101      	bne.n	8001cb8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e167      	b.n	8001fb2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fb39 	bl	8001368 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff3f 	bl	8001b8c <LL_ADC_IsDeepPowerDownEnabled>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff25 	bl	8001b68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff5a 	bl	8001bdc <LL_ADC_IsInternalRegulatorEnabled>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d115      	bne.n	8001d5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff ff3e 	bl	8001bb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d38:	4ba0      	ldr	r3, [pc, #640]	; (8001fbc <HAL_ADC_Init+0x2f4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	4aa0      	ldr	r2, [pc, #640]	; (8001fc0 <HAL_ADC_Init+0x2f8>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	099b      	lsrs	r3, r3, #6
 8001d46:	3301      	adds	r3, #1
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d4c:	e002      	b.n	8001d54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f9      	bne.n	8001d4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff3c 	bl	8001bdc <LL_ADC_IsInternalRegulatorEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10d      	bne.n	8001d86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff75 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 8001d90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 8100 	bne.w	8001fa0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 80fc 	bne.w	8001fa0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001db0:	f043 0202 	orr.w	r2, r3, #2
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff35 	bl	8001c2c <LL_ADC_IsEnabled>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d111      	bne.n	8001dec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dcc:	f7ff ff2e 	bl	8001c2c <LL_ADC_IsEnabled>
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	487c      	ldr	r0, [pc, #496]	; (8001fc4 <HAL_ADC_Init+0x2fc>)
 8001dd4:	f7ff ff2a 	bl	8001c2c <LL_ADC_IsEnabled>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4878      	ldr	r0, [pc, #480]	; (8001fc8 <HAL_ADC_Init+0x300>)
 8001de8:	f7ff fd50 	bl	800188c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7f5b      	ldrb	r3, [r3, #29]
 8001df0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001dfc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e02:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e0a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d106      	bne.n	8001e28 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	045b      	lsls	r3, r3, #17
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d009      	beq.n	8001e44 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	4b60      	ldr	r3, [pc, #384]	; (8001fcc <HAL_ADC_Init+0x304>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	69b9      	ldr	r1, [r7, #24]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff14 	bl	8001ca0 <LL_ADC_INJ_IsConversionOngoing>
 8001e78:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d16d      	bne.n	8001f5c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d16a      	bne.n	8001f5c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e8a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e92:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea2:	f023 0302 	bic.w	r3, r3, #2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d017      	beq.n	8001ee8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ec6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ed0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6911      	ldr	r1, [r2, #16]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ee6:	e013      	b.n	8001f10 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ef6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d118      	bne.n	8001f4c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f36:	4311      	orrs	r1, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	e007      	b.n	8001f5c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d10c      	bne.n	8001f7e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f023 010f 	bic.w	r1, r3, #15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	1e5a      	subs	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f7c:	e007      	b.n	8001f8e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 020f 	bic.w	r2, r2, #15
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	f023 0303 	bic.w	r3, r3, #3
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f9e:	e007      	b.n	8001fb0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	f043 0210 	orr.w	r2, r3, #16
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000004 	.word	0x20000004
 8001fc0:	053e2d63 	.word	0x053e2d63
 8001fc4:	50000100 	.word	0x50000100
 8001fc8:	50000300 	.word	0x50000300
 8001fcc:	fff04007 	.word	0xfff04007

08001fd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fdc:	4851      	ldr	r0, [pc, #324]	; (8002124 <HAL_ADC_Start_DMA+0x154>)
 8001fde:	f7ff fdb5 	bl	8001b4c <LL_ADC_GetMultimode>
 8001fe2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe46 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 808f 	bne.w	8002114 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_Start_DMA+0x34>
 8002000:	2302      	movs	r3, #2
 8002002:	e08a      	b.n	800211a <HAL_ADC_Start_DMA+0x14a>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d002      	beq.n	800201e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b09      	cmp	r3, #9
 800201c:	d173      	bne.n	8002106 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fc84 	bl	800292c <ADC_Enable>
 8002024:	4603      	mov	r3, r0
 8002026:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d166      	bne.n	80020fc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a38      	ldr	r2, [pc, #224]	; (8002128 <HAL_ADC_Start_DMA+0x158>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d002      	beq.n	8002052 <HAL_ADC_Start_DMA+0x82>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e001      	b.n	8002056 <HAL_ADC_Start_DMA+0x86>
 8002052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	4293      	cmp	r3, r2
 800205c:	d002      	beq.n	8002064 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002080:	f023 0206 	bic.w	r2, r3, #6
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	661a      	str	r2, [r3, #96]	; 0x60
 8002088:	e002      	b.n	8002090 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	4a25      	ldr	r2, [pc, #148]	; (800212c <HAL_ADC_Start_DMA+0x15c>)
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	4a24      	ldr	r2, [pc, #144]	; (8002130 <HAL_ADC_Start_DMA+0x160>)
 800209e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <HAL_ADC_Start_DMA+0x164>)
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	221c      	movs	r2, #28
 80020ae:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0210 	orr.w	r2, r2, #16
 80020c6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	3340      	adds	r3, #64	; 0x40
 80020e2:	4619      	mov	r1, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f001 fb12 	bl	8003710 <HAL_DMA_Start_IT>
 80020ec:	4603      	mov	r3, r0
 80020ee:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fdac 	bl	8001c52 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020fa:	e00d      	b.n	8002118 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002104:	e008      	b.n	8002118 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002112:	e001      	b.n	8002118 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002114:	2302      	movs	r3, #2
 8002116:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002118:	7dfb      	ldrb	r3, [r7, #23]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	50000300 	.word	0x50000300
 8002128:	50000100 	.word	0x50000100
 800212c:	08002a39 	.word	0x08002a39
 8002130:	08002b11 	.word	0x08002b11
 8002134:	08002b2d 	.word	0x08002b2d

08002138 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0b6      	sub	sp, #216	; 0xd8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x22>
 800216a:	2302      	movs	r3, #2
 800216c:	e3c8      	b.n	8002900 <HAL_ADC_ConfigChannel+0x7b4>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fd7d 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 83ad 	bne.w	80028e2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	461a      	mov	r2, r3
 8002196:	f7ff fc5e 	bl	8001a56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd6b 	bl	8001c7a <LL_ADC_REG_IsConversionOngoing>
 80021a4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fd77 	bl	8001ca0 <LL_ADC_INJ_IsConversionOngoing>
 80021b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 81d9 	bne.w	8002572 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 81d4 	bne.w	8002572 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021d2:	d10f      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2200      	movs	r2, #0
 80021de:	4619      	mov	r1, r3
 80021e0:	f7ff fc65 	bl	8001aae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fc0c 	bl	8001a0a <LL_ADC_SetSamplingTimeCommonConfig>
 80021f2:	e00e      	b.n	8002212 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6819      	ldr	r1, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	461a      	mov	r2, r3
 8002202:	f7ff fc54 	bl	8001aae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fbfc 	bl	8001a0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b04      	cmp	r3, #4
 8002232:	d022      	beq.n	800227a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6919      	ldr	r1, [r3, #16]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002244:	f7ff fb56 	bl	80018f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6919      	ldr	r1, [r3, #16]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	461a      	mov	r2, r3
 8002256:	f7ff fba2 	bl	800199e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002266:	2b01      	cmp	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x124>
 800226a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226e:	e000      	b.n	8002272 <HAL_ADC_ConfigChannel+0x126>
 8002270:	2300      	movs	r3, #0
 8002272:	461a      	mov	r2, r3
 8002274:	f7ff fbae 	bl	80019d4 <LL_ADC_SetOffsetSaturation>
 8002278:	e17b      	b.n	8002572 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fb5b 	bl	800193c <LL_ADC_GetOffsetChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x15a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fb50 	bl	800193c <LL_ADC_GetOffsetChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	e01e      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x198>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fb45 	bl	800193c <LL_ADC_GetOffsetChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80022d4:	2320      	movs	r3, #32
 80022d6:	e004      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80022d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d105      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1b0>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	e018      	b.n	800232e <HAL_ADC_ConfigChannel+0x1e2>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002314:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002318:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e004      	b.n	800232e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002324:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800232e:	429a      	cmp	r2, r3
 8002330:	d106      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb14 	bl	8001968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff faf8 	bl	800193c <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_ADC_ConfigChannel+0x220>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2101      	movs	r1, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff faed 	bl	800193c <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	e01e      	b.n	80023aa <HAL_ADC_ConfigChannel+0x25e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fae2 	bl	800193c <LL_ADC_GetOffsetChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800238a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800238e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e004      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800239e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d105      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x276>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	e018      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x2a8>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e004      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80023ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	2101      	movs	r1, #1
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fab1 	bl	8001968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2102      	movs	r1, #2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fa95 	bl	800193c <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x2e6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2102      	movs	r1, #2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fa8a 	bl	800193c <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e01e      	b.n	8002470 <HAL_ADC_ConfigChannel+0x324>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fa7f 	bl	800193c <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002458:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e004      	b.n	800246e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x33c>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	e016      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x36a>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800249a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800249c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e004      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d106      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2200      	movs	r2, #0
 80024c0:	2102      	movs	r1, #2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fa50 	bl	8001968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2103      	movs	r1, #3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fa34 	bl	800193c <LL_ADC_GetOffsetChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x3a8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2103      	movs	r1, #3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fa29 	bl	800193c <LL_ADC_GetOffsetChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	f003 021f 	and.w	r2, r3, #31
 80024f2:	e017      	b.n	8002524 <HAL_ADC_ConfigChannel+0x3d8>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2103      	movs	r1, #3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fa1e 	bl	800193c <LL_ADC_GetOffsetChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800250c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800250e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e003      	b.n	8002522 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800251a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_ADC_ConfigChannel+0x3f0>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	e011      	b.n	8002560 <HAL_ADC_ConfigChannel+0x414>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800254a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800254c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800254e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e003      	b.n	8002560 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255a:	fab3 f383 	clz	r3, r3
 800255e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002560:	429a      	cmp	r2, r3
 8002562:	d106      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	2103      	movs	r1, #3
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f9fb 	bl	8001968 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fb58 	bl	8001c2c <LL_ADC_IsEnabled>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 8140 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	461a      	mov	r2, r3
 8002592:	f7ff fab7 	bl	8001b04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	4a8f      	ldr	r2, [pc, #572]	; (80027d8 <HAL_ADC_ConfigChannel+0x68c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	f040 8131 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10b      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x47e>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	3301      	adds	r3, #1
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	2b09      	cmp	r3, #9
 80025c0:	bf94      	ite	ls
 80025c2:	2301      	movls	r3, #1
 80025c4:	2300      	movhi	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	e019      	b.n	80025fe <HAL_ADC_ConfigChannel+0x4b2>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025da:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80025e2:	2320      	movs	r3, #32
 80025e4:	e003      	b.n	80025ee <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80025e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d079      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <HAL_ADC_ConfigChannel+0x4d2>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	3301      	adds	r3, #1
 8002616:	069b      	lsls	r3, r3, #26
 8002618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800261c:	e015      	b.n	800264a <HAL_ADC_ConfigChannel+0x4fe>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	069b      	lsls	r3, r3, #26
 8002646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_ADC_ConfigChannel+0x51e>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	0e9b      	lsrs	r3, r3, #26
 800265c:	3301      	adds	r3, #1
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	e017      	b.n	800269a <HAL_ADC_ConfigChannel+0x54e>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800267a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800267c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e003      	b.n	800268e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	ea42 0103 	orr.w	r1, r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x574>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 021f 	and.w	r2, r3, #31
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	051b      	lsls	r3, r3, #20
 80026be:	e018      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x5a6>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e003      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80026dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f003 021f 	and.w	r2, r3, #31
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f2:	430b      	orrs	r3, r1
 80026f4:	e081      	b.n	80027fa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x5c6>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	3301      	adds	r3, #1
 800270a:	069b      	lsls	r3, r3, #26
 800270c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002710:	e015      	b.n	800273e <HAL_ADC_ConfigChannel+0x5f2>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e003      	b.n	8002736 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	069b      	lsls	r3, r3, #26
 800273a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_ADC_ConfigChannel+0x612>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0e9b      	lsrs	r3, r3, #26
 8002750:	3301      	adds	r3, #1
 8002752:	f003 031f 	and.w	r3, r3, #31
 8002756:	2101      	movs	r1, #1
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	e017      	b.n	800278e <HAL_ADC_ConfigChannel+0x642>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	61fb      	str	r3, [r7, #28]
  return result;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e003      	b.n	8002782 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	2101      	movs	r1, #1
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	ea42 0103 	orr.w	r1, r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10d      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x66e>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0e9b      	lsrs	r3, r3, #26
 80027a4:	3301      	adds	r3, #1
 80027a6:	f003 021f 	and.w	r2, r3, #31
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	3b1e      	subs	r3, #30
 80027b2:	051b      	lsls	r3, r3, #20
 80027b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027b8:	e01e      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x6ac>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	613b      	str	r3, [r7, #16]
  return result;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80027d2:	2320      	movs	r3, #32
 80027d4:	e006      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x698>
 80027d6:	bf00      	nop
 80027d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f003 021f 	and.w	r2, r3, #31
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	3b1e      	subs	r3, #30
 80027f2:	051b      	lsls	r3, r3, #20
 80027f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fe:	4619      	mov	r1, r3
 8002800:	f7ff f955 	bl	8001aae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_ADC_ConfigChannel+0x7bc>)
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d071      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002810:	483e      	ldr	r0, [pc, #248]	; (800290c <HAL_ADC_ConfigChannel+0x7c0>)
 8002812:	f7ff f861 	bl	80018d8 <LL_ADC_GetCommonPathInternalCh>
 8002816:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a3c      	ldr	r2, [pc, #240]	; (8002910 <HAL_ADC_ConfigChannel+0x7c4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_ADC_ConfigChannel+0x6e2>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a3a      	ldr	r2, [pc, #232]	; (8002914 <HAL_ADC_ConfigChannel+0x7c8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d127      	bne.n	800287e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800282e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002832:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d121      	bne.n	800287e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002842:	d157      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002844:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800284c:	4619      	mov	r1, r3
 800284e:	482f      	ldr	r0, [pc, #188]	; (800290c <HAL_ADC_ConfigChannel+0x7c0>)
 8002850:	f7ff f82f 	bl	80018b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002854:	4b30      	ldr	r3, [pc, #192]	; (8002918 <HAL_ADC_ConfigChannel+0x7cc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	4a30      	ldr	r2, [pc, #192]	; (800291c <HAL_ADC_ConfigChannel+0x7d0>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800286e:	e002      	b.n	8002876 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3b01      	subs	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800287c:	e03a      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a27      	ldr	r2, [pc, #156]	; (8002920 <HAL_ADC_ConfigChannel+0x7d4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d113      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002888:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800288c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_ADC_ConfigChannel+0x7d8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d02a      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	4619      	mov	r1, r3
 80028a8:	4818      	ldr	r0, [pc, #96]	; (800290c <HAL_ADC_ConfigChannel+0x7c0>)
 80028aa:	f7ff f802 	bl	80018b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ae:	e021      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_ADC_ConfigChannel+0x7dc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d11c      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_ADC_ConfigChannel+0x7d8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d011      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d8:	4619      	mov	r1, r3
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <HAL_ADC_ConfigChannel+0x7c0>)
 80028dc:	f7fe ffe9 	bl	80018b2 <LL_ADC_SetCommonPathInternalCh>
 80028e0:	e008      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002900:	4618      	mov	r0, r3
 8002902:	37d8      	adds	r7, #216	; 0xd8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	80080000 	.word	0x80080000
 800290c:	50000300 	.word	0x50000300
 8002910:	c3210000 	.word	0xc3210000
 8002914:	90c00010 	.word	0x90c00010
 8002918:	20000004 	.word	0x20000004
 800291c:	053e2d63 	.word	0x053e2d63
 8002920:	c7520000 	.word	0xc7520000
 8002924:	50000100 	.word	0x50000100
 8002928:	cb840000 	.word	0xcb840000

0800292c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f975 	bl	8001c2c <LL_ADC_IsEnabled>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d169      	bne.n	8002a1c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <ADC_Enable+0xfc>)
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	f043 0210 	orr.w	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e055      	b.n	8002a1e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff f944 	bl	8001c04 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800297c:	482b      	ldr	r0, [pc, #172]	; (8002a2c <ADC_Enable+0x100>)
 800297e:	f7fe ffab 	bl	80018d8 <LL_ADC_GetCommonPathInternalCh>
 8002982:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <ADC_Enable+0x104>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <ADC_Enable+0x108>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029a6:	e002      	b.n	80029ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029b4:	f7fe ff5e 	bl	8001874 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ba:	e028      	b.n	8002a0e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f933 	bl	8001c2c <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d104      	bne.n	80029d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f917 	bl	8001c04 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029d6:	f7fe ff4d 	bl	8001874 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d914      	bls.n	8002a0e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00d      	beq.n	8002a0e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e007      	b.n	8002a1e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d1cf      	bne.n	80029bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	8000003f 	.word	0x8000003f
 8002a2c:	50000300 	.word	0x50000300
 8002a30:	20000004 	.word	0x20000004
 8002a34:	053e2d63 	.word	0x053e2d63

08002a38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d14b      	bne.n	8002aea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d021      	beq.n	8002ab0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe ffdd 	bl	8001a30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d032      	beq.n	8002ae2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12b      	bne.n	8002ae2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11f      	bne.n	8002ae2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aae:	e018      	b.n	8002ae2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d111      	bne.n	8002ae2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7fe f966 	bl	8000db4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ae8:	e00e      	b.n	8002b08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff fb1e 	bl	8002138 <HAL_ADC_ErrorCallback>
}
 8002afc:	e004      	b.n	8002b08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f7fe f922 	bl	8000d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff faf0 	bl	8002138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <LL_ADC_IsEnabled>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_IsEnabled+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_ADC_IsEnabled+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b0a1      	sub	sp, #132	; 0x84
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e08b      	b.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be2:	d102      	bne.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002be4:	4b41      	ldr	r3, [pc, #260]	; (8002cec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e001      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e06a      	b.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ffb9 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002c14:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ffb3 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d14c      	bne.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d149      	bne.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002c2e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d028      	beq.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c4a:	035b      	lsls	r3, r3, #13
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c58:	f7ff ff82 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	4823      	ldr	r0, [pc, #140]	; (8002cec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c60:	f7ff ff7e 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4323      	orrs	r3, r4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d133      	bne.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c74:	f023 030f 	bic.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	6811      	ldr	r1, [r2, #0]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	6892      	ldr	r2, [r2, #8]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	431a      	orrs	r2, r3
 8002c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c86:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c88:	e024      	b.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c9a:	f7ff ff61 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	4812      	ldr	r0, [pc, #72]	; (8002cec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ca2:	f7ff ff5d 	bl	8002b60 <LL_ADC_IsEnabled>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4323      	orrs	r3, r4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d112      	bne.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cb6:	f023 030f 	bic.w	r3, r3, #15
 8002cba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cbc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cbe:	e009      	b.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cd2:	e000      	b.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3784      	adds	r7, #132	; 0x84
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	50000100 	.word	0x50000100
 8002cf0:	50000300 	.word	0x50000300

08002cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <__NVIC_GetPriorityGrouping+0x18>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0307 	and.w	r3, r3, #7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0b      	blt.n	8002d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <__NVIC_EnableIRQ+0x38>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	f7ff ff8e 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff29 	bl	8002cf4 <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff40 	bl	8002d3c <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff90 	bl	8002de8 <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5f 	bl	8002d94 <__NVIC_SetPriority>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff33 	bl	8002d58 <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa4 	bl	8002e50 <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e014      	b.n	8002f4e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	791b      	ldrb	r3, [r3, #4]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d105      	bne.n	8002f3a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fe fa9b 	bl	8001470 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b2      	b.n	80030d6 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	795b      	ldrb	r3, [r3, #5]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_DAC_Start_DMA+0x24>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e0ac      	b.n	80030d6 <HAL_DAC_Start_DMA+0x17e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2202      	movs	r2, #2
 8002f86:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d129      	bne.n	8002fe2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	4a53      	ldr	r2, [pc, #332]	; (80030e0 <HAL_DAC_Start_DMA+0x188>)
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4a52      	ldr	r2, [pc, #328]	; (80030e4 <HAL_DAC_Start_DMA+0x18c>)
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	4a51      	ldr	r2, [pc, #324]	; (80030e8 <HAL_DAC_Start_DMA+0x190>)
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fb4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_DAC_Start_DMA+0x6c>
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d005      	beq.n	8002fce <HAL_DAC_Start_DMA+0x76>
 8002fc2:	e009      	b.n	8002fd8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	61bb      	str	r3, [r7, #24]
        break;
 8002fcc:	e033      	b.n	8003036 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	330c      	adds	r3, #12
 8002fd4:	61bb      	str	r3, [r7, #24]
        break;
 8002fd6:	e02e      	b.n	8003036 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3310      	adds	r3, #16
 8002fde:	61bb      	str	r3, [r7, #24]
        break;
 8002fe0:	e029      	b.n	8003036 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	4a41      	ldr	r2, [pc, #260]	; (80030ec <HAL_DAC_Start_DMA+0x194>)
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a40      	ldr	r2, [pc, #256]	; (80030f0 <HAL_DAC_Start_DMA+0x198>)
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4a3f      	ldr	r2, [pc, #252]	; (80030f4 <HAL_DAC_Start_DMA+0x19c>)
 8002ff8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003008:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_DAC_Start_DMA+0xc0>
 8003010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003012:	2b04      	cmp	r3, #4
 8003014:	d005      	beq.n	8003022 <HAL_DAC_Start_DMA+0xca>
 8003016:	e009      	b.n	800302c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3314      	adds	r3, #20
 800301e:	61bb      	str	r3, [r7, #24]
        break;
 8003020:	e009      	b.n	8003036 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3318      	adds	r3, #24
 8003028:	61bb      	str	r3, [r7, #24]
        break;
 800302a:	e004      	b.n	8003036 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	331c      	adds	r3, #28
 8003032:	61bb      	str	r3, [r7, #24]
        break;
 8003034:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d111      	bne.n	8003060 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6898      	ldr	r0, [r3, #8]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	f000 fb5b 	bl	8003710 <HAL_DMA_Start_IT>
 800305a:	4603      	mov	r3, r0
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e010      	b.n	8003082 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800306e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	68d8      	ldr	r0, [r3, #12]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	f000 fb49 	bl	8003710 <HAL_DMA_Start_IT>
 800307e:	4603      	mov	r3, r0
 8003080:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003088:	7ffb      	ldrb	r3, [r7, #31]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11c      	bne.n	80030c8 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2201      	movs	r2, #1
 800309c:	409a      	lsls	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_DAC_Start_DMA+0x1a0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <HAL_DAC_Start_DMA+0x1a4>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	3301      	adds	r3, #1
 80030b6:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80030b8:	e002      	b.n	80030c0 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3b01      	subs	r3, #1
 80030be:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f9      	bne.n	80030ba <HAL_DAC_Start_DMA+0x162>
 80030c6:	e005      	b.n	80030d4 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80030d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	080034ad 	.word	0x080034ad
 80030e4:	080034cf 	.word	0x080034cf
 80030e8:	080034eb 	.word	0x080034eb
 80030ec:	08003555 	.word	0x08003555
 80030f0:	08003577 	.word	0x08003577
 80030f4:	08003593 	.word	0x08003593
 80030f8:	20000004 	.word	0x20000004
 80030fc:	053e2d63 	.word	0x053e2d63

08003100 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_DAC_ConfigChannel+0x1c>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e19e      	b.n	800349a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	795b      	ldrb	r3, [r3, #5]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_DAC_ConfigChannel+0x2c>
 8003164:	2302      	movs	r3, #2
 8003166:	e198      	b.n	800349a <HAL_DAC_ConfigChannel+0x35e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2202      	movs	r2, #2
 8003172:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d17a      	bne.n	8003272 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800317c:	f7fe fb7a 	bl	8001874 <HAL_GetTick>
 8003180:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d13d      	bne.n	8003204 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003188:	e018      	b.n	80031bc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800318a:	f7fe fb73 	bl	8001874 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d911      	bls.n	80031bc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f043 0208 	orr.w	r2, r3, #8
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2203      	movs	r2, #3
 80031b6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e16e      	b.n	800349a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1df      	bne.n	800318a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
 80031d4:	e020      	b.n	8003218 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031d6:	f7fe fb4d 	bl	8001874 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d90f      	bls.n	8003204 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da0a      	bge.n	8003204 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f043 0208 	orr.w	r2, r3, #8
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2203      	movs	r2, #3
 80031fe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e14a      	b.n	800349a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320a:	2b00      	cmp	r3, #0
 800320c:	dbe3      	blt.n	80031d6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	ea02 0103 	and.w	r1, r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	409a      	lsls	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	21ff      	movs	r1, #255	; 0xff
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	ea02 0103 	and.w	r1, r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d11d      	bne.n	80032b6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	221f      	movs	r2, #31
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	4013      	ands	r3, r2
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	4313      	orrs	r3, r2
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2207      	movs	r2, #7
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	4013      	ands	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	e00f      	b.n	8003300 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d102      	bne.n	80032ee <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80032e8:	2301      	movs	r3, #1
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	e008      	b.n	8003300 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80032f6:	2301      	movs	r3, #1
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	e001      	b.n	8003300 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	6a3a      	ldr	r2, [r7, #32]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	4013      	ands	r3, r2
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	791b      	ldrb	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d102      	bne.n	8003334 <HAL_DAC_ConfigChannel+0x1f8>
 800332e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003332:	e000      	b.n	8003336 <HAL_DAC_ConfigChannel+0x1fa>
 8003334:	2300      	movs	r3, #0
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334e:	4013      	ands	r3, r2
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	795b      	ldrb	r3, [r3, #5]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_DAC_ConfigChannel+0x224>
 800335a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800335e:	e000      	b.n	8003362 <HAL_DAC_ConfigChannel+0x226>
 8003360:	2300      	movs	r3, #0
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d114      	bne.n	80033a2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003378:	f001 faac 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 800337c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4a48      	ldr	r2, [pc, #288]	; (80034a4 <HAL_DAC_ConfigChannel+0x368>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d904      	bls.n	8003390 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	e00f      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4a45      	ldr	r2, [pc, #276]	; (80034a8 <HAL_DAC_ConfigChannel+0x36c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d90a      	bls.n	80033ae <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	e006      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	4313      	orrs	r3, r2
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
 80033ac:	e000      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80033ae:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	4313      	orrs	r3, r2
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	4013      	ands	r3, r2
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	4313      	orrs	r3, r2
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	22c0      	movs	r2, #192	; 0xc0
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43da      	mvns	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	400a      	ands	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	ea02 0103 	and.w	r1, r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003498:	7ffb      	ldrb	r3, [r7, #31]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3728      	adds	r7, #40	; 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	09896800 	.word	0x09896800
 80034a8:	04c4b400 	.word	0x04c4b400

080034ac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fe20 	bl	8003100 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	711a      	strb	r2, [r3, #4]
}
 80034c6:	bf00      	nop
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fe19 	bl	8003114 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fe0f 	bl	8003128 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	711a      	strb	r2, [r3, #4]
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff ffd8 	bl	8003518 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	711a      	strb	r2, [r3, #4]
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff ffd1 	bl	800352c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff ffc7 	bl	8003540 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	711a      	strb	r2, [r3, #4]
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e08d      	b.n	80036ee <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b47      	ldr	r3, [pc, #284]	; (80036f8 <HAL_DMA_Init+0x138>)
 80035da:	429a      	cmp	r2, r3
 80035dc:	d80f      	bhi.n	80035fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b45      	ldr	r3, [pc, #276]	; (80036fc <HAL_DMA_Init+0x13c>)
 80035e6:	4413      	add	r3, r2
 80035e8:	4a45      	ldr	r2, [pc, #276]	; (8003700 <HAL_DMA_Init+0x140>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	009a      	lsls	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a42      	ldr	r2, [pc, #264]	; (8003704 <HAL_DMA_Init+0x144>)
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
 80035fc:	e00e      	b.n	800361c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4b40      	ldr	r3, [pc, #256]	; (8003708 <HAL_DMA_Init+0x148>)
 8003606:	4413      	add	r3, r2
 8003608:	4a3d      	ldr	r2, [pc, #244]	; (8003700 <HAL_DMA_Init+0x140>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	009a      	lsls	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a3c      	ldr	r2, [pc, #240]	; (800370c <HAL_DMA_Init+0x14c>)
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f9b6 	bl	80039e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367c:	d102      	bne.n	8003684 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003698:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <HAL_DMA_Init+0x104>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d80c      	bhi.n	80036c4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f9d6 	bl	8003a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e008      	b.n	80036d6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40020407 	.word	0x40020407
 80036fc:	bffdfff8 	.word	0xbffdfff8
 8003700:	cccccccd 	.word	0xcccccccd
 8003704:	40020000 	.word	0x40020000
 8003708:	bffdfbf8 	.word	0xbffdfbf8
 800370c:	40020400 	.word	0x40020400

08003710 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Start_IT+0x20>
 800372c:	2302      	movs	r3, #2
 800372e:	e066      	b.n	80037fe <HAL_DMA_Start_IT+0xee>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d155      	bne.n	80037f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f8fb 	bl	8003964 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 020e 	orr.w	r2, r2, #14
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00f      	b.n	80037a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0204 	bic.w	r2, r2, #4
 8003796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 020a 	orr.w	r2, r2, #10
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e005      	b.n	80037fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
 80037fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	2204      	movs	r2, #4
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d026      	beq.n	8003880 <HAL_DMA_IRQHandler+0x7a>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d021      	beq.n	8003880 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0204 	bic.w	r2, r2, #4
 8003858:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f003 021f 	and.w	r2, r3, #31
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2104      	movs	r1, #4
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2b00      	cmp	r3, #0
 8003874:	d071      	beq.n	800395a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800387e:	e06c      	b.n	800395a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2202      	movs	r2, #2
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02e      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d029      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 020a 	bic.w	r2, r2, #10
 80038ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	2102      	movs	r1, #2
 80038d2:	fa01 f202 	lsl.w	r2, r1, r2
 80038d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d038      	beq.n	800395a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038f0:	e033      	b.n	800395a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2208      	movs	r2, #8
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02a      	beq.n	800395c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d025      	beq.n	800395c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 020e 	bic.w	r2, r2, #14
 800391e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800395a:	bf00      	nop
 800395c:	bf00      	nop
}
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800397a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	2b00      	cmp	r3, #0
 8003982:	d004      	beq.n	800398e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f003 021f 	and.w	r2, r3, #31
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d108      	bne.n	80039c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039c2:	e007      	b.n	80039d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d802      	bhi.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e001      	b.n	80039fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039fc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	3b08      	subs	r3, #8
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	009a      	lsls	r2, r3, #2
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2201      	movs	r2, #1
 8003a34:	409a      	lsls	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40020407 	.word	0x40020407
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020820 	.word	0x40020820
 8003a54:	cccccccd 	.word	0xcccccccd
 8003a58:	40020880 	.word	0x40020880

08003a5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	461a      	mov	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a7e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	1000823f 	.word	0x1000823f
 8003aa0:	40020940 	.word	0x40020940

08003aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ab2:	e15a      	b.n	8003d6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2101      	movs	r1, #1
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 814c 	beq.w	8003d64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d005      	beq.n	8003ae4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d130      	bne.n	8003b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	2203      	movs	r2, #3
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	091b      	lsrs	r3, r3, #4
 8003b30:	f003 0201 	and.w	r2, r3, #1
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d017      	beq.n	8003b82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d123      	bne.n	8003bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	08da      	lsrs	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3208      	adds	r2, #8
 8003b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	220f      	movs	r2, #15
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	08da      	lsrs	r2, r3, #3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3208      	adds	r2, #8
 8003bd0:	6939      	ldr	r1, [r7, #16]
 8003bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2203      	movs	r2, #3
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0203 	and.w	r2, r3, #3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a6 	beq.w	8003d64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c18:	4b5b      	ldr	r3, [pc, #364]	; (8003d88 <HAL_GPIO_Init+0x2e4>)
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	; (8003d88 <HAL_GPIO_Init+0x2e4>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6613      	str	r3, [r2, #96]	; 0x60
 8003c24:	4b58      	ldr	r3, [pc, #352]	; (8003d88 <HAL_GPIO_Init+0x2e4>)
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c30:	4a56      	ldr	r2, [pc, #344]	; (8003d8c <HAL_GPIO_Init+0x2e8>)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	3302      	adds	r3, #2
 8003c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c5a:	d01f      	beq.n	8003c9c <HAL_GPIO_Init+0x1f8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a4c      	ldr	r2, [pc, #304]	; (8003d90 <HAL_GPIO_Init+0x2ec>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d019      	beq.n	8003c98 <HAL_GPIO_Init+0x1f4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a4b      	ldr	r2, [pc, #300]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_GPIO_Init+0x1f0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a4a      	ldr	r2, [pc, #296]	; (8003d98 <HAL_GPIO_Init+0x2f4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00d      	beq.n	8003c90 <HAL_GPIO_Init+0x1ec>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a49      	ldr	r2, [pc, #292]	; (8003d9c <HAL_GPIO_Init+0x2f8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d007      	beq.n	8003c8c <HAL_GPIO_Init+0x1e8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a48      	ldr	r2, [pc, #288]	; (8003da0 <HAL_GPIO_Init+0x2fc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d101      	bne.n	8003c88 <HAL_GPIO_Init+0x1e4>
 8003c84:	2305      	movs	r3, #5
 8003c86:	e00a      	b.n	8003c9e <HAL_GPIO_Init+0x1fa>
 8003c88:	2306      	movs	r3, #6
 8003c8a:	e008      	b.n	8003c9e <HAL_GPIO_Init+0x1fa>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	e006      	b.n	8003c9e <HAL_GPIO_Init+0x1fa>
 8003c90:	2303      	movs	r3, #3
 8003c92:	e004      	b.n	8003c9e <HAL_GPIO_Init+0x1fa>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e002      	b.n	8003c9e <HAL_GPIO_Init+0x1fa>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <HAL_GPIO_Init+0x1fa>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	f002 0203 	and.w	r2, r2, #3
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	4093      	lsls	r3, r2
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cae:	4937      	ldr	r1, [pc, #220]	; (8003d8c <HAL_GPIO_Init+0x2e8>)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cbc:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ce0:	4a30      	ldr	r2, [pc, #192]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ce6:	4b2f      	ldr	r3, [pc, #188]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d10:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d34:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d5e:	4a11      	ldr	r2, [pc, #68]	; (8003da4 <HAL_GPIO_Init+0x300>)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	3301      	adds	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f47f ae9d 	bne.w	8003ab4 <HAL_GPIO_Init+0x10>
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	bf00      	nop
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	48000400 	.word	0x48000400
 8003d94:	48000800 	.word	0x48000800
 8003d98:	48000c00 	.word	0x48000c00
 8003d9c:	48001000 	.word	0x48001000
 8003da0:	48001400 	.word	0x48001400
 8003da4:	40010400 	.word	0x40010400

08003da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
 8003db4:	4613      	mov	r3, r2
 8003db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003db8:	787b      	ldrb	r3, [r7, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dc4:	e002      	b.n	8003dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4013      	ands	r3, r2
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	43d9      	mvns	r1, r3
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	400b      	ands	r3, r1
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	619a      	str	r2, [r3, #24]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d141      	bne.n	8003e9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d131      	bne.n	8003e8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e28:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e2e:	4a46      	ldr	r2, [pc, #280]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e38:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e40:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e48:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2232      	movs	r2, #50	; 0x32
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	0c9b      	lsrs	r3, r3, #18
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e5e:	e002      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e66:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d102      	bne.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f2      	bne.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d158      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e057      	b.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e8c:	4b2e      	ldr	r3, [pc, #184]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e92:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e9c:	e04d      	b.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea4:	d141      	bne.n	8003f2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d131      	bne.n	8003f18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eba:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ec4:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2232      	movs	r2, #50	; 0x32
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	0c9b      	lsrs	r3, r3, #18
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eea:	e002      	b.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ef2:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efe:	d102      	bne.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f2      	bne.n	8003eec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f06:	4b10      	ldr	r3, [pc, #64]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d112      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e011      	b.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f28:	e007      	b.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	20000004 	.word	0x20000004
 8003f50:	431bde83 	.word	0x431bde83

08003f54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f62:	6093      	str	r3, [r2, #8]
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40007000 	.word	0x40007000

08003f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e2fe      	b.n	8004584 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d075      	beq.n	800407e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f92:	4b97      	ldr	r3, [pc, #604]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f9c:	4b94      	ldr	r3, [pc, #592]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b0c      	cmp	r3, #12
 8003faa:	d102      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3e>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x44>
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d05b      	beq.n	800407c <HAL_RCC_OscConfig+0x108>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d157      	bne.n	800407c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e2d9      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd8:	d106      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x74>
 8003fda:	4b85      	ldr	r3, [pc, #532]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a84      	ldr	r2, [pc, #528]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e01d      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x98>
 8003ff2:	4b7f      	ldr	r3, [pc, #508]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a7e      	ldr	r2, [pc, #504]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8003ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b7c      	ldr	r3, [pc, #496]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7b      	ldr	r2, [pc, #492]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 800400c:	4b78      	ldr	r3, [pc, #480]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a77      	ldr	r2, [pc, #476]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b75      	ldr	r3, [pc, #468]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a74      	ldr	r2, [pc, #464]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800401e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd fc22 	bl	8001874 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fd fc1e 	bl	8001874 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e29e      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004046:	4b6a      	ldr	r3, [pc, #424]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0xc0>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fd fc0e 	bl	8001874 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800405c:	f7fd fc0a 	bl	8001874 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e28a      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406e:	4b60      	ldr	r3, [pc, #384]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0xe8>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d075      	beq.n	8004176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800408a:	4b59      	ldr	r3, [pc, #356]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004094:	4b56      	ldr	r3, [pc, #344]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d102      	bne.n	80040aa <HAL_RCC_OscConfig+0x136>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d002      	beq.n	80040b0 <HAL_RCC_OscConfig+0x13c>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d11f      	bne.n	80040f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b0:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x154>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e25d      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	4946      	ldr	r1, [pc, #280]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040dc:	4b45      	ldr	r3, [pc, #276]	; (80041f4 <HAL_RCC_OscConfig+0x280>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd fb7b 	bl	80017dc <HAL_InitTick>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d043      	beq.n	8004174 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e249      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d023      	beq.n	8004140 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f8:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3c      	ldr	r2, [pc, #240]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fbb6 	bl	8001874 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410c:	f7fd fbb2 	bl	8001874 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e232      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800411e:	4b34      	ldr	r3, [pc, #208]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800412a:	4b31      	ldr	r3, [pc, #196]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	492d      	ldr	r1, [pc, #180]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	604b      	str	r3, [r1, #4]
 800413e:	e01a      	b.n	8004176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004140:	4b2b      	ldr	r3, [pc, #172]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fd fb92 	bl	8001874 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004154:	f7fd fb8e 	bl	8001874 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e20e      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x1e0>
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004174:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d041      	beq.n	8004206 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800418a:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004190:	4a17      	ldr	r2, [pc, #92]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd fb6b 	bl	8001874 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a2:	f7fd fb67 	bl	8001874 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e1e7      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80041b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0ef      	beq.n	80041a2 <HAL_RCC_OscConfig+0x22e>
 80041c2:	e020      	b.n	8004206 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80041c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d4:	f7fd fb4e 	bl	8001874 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041da:	e00d      	b.n	80041f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041dc:	f7fd fb4a 	bl	8001874 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d906      	bls.n	80041f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1ca      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f8:	4b8c      	ldr	r3, [pc, #560]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ea      	bne.n	80041dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80a6 	beq.w	8004360 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004214:	2300      	movs	r3, #0
 8004216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004218:	4b84      	ldr	r3, [pc, #528]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_RCC_OscConfig+0x2b4>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x2b6>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	4b7f      	ldr	r3, [pc, #508]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	4a7e      	ldr	r2, [pc, #504]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004238:	6593      	str	r3, [r2, #88]	; 0x58
 800423a:	4b7c      	ldr	r3, [pc, #496]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424a:	4b79      	ldr	r3, [pc, #484]	; (8004430 <HAL_RCC_OscConfig+0x4bc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d118      	bne.n	8004288 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004256:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCC_OscConfig+0x4bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a75      	ldr	r2, [pc, #468]	; (8004430 <HAL_RCC_OscConfig+0x4bc>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004262:	f7fd fb07 	bl	8001874 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fd fb03 	bl	8001874 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e183      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427c:	4b6c      	ldr	r3, [pc, #432]	; (8004430 <HAL_RCC_OscConfig+0x4bc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d108      	bne.n	80042a2 <HAL_RCC_OscConfig+0x32e>
 8004290:	4b66      	ldr	r3, [pc, #408]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	4a65      	ldr	r2, [pc, #404]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a0:	e024      	b.n	80042ec <HAL_RCC_OscConfig+0x378>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d110      	bne.n	80042cc <HAL_RCC_OscConfig+0x358>
 80042aa:	4b60      	ldr	r3, [pc, #384]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	4a5e      	ldr	r2, [pc, #376]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042b2:	f043 0304 	orr.w	r3, r3, #4
 80042b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ba:	4b5c      	ldr	r3, [pc, #368]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	4a5a      	ldr	r2, [pc, #360]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ca:	e00f      	b.n	80042ec <HAL_RCC_OscConfig+0x378>
 80042cc:	4b57      	ldr	r3, [pc, #348]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	4a56      	ldr	r2, [pc, #344]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042dc:	4b53      	ldr	r3, [pc, #332]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	4a52      	ldr	r2, [pc, #328]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f4:	f7fd fabe 	bl	8001874 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fa:	e00a      	b.n	8004312 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fd faba 	bl	8001874 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	4293      	cmp	r3, r2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e138      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004312:	4b46      	ldr	r3, [pc, #280]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ed      	beq.n	80042fc <HAL_RCC_OscConfig+0x388>
 8004320:	e015      	b.n	800434e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fd faa7 	bl	8001874 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fd faa3 	bl	8001874 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	; 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e121      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004340:	4b3a      	ldr	r3, [pc, #232]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ed      	bne.n	800432a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800434e:	7ffb      	ldrb	r3, [r7, #31]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d105      	bne.n	8004360 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004354:	4b35      	ldr	r3, [pc, #212]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	4a34      	ldr	r2, [pc, #208]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 800435a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d03c      	beq.n	80043e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01c      	beq.n	80043ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004374:	4b2d      	ldr	r3, [pc, #180]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800437a:	4a2c      	ldr	r2, [pc, #176]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fd fa76 	bl	8001874 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800438c:	f7fd fa72 	bl	8001874 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e0f2      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800439e:	4b23      	ldr	r3, [pc, #140]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ef      	beq.n	800438c <HAL_RCC_OscConfig+0x418>
 80043ac:	e01b      	b.n	80043e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ae:	4b1f      	ldr	r3, [pc, #124]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd fa59 	bl	8001874 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043c6:	f7fd fa55 	bl	8001874 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0d5      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043d8:	4b14      	ldr	r3, [pc, #80]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ef      	bne.n	80043c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80c9 	beq.w	8004582 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	f000 8083 	beq.w	8004504 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d15e      	bne.n	80044c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b09      	ldr	r3, [pc, #36]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a08      	ldr	r2, [pc, #32]	; (800442c <HAL_RCC_OscConfig+0x4b8>)
 800440c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004412:	f7fd fa2f 	bl	8001874 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004418:	e00c      	b.n	8004434 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441a:	f7fd fa2b 	bl	8001874 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d905      	bls.n	8004434 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0ab      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
 800442c:	40021000 	.word	0x40021000
 8004430:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004434:	4b55      	ldr	r3, [pc, #340]	; (800458c <HAL_RCC_OscConfig+0x618>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1ec      	bne.n	800441a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004440:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCC_OscConfig+0x618>)
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	4b52      	ldr	r3, [pc, #328]	; (8004590 <HAL_RCC_OscConfig+0x61c>)
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6a11      	ldr	r1, [r2, #32]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004450:	3a01      	subs	r2, #1
 8004452:	0112      	lsls	r2, r2, #4
 8004454:	4311      	orrs	r1, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800445a:	0212      	lsls	r2, r2, #8
 800445c:	4311      	orrs	r1, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004462:	0852      	lsrs	r2, r2, #1
 8004464:	3a01      	subs	r2, #1
 8004466:	0552      	lsls	r2, r2, #21
 8004468:	4311      	orrs	r1, r2
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800446e:	0852      	lsrs	r2, r2, #1
 8004470:	3a01      	subs	r2, #1
 8004472:	0652      	lsls	r2, r2, #25
 8004474:	4311      	orrs	r1, r2
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800447a:	06d2      	lsls	r2, r2, #27
 800447c:	430a      	orrs	r2, r1
 800447e:	4943      	ldr	r1, [pc, #268]	; (800458c <HAL_RCC_OscConfig+0x618>)
 8004480:	4313      	orrs	r3, r2
 8004482:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_RCC_OscConfig+0x618>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a40      	ldr	r2, [pc, #256]	; (800458c <HAL_RCC_OscConfig+0x618>)
 800448a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCC_OscConfig+0x618>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a3d      	ldr	r2, [pc, #244]	; (800458c <HAL_RCC_OscConfig+0x618>)
 8004496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fd f9ea 	bl	8001874 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fd f9e6 	bl	8001874 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e066      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b6:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_RCC_OscConfig+0x618>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x530>
 80044c2:	e05e      	b.n	8004582 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c4:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCC_OscConfig+0x618>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a30      	ldr	r2, [pc, #192]	; (800458c <HAL_RCC_OscConfig+0x618>)
 80044ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd f9d0 	bl	8001874 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fd f9cc 	bl	8001874 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e04c      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ea:	4b28      	ldr	r3, [pc, #160]	; (800458c <HAL_RCC_OscConfig+0x618>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_RCC_OscConfig+0x618>)
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	4924      	ldr	r1, [pc, #144]	; (800458c <HAL_RCC_OscConfig+0x618>)
 80044fc:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_RCC_OscConfig+0x620>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60cb      	str	r3, [r1, #12]
 8004502:	e03e      	b.n	8004582 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e039      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCC_OscConfig+0x618>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0203 	and.w	r2, r3, #3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	429a      	cmp	r2, r3
 8004522:	d12c      	bne.n	800457e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	3b01      	subs	r3, #1
 8004530:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d123      	bne.n	800457e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d11b      	bne.n	800457e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d113      	bne.n	800457e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d109      	bne.n	800457e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	3b01      	subs	r3, #1
 8004578:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	019f800c 	.word	0x019f800c
 8004594:	feeefffc 	.word	0xfeeefffc

08004598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e11e      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	4b91      	ldr	r3, [pc, #580]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d910      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b8e      	ldr	r3, [pc, #568]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 020f 	bic.w	r2, r3, #15
 80045c6:	498c      	ldr	r1, [pc, #560]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b8a      	ldr	r3, [pc, #552]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e106      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d073      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d129      	bne.n	8004648 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f4:	4b81      	ldr	r3, [pc, #516]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0f4      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004604:	f000 f99e 	bl	8004944 <RCC_GetSysClockFreqFromPLLSource>
 8004608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4a7c      	ldr	r2, [pc, #496]	; (8004800 <HAL_RCC_ClockConfig+0x268>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d93f      	bls.n	8004692 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004612:	4b7a      	ldr	r3, [pc, #488]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004626:	2b00      	cmp	r3, #0
 8004628:	d033      	beq.n	8004692 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800462e:	2b00      	cmp	r3, #0
 8004630:	d12f      	bne.n	8004692 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004632:	4b72      	ldr	r3, [pc, #456]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	4a70      	ldr	r2, [pc, #448]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e024      	b.n	8004692 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d107      	bne.n	8004660 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004650:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0c6      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004660:	4b66      	ldr	r3, [pc, #408]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0be      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004670:	f000 f8ce 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8004674:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4a61      	ldr	r2, [pc, #388]	; (8004800 <HAL_RCC_ClockConfig+0x268>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d909      	bls.n	8004692 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800467e:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004686:	4a5d      	ldr	r2, [pc, #372]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004692:	4b5a      	ldr	r3, [pc, #360]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4957      	ldr	r1, [pc, #348]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a4:	f7fd f8e6 	bl	8001874 <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fd f8e2 	bl	8001874 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e095      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4b4e      	ldr	r3, [pc, #312]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 020c 	and.w	r2, r3, #12
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d1eb      	bne.n	80046ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d023      	beq.n	8004728 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b43      	ldr	r3, [pc, #268]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a42      	ldr	r2, [pc, #264]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004704:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800470c:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 800470e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004712:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b39      	ldr	r3, [pc, #228]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4936      	ldr	r1, [pc, #216]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
 8004726:	e008      	b.n	800473a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d105      	bne.n	800473a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800472e:	4b33      	ldr	r3, [pc, #204]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4a32      	ldr	r2, [pc, #200]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004738:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800473a:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d21d      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 020f 	bic.w	r2, r3, #15
 8004750:	4929      	ldr	r1, [pc, #164]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004758:	f7fd f88c 	bl	8001874 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004760:	f7fd f888 	bl	8001874 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e03b      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d1ed      	bne.n	8004760 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4917      	ldr	r1, [pc, #92]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	490f      	ldr	r1, [pc, #60]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047c2:	f000 f825 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047c6:	4602      	mov	r2, r0
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	490c      	ldr	r1, [pc, #48]	; (8004804 <HAL_RCC_ClockConfig+0x26c>)
 80047d4:	5ccb      	ldrb	r3, [r1, r3]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 80047e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc fff8 	bl	80017dc <HAL_InitTick>
 80047ec:	4603      	mov	r3, r0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40022000 	.word	0x40022000
 80047fc:	40021000 	.word	0x40021000
 8004800:	04c4b400 	.word	0x04c4b400
 8004804:	08005fe8 	.word	0x08005fe8
 8004808:	20000004 	.word	0x20000004
 800480c:	20000008 	.word	0x20000008

08004810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b04      	cmp	r3, #4
 8004820:	d102      	bne.n	8004828 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004822:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e047      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004828:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b08      	cmp	r3, #8
 8004832:	d102      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004834:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	e03e      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b0c      	cmp	r3, #12
 8004844:	d136      	bne.n	80048b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d10c      	bne.n	800487e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004864:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800486e:	68d2      	ldr	r2, [r2, #12]
 8004870:	0a12      	lsrs	r2, r2, #8
 8004872:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	617b      	str	r3, [r7, #20]
      break;
 800487c:	e00c      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800487e:	4a13      	ldr	r2, [pc, #76]	; (80048cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	0a12      	lsrs	r2, r2, #8
 800488c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
      break;
 8004896:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0e5b      	lsrs	r3, r3, #25
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e001      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048b8:	693b      	ldr	r3, [r7, #16]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	016e3600 	.word	0x016e3600

080048d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000004 	.word	0x20000004

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048f0:	f7ff fff0 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	08005ff8 	.word	0x08005ff8

08004918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800491c:	f7ff ffda 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0adb      	lsrs	r3, r3, #11
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	08005ff8 	.word	0x08005ff8

08004944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d10c      	bne.n	8004982 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004972:	68d2      	ldr	r2, [r2, #12]
 8004974:	0a12      	lsrs	r2, r2, #8
 8004976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	617b      	str	r3, [r7, #20]
    break;
 8004980:	e00c      	b.n	800499c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	4a0e      	ldr	r2, [pc, #56]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800498c:	68d2      	ldr	r2, [r2, #12]
 800498e:	0a12      	lsrs	r2, r2, #8
 8004990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
    break;
 800499a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	0e5b      	lsrs	r3, r3, #25
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	3301      	adds	r3, #1
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049b6:	687b      	ldr	r3, [r7, #4]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40021000 	.word	0x40021000
 80049c8:	016e3600 	.word	0x016e3600
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d8:	2300      	movs	r3, #0
 80049da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049dc:	2300      	movs	r3, #0
 80049de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8098 	beq.w	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	4b40      	ldr	r3, [pc, #256]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4a3f      	ldr	r2, [pc, #252]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a1a:	4b3a      	ldr	r3, [pc, #232]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a39      	ldr	r2, [pc, #228]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a26:	f7fc ff25 	bl	8001874 <HAL_GetTick>
 8004a2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2c:	e009      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fc ff21 	bl	8001874 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d902      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a40:	e005      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0ef      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d159      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a54:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01e      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d019      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a70:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8c:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aae:	f7fc fee1 	bl	8001874 <HAL_GetTick>
 8004ab2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab4:	e00b      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab6:	f7fc fedd 	bl	8001874 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d902      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	74fb      	strb	r3, [r7, #19]
            break;
 8004acc:	e006      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ec      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae2:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
 8004afe:	e005      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b0c:	7c7b      	ldrb	r3, [r7, #17]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b12:	4ba6      	ldr	r3, [pc, #664]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	4aa5      	ldr	r2, [pc, #660]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b2a:	4ba0      	ldr	r3, [pc, #640]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f023 0203 	bic.w	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	499c      	ldr	r1, [pc, #624]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b4c:	4b97      	ldr	r3, [pc, #604]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f023 020c 	bic.w	r2, r3, #12
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	4994      	ldr	r1, [pc, #592]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b6e:	4b8f      	ldr	r3, [pc, #572]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	498b      	ldr	r1, [pc, #556]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b90:	4b86      	ldr	r3, [pc, #536]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4983      	ldr	r1, [pc, #524]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bb2:	4b7e      	ldr	r3, [pc, #504]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	497a      	ldr	r1, [pc, #488]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd4:	4b75      	ldr	r3, [pc, #468]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	4972      	ldr	r1, [pc, #456]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bf6:	4b6d      	ldr	r3, [pc, #436]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4969      	ldr	r1, [pc, #420]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c18:	4b64      	ldr	r3, [pc, #400]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4961      	ldr	r1, [pc, #388]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3a:	4b5c      	ldr	r3, [pc, #368]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	4958      	ldr	r1, [pc, #352]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c5c:	4b53      	ldr	r3, [pc, #332]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	4950      	ldr	r1, [pc, #320]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a4a      	ldr	r2, [pc, #296]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d015      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	4942      	ldr	r1, [pc, #264]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb4:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a3c      	ldr	r2, [pc, #240]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d015      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ccc:	4b37      	ldr	r3, [pc, #220]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4934      	ldr	r1, [pc, #208]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cec:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d04:	4b29      	ldr	r3, [pc, #164]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	4926      	ldr	r1, [pc, #152]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d22:	d105      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d24:	4b21      	ldr	r3, [pc, #132]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	4918      	ldr	r1, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5c:	4b13      	ldr	r3, [pc, #76]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a12      	ldr	r2, [pc, #72]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d74:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	490a      	ldr	r1, [pc, #40]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a04      	ldr	r2, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e049      	b.n	8004e56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fc10 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f000 f898 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d001      	beq.n	8004e78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e042      	b.n	8004efe <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a21      	ldr	r2, [pc, #132]	; (8004f0c <HAL_TIM_Base_Start+0xac>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d018      	beq.n	8004ebc <HAL_TIM_Base_Start+0x5c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d013      	beq.n	8004ebc <HAL_TIM_Base_Start+0x5c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <HAL_TIM_Base_Start+0xb0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_TIM_Base_Start+0x5c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a1c      	ldr	r2, [pc, #112]	; (8004f14 <HAL_TIM_Base_Start+0xb4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_TIM_Base_Start+0x5c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1a      	ldr	r2, [pc, #104]	; (8004f18 <HAL_TIM_Base_Start+0xb8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_Base_Start+0x5c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <HAL_TIM_Base_Start+0xbc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d115      	bne.n	8004ee8 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	4b17      	ldr	r3, [pc, #92]	; (8004f20 <HAL_TIM_Base_Start+0xc0>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b06      	cmp	r3, #6
 8004ecc:	d015      	beq.n	8004efa <HAL_TIM_Base_Start+0x9a>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed4:	d011      	beq.n	8004efa <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f042 0201 	orr.w	r2, r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	e008      	b.n	8004efa <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e000      	b.n	8004efc <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40013400 	.word	0x40013400
 8004f1c:	40014000 	.word	0x40014000
 8004f20:	00010007 	.word	0x00010007

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a42      	ldr	r2, [pc, #264]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00f      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d00b      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3f      	ldr	r2, [pc, #252]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3e      	ldr	r2, [pc, #248]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3d      	ldr	r2, [pc, #244]	; (800504c <TIM_Base_SetConfig+0x128>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d108      	bne.n	8004f6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a33      	ldr	r2, [pc, #204]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01b      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7c:	d017      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a30      	ldr	r2, [pc, #192]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00f      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2e      	ldr	r2, [pc, #184]	; (800504c <TIM_Base_SetConfig+0x128>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2d      	ldr	r2, [pc, #180]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2c      	ldr	r2, [pc, #176]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	; (8005058 <TIM_Base_SetConfig+0x134>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00f      	beq.n	800500c <TIM_Base_SetConfig+0xe8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <TIM_Base_SetConfig+0x128>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00b      	beq.n	800500c <TIM_Base_SetConfig+0xe8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_Base_SetConfig+0xe8>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_Base_SetConfig+0xe8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a14      	ldr	r2, [pc, #80]	; (8005058 <TIM_Base_SetConfig+0x134>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d103      	bne.n	8005014 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]
  }
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40000400 	.word	0x40000400
 8005048:	40000800 	.word	0x40000800
 800504c:	40013400 	.word	0x40013400
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005070:	2302      	movs	r3, #2
 8005072:	e065      	b.n	8005140 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2c      	ldr	r2, [pc, #176]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2b      	ldr	r2, [pc, #172]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d108      	bne.n	80050ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80050c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ea:	d013      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a18      	ldr	r2, [pc, #96]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a12      	ldr	r2, [pc, #72]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a13      	ldr	r2, [pc, #76]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10c      	bne.n	800512e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800511a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	4313      	orrs	r3, r2
 8005124:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40013400 	.word	0x40013400
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800
 800515c:	40014000 	.word	0x40014000

08005160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e042      	b.n	80051f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	2b00      	cmp	r3, #0
 800517a:	d106      	bne.n	800518a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7fc f9e1 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2224      	movs	r2, #36	; 0x24
 800518e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 faf4 	bl	8005798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f825 	bl	8005200 <UART_SetConfig>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e01b      	b.n	80051f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fb73 	bl	80058dc <UART_CheckIdleState>
 80051f6:	4603      	mov	r3, r0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005204:	b08c      	sub	sp, #48	; 0x30
 8005206:	af00      	add	r7, sp, #0
 8005208:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	431a      	orrs	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	431a      	orrs	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4313      	orrs	r3, r2
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4bab      	ldr	r3, [pc, #684]	; (80054dc <UART_SetConfig+0x2dc>)
 8005230:	4013      	ands	r3, r2
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005238:	430b      	orrs	r3, r1
 800523a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4aa0      	ldr	r2, [pc, #640]	; (80054e0 <UART_SetConfig+0x2e0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005268:	4313      	orrs	r3, r2
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005276:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005280:	430b      	orrs	r3, r1
 8005282:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	f023 010f 	bic.w	r1, r3, #15
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a91      	ldr	r2, [pc, #580]	; (80054e4 <UART_SetConfig+0x2e4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d125      	bne.n	80052f0 <UART_SetConfig+0xf0>
 80052a4:	4b90      	ldr	r3, [pc, #576]	; (80054e8 <UART_SetConfig+0x2e8>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d81a      	bhi.n	80052e8 <UART_SetConfig+0xe8>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0xb8>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052e1 	.word	0x080052e1
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e0d6      	b.n	800547e <UART_SetConfig+0x27e>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e0d2      	b.n	800547e <UART_SetConfig+0x27e>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052de:	e0ce      	b.n	800547e <UART_SetConfig+0x27e>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e6:	e0ca      	b.n	800547e <UART_SetConfig+0x27e>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ee:	e0c6      	b.n	800547e <UART_SetConfig+0x27e>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a7d      	ldr	r2, [pc, #500]	; (80054ec <UART_SetConfig+0x2ec>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d138      	bne.n	800536c <UART_SetConfig+0x16c>
 80052fa:	4b7b      	ldr	r3, [pc, #492]	; (80054e8 <UART_SetConfig+0x2e8>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d82d      	bhi.n	8005364 <UART_SetConfig+0x164>
 8005308:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <UART_SetConfig+0x110>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	08005365 	.word	0x08005365
 8005318:	08005365 	.word	0x08005365
 800531c:	08005365 	.word	0x08005365
 8005320:	08005355 	.word	0x08005355
 8005324:	08005365 	.word	0x08005365
 8005328:	08005365 	.word	0x08005365
 800532c:	08005365 	.word	0x08005365
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005365 	.word	0x08005365
 8005338:	08005365 	.word	0x08005365
 800533c:	08005365 	.word	0x08005365
 8005340:	0800535d 	.word	0x0800535d
 8005344:	2300      	movs	r3, #0
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800534a:	e098      	b.n	800547e <UART_SetConfig+0x27e>
 800534c:	2302      	movs	r3, #2
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005352:	e094      	b.n	800547e <UART_SetConfig+0x27e>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800535a:	e090      	b.n	800547e <UART_SetConfig+0x27e>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005362:	e08c      	b.n	800547e <UART_SetConfig+0x27e>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536a:	e088      	b.n	800547e <UART_SetConfig+0x27e>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5f      	ldr	r2, [pc, #380]	; (80054f0 <UART_SetConfig+0x2f0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d125      	bne.n	80053c2 <UART_SetConfig+0x1c2>
 8005376:	4b5c      	ldr	r3, [pc, #368]	; (80054e8 <UART_SetConfig+0x2e8>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d016      	beq.n	80053b2 <UART_SetConfig+0x1b2>
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d818      	bhi.n	80053ba <UART_SetConfig+0x1ba>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d00a      	beq.n	80053a2 <UART_SetConfig+0x1a2>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d814      	bhi.n	80053ba <UART_SetConfig+0x1ba>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <UART_SetConfig+0x19a>
 8005394:	2b10      	cmp	r3, #16
 8005396:	d008      	beq.n	80053aa <UART_SetConfig+0x1aa>
 8005398:	e00f      	b.n	80053ba <UART_SetConfig+0x1ba>
 800539a:	2300      	movs	r3, #0
 800539c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a0:	e06d      	b.n	800547e <UART_SetConfig+0x27e>
 80053a2:	2302      	movs	r3, #2
 80053a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a8:	e069      	b.n	800547e <UART_SetConfig+0x27e>
 80053aa:	2304      	movs	r3, #4
 80053ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b0:	e065      	b.n	800547e <UART_SetConfig+0x27e>
 80053b2:	2308      	movs	r3, #8
 80053b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b8:	e061      	b.n	800547e <UART_SetConfig+0x27e>
 80053ba:	2310      	movs	r3, #16
 80053bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c0:	e05d      	b.n	800547e <UART_SetConfig+0x27e>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a4b      	ldr	r2, [pc, #300]	; (80054f4 <UART_SetConfig+0x2f4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d125      	bne.n	8005418 <UART_SetConfig+0x218>
 80053cc:	4b46      	ldr	r3, [pc, #280]	; (80054e8 <UART_SetConfig+0x2e8>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053d6:	2bc0      	cmp	r3, #192	; 0xc0
 80053d8:	d016      	beq.n	8005408 <UART_SetConfig+0x208>
 80053da:	2bc0      	cmp	r3, #192	; 0xc0
 80053dc:	d818      	bhi.n	8005410 <UART_SetConfig+0x210>
 80053de:	2b80      	cmp	r3, #128	; 0x80
 80053e0:	d00a      	beq.n	80053f8 <UART_SetConfig+0x1f8>
 80053e2:	2b80      	cmp	r3, #128	; 0x80
 80053e4:	d814      	bhi.n	8005410 <UART_SetConfig+0x210>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <UART_SetConfig+0x1f0>
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d008      	beq.n	8005400 <UART_SetConfig+0x200>
 80053ee:	e00f      	b.n	8005410 <UART_SetConfig+0x210>
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053f6:	e042      	b.n	800547e <UART_SetConfig+0x27e>
 80053f8:	2302      	movs	r3, #2
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053fe:	e03e      	b.n	800547e <UART_SetConfig+0x27e>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005406:	e03a      	b.n	800547e <UART_SetConfig+0x27e>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800540e:	e036      	b.n	800547e <UART_SetConfig+0x27e>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005416:	e032      	b.n	800547e <UART_SetConfig+0x27e>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a30      	ldr	r2, [pc, #192]	; (80054e0 <UART_SetConfig+0x2e0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d12a      	bne.n	8005478 <UART_SetConfig+0x278>
 8005422:	4b31      	ldr	r3, [pc, #196]	; (80054e8 <UART_SetConfig+0x2e8>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800542c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005430:	d01a      	beq.n	8005468 <UART_SetConfig+0x268>
 8005432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005436:	d81b      	bhi.n	8005470 <UART_SetConfig+0x270>
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543c:	d00c      	beq.n	8005458 <UART_SetConfig+0x258>
 800543e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005442:	d815      	bhi.n	8005470 <UART_SetConfig+0x270>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <UART_SetConfig+0x250>
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	d008      	beq.n	8005460 <UART_SetConfig+0x260>
 800544e:	e00f      	b.n	8005470 <UART_SetConfig+0x270>
 8005450:	2300      	movs	r3, #0
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005456:	e012      	b.n	800547e <UART_SetConfig+0x27e>
 8005458:	2302      	movs	r3, #2
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800545e:	e00e      	b.n	800547e <UART_SetConfig+0x27e>
 8005460:	2304      	movs	r3, #4
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005466:	e00a      	b.n	800547e <UART_SetConfig+0x27e>
 8005468:	2308      	movs	r3, #8
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800546e:	e006      	b.n	800547e <UART_SetConfig+0x27e>
 8005470:	2310      	movs	r3, #16
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005476:	e002      	b.n	800547e <UART_SetConfig+0x27e>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <UART_SetConfig+0x2e0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	f040 80a8 	bne.w	80055da <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800548a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800548e:	2b08      	cmp	r3, #8
 8005490:	d834      	bhi.n	80054fc <UART_SetConfig+0x2fc>
 8005492:	a201      	add	r2, pc, #4	; (adr r2, 8005498 <UART_SetConfig+0x298>)
 8005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054fd 	.word	0x080054fd
 80054a0:	080054c5 	.word	0x080054c5
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	080054cb 	.word	0x080054cb
 80054ac:	080054fd 	.word	0x080054fd
 80054b0:	080054fd 	.word	0x080054fd
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	080054d3 	.word	0x080054d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054bc:	f7ff fa16 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 80054c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054c2:	e021      	b.n	8005508 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c4:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <UART_SetConfig+0x2f8>)
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054c8:	e01e      	b.n	8005508 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	f7ff f9a1 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80054ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054d0:	e01a      	b.n	8005508 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054d8:	e016      	b.n	8005508 <UART_SetConfig+0x308>
 80054da:	bf00      	nop
 80054dc:	cfff69f3 	.word	0xcfff69f3
 80054e0:	40008000 	.word	0x40008000
 80054e4:	40013800 	.word	0x40013800
 80054e8:	40021000 	.word	0x40021000
 80054ec:	40004400 	.word	0x40004400
 80054f0:	40004800 	.word	0x40004800
 80054f4:	40004c00 	.word	0x40004c00
 80054f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005506:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 812a 	beq.w	8005764 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	4a9e      	ldr	r2, [pc, #632]	; (8005790 <UART_SetConfig+0x590>)
 8005516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551a:	461a      	mov	r2, r3
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005522:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	429a      	cmp	r2, r3
 8005532:	d305      	bcc.n	8005540 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d903      	bls.n	8005548 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005546:	e10d      	b.n	8005764 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	2200      	movs	r2, #0
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	60fa      	str	r2, [r7, #12]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	4a8e      	ldr	r2, [pc, #568]	; (8005790 <UART_SetConfig+0x590>)
 8005556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555a:	b29b      	uxth	r3, r3
 800555c:	2200      	movs	r2, #0
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005566:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800556a:	f7fb fa43 	bl	80009f4 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	020b      	lsls	r3, r1, #8
 8005580:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005584:	0202      	lsls	r2, r0, #8
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	6849      	ldr	r1, [r1, #4]
 800558a:	0849      	lsrs	r1, r1, #1
 800558c:	2000      	movs	r0, #0
 800558e:	460c      	mov	r4, r1
 8005590:	4605      	mov	r5, r0
 8005592:	eb12 0804 	adds.w	r8, r2, r4
 8005596:	eb43 0905 	adc.w	r9, r3, r5
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	469a      	mov	sl, r3
 80055a2:	4693      	mov	fp, r2
 80055a4:	4652      	mov	r2, sl
 80055a6:	465b      	mov	r3, fp
 80055a8:	4640      	mov	r0, r8
 80055aa:	4649      	mov	r1, r9
 80055ac:	f7fb fa22 	bl	80009f4 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4613      	mov	r3, r2
 80055b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055be:	d308      	bcc.n	80055d2 <UART_SetConfig+0x3d2>
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c6:	d204      	bcs.n	80055d2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	60da      	str	r2, [r3, #12]
 80055d0:	e0c8      	b.n	8005764 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055d8:	e0c4      	b.n	8005764 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	d167      	bne.n	80056b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80055e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d828      	bhi.n	800563e <UART_SetConfig+0x43e>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x3f4>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005629 	.word	0x08005629
 8005600:	0800563f 	.word	0x0800563f
 8005604:	0800562f 	.word	0x0800562f
 8005608:	0800563f 	.word	0x0800563f
 800560c:	0800563f 	.word	0x0800563f
 8005610:	0800563f 	.word	0x0800563f
 8005614:	08005637 	.word	0x08005637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005618:	f7ff f968 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800561c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800561e:	e014      	b.n	800564a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005620:	f7ff f97a 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8005624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005626:	e010      	b.n	800564a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005628:	4b5a      	ldr	r3, [pc, #360]	; (8005794 <UART_SetConfig+0x594>)
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800562c:	e00d      	b.n	800564a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562e:	f7ff f8ef 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005634:	e009      	b.n	800564a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800563c:	e005      	b.n	800564a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8089 	beq.w	8005764 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	4a4e      	ldr	r2, [pc, #312]	; (8005790 <UART_SetConfig+0x590>)
 8005658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800565c:	461a      	mov	r2, r3
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	fbb3 f3f2 	udiv	r3, r3, r2
 8005664:	005a      	lsls	r2, r3, #1
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	441a      	add	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d916      	bls.n	80056ac <UART_SetConfig+0x4ac>
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d212      	bcs.n	80056ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f023 030f 	bic.w	r3, r3, #15
 800568e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	b29a      	uxth	r2, r3
 800569c:	8bfb      	ldrh	r3, [r7, #30]
 800569e:	4313      	orrs	r3, r2
 80056a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	8bfa      	ldrh	r2, [r7, #30]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	e05b      	b.n	8005764 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056b2:	e057      	b.n	8005764 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d828      	bhi.n	800570e <UART_SetConfig+0x50e>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x4c4>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	0800570f 	.word	0x0800570f
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	0800570f 	.word	0x0800570f
 80056dc:	0800570f 	.word	0x0800570f
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e8:	f7ff f900 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056ee:	e014      	b.n	800571a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7ff f912 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b26      	ldr	r3, [pc, #152]	; (8005794 <UART_SetConfig+0x594>)
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056fc:	e00d      	b.n	800571a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7ff f887 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005718:	bf00      	nop
    }

    if (pclk != 0U)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d021      	beq.n	8005764 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <UART_SetConfig+0x590>)
 8005726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572a:	461a      	mov	r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	085b      	lsrs	r3, r3, #1
 8005738:	441a      	add	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d909      	bls.n	800575e <UART_SetConfig+0x55e>
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	d205      	bcs.n	800575e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	b29a      	uxth	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	e002      	b.n	8005764 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2201      	movs	r2, #1
 8005768:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2201      	movs	r2, #1
 8005770:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005780:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005784:	4618      	mov	r0, r3
 8005786:	3730      	adds	r7, #48	; 0x30
 8005788:	46bd      	mov	sp, r7
 800578a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800578e:	bf00      	nop
 8005790:	08006000 	.word	0x08006000
 8005794:	00f42400 	.word	0x00f42400

08005798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01a      	beq.n	80058ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005896:	d10a      	bne.n	80058ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	605a      	str	r2, [r3, #4]
  }
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b098      	sub	sp, #96	; 0x60
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058ec:	f7fb ffc2 	bl	8001874 <HAL_GetTick>
 80058f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d12f      	bne.n	8005960 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005908:	2200      	movs	r2, #0
 800590a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f88e 	bl	8005a30 <UART_WaitOnFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d022      	beq.n	8005960 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592e:	653b      	str	r3, [r7, #80]	; 0x50
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005938:	647b      	str	r3, [r7, #68]	; 0x44
 800593a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800593e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e6      	bne.n	800591a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e063      	b.n	8005a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b04      	cmp	r3, #4
 800596c:	d149      	bne.n	8005a02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800596e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005976:	2200      	movs	r2, #0
 8005978:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f857 	bl	8005a30 <UART_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d03c      	beq.n	8005a02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	623b      	str	r3, [r7, #32]
   return(result);
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	633b      	str	r3, [r7, #48]	; 0x30
 80059a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e6      	bne.n	8005988 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059da:	61fa      	str	r2, [r7, #28]
 80059dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	69fa      	ldr	r2, [r7, #28]
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	617b      	str	r3, [r7, #20]
   return(result);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e5      	bne.n	80059ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e012      	b.n	8005a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3758      	adds	r7, #88	; 0x58
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a40:	e04f      	b.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a48:	d04b      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7fb ff13 	bl	8001874 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e04e      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d037      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d034      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d031      	beq.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d110      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2208      	movs	r2, #8
 8005a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f838 	bl	8005b0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e029      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005abc:	d111      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f81e 	bl	8005b0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e00f      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69da      	ldr	r2, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	bf0c      	ite	eq
 8005af2:	2301      	moveq	r3, #1
 8005af4:	2300      	movne	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	79fb      	ldrb	r3, [r7, #7]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d0a0      	beq.n	8005a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b095      	sub	sp, #84	; 0x54
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	643b      	str	r3, [r7, #64]	; 0x40
 8005b32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3308      	adds	r3, #8
 8005b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e3      	bne.n	8005b44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d118      	bne.n	8005bb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f023 0310 	bic.w	r3, r3, #16
 8005b98:	647b      	str	r3, [r7, #68]	; 0x44
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6979      	ldr	r1, [r7, #20]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e6      	bne.n	8005b84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bca:	bf00      	nop
 8005bcc:	3754      	adds	r7, #84	; 0x54
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_UARTEx_DisableFifoMode+0x16>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e027      	b.n	8005c3c <HAL_UARTEx_DisableFifoMode+0x66>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2224      	movs	r2, #36	; 0x24
 8005bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e02d      	b.n	8005cbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2224      	movs	r2, #36	; 0x24
 8005c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0201 	bic.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f84f 	bl	8005d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e02d      	b.n	8005d38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2224      	movs	r2, #36	; 0x24
 8005ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0201 	bic.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f811 	bl	8005d40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d108      	bne.n	8005d62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d60:	e031      	b.n	8005dc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d62:	2308      	movs	r3, #8
 8005d64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d66:	2308      	movs	r3, #8
 8005d68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	0e5b      	lsrs	r3, r3, #25
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	0f5b      	lsrs	r3, r3, #29
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	7b3a      	ldrb	r2, [r7, #12]
 8005d8e:	4911      	ldr	r1, [pc, #68]	; (8005dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005d90:	5c8a      	ldrb	r2, [r1, r2]
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d96:	7b3a      	ldrb	r2, [r7, #12]
 8005d98:	490f      	ldr	r1, [pc, #60]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005d9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	7b7a      	ldrb	r2, [r7, #13]
 8005dac:	4909      	ldr	r1, [pc, #36]	; (8005dd4 <UARTEx_SetNbDataToProcess+0x94>)
 8005dae:	5c8a      	ldrb	r2, [r1, r2]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005db4:	7b7a      	ldrb	r2, [r7, #13]
 8005db6:	4908      	ldr	r1, [pc, #32]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x98>)
 8005db8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	08006018 	.word	0x08006018
 8005dd8:	08006020 	.word	0x08006020

08005ddc <malloc>:
 8005ddc:	4b02      	ldr	r3, [pc, #8]	; (8005de8 <malloc+0xc>)
 8005dde:	4601      	mov	r1, r0
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	f000 b823 	b.w	8005e2c <_malloc_r>
 8005de6:	bf00      	nop
 8005de8:	2000005c 	.word	0x2000005c

08005dec <sbrk_aligned>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4e0e      	ldr	r6, [pc, #56]	; (8005e28 <sbrk_aligned+0x3c>)
 8005df0:	460c      	mov	r4, r1
 8005df2:	6831      	ldr	r1, [r6, #0]
 8005df4:	4605      	mov	r5, r0
 8005df6:	b911      	cbnz	r1, 8005dfe <sbrk_aligned+0x12>
 8005df8:	f000 f8ac 	bl	8005f54 <_sbrk_r>
 8005dfc:	6030      	str	r0, [r6, #0]
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f000 f8a7 	bl	8005f54 <_sbrk_r>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d00a      	beq.n	8005e20 <sbrk_aligned+0x34>
 8005e0a:	1cc4      	adds	r4, r0, #3
 8005e0c:	f024 0403 	bic.w	r4, r4, #3
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d007      	beq.n	8005e24 <sbrk_aligned+0x38>
 8005e14:	1a21      	subs	r1, r4, r0
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 f89c 	bl	8005f54 <_sbrk_r>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d101      	bne.n	8005e24 <sbrk_aligned+0x38>
 8005e20:	f04f 34ff 	mov.w	r4, #4294967295
 8005e24:	4620      	mov	r0, r4
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	200004b8 	.word	0x200004b8

08005e2c <_malloc_r>:
 8005e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e30:	1ccd      	adds	r5, r1, #3
 8005e32:	f025 0503 	bic.w	r5, r5, #3
 8005e36:	3508      	adds	r5, #8
 8005e38:	2d0c      	cmp	r5, #12
 8005e3a:	bf38      	it	cc
 8005e3c:	250c      	movcc	r5, #12
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	4607      	mov	r7, r0
 8005e42:	db01      	blt.n	8005e48 <_malloc_r+0x1c>
 8005e44:	42a9      	cmp	r1, r5
 8005e46:	d905      	bls.n	8005e54 <_malloc_r+0x28>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	603b      	str	r3, [r7, #0]
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	4630      	mov	r0, r6
 8005e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f28 <_malloc_r+0xfc>
 8005e58:	f000 f868 	bl	8005f2c <__malloc_lock>
 8005e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e60:	461c      	mov	r4, r3
 8005e62:	bb5c      	cbnz	r4, 8005ebc <_malloc_r+0x90>
 8005e64:	4629      	mov	r1, r5
 8005e66:	4638      	mov	r0, r7
 8005e68:	f7ff ffc0 	bl	8005dec <sbrk_aligned>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	4604      	mov	r4, r0
 8005e70:	d155      	bne.n	8005f1e <_malloc_r+0xf2>
 8005e72:	f8d8 4000 	ldr.w	r4, [r8]
 8005e76:	4626      	mov	r6, r4
 8005e78:	2e00      	cmp	r6, #0
 8005e7a:	d145      	bne.n	8005f08 <_malloc_r+0xdc>
 8005e7c:	2c00      	cmp	r4, #0
 8005e7e:	d048      	beq.n	8005f12 <_malloc_r+0xe6>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	4631      	mov	r1, r6
 8005e84:	4638      	mov	r0, r7
 8005e86:	eb04 0903 	add.w	r9, r4, r3
 8005e8a:	f000 f863 	bl	8005f54 <_sbrk_r>
 8005e8e:	4581      	cmp	r9, r0
 8005e90:	d13f      	bne.n	8005f12 <_malloc_r+0xe6>
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	1a6d      	subs	r5, r5, r1
 8005e96:	4629      	mov	r1, r5
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ffa7 	bl	8005dec <sbrk_aligned>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d037      	beq.n	8005f12 <_malloc_r+0xe6>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	442b      	add	r3, r5
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d038      	beq.n	8005f22 <_malloc_r+0xf6>
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	42a2      	cmp	r2, r4
 8005eb4:	d12b      	bne.n	8005f0e <_malloc_r+0xe2>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	605a      	str	r2, [r3, #4]
 8005eba:	e00f      	b.n	8005edc <_malloc_r+0xb0>
 8005ebc:	6822      	ldr	r2, [r4, #0]
 8005ebe:	1b52      	subs	r2, r2, r5
 8005ec0:	d41f      	bmi.n	8005f02 <_malloc_r+0xd6>
 8005ec2:	2a0b      	cmp	r2, #11
 8005ec4:	d917      	bls.n	8005ef6 <_malloc_r+0xca>
 8005ec6:	1961      	adds	r1, r4, r5
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	6025      	str	r5, [r4, #0]
 8005ecc:	bf18      	it	ne
 8005ece:	6059      	strne	r1, [r3, #4]
 8005ed0:	6863      	ldr	r3, [r4, #4]
 8005ed2:	bf08      	it	eq
 8005ed4:	f8c8 1000 	streq.w	r1, [r8]
 8005ed8:	5162      	str	r2, [r4, r5]
 8005eda:	604b      	str	r3, [r1, #4]
 8005edc:	4638      	mov	r0, r7
 8005ede:	f104 060b 	add.w	r6, r4, #11
 8005ee2:	f000 f829 	bl	8005f38 <__malloc_unlock>
 8005ee6:	f026 0607 	bic.w	r6, r6, #7
 8005eea:	1d23      	adds	r3, r4, #4
 8005eec:	1af2      	subs	r2, r6, r3
 8005eee:	d0ae      	beq.n	8005e4e <_malloc_r+0x22>
 8005ef0:	1b9b      	subs	r3, r3, r6
 8005ef2:	50a3      	str	r3, [r4, r2]
 8005ef4:	e7ab      	b.n	8005e4e <_malloc_r+0x22>
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	6862      	ldr	r2, [r4, #4]
 8005efa:	d1dd      	bne.n	8005eb8 <_malloc_r+0x8c>
 8005efc:	f8c8 2000 	str.w	r2, [r8]
 8005f00:	e7ec      	b.n	8005edc <_malloc_r+0xb0>
 8005f02:	4623      	mov	r3, r4
 8005f04:	6864      	ldr	r4, [r4, #4]
 8005f06:	e7ac      	b.n	8005e62 <_malloc_r+0x36>
 8005f08:	4634      	mov	r4, r6
 8005f0a:	6876      	ldr	r6, [r6, #4]
 8005f0c:	e7b4      	b.n	8005e78 <_malloc_r+0x4c>
 8005f0e:	4613      	mov	r3, r2
 8005f10:	e7cc      	b.n	8005eac <_malloc_r+0x80>
 8005f12:	230c      	movs	r3, #12
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4638      	mov	r0, r7
 8005f18:	f000 f80e 	bl	8005f38 <__malloc_unlock>
 8005f1c:	e797      	b.n	8005e4e <_malloc_r+0x22>
 8005f1e:	6025      	str	r5, [r4, #0]
 8005f20:	e7dc      	b.n	8005edc <_malloc_r+0xb0>
 8005f22:	605b      	str	r3, [r3, #4]
 8005f24:	deff      	udf	#255	; 0xff
 8005f26:	bf00      	nop
 8005f28:	200004b4 	.word	0x200004b4

08005f2c <__malloc_lock>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	; (8005f34 <__malloc_lock+0x8>)
 8005f2e:	f000 b84b 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	200005f8 	.word	0x200005f8

08005f38 <__malloc_unlock>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__malloc_unlock+0x8>)
 8005f3a:	f000 b846 	b.w	8005fca <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	200005f8 	.word	0x200005f8

08005f44 <memset>:
 8005f44:	4402      	add	r2, r0
 8005f46:	4603      	mov	r3, r0
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d100      	bne.n	8005f4e <memset+0xa>
 8005f4c:	4770      	bx	lr
 8005f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f52:	e7f9      	b.n	8005f48 <memset+0x4>

08005f54 <_sbrk_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d06      	ldr	r5, [pc, #24]	; (8005f70 <_sbrk_r+0x1c>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	602b      	str	r3, [r5, #0]
 8005f60:	f7fb fbb2 	bl	80016c8 <_sbrk>
 8005f64:	1c43      	adds	r3, r0, #1
 8005f66:	d102      	bne.n	8005f6e <_sbrk_r+0x1a>
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	b103      	cbz	r3, 8005f6e <_sbrk_r+0x1a>
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	bd38      	pop	{r3, r4, r5, pc}
 8005f70:	200005f4 	.word	0x200005f4

08005f74 <__errno>:
 8005f74:	4b01      	ldr	r3, [pc, #4]	; (8005f7c <__errno+0x8>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	2000005c 	.word	0x2000005c

08005f80 <__libc_init_array>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4d0d      	ldr	r5, [pc, #52]	; (8005fb8 <__libc_init_array+0x38>)
 8005f84:	4c0d      	ldr	r4, [pc, #52]	; (8005fbc <__libc_init_array+0x3c>)
 8005f86:	1b64      	subs	r4, r4, r5
 8005f88:	10a4      	asrs	r4, r4, #2
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	42a6      	cmp	r6, r4
 8005f8e:	d109      	bne.n	8005fa4 <__libc_init_array+0x24>
 8005f90:	4d0b      	ldr	r5, [pc, #44]	; (8005fc0 <__libc_init_array+0x40>)
 8005f92:	4c0c      	ldr	r4, [pc, #48]	; (8005fc4 <__libc_init_array+0x44>)
 8005f94:	f000 f81a 	bl	8005fcc <_init>
 8005f98:	1b64      	subs	r4, r4, r5
 8005f9a:	10a4      	asrs	r4, r4, #2
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	42a6      	cmp	r6, r4
 8005fa0:	d105      	bne.n	8005fae <__libc_init_array+0x2e>
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fa8:	4798      	blx	r3
 8005faa:	3601      	adds	r6, #1
 8005fac:	e7ee      	b.n	8005f8c <__libc_init_array+0xc>
 8005fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb2:	4798      	blx	r3
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	e7f2      	b.n	8005f9e <__libc_init_array+0x1e>
 8005fb8:	08006030 	.word	0x08006030
 8005fbc:	08006030 	.word	0x08006030
 8005fc0:	08006030 	.word	0x08006030
 8005fc4:	08006034 	.word	0x08006034

08005fc8 <__retarget_lock_acquire_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <__retarget_lock_release_recursive>:
 8005fca:	4770      	bx	lr

08005fcc <_init>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr

08005fd8 <_fini>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr
