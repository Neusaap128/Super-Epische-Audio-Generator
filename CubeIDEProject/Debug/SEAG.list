
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007924  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b40  08007b40  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b48  08007b48  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000060  08007bb0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08007bb0  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e843  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039fe  00000000  00000000  0003e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  00042318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014cf  00000000  00000000  00043dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220c4  00000000  00000000  0004528f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000208d0  00000000  00000000  00067353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2fe1  00000000  00000000  00087c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077a4  00000000  00000000  0016ac04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001723a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007ae4 	.word	0x08007ae4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08007ae4 	.word	0x08007ae4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

	ResetCodec(hi2c1);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f86b 	bl	8000dd4 <ResetCodec>

	HAL_Delay(25);
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f001 f81c 	bl	8001d3c <HAL_Delay>

	//un mute left channel
	WriteCodecRegister(hi2c1, 0x00, 0b100000000);
 8000d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d08:	2100      	movs	r1, #0
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f86f 	bl	8000dee <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 0b100000000);
 8000d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d14:	2101      	movs	r1, #1
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f869 	bl	8000dee <WriteCodecRegister>


	// ----- Power Management -----

	// outdated R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b111111100);
 8000d1c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000d20:	2119      	movs	r1, #25
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f863 	bl	8000dee <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b111010000);
 8000d28:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000d2c:	211a      	movs	r1, #26
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f85d 	bl	8000dee <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000111100);
 8000d34:	223c      	movs	r2, #60	; 0x3c
 8000d36:	212f      	movs	r1, #47	; 0x2f
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f858 	bl	8000dee <WriteCodecRegister>

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b100000000);
 8000d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d42:	2102      	movs	r1, #2
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f852 	bl	8000dee <WriteCodecRegister>


	// Disable master mode codec
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 8000d4a:	220a      	movs	r2, #10
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f84d 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000d54:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d58:	2120      	movs	r1, #32
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f847 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x21, 0b100001000);
 8000d60:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d64:	2121      	movs	r1, #33	; 0x21
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f000 f841 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x2D, 0b000000000);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	212d      	movs	r1, #45	; 0x2d
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f83c 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x2E, 0b000000000);
 8000d76:	2200      	movs	r2, #0
 8000d78:	212e      	movs	r1, #46	; 0x2e
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 f837 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x22, 0b101010000);
 8000d80:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000d84:	2122      	movs	r1, #34	; 0x22
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f831 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x25, 0b101010000);
 8000d8c:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000d90:	2125      	movs	r1, #37	; 0x25
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f82b 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x34, 0b000000000);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2134      	movs	r1, #52	; 0x34
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f826 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x04, 0b000000000);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2104      	movs	r1, #4
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 f821 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x08, 0b111000000);
 8000dac:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000db0:	2108      	movs	r1, #8
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 f81b 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x05, 0b000000000);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2105      	movs	r1, #5
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f816 	bl	8000dee <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x09, 0b000000001);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2109      	movs	r1, #9
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f811 	bl	8000dee <WriteCodecRegister>

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/


}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 8000ddc:	22ff      	movs	r2, #255	; 0xff
 8000dde:	210f      	movs	r1, #15
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f804 	bl	8000dee <WriteCodecRegister>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint16_t reg, uint16_t pData){
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b088      	sub	sp, #32
 8000df2:	af04      	add	r7, sp, #16
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	807b      	strh	r3, [r7, #2]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	803b      	strh	r3, [r7, #0]
	uint8_t lowByte  = (uint8_t)(pData & 0xFF);
 8000dfe:	883b      	ldrh	r3, [r7, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	73fb      	strb	r3, [r7, #15]
	uint8_t highByte = (uint8_t)(pData >> 8);
 8000e04:	883b      	ldrh	r3, [r7, #0]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &highByte, 1, HAL_MAX_DELAY);
 8000e0e:	2334      	movs	r3, #52	; 0x34
 8000e10:	b299      	uxth	r1, r3
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	f107 030e 	add.w	r3, r7, #14
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f003 fb06 	bl	8004438 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 8000e2c:	2334      	movs	r3, #52	; 0x34
 8000e2e:	b299      	uxth	r1, r3
 8000e30:	887a      	ldrh	r2, [r7, #2]
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	f107 030f 	add.w	r3, r7, #15
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2301      	movs	r3, #1
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f003 faf7 	bl	8004438 <HAL_I2C_Mem_Write>

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 fd49 	bl	80078f4 <malloc>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <InitDSP+0x2c>)
 8000e68:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f006 fd40 	bl	80078f4 <malloc>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b02      	ldr	r3, [pc, #8]	; (8000e84 <InitDSP+0x30>)
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000007c 	.word	0x2000007c
 8000e84:	20000080 	.word	0x20000080

08000e88 <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const uint16_t* input, uint16_t* output, size_t bufferLength) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b087      	sub	sp, #28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	e00c      	b.n	8000eb4 <processBuffer+0x2c>
        output[i] = input[i];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	441a      	add	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	440b      	add	r3, r1
 8000eaa:	8812      	ldrh	r2, [r2, #0]
 8000eac:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferLength; i++) {
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8ee      	bhi.n	8000e9a <processBuffer+0x12>
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_ADC_ConvHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000ed8:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000edc:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000ede:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	490b      	ldr	r1, [pc, #44]	; (8000f10 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000ee6:	f7ff ffcf 	bl	8000e88 <processBuffer>

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f003 f9eb 	bl	80042cc <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]

}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000570 	.word	0x20000570
 8000f08:	20000370 	.word	0x20000370
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000470 	.word	0x20000470
 8000f14:	20000574 	.word	0x20000574

08000f18 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_ADC_ConvCpltCallback+0x40>)
 8000f24:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_ADC_ConvCpltCallback+0x44>)
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f2a:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)(adcBuf+AUDIO_BUFFER_SIZE/2), (uint16_t*)(dacBuf+AUDIO_BUFFER_SIZE/2), AUDIO_BUFFER_SIZE/2);
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_ADC_ConvCpltCallback+0x40>)
 8000f2e:	490c      	ldr	r1, [pc, #48]	; (8000f60 <HAL_ADC_ConvCpltCallback+0x48>)
 8000f30:	2240      	movs	r2, #64	; 0x40
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffa8 	bl	8000e88 <processBuffer>
	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f003 f9c4 	bl	80042cc <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000570 	.word	0x20000570
 8000f58:	200003f0 	.word	0x200003f0
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	200004f0 	.word	0x200004f0
 8000f64:	20000574 	.word	0x20000574

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fe74 	bl	8001c5a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f83f 	bl	8000ff4 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f76:	b662      	cpsie	i
}
 8000f78:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 fa99 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7e:	f000 fa65 	bl	800144c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000f82:	f000 f9c5 	bl	8001310 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000f86:	f000 f881 	bl	800108c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f8a:	f000 f8f9 	bl	8001180 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000f8e:	f000 fa0b 	bl	80013a8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000f92:	f000 f92f 	bl	80011f4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000f96:	f000 f96d 	bl	8001274 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000f9a:	f000 f993 	bl	80012c4 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000f9e:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <main+0x70>)
 8000fa0:	f005 fcea 	bl	8006978 <HAL_TIM_Base_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  InitDSP();
 8000fa4:	f7ff ff56 	bl	8000e54 <InitDSP>

  CodecInit(&hi2c1);
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <main+0x74>)
 8000faa:	f7ff fea1 	bl	8000cf0 <CodecInit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, AUDIO_BUFFER_SIZE);
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <main+0x78>)
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <main+0x7c>)
 8000fb4:	f001 fa86 	bl	80024c4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacBuf, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <main+0x80>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <main+0x84>)
 8000fc4:	f002 fa42 	bl	800344c <HAL_DAC_Start_DMA>
      //float sinVal = (sin( (float)timerValue/3863*2*M_PI)+1)/2 *3.3;
      //uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      //DAC1->DHR12R1 = dacOutput;
	  HAL_I2S_Transmit(&hi2s2,  0x55, 2, HAL_MAX_DELAY);
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	2202      	movs	r2, #2
 8000fce:	2155      	movs	r1, #85	; 0x55
 8000fd0:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <main+0x88>)
 8000fd2:	f003 ff2b 	bl	8004e2c <HAL_I2S_Transmit>
 8000fd6:	e7f7      	b.n	8000fc8 <main+0x60>
 8000fd8:	20000324 	.word	0x20000324
 8000fdc:	200001c4 	.word	0x200001c4
 8000fe0:	20000370 	.word	0x20000370
 8000fe4:	20000084 	.word	0x20000084
 8000fe8:	20000470 	.word	0x20000470
 8000fec:	20000150 	.word	0x20000150
 8000ff0:	20000218 	.word	0x20000218

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	2238      	movs	r2, #56	; 0x38
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f006 fd2a 	bl	8007a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001016:	2000      	movs	r0, #0
 8001018:	f004 f832 	bl	8005080 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800101c:	2302      	movs	r3, #2
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001026:	2340      	movs	r3, #64	; 0x40
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800102e:	2302      	movs	r3, #2
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001032:	2304      	movs	r3, #4
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001036:	2355      	movs	r3, #85	; 0x55
 8001038:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103a:	2302      	movs	r3, #2
 800103c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800103e:	2302      	movs	r3, #2
 8001040:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001042:	2302      	movs	r3, #2
 8001044:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	4618      	mov	r0, r3
 800104c:	f004 f8cc 	bl	80051e8 <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001056:	f000 faa9 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2303      	movs	r3, #3
 8001060:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2104      	movs	r1, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f004 fbca 	bl	800580c <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800107e:	f000 fa95 	bl	80015ac <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	3750      	adds	r7, #80	; 0x50
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2220      	movs	r2, #32
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f006 fcd9 	bl	8007a5c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <MX_ADC1_Init+0xec>)
 80010ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <MX_ADC1_Init+0xec>)
 80010b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ba:	4b2f      	ldr	r3, [pc, #188]	; (8001178 <MX_ADC1_Init+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <MX_ADC1_Init+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <MX_ADC1_Init+0xec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <MX_ADC1_Init+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_ADC1_Init+0xec>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <MX_ADC1_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_ADC1_Init+0xec>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <MX_ADC1_Init+0xec>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_ADC1_Init+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_ADC1_Init+0xec>)
 80010f4:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_ADC1_Init+0xec>)
 80010fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC1_Init+0xec>)
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <MX_ADC1_Init+0xec>)
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_ADC1_Init+0xec>)
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001118:	4817      	ldr	r0, [pc, #92]	; (8001178 <MX_ADC1_Init+0xec>)
 800111a:	f001 f84f 	bl	80021bc <HAL_ADC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001124:	f000 fa42 	bl	80015ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800112c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	4811      	ldr	r0, [pc, #68]	; (8001178 <MX_ADC1_Init+0xec>)
 8001134:	f001 ffb4 	bl	80030a0 <HAL_ADCEx_MultiModeConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800113e:	f000 fa35 	bl	80015ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_ADC1_Init+0xf0>)
 8001144:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001146:	2306      	movs	r3, #6
 8001148:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800114e:	237f      	movs	r3, #127	; 0x7f
 8001150:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001152:	2304      	movs	r3, #4
 8001154:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <MX_ADC1_Init+0xec>)
 8001160:	f001 fa6e 	bl	8002640 <HAL_ADC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800116a:	f000 fa1f 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3730      	adds	r7, #48	; 0x30
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000084 	.word	0x20000084
 800117c:	04300002 	.word	0x04300002

08001180 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2230      	movs	r2, #48	; 0x30
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f006 fc65 	bl	8007a5c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_DAC1_Init+0x6c>)
 8001194:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <MX_DAC1_Init+0x70>)
 8001196:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001198:	4814      	ldr	r0, [pc, #80]	; (80011ec <MX_DAC1_Init+0x6c>)
 800119a:	f002 f934 	bl	8003406 <HAL_DAC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011a4:	f000 fa02 	bl	80015ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80011a8:	2302      	movs	r3, #2
 80011aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80011b8:	231e      	movs	r3, #30
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_DAC1_Init+0x6c>)
 80011d4:	f002 fa2c 	bl	8003630 <HAL_DAC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80011de:	f000 f9e5 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000150 	.word	0x20000150
 80011f0:	50000800 	.word	0x50000800

080011f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_I2C1_Init+0x74>)
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <MX_I2C1_Init+0x78>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_I2C1_Init+0x74>)
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <MX_I2C1_Init+0x7c>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_I2C1_Init+0x74>)
 800120c:	2201      	movs	r2, #1
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_I2C1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_I2C1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122e:	480e      	ldr	r0, [pc, #56]	; (8001268 <MX_I2C1_Init+0x74>)
 8001230:	f003 f866 	bl	8004300 <HAL_I2C_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800123a:	f000 f9b7 	bl	80015ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <MX_I2C1_Init+0x74>)
 8001242:	f003 fc7b 	bl	8004b3c <HAL_I2CEx_ConfigAnalogFilter>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800124c:	f000 f9ae 	bl	80015ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001250:	2100      	movs	r1, #0
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_I2C1_Init+0x74>)
 8001254:	f003 fcbd 	bl	8004bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125e:	f000 f9a5 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200001c4 	.word	0x200001c4
 800126c:	40005400 	.word	0x40005400
 8001270:	30a0a7fb 	.word	0x30a0a7fb

08001274 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <MX_I2S2_Init+0x48>)
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <MX_I2S2_Init+0x4c>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_I2S2_Init+0x48>)
 8001280:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001284:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <MX_I2S2_Init+0x48>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MX_I2S2_Init+0x48>)
 800128e:	2203      	movs	r2, #3
 8001290:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_I2S2_Init+0x48>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_I2S2_Init+0x48>)
 800129a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800129e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_I2S2_Init+0x48>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_I2S2_Init+0x48>)
 80012a8:	f003 fce0 	bl	8004c6c <HAL_I2S_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80012b2:	f000 f97b 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000218 	.word	0x20000218
 80012c0:	40003800 	.word	0x40003800

080012c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_I2S3_Init+0x44>)
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <MX_I2S3_Init+0x48>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_TX;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_I2S3_Init+0x44>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_I2S3_Init+0x44>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_I2S3_Init+0x44>)
 80012dc:	2203      	movs	r2, #3
 80012de:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_I2S3_Init+0x44>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_I2S3_Init+0x44>)
 80012e8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80012ec:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_I2S3_Init+0x44>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_I2S3_Init+0x44>)
 80012f6:	f003 fcb9 	bl	8004c6c <HAL_I2S_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2S3_Init+0x40>
  {
    Error_Handler();
 8001300:	f000 f954 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000254 	.word	0x20000254
 800130c:	40003c00 	.word	0x40003c00

08001310 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <MX_LPUART1_UART_Init+0x90>)
 8001318:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001342:	2200      	movs	r2, #0
 8001344:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001348:	2200      	movs	r2, #0
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 800134e:	2200      	movs	r2, #0
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001352:	4812      	ldr	r0, [pc, #72]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001354:	f005 fc90 	bl	8006c78 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f925 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001362:	2100      	movs	r1, #0
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001366:	f006 f9fb 	bl	8007760 <HAL_UARTEx_SetTxFifoThreshold>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001370:	f000 f91c 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001374:	2100      	movs	r1, #0
 8001376:	4809      	ldr	r0, [pc, #36]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001378:	f006 fa30 	bl	80077dc <HAL_UARTEx_SetRxFifoThreshold>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001382:	f000 f913 	bl	80015ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_LPUART1_UART_Init+0x8c>)
 8001388:	f006 f9b1 	bl	80076ee <HAL_UARTEx_DisableFifoMode>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001392:	f000 f90b 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000290 	.word	0x20000290
 80013a0:	40008000 	.word	0x40008000
 80013a4:	00000000 	.word	0x00000000

080013a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013b8:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_TIM6_Init+0x98>)
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <MX_TIM6_Init+0x9c>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_TIM6_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_TIM6_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_TIM6_Init+0x98>)
 80013cc:	f640 7218 	movw	r2, #3864	; 0xf18
 80013d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_TIM6_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <MX_TIM6_Init+0x98>)
 80013da:	f005 fa75 	bl	80068c8 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013e4:	f000 f8e2 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013e8:	2320      	movs	r3, #32
 80013ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <MX_TIM6_Init+0x98>)
 80013f6:	f005 fbbd 	bl	8006b74 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001400:	f000 f8d4 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_TIM6_Init+0xa0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f857 	bl	80004bc <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	a109      	add	r1, pc, #36	; (adr r1, 8001438 <MX_TIM6_Init+0x90>)
 8001414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001418:	f7ff f9e4 	bl	80007e4 <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f7ff fac6 	bl	80009b4 <__aeabi_d2uiz>
 8001428:	4603      	mov	r3, r0
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <MX_TIM6_Init+0x98>)
 800142c:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	00000000 	.word	0x00000000
 800143c:	41a443fd 	.word	0x41a443fd
 8001440:	20000324 	.word	0x20000324
 8001444:	40001000 	.word	0x40001000
 8001448:	08007afc 	.word	0x08007afc

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_DMA_Init+0x60>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <MX_DMA_Init+0x60>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6493      	str	r3, [r2, #72]	; 0x48
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_DMA_Init+0x60>)
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_DMA_Init+0x60>)
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <MX_DMA_Init+0x60>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6493      	str	r3, [r2, #72]	; 0x48
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_DMA_Init+0x60>)
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	200b      	movs	r0, #11
 8001488:	f001 ff89 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800148c:	200b      	movs	r0, #11
 800148e:	f001 ffa0 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	200c      	movs	r0, #12
 8001498:	f001 ff81 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800149c:	200c      	movs	r0, #12
 800149e:	f001 ff98 	bl	80033d2 <HAL_NVIC_EnableIRQ>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	4a35      	ldr	r2, [pc, #212]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e2:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <MX_GPIO_Init+0xf0>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <MX_GPIO_Init+0xf0>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <MX_GPIO_Init+0xf0>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <MX_GPIO_Init+0xf0>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_GPIO_Init+0xf0>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f002 feb4 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2107      	movs	r1, #7
 8001538:	481a      	ldr	r0, [pc, #104]	; (80015a4 <MX_GPIO_Init+0xf4>)
 800153a:	f002 feaf 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001544:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	4814      	ldr	r0, [pc, #80]	; (80015a8 <MX_GPIO_Init+0xf8>)
 8001556:	f002 fd1f 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 800155a:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001560:	2301      	movs	r3, #1
 8001562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001576:	f002 fd0f 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegClk_Pin ShiftRegData_Pin ShiftRegEn_Pin */
  GPIO_InitStruct.Pin = ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin;
 800157a:	2307      	movs	r3, #7
 800157c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_GPIO_Init+0xf4>)
 8001592:	f002 fd01 	bl	8003f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_MspInit+0x44>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x44>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015ee:	f003 fdeb 	bl	80051c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b09a      	sub	sp, #104	; 0x68
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2244      	movs	r2, #68	; 0x44
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fa1b 	bl	8007a5c <memset>
  if(hadc->Instance==ADC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800162e:	d160      	bne.n	80016f2 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001634:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001636:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4618      	mov	r0, r3
 8001642:	f004 faff 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800164c:	f7ff ffae 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_ADC_MspInit+0xfc>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a29      	ldr	r2, [pc, #164]	; (80016fc <HAL_ADC_MspInit+0xfc>)
 8001656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_ADC_MspInit+0xfc>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_ADC_MspInit+0xfc>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_ADC_MspInit+0xfc>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_ADC_MspInit+0xfc>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 8001680:	2301      	movs	r3, #1
 8001682:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f002 fc7f 	bl	8003f98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_ADC_MspInit+0x100>)
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_ADC_MspInit+0x104>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016a2:	2205      	movs	r2, #5
 80016a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016c8:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016ca:	2220      	movs	r2, #32
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016d0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80016d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016d8:	f002 f9ec 	bl	8003ab4 <HAL_DMA_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80016e2:	f7ff ff63 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_ADC_MspInit+0x100>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	3768      	adds	r7, #104	; 0x68
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	200000f0 	.word	0x200000f0
 8001704:	40020008 	.word	0x40020008

08001708 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a2b      	ldr	r2, [pc, #172]	; (80017d4 <HAL_DAC_MspInit+0xcc>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d150      	bne.n	80017cc <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_DAC_MspInit+0xd0>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <HAL_DAC_MspInit+0xd0>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_DAC_MspInit+0xd0>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_DAC_MspInit+0xd0>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_DAC_MspInit+0xd0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_DAC_MspInit+0xd0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800175a:	2310      	movs	r3, #16
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175e:	2303      	movs	r3, #3
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f002 fc12 	bl	8003f98 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001774:	4b19      	ldr	r3, [pc, #100]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 8001776:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <HAL_DAC_MspInit+0xd8>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 800177c:	2206      	movs	r2, #6
 800177e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 8001782:	2210      	movs	r2, #16
 8001784:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 8001794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001798:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 800179c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 80017a4:	2220      	movs	r2, #32
 80017a6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 80017aa:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80017ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 80017b2:	f002 f97f 	bl	8003ab4 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80017bc:	f7ff fef6 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <HAL_DAC_MspInit+0xd4>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	50000800 	.word	0x50000800
 80017d8:	40021000 	.word	0x40021000
 80017dc:	20000164 	.word	0x20000164
 80017e0:	4002001c 	.word	0x4002001c

080017e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09a      	sub	sp, #104	; 0x68
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2244      	movs	r2, #68	; 0x44
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f006 f929 	bl	8007a5c <memset>
  if(hi2c->Instance==I2C1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_I2C_MspInit+0xa8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d136      	bne.n	8001882 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001814:	2340      	movs	r3, #64	; 0x40
 8001816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fa0f 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f7ff febe 	bl	80015ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_I2C_MspInit+0xac>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	4a16      	ldr	r2, [pc, #88]	; (8001890 <HAL_I2C_MspInit+0xac>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_I2C_MspInit+0xac>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001848:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184e:	2312      	movs	r3, #18
 8001850:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800185a:	2304      	movs	r3, #4
 800185c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001862:	4619      	mov	r1, r3
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <HAL_I2C_MspInit+0xb0>)
 8001866:	f002 fb97 	bl	8003f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_I2C_MspInit+0xac>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_I2C_MspInit+0xac>)
 8001870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_I2C_MspInit+0xac>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3768      	adds	r7, #104	; 0x68
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40005400 	.word	0x40005400
 8001890:	40021000 	.word	0x40021000
 8001894:	48000400 	.word	0x48000400

08001898 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b09e      	sub	sp, #120	; 0x78
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	2244      	movs	r2, #68	; 0x44
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 f8cf 	bl	8007a5c <memset>
  if(hi2s->Instance==SPI2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <HAL_I2S_MspInit+0x160>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d138      	bne.n	800193a <HAL_I2S_MspInit+0xa2>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018cc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	4618      	mov	r0, r3
 80018d8:	f004 f9b4 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80018e2:	f7ff fe63 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018e6:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_I2S_MspInit+0x164>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a44      	ldr	r2, [pc, #272]	; (80019fc <HAL_I2S_MspInit+0x164>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
 80018f2:	4b42      	ldr	r3, [pc, #264]	; (80019fc <HAL_I2S_MspInit+0x164>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	4a3e      	ldr	r2, [pc, #248]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <HAL_I2S_MspInit+0x164>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001916:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800191a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001928:	2305      	movs	r3, #5
 800192a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001930:	4619      	mov	r1, r3
 8001932:	4833      	ldr	r0, [pc, #204]	; (8001a00 <HAL_I2S_MspInit+0x168>)
 8001934:	f002 fb30 	bl	8003f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001938:	e05a      	b.n	80019f0 <HAL_I2S_MspInit+0x158>
  else if(hi2s->Instance==SPI3)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a31      	ldr	r2, [pc, #196]	; (8001a04 <HAL_I2S_MspInit+0x16c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d155      	bne.n	80019f0 <HAL_I2S_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001948:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 800194a:	2300      	movs	r3, #0
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	4618      	mov	r0, r3
 8001954:	f004 f976 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2S_MspInit+0xca>
      Error_Handler();
 800195e:	f7ff fe25 	bl	80015ac <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	4a25      	ldr	r2, [pc, #148]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800196c:	6593      	str	r3, [r2, #88]	; 0x58
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_I2S_MspInit+0x164>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a19      	ldr	r2, [pc, #100]	; (80019fc <HAL_I2S_MspInit+0x164>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_I2S_MspInit+0x164>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019bc:	2306      	movs	r3, #6
 80019be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019c4:	4619      	mov	r1, r3
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ca:	f002 fae5 	bl	8003f98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80019ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019e0:	2306      	movs	r3, #6
 80019e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <HAL_I2S_MspInit+0x170>)
 80019ec:	f002 fad4 	bl	8003f98 <HAL_GPIO_Init>
}
 80019f0:	bf00      	nop
 80019f2:	3778      	adds	r7, #120	; 0x78
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40003800 	.word	0x40003800
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48000400 	.word	0x48000400
 8001a04:	40003c00 	.word	0x40003c00
 8001a08:	48000800 	.word	0x48000800

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b09a      	sub	sp, #104	; 0x68
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2244      	movs	r2, #68	; 0x44
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f006 f815 	bl	8007a5c <memset>
  if(huart->Instance==LPUART1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_UART_MspInit+0xa8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d136      	bne.n	8001aaa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a3c:	2320      	movs	r3, #32
 8001a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 f8fb 	bl	8005c44 <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a54:	f7ff fdaa 	bl	80015ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_UART_MspInit+0xac>)
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_UART_MspInit+0xac>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_UART_MspInit+0xac>)
 8001a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_UART_MspInit+0xac>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_UART_MspInit+0xac>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_UART_MspInit+0xac>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa6:	f002 fa77 	bl	8003f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3768      	adds	r7, #104	; 0x68
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40008000 	.word	0x40008000
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_TIM_Base_MspInit+0x38>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d10b      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ad4:	f043 0310 	orr.w	r3, r3, #16
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_TIM_Base_MspInit+0x3c>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40001000 	.word	0x40001000
 8001af8:	40021000 	.word	0x40021000

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b00:	e7fe      	b.n	8001b00 <NMI_Handler+0x4>

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b48:	f000 f8da 	bl	8001d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <DMA1_Channel1_IRQHandler+0x10>)
 8001b56:	f002 f8d0 	bl	8003cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200000f0 	.word	0x200000f0

08001b64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA1_Channel2_IRQHandler+0x10>)
 8001b6a:	f002 f8c6 	bl	8003cfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000164 	.word	0x20000164

08001b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba8:	f005 ff70 	bl	8007a8c <__errno>
 8001bac:	4603      	mov	r3, r0
 8001bae:	220c      	movs	r2, #12
 8001bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bca:	68fb      	ldr	r3, [r7, #12]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20008000 	.word	0x20008000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	20000578 	.word	0x20000578
 8001be0:	200006c8 	.word	0x200006c8

08001be4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <SystemInit+0x20>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <SystemInit+0x20>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c0a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c0c:	f7ff ffea 	bl	8001be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	; (8001c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <LoopForever+0xe>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	; (8001c54 <LoopForever+0x16>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f005 ff2f 	bl	8007a98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3a:	f7ff f995 	bl	8000f68 <main>

08001c3e <LoopForever>:

LoopForever:
    b LoopForever
 8001c3e:	e7fe      	b.n	8001c3e <LoopForever>
  ldr   r0, =_estack
 8001c40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c4c:	08007b50 	.word	0x08007b50
  ldr r2, =_sbss
 8001c50:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c54:	200006c8 	.word	0x200006c8

08001c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC1_2_IRQHandler>

08001c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f001 fb8f 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f80e 	bl	8001c8c <HAL_InitTick>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	e001      	b.n	8001c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c7c:	f7ff fc9c 	bl	80015b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c80:	79fb      	ldrb	r3, [r7, #7]

}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_InitTick+0x68>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d022      	beq.n	8001ce6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ca0:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_InitTick+0x6c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_InitTick+0x68>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fb9a 	bl	80033ee <HAL_SYSTICK_Config>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10f      	bne.n	8001ce0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	d809      	bhi.n	8001cda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	f04f 30ff 	mov.w	r0, #4294967295
 8001cce:	f001 fb66 	bl	800339e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_InitTick+0x70>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	e007      	b.n	8001cea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e004      	b.n	8001cea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
 8001ce4:	e001      	b.n	8001cea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000000c 	.word	0x2000000c
 8001cf8:	20000004 	.word	0x20000004
 8001cfc:	20000008 	.word	0x20000008

08001d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_IncTick+0x1c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x20>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_IncTick+0x1c>)
 8001d10:	6013      	str	r3, [r2, #0]
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	2000057c 	.word	0x2000057c
 8001d20:	2000000c 	.word	0x2000000c

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	2000057c 	.word	0x2000057c

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d004      	beq.n	8001d60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_Delay+0x40>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d60:	bf00      	nop
 8001d62:	f7ff ffdf 	bl	8001d24 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d8f7      	bhi.n	8001d62 <HAL_Delay+0x26>
  {
  }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	609a      	str	r2, [r3, #8]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3360      	adds	r3, #96	; 0x60
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <LL_ADC_SetOffset+0x44>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e20:	bf00      	nop
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	03fff000 	.word	0x03fff000

08001e30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3360      	adds	r3, #96	; 0x60
 8001e3e:	461a      	mov	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3360      	adds	r3, #96	; 0x60
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b087      	sub	sp, #28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3360      	adds	r3, #96	; 0x60
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3360      	adds	r3, #96	; 0x60
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	615a      	str	r2, [r3, #20]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b087      	sub	sp, #28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3330      	adds	r3, #48	; 0x30
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	4413      	add	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	211f      	movs	r1, #31
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	f003 011f 	and.w	r1, r3, #31
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	431a      	orrs	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3314      	adds	r3, #20
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	0e5b      	lsrs	r3, r3, #25
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	4413      	add	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0d1b      	lsrs	r3, r3, #20
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2107      	movs	r1, #7
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	0d1b      	lsrs	r3, r3, #20
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0318 	and.w	r3, r3, #24
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <LL_ADC_SetChannelSingleDiff+0x44>)
 800201c:	40d9      	lsrs	r1, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	400b      	ands	r3, r1
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	431a      	orrs	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	0007ffff 	.word	0x0007ffff

08002040 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 031f 	and.w	r3, r3, #31
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800206c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6093      	str	r3, [r2, #8]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002094:	d101      	bne.n	800209a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <LL_ADC_IsEnabled+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_ADC_IsEnabled+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002156:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215a:	f043 0204 	orr.w	r2, r3, #4
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	2b04      	cmp	r3, #4
 8002180:	d101      	bne.n	8002186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d101      	bne.n	80021ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e167      	b.n	80024a6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff fa0b 	bl	8001600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff3f 	bl	8002080 <LL_ADC_IsDeepPowerDownEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff25 	bl	800205c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff5a 	bl	80020d0 <LL_ADC_IsInternalRegulatorEnabled>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff ff3e 	bl	80020a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800222c:	4ba0      	ldr	r3, [pc, #640]	; (80024b0 <HAL_ADC_Init+0x2f4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	4aa0      	ldr	r2, [pc, #640]	; (80024b4 <HAL_ADC_Init+0x2f8>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002240:	e002      	b.n	8002248 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b01      	subs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f9      	bne.n	8002242 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff3c 	bl	80020d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10d      	bne.n	800227a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	f043 0210 	orr.w	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff75 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 8002284:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8100 	bne.w	8002494 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 80fc 	bne.w	8002494 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a4:	f043 0202 	orr.w	r2, r3, #2
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff35 	bl	8002120 <LL_ADC_IsEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d111      	bne.n	80022e0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022c0:	f7ff ff2e 	bl	8002120 <LL_ADC_IsEnabled>
 80022c4:	4604      	mov	r4, r0
 80022c6:	487c      	ldr	r0, [pc, #496]	; (80024b8 <HAL_ADC_Init+0x2fc>)
 80022c8:	f7ff ff2a 	bl	8002120 <LL_ADC_IsEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4323      	orrs	r3, r4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4619      	mov	r1, r3
 80022da:	4878      	ldr	r0, [pc, #480]	; (80024bc <HAL_ADC_Init+0x300>)
 80022dc:	f7ff fd50 	bl	8001d80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7f5b      	ldrb	r3, [r3, #29]
 80022e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	045b      	lsls	r3, r3, #17
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <HAL_ADC_Init+0x304>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	430b      	orrs	r3, r1
 800234a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff14 	bl	8002194 <LL_ADC_INJ_IsConversionOngoing>
 800236c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d16d      	bne.n	8002450 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d16a      	bne.n	8002450 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800237e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002386:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002396:	f023 0302 	bic.w	r3, r3, #2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d017      	beq.n	80023dc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6911      	ldr	r1, [r2, #16]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80023da:	e013      	b.n	8002404 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002400:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240a:	2b01      	cmp	r3, #1
 800240c:	d118      	bne.n	8002440 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800242a:	4311      	orrs	r1, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002430:	430a      	orrs	r2, r1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0201 	orr.w	r2, r2, #1
 800243c:	611a      	str	r2, [r3, #16]
 800243e:	e007      	b.n	8002450 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10c      	bne.n	8002472 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f023 010f 	bic.w	r1, r3, #15
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	1e5a      	subs	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
 8002470:	e007      	b.n	8002482 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 020f 	bic.w	r2, r2, #15
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	f023 0303 	bic.w	r3, r3, #3
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	65da      	str	r2, [r3, #92]	; 0x5c
 8002492:	e007      	b.n	80024a4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	f043 0210 	orr.w	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000004 	.word	0x20000004
 80024b4:	053e2d63 	.word	0x053e2d63
 80024b8:	50000100 	.word	0x50000100
 80024bc:	50000300 	.word	0x50000300
 80024c0:	fff04007 	.word	0xfff04007

080024c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d0:	4851      	ldr	r0, [pc, #324]	; (8002618 <HAL_ADC_Start_DMA+0x154>)
 80024d2:	f7ff fdb5 	bl	8002040 <LL_ADC_GetMultimode>
 80024d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fe46 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f040 808f 	bne.w	8002608 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_Start_DMA+0x34>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e08a      	b.n	800260e <HAL_ADC_Start_DMA+0x14a>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d002      	beq.n	8002512 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b09      	cmp	r3, #9
 8002510:	d173      	bne.n	80025fa <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fc84 	bl	8002e20 <ADC_Enable>
 8002518:	4603      	mov	r3, r0
 800251a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800251c:	7dfb      	ldrb	r3, [r7, #23]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d166      	bne.n	80025f0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a38      	ldr	r2, [pc, #224]	; (800261c <HAL_ADC_Start_DMA+0x158>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d002      	beq.n	8002546 <HAL_ADC_Start_DMA+0x82>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	e001      	b.n	800254a <HAL_ADC_Start_DMA+0x86>
 8002546:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	4293      	cmp	r3, r2
 8002550:	d002      	beq.n	8002558 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	f023 0206 	bic.w	r2, r3, #6
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	661a      	str	r2, [r3, #96]	; 0x60
 800257c:	e002      	b.n	8002584 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	4a25      	ldr	r2, [pc, #148]	; (8002620 <HAL_ADC_Start_DMA+0x15c>)
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	4a24      	ldr	r2, [pc, #144]	; (8002624 <HAL_ADC_Start_DMA+0x160>)
 8002592:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_ADC_Start_DMA+0x164>)
 800259a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	221c      	movs	r2, #28
 80025a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0210 	orr.w	r2, r2, #16
 80025ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3340      	adds	r3, #64	; 0x40
 80025d6:	4619      	mov	r1, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f001 fb12 	bl	8003c04 <HAL_DMA_Start_IT>
 80025e0:	4603      	mov	r3, r0
 80025e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fdac 	bl	8002146 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025ee:	e00d      	b.n	800260c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80025f8:	e008      	b.n	800260c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002606:	e001      	b.n	800260c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002608:	2302      	movs	r3, #2
 800260a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800260c:	7dfb      	ldrb	r3, [r7, #23]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	50000300 	.word	0x50000300
 800261c:	50000100 	.word	0x50000100
 8002620:	08002f2d 	.word	0x08002f2d
 8002624:	08003005 	.word	0x08003005
 8002628:	08003021 	.word	0x08003021

0800262c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b0b6      	sub	sp, #216	; 0xd8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x22>
 800265e:	2302      	movs	r3, #2
 8002660:	e3c8      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x7b4>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fd7d 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 83ad 	bne.w	8002dd6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	f7ff fc5e 	bl	8001f4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fd6b 	bl	800216e <LL_ADC_REG_IsConversionOngoing>
 8002698:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fd77 	bl	8002194 <LL_ADC_INJ_IsConversionOngoing>
 80026a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 81d9 	bne.w	8002a66 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 81d4 	bne.w	8002a66 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026c6:	d10f      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7ff fc65 	bl	8001fa2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fc0c 	bl	8001efe <LL_ADC_SetSamplingTimeCommonConfig>
 80026e6:	e00e      	b.n	8002706 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f7ff fc54 	bl	8001fa2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fbfc 	bl	8001efe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d022      	beq.n	800276e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002738:	f7ff fb56 	bl	8001de8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6919      	ldr	r1, [r3, #16]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	461a      	mov	r2, r3
 800274a:	f7ff fba2 	bl	8001e92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x124>
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	e000      	b.n	8002766 <HAL_ADC_ConfigChannel+0x126>
 8002764:	2300      	movs	r3, #0
 8002766:	461a      	mov	r2, r3
 8002768:	f7ff fbae 	bl	8001ec8 <LL_ADC_SetOffsetSaturation>
 800276c:	e17b      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fb5b 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <HAL_ADC_ConfigChannel+0x15a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2100      	movs	r1, #0
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fb50 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	e01e      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x198>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fb45 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e004      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80027cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1b0>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	e018      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1e2>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800280c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e004      	b.n	8002822 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002822:	429a      	cmp	r2, r3
 8002824:	d106      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fb14 	bl	8001e5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff faf8 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x220>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff faed 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	e01e      	b.n	800289e <HAL_ADC_ConfigChannel+0x25e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fae2 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800287e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e004      	b.n	800289c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x276>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	e018      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x2a8>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80028da:	2320      	movs	r3, #32
 80028dc:	e004      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80028de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d106      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2101      	movs	r1, #1
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fab1 	bl	8001e5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2102      	movs	r1, #2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fa95 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x2e6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2102      	movs	r1, #2
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fa8a 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	0e9b      	lsrs	r3, r3, #26
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	e01e      	b.n	8002964 <HAL_ADC_ConfigChannel+0x324>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fa7f 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800294c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002954:	2320      	movs	r3, #32
 8002956:	e004      	b.n	8002962 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002958:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_ConfigChannel+0x33c>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	e016      	b.n	80029aa <HAL_ADC_ConfigChannel+0x36a>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800298e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800299c:	2320      	movs	r3, #32
 800299e:	e004      	b.n	80029aa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d106      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	2102      	movs	r1, #2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fa50 	bl	8001e5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2103      	movs	r1, #3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fa34 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x3a8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2103      	movs	r1, #3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fa29 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	e017      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x3d8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2103      	movs	r1, #3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fa1e 	bl	8001e30 <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e003      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x3f0>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0e9b      	lsrs	r3, r3, #26
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	e011      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x414>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d106      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2103      	movs	r1, #3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f9fb 	bl	8001e5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fb58 	bl	8002120 <LL_ADC_IsEnabled>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 8140 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f7ff fab7 	bl	8001ff8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	4a8f      	ldr	r2, [pc, #572]	; (8002ccc <HAL_ADC_ConfigChannel+0x68c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	f040 8131 	bne.w	8002cf8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x47e>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	0e9b      	lsrs	r3, r3, #26
 8002aac:	3301      	adds	r3, #1
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	bf94      	ite	ls
 8002ab6:	2301      	movls	r3, #1
 8002ab8:	2300      	movhi	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e019      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x4b2>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ace:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2b09      	cmp	r3, #9
 8002aea:	bf94      	ite	ls
 8002aec:	2301      	movls	r3, #1
 8002aee:	2300      	movhi	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d079      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x4d2>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	3301      	adds	r3, #1
 8002b0a:	069b      	lsls	r3, r3, #26
 8002b0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b10:	e015      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x4fe>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b22:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	069b      	lsls	r3, r3, #26
 8002b3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x51e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	e017      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x54e>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b66:	fa93 f3a3 	rbit	r3, r3
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002b76:	2320      	movs	r3, #32
 8002b78:	e003      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7c:	fab3 f383 	clz	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	ea42 0103 	orr.w	r1, r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x574>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	0e9b      	lsrs	r3, r3, #26
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f003 021f 	and.w	r2, r3, #31
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	e018      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x5a6>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	e003      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd2:	fab3 f383 	clz	r3, r3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f003 021f 	and.w	r2, r3, #31
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be6:	430b      	orrs	r3, r1
 8002be8:	e081      	b.n	8002cee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x5c6>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	069b      	lsls	r3, r3, #26
 8002c00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c04:	e015      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x5f2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e003      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	069b      	lsls	r3, r3, #26
 8002c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x612>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0e9b      	lsrs	r3, r3, #26
 8002c44:	3301      	adds	r3, #1
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	e017      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x642>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	ea42 0103 	orr.w	r1, r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x66e>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	0e9b      	lsrs	r3, r3, #26
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b1e      	subs	r3, #30
 8002ca6:	051b      	lsls	r3, r3, #20
 8002ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cac:	e01e      	b.n	8002cec <HAL_ADC_ConfigChannel+0x6ac>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	613b      	str	r3, [r7, #16]
  return result;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d104      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e006      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x698>
 8002cca:	bf00      	nop
 8002ccc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b1e      	subs	r3, #30
 8002ce6:	051b      	lsls	r3, r3, #20
 8002ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f7ff f955 	bl	8001fa2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_ADC_ConfigChannel+0x7bc>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d071      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d04:	483e      	ldr	r0, [pc, #248]	; (8002e00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d06:	f7ff f861 	bl	8001dcc <LL_ADC_GetCommonPathInternalCh>
 8002d0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d004      	beq.n	8002d22 <HAL_ADC_ConfigChannel+0x6e2>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d127      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d121      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d36:	d157      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d40:	4619      	mov	r1, r3
 8002d42:	482f      	ldr	r0, [pc, #188]	; (8002e00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d44:	f7ff f82f 	bl	8001da6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d48:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	099b      	lsrs	r3, r3, #6
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d62:	e002      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f9      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d70:	e03a      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_ADC_ConfigChannel+0x7d4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d113      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10d      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d02a      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4818      	ldr	r0, [pc, #96]	; (8002e00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d9e:	f7ff f802 	bl	8001da6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da2:	e021      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_ADC_ConfigChannel+0x7dc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d11c      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d011      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dcc:	4619      	mov	r1, r3
 8002dce:	480c      	ldr	r0, [pc, #48]	; (8002e00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dd0:	f7fe ffe9 	bl	8001da6 <LL_ADC_SetCommonPathInternalCh>
 8002dd4:	e008      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002df0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	37d8      	adds	r7, #216	; 0xd8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	80080000 	.word	0x80080000
 8002e00:	50000300 	.word	0x50000300
 8002e04:	c3210000 	.word	0xc3210000
 8002e08:	90c00010 	.word	0x90c00010
 8002e0c:	20000004 	.word	0x20000004
 8002e10:	053e2d63 	.word	0x053e2d63
 8002e14:	c7520000 	.word	0xc7520000
 8002e18:	50000100 	.word	0x50000100
 8002e1c:	cb840000 	.word	0xcb840000

08002e20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff f975 	bl	8002120 <LL_ADC_IsEnabled>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d169      	bne.n	8002f10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <ADC_Enable+0xfc>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	f043 0210 	orr.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e055      	b.n	8002f12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff f944 	bl	80020f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e70:	482b      	ldr	r0, [pc, #172]	; (8002f20 <ADC_Enable+0x100>)
 8002e72:	f7fe ffab 	bl	8001dcc <LL_ADC_GetCommonPathInternalCh>
 8002e76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e80:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <ADC_Enable+0x104>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <ADC_Enable+0x108>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	099b      	lsrs	r3, r3, #6
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e9a:	e002      	b.n	8002ea2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f9      	bne.n	8002e9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ea8:	f7fe ff3c 	bl	8001d24 <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eae:	e028      	b.n	8002f02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f933 	bl	8002120 <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f917 	bl	80020f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eca:	f7fe ff2b 	bl	8001d24 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d914      	bls.n	8002f02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d00d      	beq.n	8002f02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	f043 0210 	orr.w	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e007      	b.n	8002f12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d1cf      	bne.n	8002eb0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	8000003f 	.word	0x8000003f
 8002f20:	50000300 	.word	0x50000300
 8002f24:	20000004 	.word	0x20000004
 8002f28:	053e2d63 	.word	0x053e2d63

08002f2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d14b      	bne.n	8002fde <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d021      	beq.n	8002fa4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe ffdd 	bl	8001f24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d032      	beq.n	8002fd6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d12b      	bne.n	8002fd6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11f      	bne.n	8002fd6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fa2:	e018      	b.n	8002fd6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d111      	bne.n	8002fd6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7fd ff9e 	bl	8000f18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fdc:	e00e      	b.n	8002ffc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fb1e 	bl	800262c <HAL_ADC_ErrorCallback>
}
 8002ff0:	e004      	b.n	8002ffc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7fd ff5a 	bl	8000ecc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	f043 0204 	orr.w	r2, r3, #4
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff faf0 	bl	800262c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <LL_ADC_IsEnabled>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <LL_ADC_IsEnabled+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_IsEnabled+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_REG_IsConversionOngoing>:
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d101      	bne.n	8003092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b0a1      	sub	sp, #132	; 0x84
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e08b      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030c6:	2300      	movs	r3, #0
 80030c8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030ca:	2300      	movs	r3, #0
 80030cc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d6:	d102      	bne.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030d8:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	e001      	b.n	80030e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e06a      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff ffb9 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 8003108:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff ffb3 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d14c      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800311a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311c:	2b00      	cmp	r3, #0
 800311e:	d149      	bne.n	80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003120:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003122:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d028      	beq.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800312c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800313e:	035b      	lsls	r3, r3, #13
 8003140:	430b      	orrs	r3, r1
 8003142:	431a      	orrs	r2, r3
 8003144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003146:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003148:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800314c:	f7ff ff82 	bl	8003054 <LL_ADC_IsEnabled>
 8003150:	4604      	mov	r4, r0
 8003152:	4823      	ldr	r0, [pc, #140]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003154:	f7ff ff7e 	bl	8003054 <LL_ADC_IsEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	4323      	orrs	r3, r4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d133      	bne.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003168:	f023 030f 	bic.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	6811      	ldr	r1, [r2, #0]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	6892      	ldr	r2, [r2, #8]
 8003174:	430a      	orrs	r2, r1
 8003176:	431a      	orrs	r2, r3
 8003178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800317c:	e024      	b.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800317e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003188:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800318a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800318e:	f7ff ff61 	bl	8003054 <LL_ADC_IsEnabled>
 8003192:	4604      	mov	r4, r0
 8003194:	4812      	ldr	r0, [pc, #72]	; (80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003196:	f7ff ff5d 	bl	8003054 <LL_ADC_IsEnabled>
 800319a:	4603      	mov	r3, r0
 800319c:	4323      	orrs	r3, r4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d112      	bne.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031aa:	f023 030f 	bic.w	r3, r3, #15
 80031ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80031b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031b2:	e009      	b.n	80031c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80031c6:	e000      	b.n	80031ca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3784      	adds	r7, #132	; 0x84
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}
 80031de:	bf00      	nop
 80031e0:	50000100 	.word	0x50000100
 80031e4:	50000300 	.word	0x50000300

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	60d3      	str	r3, [r2, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <__NVIC_EnableIRQ+0x38>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003354:	d301      	bcc.n	800335a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003356:	2301      	movs	r3, #1
 8003358:	e00f      	b.n	800337a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <SysTick_Config+0x40>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003362:	210f      	movs	r1, #15
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	f7ff ff8e 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <SysTick_Config+0x40>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <SysTick_Config+0x40>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff29 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033ac:	f7ff ff40 	bl	8003230 <__NVIC_GetPriorityGrouping>
 80033b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff90 	bl	80032dc <NVIC_EncodePriority>
 80033bc:	4602      	mov	r2, r0
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff5f 	bl	8003288 <__NVIC_SetPriority>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff33 	bl	800324c <__NVIC_EnableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffa4 	bl	8003344 <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e014      	b.n	8003442 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	791b      	ldrb	r3, [r3, #4]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d105      	bne.n	800342e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fe f96d 	bl	8001708 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b2      	b.n	80035ca <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	795b      	ldrb	r3, [r3, #5]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_DAC_Start_DMA+0x24>
 800346c:	2302      	movs	r3, #2
 800346e:	e0ac      	b.n	80035ca <HAL_DAC_Start_DMA+0x17e>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2202      	movs	r2, #2
 800347a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d129      	bne.n	80034d6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4a53      	ldr	r2, [pc, #332]	; (80035d4 <HAL_DAC_Start_DMA+0x188>)
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_DAC_Start_DMA+0x18c>)
 8003490:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4a51      	ldr	r2, [pc, #324]	; (80035dc <HAL_DAC_Start_DMA+0x190>)
 8003498:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_DAC_Start_DMA+0x6c>
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d005      	beq.n	80034c2 <HAL_DAC_Start_DMA+0x76>
 80034b6:	e009      	b.n	80034cc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	61bb      	str	r3, [r7, #24]
        break;
 80034c0:	e033      	b.n	800352a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	61bb      	str	r3, [r7, #24]
        break;
 80034ca:	e02e      	b.n	800352a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3310      	adds	r3, #16
 80034d2:	61bb      	str	r3, [r7, #24]
        break;
 80034d4:	e029      	b.n	800352a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4a41      	ldr	r2, [pc, #260]	; (80035e0 <HAL_DAC_Start_DMA+0x194>)
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <HAL_DAC_Start_DMA+0x198>)
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4a3f      	ldr	r2, [pc, #252]	; (80035e8 <HAL_DAC_Start_DMA+0x19c>)
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034fc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_DAC_Start_DMA+0xc0>
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	2b04      	cmp	r3, #4
 8003508:	d005      	beq.n	8003516 <HAL_DAC_Start_DMA+0xca>
 800350a:	e009      	b.n	8003520 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e009      	b.n	800352a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3318      	adds	r3, #24
 800351c:	61bb      	str	r3, [r7, #24]
        break;
 800351e:	e004      	b.n	800352a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	331c      	adds	r3, #28
 8003526:	61bb      	str	r3, [r7, #24]
        break;
 8003528:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6898      	ldr	r0, [r3, #8]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	f000 fb5b 	bl	8003c04 <HAL_DMA_Start_IT>
 800354e:	4603      	mov	r3, r0
 8003550:	77fb      	strb	r3, [r7, #31]
 8003552:	e010      	b.n	8003576 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003562:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68d8      	ldr	r0, [r3, #12]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	f000 fb49 	bl	8003c04 <HAL_DMA_Start_IT>
 8003572:	4603      	mov	r3, r0
 8003574:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800357c:	7ffb      	ldrb	r3, [r7, #31]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11c      	bne.n	80035bc <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2201      	movs	r2, #1
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_DAC_Start_DMA+0x1a0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <HAL_DAC_Start_DMA+0x1a4>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	3301      	adds	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80035ac:	e002      	b.n	80035b4 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f9      	bne.n	80035ae <HAL_DAC_Start_DMA+0x162>
 80035ba:	e005      	b.n	80035c8 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	080039a1 	.word	0x080039a1
 80035d8:	080039c3 	.word	0x080039c3
 80035dc:	080039df 	.word	0x080039df
 80035e0:	08003a49 	.word	0x08003a49
 80035e4:	08003a6b 	.word	0x08003a6b
 80035e8:	08003a87 	.word	0x08003a87
 80035ec:	20000004 	.word	0x20000004
 80035f0:	053e2d63 	.word	0x053e2d63

080035f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_DAC_ConfigChannel+0x1c>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e19e      	b.n	800398e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	795b      	ldrb	r3, [r3, #5]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_DAC_ConfigChannel+0x2c>
 8003658:	2302      	movs	r3, #2
 800365a:	e198      	b.n	800398e <HAL_DAC_ConfigChannel+0x35e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2202      	movs	r2, #2
 8003666:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d17a      	bne.n	8003766 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003670:	f7fe fb58 	bl	8001d24 <HAL_GetTick>
 8003674:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d13d      	bne.n	80036f8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800367c:	e018      	b.n	80036b0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800367e:	f7fe fb51 	bl	8001d24 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d911      	bls.n	80036b0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f043 0208 	orr.w	r2, r3, #8
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2203      	movs	r2, #3
 80036aa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e16e      	b.n	800398e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1df      	bne.n	800367e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40
 80036c8:	e020      	b.n	800370c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036ca:	f7fe fb2b 	bl	8001d24 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d90f      	bls.n	80036f8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da0a      	bge.n	80036f8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f043 0208 	orr.w	r2, r3, #8
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2203      	movs	r2, #3
 80036f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e14a      	b.n	800398e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	2b00      	cmp	r3, #0
 8003700:	dbe3      	blt.n	80036ca <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	ea02 0103 	and.w	r1, r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	21ff      	movs	r1, #255	; 0xff
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	ea02 0103 	and.w	r1, r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	409a      	lsls	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d11d      	bne.n	80037aa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	221f      	movs	r2, #31
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	4013      	ands	r3, r2
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0310 	and.w	r3, r3, #16
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	4313      	orrs	r3, r2
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2207      	movs	r2, #7
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c2:	4013      	ands	r3, r2
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	623b      	str	r3, [r7, #32]
 80037d2:	e00f      	b.n	80037f4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d102      	bne.n	80037e2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80037dc:	2301      	movs	r3, #1
 80037de:	623b      	str	r3, [r7, #32]
 80037e0:	e008      	b.n	80037f4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80037ea:	2301      	movs	r3, #1
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	e001      	b.n	80037f4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	6a3a      	ldr	r2, [r7, #32]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003816:	4013      	ands	r3, r2
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	791b      	ldrb	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d102      	bne.n	8003828 <HAL_DAC_ConfigChannel+0x1f8>
 8003822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003826:	e000      	b.n	800382a <HAL_DAC_ConfigChannel+0x1fa>
 8003828:	2300      	movs	r3, #0
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003842:	4013      	ands	r3, r2
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	795b      	ldrb	r3, [r3, #5]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_DAC_ConfigChannel+0x224>
 800384e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003852:	e000      	b.n	8003856 <HAL_DAC_ConfigChannel+0x226>
 8003854:	2300      	movs	r3, #0
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d114      	bne.n	8003896 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800386c:	f002 f96c 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8003870:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4a48      	ldr	r2, [pc, #288]	; (8003998 <HAL_DAC_ConfigChannel+0x368>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d904      	bls.n	8003884 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	e00f      	b.n	80038a4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4a45      	ldr	r2, [pc, #276]	; (800399c <HAL_DAC_ConfigChannel+0x36c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d90a      	bls.n	80038a2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e006      	b.n	80038a4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	4313      	orrs	r3, r2
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
 80038a0:	e000      	b.n	80038a4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80038a2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	4313      	orrs	r3, r2
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	4013      	ands	r3, r2
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390e:	4313      	orrs	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	22c0      	movs	r2, #192	; 0xc0
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43da      	mvns	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	ea02 0103 	and.w	r1, r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800398c:	7ffb      	ldrb	r3, [r7, #31]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3728      	adds	r7, #40	; 0x28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	09896800 	.word	0x09896800
 800399c:	04c4b400 	.word	0x04c4b400

080039a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fe20 	bl	80035f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	711a      	strb	r2, [r3, #4]
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f7ff fe19 	bl	8003608 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff fe0f 	bl	800361c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	711a      	strb	r2, [r3, #4]
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f7ff ffd8 	bl	8003a0c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	711a      	strb	r2, [r3, #4]
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff ffd1 	bl	8003a20 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff ffc7 	bl	8003a34 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	711a      	strb	r2, [r3, #4]
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e08d      	b.n	8003be2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_DMA_Init+0x138>)
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d80f      	bhi.n	8003af2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b45      	ldr	r3, [pc, #276]	; (8003bf0 <HAL_DMA_Init+0x13c>)
 8003ada:	4413      	add	r3, r2
 8003adc:	4a45      	ldr	r2, [pc, #276]	; (8003bf4 <HAL_DMA_Init+0x140>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	009a      	lsls	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a42      	ldr	r2, [pc, #264]	; (8003bf8 <HAL_DMA_Init+0x144>)
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
 8003af0:	e00e      	b.n	8003b10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	4b40      	ldr	r3, [pc, #256]	; (8003bfc <HAL_DMA_Init+0x148>)
 8003afa:	4413      	add	r3, r2
 8003afc:	4a3d      	ldr	r2, [pc, #244]	; (8003bf4 <HAL_DMA_Init+0x140>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a3c      	ldr	r2, [pc, #240]	; (8003c00 <HAL_DMA_Init+0x14c>)
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f9b6 	bl	8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b70:	d102      	bne.n	8003b78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <HAL_DMA_Init+0x104>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d80c      	bhi.n	8003bb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9d6 	bl	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	e008      	b.n	8003bca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40020407 	.word	0x40020407
 8003bf0:	bffdfff8 	.word	0xbffdfff8
 8003bf4:	cccccccd 	.word	0xcccccccd
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	bffdfbf8 	.word	0xbffdfbf8
 8003c00:	40020400 	.word	0x40020400

08003c04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_DMA_Start_IT+0x20>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e066      	b.n	8003cf2 <HAL_DMA_Start_IT+0xee>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d155      	bne.n	8003ce4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f8fb 	bl	8003e58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 020e 	orr.w	r2, r2, #14
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e00f      	b.n	8003c9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0204 	bic.w	r2, r2, #4
 8003c8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 020a 	orr.w	r2, r2, #10
 8003c9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0201 	orr.w	r2, r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e005      	b.n	8003cf0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
 8003cee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d026      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x7a>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d021      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0204 	bic.w	r2, r2, #4
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f003 021f 	and.w	r2, r3, #31
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2104      	movs	r1, #4
 8003d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d071      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d72:	e06c      	b.n	8003e4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d02e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d029      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020a 	bic.w	r2, r2, #10
 8003dae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d038      	beq.n	8003e4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003de4:	e033      	b.n	8003e4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	2208      	movs	r2, #8
 8003df0:	409a      	lsls	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02a      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d025      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 020e 	bic.w	r2, r2, #14
 8003e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f202 	lsl.w	r2, r1, r2
 8003e26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
}
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f003 021f 	and.w	r2, r3, #31
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	2101      	movs	r1, #1
 8003e90:	fa01 f202 	lsl.w	r2, r1, r2
 8003e94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d108      	bne.n	8003eb8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eb6:	e007      	b.n	8003ec8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d802      	bhi.n	8003eee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e001      	b.n	8003ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ef0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	3b08      	subs	r3, #8
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	009a      	lsls	r2, r3, #2
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	461a      	mov	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2201      	movs	r2, #1
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	40020407 	.word	0x40020407
 8003f40:	40020800 	.word	0x40020800
 8003f44:	40020820 	.word	0x40020820
 8003f48:	cccccccd 	.word	0xcccccccd
 8003f4c:	40020880 	.word	0x40020880

08003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	1000823f 	.word	0x1000823f
 8003f94:	40020940 	.word	0x40020940

08003f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fa6:	e15a      	b.n	800425e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 814c 	beq.w	8004258 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d005      	beq.n	8003fd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d130      	bne.n	800403a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800400e:	2201      	movs	r2, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 0201 	and.w	r2, r3, #1
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b03      	cmp	r3, #3
 8004044:	d017      	beq.n	8004076 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	2203      	movs	r2, #3
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d123      	bne.n	80040ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	08da      	lsrs	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3208      	adds	r2, #8
 800408a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	220f      	movs	r2, #15
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	08da      	lsrs	r2, r3, #3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3208      	adds	r2, #8
 80040c4:	6939      	ldr	r1, [r7, #16]
 80040c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	2203      	movs	r2, #3
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	4013      	ands	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0203 	and.w	r2, r3, #3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80a6 	beq.w	8004258 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410c:	4b5b      	ldr	r3, [pc, #364]	; (800427c <HAL_GPIO_Init+0x2e4>)
 800410e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004110:	4a5a      	ldr	r2, [pc, #360]	; (800427c <HAL_GPIO_Init+0x2e4>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6613      	str	r3, [r2, #96]	; 0x60
 8004118:	4b58      	ldr	r3, [pc, #352]	; (800427c <HAL_GPIO_Init+0x2e4>)
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004124:	4a56      	ldr	r2, [pc, #344]	; (8004280 <HAL_GPIO_Init+0x2e8>)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	3302      	adds	r3, #2
 800412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004130:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	220f      	movs	r2, #15
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800414e:	d01f      	beq.n	8004190 <HAL_GPIO_Init+0x1f8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a4c      	ldr	r2, [pc, #304]	; (8004284 <HAL_GPIO_Init+0x2ec>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d019      	beq.n	800418c <HAL_GPIO_Init+0x1f4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a4b      	ldr	r2, [pc, #300]	; (8004288 <HAL_GPIO_Init+0x2f0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_GPIO_Init+0x1f0>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a4a      	ldr	r2, [pc, #296]	; (800428c <HAL_GPIO_Init+0x2f4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00d      	beq.n	8004184 <HAL_GPIO_Init+0x1ec>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a49      	ldr	r2, [pc, #292]	; (8004290 <HAL_GPIO_Init+0x2f8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <HAL_GPIO_Init+0x1e8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a48      	ldr	r2, [pc, #288]	; (8004294 <HAL_GPIO_Init+0x2fc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_GPIO_Init+0x1e4>
 8004178:	2305      	movs	r3, #5
 800417a:	e00a      	b.n	8004192 <HAL_GPIO_Init+0x1fa>
 800417c:	2306      	movs	r3, #6
 800417e:	e008      	b.n	8004192 <HAL_GPIO_Init+0x1fa>
 8004180:	2304      	movs	r3, #4
 8004182:	e006      	b.n	8004192 <HAL_GPIO_Init+0x1fa>
 8004184:	2303      	movs	r3, #3
 8004186:	e004      	b.n	8004192 <HAL_GPIO_Init+0x1fa>
 8004188:	2302      	movs	r3, #2
 800418a:	e002      	b.n	8004192 <HAL_GPIO_Init+0x1fa>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_GPIO_Init+0x1fa>
 8004190:	2300      	movs	r3, #0
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	f002 0203 	and.w	r2, r2, #3
 8004198:	0092      	lsls	r2, r2, #2
 800419a:	4093      	lsls	r3, r2
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a2:	4937      	ldr	r1, [pc, #220]	; (8004280 <HAL_GPIO_Init+0x2e8>)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	3302      	adds	r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b0:	4b39      	ldr	r3, [pc, #228]	; (8004298 <HAL_GPIO_Init+0x300>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041d4:	4a30      	ldr	r2, [pc, #192]	; (8004298 <HAL_GPIO_Init+0x300>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041da:	4b2f      	ldr	r3, [pc, #188]	; (8004298 <HAL_GPIO_Init+0x300>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041fe:	4a26      	ldr	r2, [pc, #152]	; (8004298 <HAL_GPIO_Init+0x300>)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004204:	4b24      	ldr	r3, [pc, #144]	; (8004298 <HAL_GPIO_Init+0x300>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_GPIO_Init+0x300>)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800422e:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <HAL_GPIO_Init+0x300>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004252:	4a11      	ldr	r2, [pc, #68]	; (8004298 <HAL_GPIO_Init+0x300>)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3301      	adds	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f ae9d 	bne.w	8003fa8 <HAL_GPIO_Init+0x10>
  }
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40021000 	.word	0x40021000
 8004280:	40010000 	.word	0x40010000
 8004284:	48000400 	.word	0x48000400
 8004288:	48000800 	.word	0x48000800
 800428c:	48000c00 	.word	0x48000c00
 8004290:	48001000 	.word	0x48001000
 8004294:	48001400 	.word	0x48001400
 8004298:	40010400 	.word	0x40010400

0800429c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
 80042a8:	4613      	mov	r3, r2
 80042aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042ac:	787b      	ldrb	r3, [r7, #1]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042b8:	e002      	b.n	80042c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ba:	887a      	ldrh	r2, [r7, #2]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	041a      	lsls	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	43d9      	mvns	r1, r3
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	400b      	ands	r3, r1
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	619a      	str	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e08d      	b.n	800442e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fa5c 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004350:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004360:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	e006      	b.n	8004388 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004386:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d108      	bne.n	80043a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	e007      	b.n	80043b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1a      	ldr	r2, [r3, #32]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	4608      	mov	r0, r1
 8004442:	4611      	mov	r1, r2
 8004444:	461a      	mov	r2, r3
 8004446:	4603      	mov	r3, r0
 8004448:	817b      	strh	r3, [r7, #10]
 800444a:	460b      	mov	r3, r1
 800444c:	813b      	strh	r3, [r7, #8]
 800444e:	4613      	mov	r3, r2
 8004450:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b20      	cmp	r3, #32
 800445c:	f040 80f9 	bne.w	8004652 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_I2C_Mem_Write+0x34>
 8004466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004472:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0ed      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_I2C_Mem_Write+0x4e>
 8004482:	2302      	movs	r3, #2
 8004484:	e0e6      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800448e:	f7fd fc49 	bl	8001d24 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2319      	movs	r3, #25
 800449a:	2201      	movs	r2, #1
 800449c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f955 	bl	8004750 <I2C_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0d1      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2221      	movs	r2, #33	; 0x21
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2240      	movs	r2, #64	; 0x40
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a3a      	ldr	r2, [r7, #32]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044d8:	88f8      	ldrh	r0, [r7, #6]
 80044da:	893a      	ldrh	r2, [r7, #8]
 80044dc:	8979      	ldrh	r1, [r7, #10]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4603      	mov	r3, r0
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f8b9 	bl	8004660 <I2C_RequestMemoryWrite>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0a9      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2bff      	cmp	r3, #255	; 0xff
 8004508:	d90e      	bls.n	8004528 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	22ff      	movs	r2, #255	; 0xff
 800450e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	b2da      	uxtb	r2, r3
 8004516:	8979      	ldrh	r1, [r7, #10]
 8004518:	2300      	movs	r3, #0
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fad9 	bl	8004ad8 <I2C_TransferConfig>
 8004526:	e00f      	b.n	8004548 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004536:	b2da      	uxtb	r2, r3
 8004538:	8979      	ldrh	r1, [r7, #10]
 800453a:	2300      	movs	r3, #0
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fac8 	bl	8004ad8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f958 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e07b      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d034      	beq.n	8004600 <HAL_I2C_Mem_Write+0x1c8>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d130      	bne.n	8004600 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f8d1 	bl	8004750 <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e04d      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2bff      	cmp	r3, #255	; 0xff
 80045c0:	d90e      	bls.n	80045e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	22ff      	movs	r2, #255	; 0xff
 80045c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	8979      	ldrh	r1, [r7, #10]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fa7d 	bl	8004ad8 <I2C_TransferConfig>
 80045de:	e00f      	b.n	8004600 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	8979      	ldrh	r1, [r7, #10]
 80045f2:	2300      	movs	r3, #0
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fa6c 	bl	8004ad8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d19e      	bne.n	8004548 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f93e 	bl	8004890 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e01a      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2220      	movs	r2, #32
 8004624:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_I2C_Mem_Write+0x224>)
 8004632:	400b      	ands	r3, r1
 8004634:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	fe00e800 	.word	0xfe00e800

08004660 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	4608      	mov	r0, r1
 800466a:	4611      	mov	r1, r2
 800466c:	461a      	mov	r2, r3
 800466e:	4603      	mov	r3, r0
 8004670:	817b      	strh	r3, [r7, #10]
 8004672:	460b      	mov	r3, r1
 8004674:	813b      	strh	r3, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	8979      	ldrh	r1, [r7, #10]
 8004680:	4b20      	ldr	r3, [pc, #128]	; (8004704 <I2C_RequestMemoryWrite+0xa4>)
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fa25 	bl	8004ad8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f8b5 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e02c      	b.n	80046fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
 80046b2:	e015      	b.n	80046e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046b4:	893b      	ldrh	r3, [r7, #8]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	69b9      	ldr	r1, [r7, #24]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 f89b 	bl	8004802 <I2C_WaitOnTXISFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e012      	b.n	80046fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046d6:	893b      	ldrh	r3, [r7, #8]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f830 	bl	8004750 <I2C_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	80002000 	.word	0x80002000

08004708 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d103      	bne.n	8004726 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d007      	beq.n	8004744 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	619a      	str	r2, [r3, #24]
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004760:	e03b      	b.n	80047da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f8d6 	bl	8004918 <I2C_IsErrorOccurred>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e041      	b.n	80047fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d02d      	beq.n	80047da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fd fad1 	bl	8001d24 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnFlagUntilTimeout+0x44>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d122      	bne.n	80047da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d113      	bne.n	80047da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f043 0220 	orr.w	r2, r3, #32
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00f      	b.n	80047fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4013      	ands	r3, r2
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d0b4      	beq.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800480e:	e033      	b.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f87f 	bl	8004918 <I2C_IsErrorOccurred>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e031      	b.n	8004888 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d025      	beq.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482c:	f7fd fa7a 	bl	8001d24 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	429a      	cmp	r2, r3
 800483a:	d302      	bcc.n	8004842 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11a      	bne.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d013      	beq.n	8004878 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e007      	b.n	8004888 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b02      	cmp	r3, #2
 8004884:	d1c4      	bne.n	8004810 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800489c:	e02f      	b.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f838 	bl	8004918 <I2C_IsErrorOccurred>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e02d      	b.n	800490e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fd fa37 	bl	8001d24 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d11a      	bne.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d013      	beq.n	80048fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f043 0220 	orr.w	r2, r3, #32
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e007      	b.n	800490e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b20      	cmp	r3, #32
 800490a:	d1c8      	bne.n	800489e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d068      	beq.n	8004a16 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2210      	movs	r2, #16
 800494a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800494c:	e049      	b.n	80049e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d045      	beq.n	80049e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fd f9e5 	bl	8001d24 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <I2C_IsErrorOccurred+0x54>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d13a      	bne.n	80049e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800497e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800498a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498e:	d121      	bne.n	80049d4 <I2C_IsErrorOccurred+0xbc>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004996:	d01d      	beq.n	80049d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	2b20      	cmp	r3, #32
 800499c:	d01a      	beq.n	80049d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049ae:	f7fd f9b9 	bl	8001d24 <HAL_GetTick>
 80049b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049b4:	e00e      	b.n	80049d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049b6:	f7fd f9b5 	bl	8001d24 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b19      	cmp	r3, #25
 80049c2:	d907      	bls.n	80049d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f043 0320 	orr.w	r3, r3, #32
 80049ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80049d2:	e006      	b.n	80049e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d1e9      	bne.n	80049b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d003      	beq.n	80049f8 <I2C_IsErrorOccurred+0xe0>
 80049f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0aa      	beq.n	800494e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d103      	bne.n	8004a08 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2220      	movs	r2, #32
 8004a06:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	f043 0308 	orr.w	r3, r3, #8
 8004a50:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	f043 0302 	orr.w	r3, r3, #2
 8004a72:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01c      	beq.n	8004ac6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7ff fe3b 	bl	8004708 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <I2C_IsErrorOccurred+0x1bc>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3728      	adds	r7, #40	; 0x28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	fe00e800 	.word	0xfe00e800

08004ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	817b      	strh	r3, [r7, #10]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004af0:	7a7b      	ldrb	r3, [r7, #9]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004af8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	0d5b      	lsrs	r3, r3, #21
 8004b12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <I2C_TransferConfig+0x60>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	ea02 0103 	and.w	r1, r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	03ff63ff 	.word	0x03ff63ff

08004b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d138      	bne.n	8004bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e032      	b.n	8004bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	; 0x24
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e000      	b.n	8004bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bc4:	2302      	movs	r3, #2
  }
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d139      	bne.n	8004c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e033      	b.n	8004c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2224      	movs	r2, #36	; 0x24
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0d0      	b.n	8004e20 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fe00 	bl	8001898 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cae:	f023 030f 	bic.w	r3, r3, #15
 8004cb2:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d061      	beq.n	8004d88 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ccc:	2310      	movs	r3, #16
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e001      	b.n	8004cd6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d802      	bhi.n	8004ce4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ce4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ce8:	f001 f99c 	bl	8006024 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cec:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	d125      	bne.n	8004d44 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1c:	3305      	adds	r3, #5
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	e01f      	b.n	8004d62 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	3305      	adds	r3, #5
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e00e      	b.n	8004d62 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5e:	3305      	adds	r3, #5
 8004d60:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <HAL_I2S_Init+0x1bc>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	08db      	lsrs	r3, r3, #3
 8004d6c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e003      	b.n	8004d90 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d902      	bls.n	8004d9c <HAL_I2S_Init+0x130>
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2bff      	cmp	r3, #255	; 0xff
 8004d9a:	d907      	bls.n	8004dac <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f043 0210 	orr.w	r2, r3, #16
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e039      	b.n	8004e20 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	ea42 0103 	orr.w	r1, r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004dca:	f023 030f 	bic.w	r3, r3, #15
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6851      	ldr	r1, [r2, #4]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6892      	ldr	r2, [r2, #8]
 8004dd6:	4311      	orrs	r1, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	68d2      	ldr	r2, [r2, #12]
 8004ddc:	4311      	orrs	r1, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6992      	ldr	r2, [r2, #24]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dee:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b30      	cmp	r3, #48	; 0x30
 8004df6:	d003      	beq.n	8004e00 <HAL_I2S_Init+0x194>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2bb0      	cmp	r3, #176	; 0xb0
 8004dfe:	d107      	bne.n	8004e10 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e0e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3720      	adds	r7, #32
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	cccccccd 	.word	0xcccccccd

08004e2c <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_I2S_Transmit+0x1c>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0dc      	b.n	8005006 <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_I2S_Transmit+0x30>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e0d4      	b.n	8005006 <HAL_I2S_Transmit+0x1da>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d005      	beq.n	8004e7c <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e0c4      	b.n	8005006 <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2203      	movs	r2, #3
 8004e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d002      	beq.n	8004ea8 <HAL_I2S_Transmit+0x7c>
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d10a      	bne.n	8004ebe <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004ea8:	88fb      	ldrh	r3, [r7, #6]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	845a      	strh	r2, [r3, #34]	; 0x22
 8004ebc:	e005      	b.n	8004eca <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee0:	d007      	beq.n	8004ef2 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ef0:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f888 	bl	800500e <I2S_WaitFlagStateUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d04e      	beq.n	8004fa2 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	f043 0201 	orr.w	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    __HAL_UNLOCK(hi2s);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e070      	b.n	8005006 <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	881a      	ldrh	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2102      	movs	r1, #2
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 f85d 	bl	800500e <I2S_WaitFlagStateUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00f      	beq.n	8004f7a <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	f043 0201 	orr.w	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e045      	b.n	8005006 <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d10c      	bne.n	8004fa2 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	f043 0204 	orr.w	r2, r3, #4
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1bb      	bne.n	8004f24 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc0:	d118      	bne.n	8004ff4 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2180      	movs	r1, #128	; 0x80
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f820 	bl	800500e <I2S_WaitFlagStateUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00f      	beq.n	8004ff4 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f043 0201 	orr.w	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e008      	b.n	8005006 <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hi2s);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b086      	sub	sp, #24
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	4613      	mov	r3, r2
 800501c:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800501e:	f7fc fe81 	bl	8001d24 <HAL_GetTick>
 8005022:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005024:	e018      	b.n	8005058 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d014      	beq.n	8005058 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800502e:	f7fc fe79 	bl	8001d24 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d902      	bls.n	8005044 <I2S_WaitFlagStateUntilTimeout+0x36>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e00f      	b.n	8005078 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	429a      	cmp	r2, r3
 8005074:	d1d7      	bne.n	8005026 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d141      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800508e:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509a:	d131      	bne.n	8005100 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800509c:	4b47      	ldr	r3, [pc, #284]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a2:	4a46      	ldr	r2, [pc, #280]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050b4:	4a41      	ldr	r2, [pc, #260]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050bc:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2232      	movs	r2, #50	; 0x32
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	4a3f      	ldr	r2, [pc, #252]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	0c9b      	lsrs	r3, r3, #18
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d2:	e002      	b.n	80050da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d102      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f2      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ee:	4b33      	ldr	r3, [pc, #204]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d158      	bne.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e057      	b.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005100:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005106:	4a2d      	ldr	r2, [pc, #180]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005110:	e04d      	b.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005118:	d141      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800511a:	4b28      	ldr	r3, [pc, #160]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005126:	d131      	bne.n	800518c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005128:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512e:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005138:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005140:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2232      	movs	r2, #50	; 0x32
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	0c9b      	lsrs	r3, r3, #18
 800515a:	3301      	adds	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800515e:	e002      	b.n	8005166 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3b01      	subs	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d102      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f2      	bne.n	8005160 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005186:	d112      	bne.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e011      	b.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800519c:	e007      	b.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051a6:	4a05      	ldr	r2, [pc, #20]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40007000 	.word	0x40007000
 80051c0:	20000004 	.word	0x20000004
 80051c4:	431bde83 	.word	0x431bde83

080051c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80051d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051d6:	6093      	str	r3, [r2, #8]
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40007000 	.word	0x40007000

080051e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e2fe      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d075      	beq.n	80052f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005206:	4b97      	ldr	r3, [pc, #604]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005210:	4b94      	ldr	r3, [pc, #592]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	2b0c      	cmp	r3, #12
 800521e:	d102      	bne.n	8005226 <HAL_RCC_OscConfig+0x3e>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b03      	cmp	r3, #3
 8005224:	d002      	beq.n	800522c <HAL_RCC_OscConfig+0x44>
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d10b      	bne.n	8005244 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800522c:	4b8d      	ldr	r3, [pc, #564]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05b      	beq.n	80052f0 <HAL_RCC_OscConfig+0x108>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d157      	bne.n	80052f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e2d9      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d106      	bne.n	800525c <HAL_RCC_OscConfig+0x74>
 800524e:	4b85      	ldr	r3, [pc, #532]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a84      	ldr	r2, [pc, #528]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e01d      	b.n	8005298 <HAL_RCC_OscConfig+0xb0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005264:	d10c      	bne.n	8005280 <HAL_RCC_OscConfig+0x98>
 8005266:	4b7f      	ldr	r3, [pc, #508]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a7e      	ldr	r2, [pc, #504]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800526c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	4b7c      	ldr	r3, [pc, #496]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a7b      	ldr	r2, [pc, #492]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e00b      	b.n	8005298 <HAL_RCC_OscConfig+0xb0>
 8005280:	4b78      	ldr	r3, [pc, #480]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a77      	ldr	r2, [pc, #476]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	4b75      	ldr	r3, [pc, #468]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a74      	ldr	r2, [pc, #464]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d013      	beq.n	80052c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fc fd40 	bl	8001d24 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a8:	f7fc fd3c 	bl	8001d24 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b64      	cmp	r3, #100	; 0x64
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e29e      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ba:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0xc0>
 80052c6:	e014      	b.n	80052f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c8:	f7fc fd2c 	bl	8001d24 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ce:	e008      	b.n	80052e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d0:	f7fc fd28 	bl	8001d24 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	; 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e28a      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052e2:	4b60      	ldr	r3, [pc, #384]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCC_OscConfig+0xe8>
 80052ee:	e000      	b.n	80052f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d075      	beq.n	80053ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fe:	4b59      	ldr	r3, [pc, #356]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005308:	4b56      	ldr	r3, [pc, #344]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b0c      	cmp	r3, #12
 8005316:	d102      	bne.n	800531e <HAL_RCC_OscConfig+0x136>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d002      	beq.n	8005324 <HAL_RCC_OscConfig+0x13c>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b04      	cmp	r3, #4
 8005322:	d11f      	bne.n	8005364 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005324:	4b4f      	ldr	r3, [pc, #316]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_OscConfig+0x154>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e25d      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533c:	4b49      	ldr	r3, [pc, #292]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	4946      	ldr	r1, [pc, #280]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800534c:	4313      	orrs	r3, r2
 800534e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005350:	4b45      	ldr	r3, [pc, #276]	; (8005468 <HAL_RCC_OscConfig+0x280>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4618      	mov	r0, r3
 8005356:	f7fc fc99 	bl	8001c8c <HAL_InitTick>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d043      	beq.n	80053e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e249      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d023      	beq.n	80053b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800536c:	4b3d      	ldr	r3, [pc, #244]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fc fcd4 	bl	8001d24 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005380:	f7fc fcd0 	bl	8001d24 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e232      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005392:	4b34      	ldr	r3, [pc, #208]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539e:	4b31      	ldr	r3, [pc, #196]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	061b      	lsls	r3, r3, #24
 80053ac:	492d      	ldr	r1, [pc, #180]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
 80053b2:	e01a      	b.n	80053ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 80053ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fc fcb0 	bl	8001d24 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053c8:	f7fc fcac 	bl	8001d24 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e20e      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053da:	4b22      	ldr	r3, [pc, #136]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f0      	bne.n	80053c8 <HAL_RCC_OscConfig+0x1e0>
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d041      	beq.n	800547a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01c      	beq.n	8005438 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053fe:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005404:	4a17      	ldr	r2, [pc, #92]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fc fc89 	bl	8001d24 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005416:	f7fc fc85 	bl	8001d24 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e1e7      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800542a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0ef      	beq.n	8005416 <HAL_RCC_OscConfig+0x22e>
 8005436:	e020      	b.n	800547a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 800543a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800543e:	4a09      	ldr	r2, [pc, #36]	; (8005464 <HAL_RCC_OscConfig+0x27c>)
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fc fc6c 	bl	8001d24 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800544e:	e00d      	b.n	800546c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005450:	f7fc fc68 	bl	8001d24 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d906      	bls.n	800546c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e1ca      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000
 8005468:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800546c:	4b8c      	ldr	r3, [pc, #560]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 800546e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ea      	bne.n	8005450 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80a6 	beq.w	80055d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005488:	2300      	movs	r3, #0
 800548a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800548c:	4b84      	ldr	r3, [pc, #528]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_RCC_OscConfig+0x2b4>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x2b6>
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00d      	beq.n	80054be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	4b7f      	ldr	r3, [pc, #508]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	4a7e      	ldr	r2, [pc, #504]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ac:	6593      	str	r3, [r2, #88]	; 0x58
 80054ae:	4b7c      	ldr	r3, [pc, #496]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80054b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054ba:	2301      	movs	r3, #1
 80054bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054be:	4b79      	ldr	r3, [pc, #484]	; (80056a4 <HAL_RCC_OscConfig+0x4bc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d118      	bne.n	80054fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ca:	4b76      	ldr	r3, [pc, #472]	; (80056a4 <HAL_RCC_OscConfig+0x4bc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a75      	ldr	r2, [pc, #468]	; (80056a4 <HAL_RCC_OscConfig+0x4bc>)
 80054d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054d6:	f7fc fc25 	bl	8001d24 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054de:	f7fc fc21 	bl	8001d24 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e183      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f0:	4b6c      	ldr	r3, [pc, #432]	; (80056a4 <HAL_RCC_OscConfig+0x4bc>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d108      	bne.n	8005516 <HAL_RCC_OscConfig+0x32e>
 8005504:	4b66      	ldr	r3, [pc, #408]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	4a65      	ldr	r2, [pc, #404]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005514:	e024      	b.n	8005560 <HAL_RCC_OscConfig+0x378>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b05      	cmp	r3, #5
 800551c:	d110      	bne.n	8005540 <HAL_RCC_OscConfig+0x358>
 800551e:	4b60      	ldr	r3, [pc, #384]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	4a5e      	ldr	r2, [pc, #376]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005526:	f043 0304 	orr.w	r3, r3, #4
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800552e:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005534:	4a5a      	ldr	r2, [pc, #360]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800553e:	e00f      	b.n	8005560 <HAL_RCC_OscConfig+0x378>
 8005540:	4b57      	ldr	r3, [pc, #348]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	4a56      	ldr	r2, [pc, #344]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005550:	4b53      	ldr	r3, [pc, #332]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	4a52      	ldr	r2, [pc, #328]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005558:	f023 0304 	bic.w	r3, r3, #4
 800555c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d016      	beq.n	8005596 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005568:	f7fc fbdc 	bl	8001d24 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556e:	e00a      	b.n	8005586 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005570:	f7fc fbd8 	bl	8001d24 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e138      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005586:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ed      	beq.n	8005570 <HAL_RCC_OscConfig+0x388>
 8005594:	e015      	b.n	80055c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fc fbc5 	bl	8001d24 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800559c:	e00a      	b.n	80055b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559e:	f7fc fbc1 	bl	8001d24 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e121      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b4:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1ed      	bne.n	800559e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c8:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055cc:	4a34      	ldr	r2, [pc, #208]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80055ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d03c      	beq.n	800565a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01c      	beq.n	8005622 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055e8:	4b2d      	ldr	r3, [pc, #180]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80055ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ee:	4a2c      	ldr	r2, [pc, #176]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f8:	f7fc fb94 	bl	8001d24 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005600:	f7fc fb90 	bl	8001d24 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e0f2      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005612:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005614:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0ef      	beq.n	8005600 <HAL_RCC_OscConfig+0x418>
 8005620:	e01b      	b.n	800565a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005622:	4b1f      	ldr	r3, [pc, #124]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005628:	4a1d      	ldr	r2, [pc, #116]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 800562a:	f023 0301 	bic.w	r3, r3, #1
 800562e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fc fb77 	bl	8001d24 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800563a:	f7fc fb73 	bl	8001d24 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e0d5      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800564c:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ef      	bne.n	800563a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80c9 	beq.w	80057f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b0c      	cmp	r3, #12
 800566e:	f000 8083 	beq.w	8005778 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d15e      	bne.n	8005738 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a08      	ldr	r2, [pc, #32]	; (80056a0 <HAL_RCC_OscConfig+0x4b8>)
 8005680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fc fb4d 	bl	8001d24 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800568c:	e00c      	b.n	80056a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568e:	f7fc fb49 	bl	8001d24 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d905      	bls.n	80056a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e0ab      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
 80056a0:	40021000 	.word	0x40021000
 80056a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a8:	4b55      	ldr	r3, [pc, #340]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ec      	bne.n	800568e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b4:	4b52      	ldr	r3, [pc, #328]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	4b52      	ldr	r3, [pc, #328]	; (8005804 <HAL_RCC_OscConfig+0x61c>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6a11      	ldr	r1, [r2, #32]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056c4:	3a01      	subs	r2, #1
 80056c6:	0112      	lsls	r2, r2, #4
 80056c8:	4311      	orrs	r1, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056ce:	0212      	lsls	r2, r2, #8
 80056d0:	4311      	orrs	r1, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056d6:	0852      	lsrs	r2, r2, #1
 80056d8:	3a01      	subs	r2, #1
 80056da:	0552      	lsls	r2, r2, #21
 80056dc:	4311      	orrs	r1, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056e2:	0852      	lsrs	r2, r2, #1
 80056e4:	3a01      	subs	r2, #1
 80056e6:	0652      	lsls	r2, r2, #25
 80056e8:	4311      	orrs	r1, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056ee:	06d2      	lsls	r2, r2, #27
 80056f0:	430a      	orrs	r2, r1
 80056f2:	4943      	ldr	r1, [pc, #268]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056f8:	4b41      	ldr	r3, [pc, #260]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a40      	ldr	r2, [pc, #256]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 80056fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005702:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005704:	4b3e      	ldr	r3, [pc, #248]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 800570a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800570e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fc fb08 	bl	8001d24 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005718:	f7fc fb04 	bl	8001d24 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e066      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572a:	4b35      	ldr	r3, [pc, #212]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x530>
 8005736:	e05e      	b.n	80057f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005738:	4b31      	ldr	r3, [pc, #196]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a30      	ldr	r2, [pc, #192]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 800573e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005744:	f7fc faee 	bl	8001d24 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574c:	f7fc faea 	bl	8001d24 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e04c      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	4924      	ldr	r1, [pc, #144]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_RCC_OscConfig+0x620>)
 8005772:	4013      	ands	r3, r2
 8005774:	60cb      	str	r3, [r1, #12]
 8005776:	e03e      	b.n	80057f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e039      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_RCC_OscConfig+0x618>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f003 0203 	and.w	r2, r3, #3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	429a      	cmp	r2, r3
 8005796:	d12c      	bne.n	80057f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	3b01      	subs	r3, #1
 80057a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d123      	bne.n	80057f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d11b      	bne.n	80057f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d113      	bne.n	80057f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	085b      	lsrs	r3, r3, #1
 80057d6:	3b01      	subs	r3, #1
 80057d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d109      	bne.n	80057f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e8:	085b      	lsrs	r3, r3, #1
 80057ea:	3b01      	subs	r3, #1
 80057ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d001      	beq.n	80057f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	019f800c 	.word	0x019f800c
 8005808:	feeefffc 	.word	0xfeeefffc

0800580c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e11e      	b.n	8005a62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b91      	ldr	r3, [pc, #580]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 030f 	and.w	r3, r3, #15
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d910      	bls.n	8005854 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b8e      	ldr	r3, [pc, #568]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 020f 	bic.w	r2, r3, #15
 800583a:	498c      	ldr	r1, [pc, #560]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b8a      	ldr	r3, [pc, #552]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e106      	b.n	8005a62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d073      	beq.n	8005948 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d129      	bne.n	80058bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005868:	4b81      	ldr	r3, [pc, #516]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0f4      	b.n	8005a62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005878:	f000 f99e 	bl	8005bb8 <RCC_GetSysClockFreqFromPLLSource>
 800587c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4a7c      	ldr	r2, [pc, #496]	; (8005a74 <HAL_RCC_ClockConfig+0x268>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d93f      	bls.n	8005906 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005886:	4b7a      	ldr	r3, [pc, #488]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800589a:	2b00      	cmp	r3, #0
 800589c:	d033      	beq.n	8005906 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d12f      	bne.n	8005906 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058a6:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ae:	4a70      	ldr	r2, [pc, #448]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80058b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	e024      	b.n	8005906 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d107      	bne.n	80058d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058c4:	4b6a      	ldr	r3, [pc, #424]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d109      	bne.n	80058e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0c6      	b.n	8005a62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d4:	4b66      	ldr	r3, [pc, #408]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0be      	b.n	8005a62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058e4:	f000 f8ce 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4a61      	ldr	r2, [pc, #388]	; (8005a74 <HAL_RCC_ClockConfig+0x268>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d909      	bls.n	8005906 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058fa:	4a5d      	ldr	r2, [pc, #372]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80058fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005900:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005902:	2380      	movs	r3, #128	; 0x80
 8005904:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005906:	4b5a      	ldr	r3, [pc, #360]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f023 0203 	bic.w	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	4957      	ldr	r1, [pc, #348]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005914:	4313      	orrs	r3, r2
 8005916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005918:	f7fc fa04 	bl	8001d24 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fc fa00 	bl	8001d24 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e095      	b.n	8005a62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	4b4e      	ldr	r3, [pc, #312]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 020c 	and.w	r2, r3, #12
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	429a      	cmp	r2, r3
 8005946:	d1eb      	bne.n	8005920 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d023      	beq.n	800599c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a42      	ldr	r2, [pc, #264]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005966:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800596a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005978:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005980:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005982:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005986:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005988:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	4936      	ldr	r1, [pc, #216]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
 800599a:	e008      	b.n	80059ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	d105      	bne.n	80059ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80059a2:	4b33      	ldr	r3, [pc, #204]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	4a32      	ldr	r2, [pc, #200]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 80059a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059ae:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d21d      	bcs.n	80059f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059bc:	4b2b      	ldr	r3, [pc, #172]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f023 020f 	bic.w	r2, r3, #15
 80059c4:	4929      	ldr	r1, [pc, #164]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059cc:	f7fc f9aa 	bl	8001d24 <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d2:	e00a      	b.n	80059ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d4:	f7fc f9a6 	bl	8001d24 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e03b      	b.n	8005a62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <HAL_RCC_ClockConfig+0x260>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1ed      	bne.n	80059d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a04:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4917      	ldr	r1, [pc, #92]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a22:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	490f      	ldr	r1, [pc, #60]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a36:	f000 f825 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_RCC_ClockConfig+0x264>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	490c      	ldr	r1, [pc, #48]	; (8005a78 <HAL_RCC_ClockConfig+0x26c>)
 8005a48:	5ccb      	ldrb	r3, [r1, r3]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <HAL_RCC_ClockConfig+0x270>)
 8005a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <HAL_RCC_ClockConfig+0x274>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fc f916 	bl	8001c8c <HAL_InitTick>
 8005a60:	4603      	mov	r3, r0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40022000 	.word	0x40022000
 8005a70:	40021000 	.word	0x40021000
 8005a74:	04c4b400 	.word	0x04c4b400
 8005a78:	08007b00 	.word	0x08007b00
 8005a7c:	20000004 	.word	0x20000004
 8005a80:	20000008 	.word	0x20000008

08005a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a8a:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d102      	bne.n	8005a9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a96:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	e047      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a9c:	4b27      	ldr	r3, [pc, #156]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 030c 	and.w	r3, r3, #12
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d102      	bne.n	8005aae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005aa8:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	e03e      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005aae:	4b23      	ldr	r3, [pc, #140]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d136      	bne.n	8005b28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aba:	4b20      	ldr	r3, [pc, #128]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ac4:	4b1d      	ldr	r3, [pc, #116]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	091b      	lsrs	r3, r3, #4
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d10c      	bne.n	8005af2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ad8:	4a1a      	ldr	r2, [pc, #104]	; (8005b44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae0:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ae2:	68d2      	ldr	r2, [r2, #12]
 8005ae4:	0a12      	lsrs	r2, r2, #8
 8005ae6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	617b      	str	r3, [r7, #20]
      break;
 8005af0:	e00c      	b.n	8005b0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afa:	4a10      	ldr	r2, [pc, #64]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	0a12      	lsrs	r2, r2, #8
 8005b00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
      break;
 8005b0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	0e5b      	lsrs	r3, r3, #25
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	3301      	adds	r3, #1
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	e001      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b2c:	693b      	ldr	r3, [r7, #16]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	00f42400 	.word	0x00f42400
 8005b44:	016e3600 	.word	0x016e3600

08005b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b4c:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000004 	.word	0x20000004

08005b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b64:	f7ff fff0 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4904      	ldr	r1, [pc, #16]	; (8005b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000
 8005b88:	08007b10 	.word	0x08007b10

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b90:	f7ff ffda 	bl	8005b48 <HAL_RCC_GetHCLKFreq>
 8005b94:	4602      	mov	r2, r0
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0adb      	lsrs	r3, r3, #11
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4904      	ldr	r1, [pc, #16]	; (8005bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ba2:	5ccb      	ldrb	r3, [r1, r3]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	08007b10 	.word	0x08007b10

08005bb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bbe:	4b1e      	ldr	r3, [pc, #120]	; (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d10c      	bne.n	8005bf6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bdc:	4a17      	ldr	r2, [pc, #92]	; (8005c3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	4a14      	ldr	r2, [pc, #80]	; (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005be6:	68d2      	ldr	r2, [r2, #12]
 8005be8:	0a12      	lsrs	r2, r2, #8
 8005bea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	617b      	str	r3, [r7, #20]
    break;
 8005bf4:	e00c      	b.n	8005c10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	4a0e      	ldr	r2, [pc, #56]	; (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c00:	68d2      	ldr	r2, [r2, #12]
 8005c02:	0a12      	lsrs	r2, r2, #8
 8005c04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]
    break;
 8005c0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c10:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	0e5b      	lsrs	r3, r3, #25
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c2a:	687b      	ldr	r3, [r7, #4]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	016e3600 	.word	0x016e3600
 8005c40:	00f42400 	.word	0x00f42400

08005c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c50:	2300      	movs	r3, #0
 8005c52:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8098 	beq.w	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c62:	2300      	movs	r3, #0
 8005c64:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c66:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10d      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c76:	4a3f      	ldr	r2, [pc, #252]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c7e:	4b3d      	ldr	r3, [pc, #244]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c8e:	4b3a      	ldr	r3, [pc, #232]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a39      	ldr	r2, [pc, #228]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c9a:	f7fc f843 	bl	8001d24 <HAL_GetTick>
 8005c9e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca0:	e009      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca2:	f7fc f83f 	bl	8001d24 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d902      	bls.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	74fb      	strb	r3, [r7, #19]
        break;
 8005cb4:	e005      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb6:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0ef      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d159      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d01e      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d019      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cf0:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d10:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d016      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d22:	f7fb ffff 	bl	8001d24 <HAL_GetTick>
 8005d26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d28:	e00b      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2a:	f7fb fffb 	bl	8001d24 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d902      	bls.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	74fb      	strb	r3, [r7, #19]
            break;
 8005d40:	e006      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ec      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10b      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d56:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	4903      	ldr	r1, [pc, #12]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d6c:	e008      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
 8005d70:	74bb      	strb	r3, [r7, #18]
 8005d72:	e005      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d74:	40021000 	.word	0x40021000
 8005d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	7cfb      	ldrb	r3, [r7, #19]
 8005d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d80:	7c7b      	ldrb	r3, [r7, #17]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d105      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d86:	4ba6      	ldr	r3, [pc, #664]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	4aa5      	ldr	r2, [pc, #660]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d9e:	4ba0      	ldr	r3, [pc, #640]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da4:	f023 0203 	bic.w	r2, r3, #3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	499c      	ldr	r1, [pc, #624]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00a      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dc0:	4b97      	ldr	r3, [pc, #604]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f023 020c 	bic.w	r2, r3, #12
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	4994      	ldr	r1, [pc, #592]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005de2:	4b8f      	ldr	r3, [pc, #572]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	498b      	ldr	r1, [pc, #556]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e04:	4b86      	ldr	r3, [pc, #536]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	4983      	ldr	r1, [pc, #524]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e26:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	497a      	ldr	r1, [pc, #488]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e48:	4b75      	ldr	r3, [pc, #468]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	4972      	ldr	r1, [pc, #456]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00a      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	4969      	ldr	r1, [pc, #420]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e8c:	4b64      	ldr	r3, [pc, #400]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	4961      	ldr	r1, [pc, #388]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eae:	4b5c      	ldr	r3, [pc, #368]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	4958      	ldr	r1, [pc, #352]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d015      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ed0:	4b53      	ldr	r3, [pc, #332]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ede:	4950      	ldr	r1, [pc, #320]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eee:	d105      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef0:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d015      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f08:	4b45      	ldr	r3, [pc, #276]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	4942      	ldr	r1, [pc, #264]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f26:	d105      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f28:	4b3d      	ldr	r3, [pc, #244]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d015      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f40:	4b37      	ldr	r3, [pc, #220]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	4934      	ldr	r1, [pc, #208]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f60:	4b2f      	ldr	r3, [pc, #188]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	4a2e      	ldr	r2, [pc, #184]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f78:	4b29      	ldr	r3, [pc, #164]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	4926      	ldr	r1, [pc, #152]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f98:	4b21      	ldr	r3, [pc, #132]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a20      	ldr	r2, [pc, #128]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d015      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	4918      	ldr	r1, [pc, #96]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fce:	d105      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd0:	4b13      	ldr	r3, [pc, #76]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4a12      	ldr	r2, [pc, #72]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fe8:	4b0d      	ldr	r3, [pc, #52]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	490a      	ldr	r1, [pc, #40]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006006:	d105      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	4a04      	ldr	r2, [pc, #16]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800600e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006012:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006014:	7cbb      	ldrb	r3, [r7, #18]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000

08006024 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006036:	d136      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006038:	4bac      	ldr	r3, [pc, #688]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006042:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006044:	4ba9      	ldr	r3, [pc, #676]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b02      	cmp	r3, #2
 8006050:	d108      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d104      	bne.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800605a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	f000 bc2a 	b.w	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006064:	4ba1      	ldr	r3, [pc, #644]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d108      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006078:	d104      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 800607a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	f000 bc1a 	b.w	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006084:	4b99      	ldr	r3, [pc, #612]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006090:	f040 8412 	bne.w	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800609a:	f040 840d 	bne.w	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    {
      frequency = HSE_VALUE / 32U;
 800609e:	4b94      	ldr	r3, [pc, #592]	; (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	f000 bc09 	b.w	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 80060a6:	4b91      	ldr	r3, [pc, #580]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d10c      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80060b2:	4b8e      	ldr	r3, [pc, #568]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060be:	d102      	bne.n	80060c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 80060c0:	4b8c      	ldr	r3, [pc, #560]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80060c2:	61bb      	str	r3, [r7, #24]
 80060c4:	e017      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e014      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 80060cc:	4b87      	ldr	r3, [pc, #540]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d10c      	bne.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060d8:	4b84      	ldr	r3, [pc, #528]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060e4:	d102      	bne.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 80060e6:	4b84      	ldr	r3, [pc, #528]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	e004      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	e001      	b.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060f6:	4b7d      	ldr	r3, [pc, #500]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 030f 	and.w	r3, r3, #15
 8006100:	3301      	adds	r3, #1
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	fbb2 f3f3 	udiv	r3, r2, r3
 8006108:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006110:	f000 8378 	beq.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	f200 83ae 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006124:	f000 8337 	beq.w	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800612e:	f200 83a4 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006138:	f000 82ff 	beq.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006142:	f200 839a 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	f000 82c0 	beq.w	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006156:	f200 8390 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006160:	f000 8272 	beq.w	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	f200 8386 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	f000 8224 	beq.w	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	f200 837c 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006188:	f000 81da 	beq.w	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006192:	f200 8372 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619c:	f000 81ab 	beq.w	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	f200 8368 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	f000 817d 	beq.w	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b80      	cmp	r3, #128	; 0x80
 80061b6:	f200 8360 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d84b      	bhi.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8359 	beq.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	2b1f      	cmp	r3, #31
 80061ce:	f200 8354 	bhi.w	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	08006263 	.word	0x08006263
 80061dc:	080062c5 	.word	0x080062c5
 80061e0:	0800687b 	.word	0x0800687b
 80061e4:	08006337 	.word	0x08006337
 80061e8:	0800687b 	.word	0x0800687b
 80061ec:	0800687b 	.word	0x0800687b
 80061f0:	0800687b 	.word	0x0800687b
 80061f4:	08006399 	.word	0x08006399
 80061f8:	0800687b 	.word	0x0800687b
 80061fc:	0800687b 	.word	0x0800687b
 8006200:	0800687b 	.word	0x0800687b
 8006204:	0800687b 	.word	0x0800687b
 8006208:	0800687b 	.word	0x0800687b
 800620c:	0800687b 	.word	0x0800687b
 8006210:	0800687b 	.word	0x0800687b
 8006214:	0800687b 	.word	0x0800687b
 8006218:	0800687b 	.word	0x0800687b
 800621c:	0800687b 	.word	0x0800687b
 8006220:	0800687b 	.word	0x0800687b
 8006224:	0800687b 	.word	0x0800687b
 8006228:	0800687b 	.word	0x0800687b
 800622c:	0800687b 	.word	0x0800687b
 8006230:	0800687b 	.word	0x0800687b
 8006234:	0800687b 	.word	0x0800687b
 8006238:	0800687b 	.word	0x0800687b
 800623c:	0800687b 	.word	0x0800687b
 8006240:	0800687b 	.word	0x0800687b
 8006244:	0800687b 	.word	0x0800687b
 8006248:	0800687b 	.word	0x0800687b
 800624c:	0800687b 	.word	0x0800687b
 8006250:	0800687b 	.word	0x0800687b
 8006254:	080063fb 	.word	0x080063fb
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	f000 8101 	beq.w	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
      break;

#endif /* QUADSPI */

    default:
      break;
 8006260:	e30b      	b.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006262:	4b22      	ldr	r3, [pc, #136]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        frequency = HAL_RCC_GetPCLK2Freq();
 8006274:	f7ff fc8a 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8006278:	61f8      	str	r0, [r7, #28]
      break;
 800627a:	e300      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d103      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        frequency = HAL_RCC_GetSysClockFreq();
 8006282:	f7ff fbff 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006286:	61f8      	str	r0, [r7, #28]
      break;
 8006288:	e2f9      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 800628a:	4b18      	ldr	r3, [pc, #96]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006296:	d105      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d102      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HSI_VALUE;
 800629e:	4b15      	ldr	r3, [pc, #84]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80062a0:	61fb      	str	r3, [r7, #28]
      break;
 80062a2:	e2ec      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80062a4:	4b11      	ldr	r3, [pc, #68]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	f040 82e5 	bne.w	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	f040 82e1 	bne.w	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        frequency = LSE_VALUE;
 80062bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c0:	61fb      	str	r3, [r7, #28]
      break;
 80062c2:	e2dc      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80062c4:	4b09      	ldr	r3, [pc, #36]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80062c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ca:	f003 030c 	and.w	r3, r3, #12
 80062ce:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d103      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7ff fc43 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 80062da:	61f8      	str	r0, [r7, #28]
      break;
 80062dc:	e2d1      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d10b      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = HAL_RCC_GetSysClockFreq();
 80062e4:	f7ff fbce 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 80062e8:	61f8      	str	r0, [r7, #28]
      break;
 80062ea:	e2ca      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80062ec:	40021000 	.word	0x40021000
 80062f0:	000b71b0 	.word	0x000b71b0
 80062f4:	00f42400 	.word	0x00f42400
 80062f8:	016e3600 	.word	0x016e3600
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80062fc:	4b9e      	ldr	r3, [pc, #632]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006308:	d105      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d102      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HSI_VALUE;
 8006310:	4b9a      	ldr	r3, [pc, #616]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006312:	61fb      	str	r3, [r7, #28]
      break;
 8006314:	e2b5      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006316:	4b98      	ldr	r3, [pc, #608]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	f040 82ae 	bne.w	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	f040 82aa 	bne.w	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        frequency = LSE_VALUE;
 800632e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006332:	61fb      	str	r3, [r7, #28]
      break;
 8006334:	e2a5      	b.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006336:	4b90      	ldr	r3, [pc, #576]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006340:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006348:	f7ff fc0a 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 800634c:	61f8      	str	r0, [r7, #28]
      break;
 800634e:	e29a      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2b10      	cmp	r3, #16
 8006354:	d103      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
        frequency = HAL_RCC_GetSysClockFreq();
 8006356:	f7ff fb95 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 800635a:	61f8      	str	r0, [r7, #28]
      break;
 800635c:	e293      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800635e:	4b86      	ldr	r3, [pc, #536]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d105      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b20      	cmp	r3, #32
 8006370:	d102      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
        frequency = HSI_VALUE;
 8006372:	4b82      	ldr	r3, [pc, #520]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006374:	61fb      	str	r3, [r7, #28]
      break;
 8006376:	e286      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006378:	4b7f      	ldr	r3, [pc, #508]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	f040 827f 	bne.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	2b30      	cmp	r3, #48	; 0x30
 800638c:	f040 827b 	bne.w	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
        frequency = LSE_VALUE;
 8006390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006394:	61fb      	str	r3, [r7, #28]
      break;
 8006396:	e276      	b.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006398:	4b77      	ldr	r3, [pc, #476]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063a2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80063aa:	f7ff fbd9 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 80063ae:	61f8      	str	r0, [r7, #28]
      break;
 80063b0:	e26b      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	d103      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
        frequency = HAL_RCC_GetSysClockFreq();
 80063b8:	f7ff fb64 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 80063bc:	61f8      	str	r0, [r7, #28]
      break;
 80063be:	e264      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80063c0:	4b6d      	ldr	r3, [pc, #436]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063cc:	d105      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d102      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
        frequency = HSI_VALUE;
 80063d4:	4b69      	ldr	r3, [pc, #420]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80063d6:	61fb      	str	r3, [r7, #28]
      break;
 80063d8:	e257      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80063da:	4b67      	ldr	r3, [pc, #412]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	f040 8250 	bne.w	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2bc0      	cmp	r3, #192	; 0xc0
 80063ee:	f040 824c 	bne.w	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        frequency = LSE_VALUE;
 80063f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063f6:	61fb      	str	r3, [r7, #28]
      break;
 80063f8:	e247      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80063fa:	4b5f      	ldr	r3, [pc, #380]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006400:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006404:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d103      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
        frequency = HAL_RCC_GetPCLK1Freq();
 800640c:	f7ff fba8 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8006410:	61f8      	str	r0, [r7, #28]
      break;
 8006412:	e23c      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800641a:	d103      	bne.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
        frequency = HAL_RCC_GetSysClockFreq();
 800641c:	f7ff fb32 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006420:	61f8      	str	r0, [r7, #28]
      break;
 8006422:	e234      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006424:	4b54      	ldr	r3, [pc, #336]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d106      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006438:	d102      	bne.n	8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        frequency = HSI_VALUE;
 800643a:	4b50      	ldr	r3, [pc, #320]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800643c:	61fb      	str	r3, [r7, #28]
      break;
 800643e:	e226      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	f040 821f 	bne.w	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006456:	f040 821a 	bne.w	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        frequency = LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	61fb      	str	r3, [r7, #28]
      break;
 8006460:	e215      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006462:	4b45      	ldr	r3, [pc, #276]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800646c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006474:	f7ff fb74 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8006478:	61f8      	str	r0, [r7, #28]
      break;
 800647a:	e20a      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006482:	d103      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        frequency = HAL_RCC_GetSysClockFreq();
 8006484:	f7ff fafe 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006488:	61f8      	str	r0, [r7, #28]
      break;
 800648a:	e202      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800648c:	4b3a      	ldr	r3, [pc, #232]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006498:	f040 81fb 	bne.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a2:	f040 81f6 	bne.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
        frequency = HSI_VALUE;
 80064a6:	4b35      	ldr	r3, [pc, #212]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80064a8:	61fb      	str	r3, [r7, #28]
      break;
 80064aa:	e1f2      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80064ac:	4b32      	ldr	r3, [pc, #200]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064b6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
        frequency = HAL_RCC_GetPCLK1Freq();
 80064be:	f7ff fb4f 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 80064c2:	61f8      	str	r0, [r7, #28]
      break;
 80064c4:	e1e7      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064cc:	d103      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        frequency = HAL_RCC_GetSysClockFreq();
 80064ce:	f7ff fad9 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 80064d2:	61f8      	str	r0, [r7, #28]
      break;
 80064d4:	e1df      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80064d6:	4b28      	ldr	r3, [pc, #160]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e2:	f040 81d8 	bne.w	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ec:	f040 81d3 	bne.w	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
        frequency = HSI_VALUE;
 80064f0:	4b22      	ldr	r3, [pc, #136]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80064f2:	61fb      	str	r3, [r7, #28]
      break;
 80064f4:	e1cf      	b.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80064f6:	4b20      	ldr	r3, [pc, #128]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80064f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006500:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006508:	f7ff fb2a 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 800650c:	61f8      	str	r0, [r7, #28]
      break;
 800650e:	e1c4      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006516:	d103      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetSysClockFreq();
 8006518:	f7ff fab4 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 800651c:	61f8      	str	r0, [r7, #28]
      break;
 800651e:	e1bc      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	f040 81b5 	bne.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006536:	f040 81b0 	bne.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
        frequency = HSI_VALUE;
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800653c:	61fb      	str	r3, [r7, #28]
      break;
 800653e:	e1ac      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006540:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800654a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x536>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006552:	f7ff fb05 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8006556:	61f8      	str	r0, [r7, #28]
      break;
 8006558:	e1a1      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800655a:	4b07      	ldr	r3, [pc, #28]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800655c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b02      	cmp	r3, #2
 8006566:	d10b      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800656e:	d107      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
        frequency = LSI_VALUE;
 8006570:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	e022      	b.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8006578:	40021000 	.word	0x40021000
 800657c:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006580:	4b9b      	ldr	r3, [pc, #620]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658c:	d106      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006594:	d102      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
        frequency = HSI_VALUE;
 8006596:	4b97      	ldr	r3, [pc, #604]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	e010      	b.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800659c:	4b94      	ldr	r3, [pc, #592]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800659e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	f040 8179 	bne.w	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80065b2:	f040 8174 	bne.w	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        frequency = LSE_VALUE;
 80065b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ba:	61fb      	str	r3, [r7, #28]
      break;
 80065bc:	e16f      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 80065be:	e16e      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80065c0:	4b8b      	ldr	r3, [pc, #556]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80065ca:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
        frequency = HAL_RCC_GetSysClockFreq();
 80065d2:	f7ff fa57 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 80065d6:	61f8      	str	r0, [r7, #28]
      break;
 80065d8:	e163      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e0:	d11b      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80065e2:	4b83      	ldr	r3, [pc, #524]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8159 	beq.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065f0:	4b7f      	ldr	r3, [pc, #508]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	0a1b      	lsrs	r3, r3, #8
 80065f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065fa:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	fb03 f202 	mul.w	r2, r3, r2
 8006604:	4b7a      	ldr	r3, [pc, #488]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	0d5b      	lsrs	r3, r3, #21
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	3301      	adds	r3, #1
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	61fb      	str	r3, [r7, #28]
      break;
 8006618:	e143      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006620:	d102      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006622:	4b75      	ldr	r3, [pc, #468]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8006624:	61fb      	str	r3, [r7, #28]
      break;
 8006626:	e13c      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8006628:	4b71      	ldr	r3, [pc, #452]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006634:	f040 8135 	bne.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800663e:	f040 8130 	bne.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        frequency = HSI_VALUE;
 8006642:	4b6c      	ldr	r3, [pc, #432]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8006644:	61fb      	str	r3, [r7, #28]
      break;
 8006646:	e12c      	b.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006648:	4b69      	ldr	r3, [pc, #420]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006652:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
        frequency = HAL_RCC_GetSysClockFreq();
 800665a:	f7ff fa13 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 800665e:	61f8      	str	r0, [r7, #28]
      break;
 8006660:	e121      	b.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006668:	d11b      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800666a:	4b61      	ldr	r3, [pc, #388]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 8117 	beq.w	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006678:	4b5d      	ldr	r3, [pc, #372]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	0a1b      	lsrs	r3, r3, #8
 800667e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006682:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	fb03 f202 	mul.w	r2, r3, r2
 800668c:	4b58      	ldr	r3, [pc, #352]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	0d5b      	lsrs	r3, r3, #21
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	3301      	adds	r3, #1
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	61fb      	str	r3, [r7, #28]
      break;
 80066a0:	e101      	b.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066a8:	d102      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80066aa:	4b53      	ldr	r3, [pc, #332]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 80066ac:	61fb      	str	r3, [r7, #28]
      break;
 80066ae:	e0fa      	b.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80066b0:	4b4f      	ldr	r3, [pc, #316]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	f040 80f3 	bne.w	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066c6:	f040 80ee 	bne.w	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        frequency = HSI_VALUE;
 80066ca:	4b4a      	ldr	r3, [pc, #296]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 80066cc:	61fb      	str	r3, [r7, #28]
      break;
 80066ce:	e0ea      	b.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80066d0:	4b47      	ldr	r3, [pc, #284]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80066da:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066e2:	d103      	bne.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7ff fa3c 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 80066e8:	61f8      	str	r0, [r7, #28]
      break;
 80066ea:	e0de      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = HSE_VALUE;
 80066f2:	4b42      	ldr	r3, [pc, #264]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>)
 80066f4:	61fb      	str	r3, [r7, #28]
      break;
 80066f6:	e0d8      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066fe:	f040 80d4 	bne.w	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8006702:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80cd 	beq.w	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006710:	4b37      	ldr	r3, [pc, #220]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800671a:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	fb03 f202 	mul.w	r2, r3, r2
 8006724:	4b32      	ldr	r3, [pc, #200]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	0d5b      	lsrs	r3, r3, #21
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	3301      	adds	r3, #1
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	61fb      	str	r3, [r7, #28]
      break;
 8006738:	e0b7      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 800673a:	4b2d      	ldr	r3, [pc, #180]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800673c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006740:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006744:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800674c:	d114      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800674e:	4b28      	ldr	r3, [pc, #160]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006758:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	fb03 f202 	mul.w	r2, r3, r2
 8006762:	4b23      	ldr	r3, [pc, #140]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	0d5b      	lsrs	r3, r3, #21
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	3301      	adds	r3, #1
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	fbb2 f3f3 	udiv	r3, r2, r3
 8006774:	61fb      	str	r3, [r7, #28]
      break;
 8006776:	e09a      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8006778:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800677a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b02      	cmp	r3, #2
 8006784:	f040 8093 	bne.w	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f040 808f 	bne.w	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
        frequency = HSI48_VALUE;
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8006792:	61fb      	str	r3, [r7, #28]
      break;
 8006794:	e08b      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006796:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80067a0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a8:	d114      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067aa:	4b11      	ldr	r3, [pc, #68]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	0a1b      	lsrs	r3, r3, #8
 80067b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b4:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	fb03 f202 	mul.w	r2, r3, r2
 80067be:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	0d5b      	lsrs	r3, r3, #21
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	3301      	adds	r3, #1
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d0:	61fb      	str	r3, [r7, #28]
      break;
 80067d2:	e06e      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80067d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d167      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d164      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
        frequency = HSI48_VALUE;
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 80067ea:	61fb      	str	r3, [r7, #28]
      break;
 80067ec:	e061      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 80067ee:	bf00      	nop
 80067f0:	40021000 	.word	0x40021000
 80067f4:	00f42400 	.word	0x00f42400
 80067f8:	00bb8000 	.word	0x00bb8000
 80067fc:	016e3600 	.word	0x016e3600
 8006800:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8006804:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800680e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006816:	d128      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8006818:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d048      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006824:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682e:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006830:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	0edb      	lsrs	r3, r3, #27
 8006836:	f003 031f 	and.w	r3, r3, #31
 800683a:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10a      	bne.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006842:	4b20      	ldr	r3, [pc, #128]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
              pllp = 17U;
 800684e:	2311      	movs	r3, #17
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e001      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
              pllp = 7U;
 8006854:	2307      	movs	r3, #7
 8006856:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	fb03 f202 	mul.w	r2, r3, r2
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	61fb      	str	r3, [r7, #28]
      break;
 8006868:	e025      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006870:	d121      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        frequency = HAL_RCC_GetSysClockFreq();
 8006872:	f7ff f907 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006876:	61f8      	str	r0, [r7, #28]
      break;
 8006878:	e01d      	b.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      break;
 800687a:	bf00      	nop
 800687c:	e01c      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800687e:	bf00      	nop
 8006880:	e01a      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006882:	bf00      	nop
 8006884:	e018      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006886:	bf00      	nop
 8006888:	e016      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800688a:	bf00      	nop
 800688c:	e014      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800688e:	bf00      	nop
 8006890:	e012      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006892:	bf00      	nop
 8006894:	e010      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006896:	bf00      	nop
 8006898:	e00e      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800689a:	bf00      	nop
 800689c:	e00c      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800689e:	bf00      	nop
 80068a0:	e00a      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80068a2:	bf00      	nop
 80068a4:	e008      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80068a6:	bf00      	nop
 80068a8:	e006      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80068aa:	bf00      	nop
 80068ac:	e004      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80068b6:	bf00      	nop
    }
  }

  return(frequency);
 80068b8:	69fb      	ldr	r3, [r7, #28]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000

080068c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e049      	b.n	800696e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d106      	bne.n	80068f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7fb f8e4 	bl	8001abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	4619      	mov	r1, r3
 8006906:	4610      	mov	r0, r2
 8006908:	f000 f898 	bl	8006a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b01      	cmp	r3, #1
 800698a:	d001      	beq.n	8006990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e042      	b.n	8006a16 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a21      	ldr	r2, [pc, #132]	; (8006a24 <HAL_TIM_Base_Start+0xac>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d018      	beq.n	80069d4 <HAL_TIM_Base_Start+0x5c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d013      	beq.n	80069d4 <HAL_TIM_Base_Start+0x5c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1d      	ldr	r2, [pc, #116]	; (8006a28 <HAL_TIM_Base_Start+0xb0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00e      	beq.n	80069d4 <HAL_TIM_Base_Start+0x5c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <HAL_TIM_Base_Start+0xb4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d009      	beq.n	80069d4 <HAL_TIM_Base_Start+0x5c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1a      	ldr	r2, [pc, #104]	; (8006a30 <HAL_TIM_Base_Start+0xb8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <HAL_TIM_Base_Start+0x5c>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <HAL_TIM_Base_Start+0xbc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d115      	bne.n	8006a00 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	4b17      	ldr	r3, [pc, #92]	; (8006a38 <HAL_TIM_Base_Start+0xc0>)
 80069dc:	4013      	ands	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b06      	cmp	r3, #6
 80069e4:	d015      	beq.n	8006a12 <HAL_TIM_Base_Start+0x9a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ec:	d011      	beq.n	8006a12 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fe:	e008      	b.n	8006a12 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e000      	b.n	8006a14 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40000400 	.word	0x40000400
 8006a2c:	40000800 	.word	0x40000800
 8006a30:	40013400 	.word	0x40013400
 8006a34:	40014000 	.word	0x40014000
 8006a38:	00010007 	.word	0x00010007

08006a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a42      	ldr	r2, [pc, #264]	; (8006b58 <TIM_Base_SetConfig+0x11c>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00f      	beq.n	8006a74 <TIM_Base_SetConfig+0x38>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5a:	d00b      	beq.n	8006a74 <TIM_Base_SetConfig+0x38>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a3f      	ldr	r2, [pc, #252]	; (8006b5c <TIM_Base_SetConfig+0x120>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_Base_SetConfig+0x38>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a3e      	ldr	r2, [pc, #248]	; (8006b60 <TIM_Base_SetConfig+0x124>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_Base_SetConfig+0x38>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a3d      	ldr	r2, [pc, #244]	; (8006b64 <TIM_Base_SetConfig+0x128>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d108      	bne.n	8006a86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a33      	ldr	r2, [pc, #204]	; (8006b58 <TIM_Base_SetConfig+0x11c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01b      	beq.n	8006ac6 <TIM_Base_SetConfig+0x8a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d017      	beq.n	8006ac6 <TIM_Base_SetConfig+0x8a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a30      	ldr	r2, [pc, #192]	; (8006b5c <TIM_Base_SetConfig+0x120>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <TIM_Base_SetConfig+0x8a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a2f      	ldr	r2, [pc, #188]	; (8006b60 <TIM_Base_SetConfig+0x124>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00f      	beq.n	8006ac6 <TIM_Base_SetConfig+0x8a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2e      	ldr	r2, [pc, #184]	; (8006b64 <TIM_Base_SetConfig+0x128>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00b      	beq.n	8006ac6 <TIM_Base_SetConfig+0x8a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2d      	ldr	r2, [pc, #180]	; (8006b68 <TIM_Base_SetConfig+0x12c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d007      	beq.n	8006ac6 <TIM_Base_SetConfig+0x8a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <TIM_Base_SetConfig+0x130>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_Base_SetConfig+0x8a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2b      	ldr	r2, [pc, #172]	; (8006b70 <TIM_Base_SetConfig+0x134>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d108      	bne.n	8006ad8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a16      	ldr	r2, [pc, #88]	; (8006b58 <TIM_Base_SetConfig+0x11c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0xe8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a17      	ldr	r2, [pc, #92]	; (8006b64 <TIM_Base_SetConfig+0x128>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0xe8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a16      	ldr	r2, [pc, #88]	; (8006b68 <TIM_Base_SetConfig+0x12c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0xe8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a15      	ldr	r2, [pc, #84]	; (8006b6c <TIM_Base_SetConfig+0x130>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0xe8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <TIM_Base_SetConfig+0x134>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d103      	bne.n	8006b2c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d105      	bne.n	8006b4a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f023 0201 	bic.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	611a      	str	r2, [r3, #16]
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40012c00 	.word	0x40012c00
 8006b5c:	40000400 	.word	0x40000400
 8006b60:	40000800 	.word	0x40000800
 8006b64:	40013400 	.word	0x40013400
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40014800 	.word	0x40014800

08006b74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e065      	b.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2c      	ldr	r2, [pc, #176]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a2b      	ldr	r2, [pc, #172]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d108      	bne.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a1b      	ldr	r2, [pc, #108]	; (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d018      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c02:	d013      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a18      	ldr	r2, [pc, #96]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00e      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a17      	ldr	r2, [pc, #92]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d009      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10c      	bne.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	40012c00 	.word	0x40012c00
 8006c68:	40013400 	.word	0x40013400
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40014000 	.word	0x40014000

08006c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e042      	b.n	8006d10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fa feb5 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2224      	movs	r2, #36	; 0x24
 8006ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 faf4 	bl	80072b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f825 	bl	8006d18 <UART_SetConfig>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e01b      	b.n	8006d10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f042 0201 	orr.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fb73 	bl	80073f4 <UART_CheckIdleState>
 8006d0e:	4603      	mov	r3, r0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d1c:	b08c      	sub	sp, #48	; 0x30
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	431a      	orrs	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4bab      	ldr	r3, [pc, #684]	; (8006ff4 <UART_SetConfig+0x2dc>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4aa0      	ldr	r2, [pc, #640]	; (8006ff8 <UART_SetConfig+0x2e0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d80:	4313      	orrs	r3, r2
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	f023 010f 	bic.w	r1, r3, #15
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a91      	ldr	r2, [pc, #580]	; (8006ffc <UART_SetConfig+0x2e4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d125      	bne.n	8006e08 <UART_SetConfig+0xf0>
 8006dbc:	4b90      	ldr	r3, [pc, #576]	; (8007000 <UART_SetConfig+0x2e8>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d81a      	bhi.n	8006e00 <UART_SetConfig+0xe8>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <UART_SetConfig+0xb8>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006de1 	.word	0x08006de1
 8006dd4:	08006df1 	.word	0x08006df1
 8006dd8:	08006de9 	.word	0x08006de9
 8006ddc:	08006df9 	.word	0x08006df9
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de6:	e0d6      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006de8:	2302      	movs	r3, #2
 8006dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dee:	e0d2      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006df0:	2304      	movs	r3, #4
 8006df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df6:	e0ce      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfe:	e0ca      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006e00:	2310      	movs	r3, #16
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e06:	e0c6      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a7d      	ldr	r2, [pc, #500]	; (8007004 <UART_SetConfig+0x2ec>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d138      	bne.n	8006e84 <UART_SetConfig+0x16c>
 8006e12:	4b7b      	ldr	r3, [pc, #492]	; (8007000 <UART_SetConfig+0x2e8>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f003 030c 	and.w	r3, r3, #12
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d82d      	bhi.n	8006e7c <UART_SetConfig+0x164>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0x110>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e5d 	.word	0x08006e5d
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	08006e7d 	.word	0x08006e7d
 8006e34:	08006e7d 	.word	0x08006e7d
 8006e38:	08006e6d 	.word	0x08006e6d
 8006e3c:	08006e7d 	.word	0x08006e7d
 8006e40:	08006e7d 	.word	0x08006e7d
 8006e44:	08006e7d 	.word	0x08006e7d
 8006e48:	08006e65 	.word	0x08006e65
 8006e4c:	08006e7d 	.word	0x08006e7d
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e7d 	.word	0x08006e7d
 8006e58:	08006e75 	.word	0x08006e75
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e098      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006e64:	2302      	movs	r3, #2
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e094      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e090      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006e74:	2308      	movs	r3, #8
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	e08c      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e82:	e088      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a5f      	ldr	r2, [pc, #380]	; (8007008 <UART_SetConfig+0x2f0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d125      	bne.n	8006eda <UART_SetConfig+0x1c2>
 8006e8e:	4b5c      	ldr	r3, [pc, #368]	; (8007000 <UART_SetConfig+0x2e8>)
 8006e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e98:	2b30      	cmp	r3, #48	; 0x30
 8006e9a:	d016      	beq.n	8006eca <UART_SetConfig+0x1b2>
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d818      	bhi.n	8006ed2 <UART_SetConfig+0x1ba>
 8006ea0:	2b20      	cmp	r3, #32
 8006ea2:	d00a      	beq.n	8006eba <UART_SetConfig+0x1a2>
 8006ea4:	2b20      	cmp	r3, #32
 8006ea6:	d814      	bhi.n	8006ed2 <UART_SetConfig+0x1ba>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <UART_SetConfig+0x19a>
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d008      	beq.n	8006ec2 <UART_SetConfig+0x1aa>
 8006eb0:	e00f      	b.n	8006ed2 <UART_SetConfig+0x1ba>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb8:	e06d      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec0:	e069      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006ec2:	2304      	movs	r3, #4
 8006ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec8:	e065      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006eca:	2308      	movs	r3, #8
 8006ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed0:	e061      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006ed2:	2310      	movs	r3, #16
 8006ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed8:	e05d      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a4b      	ldr	r2, [pc, #300]	; (800700c <UART_SetConfig+0x2f4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d125      	bne.n	8006f30 <UART_SetConfig+0x218>
 8006ee4:	4b46      	ldr	r3, [pc, #280]	; (8007000 <UART_SetConfig+0x2e8>)
 8006ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eee:	2bc0      	cmp	r3, #192	; 0xc0
 8006ef0:	d016      	beq.n	8006f20 <UART_SetConfig+0x208>
 8006ef2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ef4:	d818      	bhi.n	8006f28 <UART_SetConfig+0x210>
 8006ef6:	2b80      	cmp	r3, #128	; 0x80
 8006ef8:	d00a      	beq.n	8006f10 <UART_SetConfig+0x1f8>
 8006efa:	2b80      	cmp	r3, #128	; 0x80
 8006efc:	d814      	bhi.n	8006f28 <UART_SetConfig+0x210>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <UART_SetConfig+0x1f0>
 8006f02:	2b40      	cmp	r3, #64	; 0x40
 8006f04:	d008      	beq.n	8006f18 <UART_SetConfig+0x200>
 8006f06:	e00f      	b.n	8006f28 <UART_SetConfig+0x210>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	e042      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f10:	2302      	movs	r3, #2
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f16:	e03e      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1e:	e03a      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f20:	2308      	movs	r3, #8
 8006f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f26:	e036      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f2e:	e032      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <UART_SetConfig+0x2e0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d12a      	bne.n	8006f90 <UART_SetConfig+0x278>
 8006f3a:	4b31      	ldr	r3, [pc, #196]	; (8007000 <UART_SetConfig+0x2e8>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f48:	d01a      	beq.n	8006f80 <UART_SetConfig+0x268>
 8006f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f4e:	d81b      	bhi.n	8006f88 <UART_SetConfig+0x270>
 8006f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f54:	d00c      	beq.n	8006f70 <UART_SetConfig+0x258>
 8006f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5a:	d815      	bhi.n	8006f88 <UART_SetConfig+0x270>
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <UART_SetConfig+0x250>
 8006f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f64:	d008      	beq.n	8006f78 <UART_SetConfig+0x260>
 8006f66:	e00f      	b.n	8006f88 <UART_SetConfig+0x270>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	e012      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f70:	2302      	movs	r3, #2
 8006f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f76:	e00e      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f78:	2304      	movs	r3, #4
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f7e:	e00a      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f80:	2308      	movs	r3, #8
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f86:	e006      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f8e:	e002      	b.n	8006f96 <UART_SetConfig+0x27e>
 8006f90:	2310      	movs	r3, #16
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <UART_SetConfig+0x2e0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	f040 80a8 	bne.w	80070f2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fa6:	2b08      	cmp	r3, #8
 8006fa8:	d834      	bhi.n	8007014 <UART_SetConfig+0x2fc>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0x298>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fd5 	.word	0x08006fd5
 8006fb4:	08007015 	.word	0x08007015
 8006fb8:	08006fdd 	.word	0x08006fdd
 8006fbc:	08007015 	.word	0x08007015
 8006fc0:	08006fe3 	.word	0x08006fe3
 8006fc4:	08007015 	.word	0x08007015
 8006fc8:	08007015 	.word	0x08007015
 8006fcc:	08007015 	.word	0x08007015
 8006fd0:	08006feb 	.word	0x08006feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd4:	f7fe fdc4 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fda:	e021      	b.n	8007020 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <UART_SetConfig+0x2f8>)
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fe0:	e01e      	b.n	8007020 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fe2:	f7fe fd4f 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 8006fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fe8:	e01a      	b.n	8007020 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ff0:	e016      	b.n	8007020 <UART_SetConfig+0x308>
 8006ff2:	bf00      	nop
 8006ff4:	cfff69f3 	.word	0xcfff69f3
 8006ff8:	40008000 	.word	0x40008000
 8006ffc:	40013800 	.word	0x40013800
 8007000:	40021000 	.word	0x40021000
 8007004:	40004400 	.word	0x40004400
 8007008:	40004800 	.word	0x40004800
 800700c:	40004c00 	.word	0x40004c00
 8007010:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800701e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 812a 	beq.w	800727c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702c:	4a9e      	ldr	r2, [pc, #632]	; (80072a8 <UART_SetConfig+0x590>)
 800702e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007032:	461a      	mov	r2, r3
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	fbb3 f3f2 	udiv	r3, r3, r2
 800703a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4413      	add	r3, r2
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	429a      	cmp	r2, r3
 800704a:	d305      	bcc.n	8007058 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	429a      	cmp	r2, r3
 8007056:	d903      	bls.n	8007060 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800705e:	e10d      	b.n	800727c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	2200      	movs	r2, #0
 8007064:	60bb      	str	r3, [r7, #8]
 8007066:	60fa      	str	r2, [r7, #12]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	4a8e      	ldr	r2, [pc, #568]	; (80072a8 <UART_SetConfig+0x590>)
 800706e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007072:	b29b      	uxth	r3, r3
 8007074:	2200      	movs	r2, #0
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800707e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007082:	f7f9 fcb7 	bl	80009f4 <__aeabi_uldivmod>
 8007086:	4602      	mov	r2, r0
 8007088:	460b      	mov	r3, r1
 800708a:	4610      	mov	r0, r2
 800708c:	4619      	mov	r1, r3
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	f04f 0300 	mov.w	r3, #0
 8007096:	020b      	lsls	r3, r1, #8
 8007098:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800709c:	0202      	lsls	r2, r0, #8
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	6849      	ldr	r1, [r1, #4]
 80070a2:	0849      	lsrs	r1, r1, #1
 80070a4:	2000      	movs	r0, #0
 80070a6:	460c      	mov	r4, r1
 80070a8:	4605      	mov	r5, r0
 80070aa:	eb12 0804 	adds.w	r8, r2, r4
 80070ae:	eb43 0905 	adc.w	r9, r3, r5
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	469a      	mov	sl, r3
 80070ba:	4693      	mov	fp, r2
 80070bc:	4652      	mov	r2, sl
 80070be:	465b      	mov	r3, fp
 80070c0:	4640      	mov	r0, r8
 80070c2:	4649      	mov	r1, r9
 80070c4:	f7f9 fc96 	bl	80009f4 <__aeabi_uldivmod>
 80070c8:	4602      	mov	r2, r0
 80070ca:	460b      	mov	r3, r1
 80070cc:	4613      	mov	r3, r2
 80070ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070d6:	d308      	bcc.n	80070ea <UART_SetConfig+0x3d2>
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070de:	d204      	bcs.n	80070ea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a3a      	ldr	r2, [r7, #32]
 80070e6:	60da      	str	r2, [r3, #12]
 80070e8:	e0c8      	b.n	800727c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070f0:	e0c4      	b.n	800727c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fa:	d167      	bne.n	80071cc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80070fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007100:	2b08      	cmp	r3, #8
 8007102:	d828      	bhi.n	8007156 <UART_SetConfig+0x43e>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x3f4>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007131 	.word	0x08007131
 8007110:	08007139 	.word	0x08007139
 8007114:	08007141 	.word	0x08007141
 8007118:	08007157 	.word	0x08007157
 800711c:	08007147 	.word	0x08007147
 8007120:	08007157 	.word	0x08007157
 8007124:	08007157 	.word	0x08007157
 8007128:	08007157 	.word	0x08007157
 800712c:	0800714f 	.word	0x0800714f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007130:	f7fe fd16 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007136:	e014      	b.n	8007162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007138:	f7fe fd28 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 800713c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800713e:	e010      	b.n	8007162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007140:	4b5a      	ldr	r3, [pc, #360]	; (80072ac <UART_SetConfig+0x594>)
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007144:	e00d      	b.n	8007162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007146:	f7fe fc9d 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 800714a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800714c:	e009      	b.n	8007162 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800714e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007154:	e005      	b.n	8007162 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8089 	beq.w	800727c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	4a4e      	ldr	r2, [pc, #312]	; (80072a8 <UART_SetConfig+0x590>)
 8007170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007174:	461a      	mov	r2, r3
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	fbb3 f3f2 	udiv	r3, r3, r2
 800717c:	005a      	lsls	r2, r3, #1
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	085b      	lsrs	r3, r3, #1
 8007184:	441a      	add	r2, r3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	fbb2 f3f3 	udiv	r3, r2, r3
 800718e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	2b0f      	cmp	r3, #15
 8007194:	d916      	bls.n	80071c4 <UART_SetConfig+0x4ac>
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800719c:	d212      	bcs.n	80071c4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f023 030f 	bic.w	r3, r3, #15
 80071a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	8bfb      	ldrh	r3, [r7, #30]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	8bfa      	ldrh	r2, [r7, #30]
 80071c0:	60da      	str	r2, [r3, #12]
 80071c2:	e05b      	b.n	800727c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071ca:	e057      	b.n	800727c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d828      	bhi.n	8007226 <UART_SetConfig+0x50e>
 80071d4:	a201      	add	r2, pc, #4	; (adr r2, 80071dc <UART_SetConfig+0x4c4>)
 80071d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071da:	bf00      	nop
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007209 	.word	0x08007209
 80071e4:	08007211 	.word	0x08007211
 80071e8:	08007227 	.word	0x08007227
 80071ec:	08007217 	.word	0x08007217
 80071f0:	08007227 	.word	0x08007227
 80071f4:	08007227 	.word	0x08007227
 80071f8:	08007227 	.word	0x08007227
 80071fc:	0800721f 	.word	0x0800721f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007200:	f7fe fcae 	bl	8005b60 <HAL_RCC_GetPCLK1Freq>
 8007204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007206:	e014      	b.n	8007232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007208:	f7fe fcc0 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 800720c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800720e:	e010      	b.n	8007232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007210:	4b26      	ldr	r3, [pc, #152]	; (80072ac <UART_SetConfig+0x594>)
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007214:	e00d      	b.n	8007232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007216:	f7fe fc35 	bl	8005a84 <HAL_RCC_GetSysClockFreq>
 800721a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800721c:	e009      	b.n	8007232 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800721e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007224:	e005      	b.n	8007232 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007230:	bf00      	nop
    }

    if (pclk != 0U)
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d021      	beq.n	800727c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	4a1a      	ldr	r2, [pc, #104]	; (80072a8 <UART_SetConfig+0x590>)
 800723e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007242:	461a      	mov	r2, r3
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	fbb3 f2f2 	udiv	r2, r3, r2
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	441a      	add	r2, r3
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	fbb2 f3f3 	udiv	r3, r2, r3
 800725a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	2b0f      	cmp	r3, #15
 8007260:	d909      	bls.n	8007276 <UART_SetConfig+0x55e>
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007268:	d205      	bcs.n	8007276 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	b29a      	uxth	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60da      	str	r2, [r3, #12]
 8007274:	e002      	b.n	800727c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2201      	movs	r2, #1
 8007280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2201      	movs	r2, #1
 8007288:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2200      	movs	r2, #0
 8007290:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007298:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800729c:	4618      	mov	r0, r3
 800729e:	3730      	adds	r7, #48	; 0x30
 80072a0:	46bd      	mov	sp, r7
 80072a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072a6:	bf00      	nop
 80072a8:	08007b18 	.word	0x08007b18
 80072ac:	00f42400 	.word	0x00f42400

080072b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	f003 0310 	and.w	r3, r3, #16
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01a      	beq.n	80073c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ae:	d10a      	bne.n	80073c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]
  }
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b098      	sub	sp, #96	; 0x60
 80073f8:	af02      	add	r7, sp, #8
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007404:	f7fa fc8e 	bl	8001d24 <HAL_GetTick>
 8007408:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b08      	cmp	r3, #8
 8007416:	d12f      	bne.n	8007478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007420:	2200      	movs	r2, #0
 8007422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f88e 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d022      	beq.n	8007478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007446:	653b      	str	r3, [r7, #80]	; 0x50
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
 8007452:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007456:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007458:	e841 2300 	strex	r3, r2, [r1]
 800745c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800745e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1e6      	bne.n	8007432 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e063      	b.n	8007540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b04      	cmp	r3, #4
 8007484:	d149      	bne.n	800751a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007486:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748e:	2200      	movs	r2, #0
 8007490:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f857 	bl	8007548 <UART_WaitOnFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d03c      	beq.n	800751a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	623b      	str	r3, [r7, #32]
   return(result);
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
 80074c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e6      	bne.n	80074a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074f2:	61fa      	str	r2, [r7, #28]
 80074f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	69b9      	ldr	r1, [r7, #24]
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e012      	b.n	8007540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3758      	adds	r7, #88	; 0x58
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007558:	e04f      	b.n	80075fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d04b      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fa fbdf 	bl	8001d24 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <UART_WaitOnFlagUntilTimeout+0x30>
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e04e      	b.n	800761a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b00      	cmp	r3, #0
 8007588:	d037      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d034      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d031      	beq.n	80075fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d110      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2208      	movs	r2, #8
 80075aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f838 	bl	8007622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2208      	movs	r2, #8
 80075b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e029      	b.n	800761a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d4:	d111      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f81e 	bl	8007622 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e00f      	b.n	800761a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4013      	ands	r3, r2
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	429a      	cmp	r2, r3
 8007608:	bf0c      	ite	eq
 800760a:	2301      	moveq	r3, #1
 800760c:	2300      	movne	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	429a      	cmp	r2, r3
 8007616:	d0a0      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007622:	b480      	push	{r7}
 8007624:	b095      	sub	sp, #84	; 0x54
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800763e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007648:	643b      	str	r3, [r7, #64]	; 0x40
 800764a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800764e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	61fb      	str	r3, [r7, #28]
   return(result);
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	64bb      	str	r3, [r7, #72]	; 0x48
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3308      	adds	r3, #8
 800767e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007680:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e3      	bne.n	800765c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007698:	2b01      	cmp	r3, #1
 800769a:	d118      	bne.n	80076ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	647b      	str	r3, [r7, #68]	; 0x44
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6979      	ldr	r1, [r7, #20]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	613b      	str	r3, [r7, #16]
   return(result);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e6      	bne.n	800769c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80076e2:	bf00      	nop
 80076e4:	3754      	adds	r7, #84	; 0x54
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b085      	sub	sp, #20
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <HAL_UARTEx_DisableFifoMode+0x16>
 8007700:	2302      	movs	r3, #2
 8007702:	e027      	b.n	8007754 <HAL_UARTEx_DisableFifoMode+0x66>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2224      	movs	r2, #36	; 0x24
 8007710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007732:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007774:	2302      	movs	r3, #2
 8007776:	e02d      	b.n	80077d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2224      	movs	r2, #36	; 0x24
 8007784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0201 	bic.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f84f 	bl	8007858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e02d      	b.n	8007850 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	; 0x24
 8007800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f811 	bl	8007858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007864:	2b00      	cmp	r3, #0
 8007866:	d108      	bne.n	800787a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007878:	e031      	b.n	80078de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800787a:	2308      	movs	r3, #8
 800787c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800787e:	2308      	movs	r3, #8
 8007880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	0e5b      	lsrs	r3, r3, #25
 800788a:	b2db      	uxtb	r3, r3
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	0f5b      	lsrs	r3, r3, #29
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0307 	and.w	r3, r3, #7
 80078a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078a2:	7bbb      	ldrb	r3, [r7, #14]
 80078a4:	7b3a      	ldrb	r2, [r7, #12]
 80078a6:	4911      	ldr	r1, [pc, #68]	; (80078ec <UARTEx_SetNbDataToProcess+0x94>)
 80078a8:	5c8a      	ldrb	r2, [r1, r2]
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ae:	7b3a      	ldrb	r2, [r7, #12]
 80078b0:	490f      	ldr	r1, [pc, #60]	; (80078f0 <UARTEx_SetNbDataToProcess+0x98>)
 80078b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	7b7a      	ldrb	r2, [r7, #13]
 80078c4:	4909      	ldr	r1, [pc, #36]	; (80078ec <UARTEx_SetNbDataToProcess+0x94>)
 80078c6:	5c8a      	ldrb	r2, [r1, r2]
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078cc:	7b7a      	ldrb	r2, [r7, #13]
 80078ce:	4908      	ldr	r1, [pc, #32]	; (80078f0 <UARTEx_SetNbDataToProcess+0x98>)
 80078d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078de:	bf00      	nop
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	08007b30 	.word	0x08007b30
 80078f0:	08007b38 	.word	0x08007b38

080078f4 <malloc>:
 80078f4:	4b02      	ldr	r3, [pc, #8]	; (8007900 <malloc+0xc>)
 80078f6:	4601      	mov	r1, r0
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f000 b823 	b.w	8007944 <_malloc_r>
 80078fe:	bf00      	nop
 8007900:	2000005c 	.word	0x2000005c

08007904 <sbrk_aligned>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	4e0e      	ldr	r6, [pc, #56]	; (8007940 <sbrk_aligned+0x3c>)
 8007908:	460c      	mov	r4, r1
 800790a:	6831      	ldr	r1, [r6, #0]
 800790c:	4605      	mov	r5, r0
 800790e:	b911      	cbnz	r1, 8007916 <sbrk_aligned+0x12>
 8007910:	f000 f8ac 	bl	8007a6c <_sbrk_r>
 8007914:	6030      	str	r0, [r6, #0]
 8007916:	4621      	mov	r1, r4
 8007918:	4628      	mov	r0, r5
 800791a:	f000 f8a7 	bl	8007a6c <_sbrk_r>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	d00a      	beq.n	8007938 <sbrk_aligned+0x34>
 8007922:	1cc4      	adds	r4, r0, #3
 8007924:	f024 0403 	bic.w	r4, r4, #3
 8007928:	42a0      	cmp	r0, r4
 800792a:	d007      	beq.n	800793c <sbrk_aligned+0x38>
 800792c:	1a21      	subs	r1, r4, r0
 800792e:	4628      	mov	r0, r5
 8007930:	f000 f89c 	bl	8007a6c <_sbrk_r>
 8007934:	3001      	adds	r0, #1
 8007936:	d101      	bne.n	800793c <sbrk_aligned+0x38>
 8007938:	f04f 34ff 	mov.w	r4, #4294967295
 800793c:	4620      	mov	r0, r4
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	20000584 	.word	0x20000584

08007944 <_malloc_r>:
 8007944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007948:	1ccd      	adds	r5, r1, #3
 800794a:	f025 0503 	bic.w	r5, r5, #3
 800794e:	3508      	adds	r5, #8
 8007950:	2d0c      	cmp	r5, #12
 8007952:	bf38      	it	cc
 8007954:	250c      	movcc	r5, #12
 8007956:	2d00      	cmp	r5, #0
 8007958:	4607      	mov	r7, r0
 800795a:	db01      	blt.n	8007960 <_malloc_r+0x1c>
 800795c:	42a9      	cmp	r1, r5
 800795e:	d905      	bls.n	800796c <_malloc_r+0x28>
 8007960:	230c      	movs	r3, #12
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	2600      	movs	r6, #0
 8007966:	4630      	mov	r0, r6
 8007968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800796c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a40 <_malloc_r+0xfc>
 8007970:	f000 f868 	bl	8007a44 <__malloc_lock>
 8007974:	f8d8 3000 	ldr.w	r3, [r8]
 8007978:	461c      	mov	r4, r3
 800797a:	bb5c      	cbnz	r4, 80079d4 <_malloc_r+0x90>
 800797c:	4629      	mov	r1, r5
 800797e:	4638      	mov	r0, r7
 8007980:	f7ff ffc0 	bl	8007904 <sbrk_aligned>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	4604      	mov	r4, r0
 8007988:	d155      	bne.n	8007a36 <_malloc_r+0xf2>
 800798a:	f8d8 4000 	ldr.w	r4, [r8]
 800798e:	4626      	mov	r6, r4
 8007990:	2e00      	cmp	r6, #0
 8007992:	d145      	bne.n	8007a20 <_malloc_r+0xdc>
 8007994:	2c00      	cmp	r4, #0
 8007996:	d048      	beq.n	8007a2a <_malloc_r+0xe6>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	4631      	mov	r1, r6
 800799c:	4638      	mov	r0, r7
 800799e:	eb04 0903 	add.w	r9, r4, r3
 80079a2:	f000 f863 	bl	8007a6c <_sbrk_r>
 80079a6:	4581      	cmp	r9, r0
 80079a8:	d13f      	bne.n	8007a2a <_malloc_r+0xe6>
 80079aa:	6821      	ldr	r1, [r4, #0]
 80079ac:	1a6d      	subs	r5, r5, r1
 80079ae:	4629      	mov	r1, r5
 80079b0:	4638      	mov	r0, r7
 80079b2:	f7ff ffa7 	bl	8007904 <sbrk_aligned>
 80079b6:	3001      	adds	r0, #1
 80079b8:	d037      	beq.n	8007a2a <_malloc_r+0xe6>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	442b      	add	r3, r5
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	f8d8 3000 	ldr.w	r3, [r8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d038      	beq.n	8007a3a <_malloc_r+0xf6>
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	42a2      	cmp	r2, r4
 80079cc:	d12b      	bne.n	8007a26 <_malloc_r+0xe2>
 80079ce:	2200      	movs	r2, #0
 80079d0:	605a      	str	r2, [r3, #4]
 80079d2:	e00f      	b.n	80079f4 <_malloc_r+0xb0>
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	1b52      	subs	r2, r2, r5
 80079d8:	d41f      	bmi.n	8007a1a <_malloc_r+0xd6>
 80079da:	2a0b      	cmp	r2, #11
 80079dc:	d917      	bls.n	8007a0e <_malloc_r+0xca>
 80079de:	1961      	adds	r1, r4, r5
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	6025      	str	r5, [r4, #0]
 80079e4:	bf18      	it	ne
 80079e6:	6059      	strne	r1, [r3, #4]
 80079e8:	6863      	ldr	r3, [r4, #4]
 80079ea:	bf08      	it	eq
 80079ec:	f8c8 1000 	streq.w	r1, [r8]
 80079f0:	5162      	str	r2, [r4, r5]
 80079f2:	604b      	str	r3, [r1, #4]
 80079f4:	4638      	mov	r0, r7
 80079f6:	f104 060b 	add.w	r6, r4, #11
 80079fa:	f000 f829 	bl	8007a50 <__malloc_unlock>
 80079fe:	f026 0607 	bic.w	r6, r6, #7
 8007a02:	1d23      	adds	r3, r4, #4
 8007a04:	1af2      	subs	r2, r6, r3
 8007a06:	d0ae      	beq.n	8007966 <_malloc_r+0x22>
 8007a08:	1b9b      	subs	r3, r3, r6
 8007a0a:	50a3      	str	r3, [r4, r2]
 8007a0c:	e7ab      	b.n	8007966 <_malloc_r+0x22>
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	6862      	ldr	r2, [r4, #4]
 8007a12:	d1dd      	bne.n	80079d0 <_malloc_r+0x8c>
 8007a14:	f8c8 2000 	str.w	r2, [r8]
 8007a18:	e7ec      	b.n	80079f4 <_malloc_r+0xb0>
 8007a1a:	4623      	mov	r3, r4
 8007a1c:	6864      	ldr	r4, [r4, #4]
 8007a1e:	e7ac      	b.n	800797a <_malloc_r+0x36>
 8007a20:	4634      	mov	r4, r6
 8007a22:	6876      	ldr	r6, [r6, #4]
 8007a24:	e7b4      	b.n	8007990 <_malloc_r+0x4c>
 8007a26:	4613      	mov	r3, r2
 8007a28:	e7cc      	b.n	80079c4 <_malloc_r+0x80>
 8007a2a:	230c      	movs	r3, #12
 8007a2c:	603b      	str	r3, [r7, #0]
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f000 f80e 	bl	8007a50 <__malloc_unlock>
 8007a34:	e797      	b.n	8007966 <_malloc_r+0x22>
 8007a36:	6025      	str	r5, [r4, #0]
 8007a38:	e7dc      	b.n	80079f4 <_malloc_r+0xb0>
 8007a3a:	605b      	str	r3, [r3, #4]
 8007a3c:	deff      	udf	#255	; 0xff
 8007a3e:	bf00      	nop
 8007a40:	20000580 	.word	0x20000580

08007a44 <__malloc_lock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__malloc_lock+0x8>)
 8007a46:	f000 b84b 	b.w	8007ae0 <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	200006c4 	.word	0x200006c4

08007a50 <__malloc_unlock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__malloc_unlock+0x8>)
 8007a52:	f000 b846 	b.w	8007ae2 <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	200006c4 	.word	0x200006c4

08007a5c <memset>:
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <memset+0xa>
 8007a64:	4770      	bx	lr
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <memset+0x4>

08007a6c <_sbrk_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d06      	ldr	r5, [pc, #24]	; (8007a88 <_sbrk_r+0x1c>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	f7fa f87e 	bl	8001b78 <_sbrk>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_sbrk_r+0x1a>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_sbrk_r+0x1a>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	200006c0 	.word	0x200006c0

08007a8c <__errno>:
 8007a8c:	4b01      	ldr	r3, [pc, #4]	; (8007a94 <__errno+0x8>)
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	2000005c 	.word	0x2000005c

08007a98 <__libc_init_array>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	4d0d      	ldr	r5, [pc, #52]	; (8007ad0 <__libc_init_array+0x38>)
 8007a9c:	4c0d      	ldr	r4, [pc, #52]	; (8007ad4 <__libc_init_array+0x3c>)
 8007a9e:	1b64      	subs	r4, r4, r5
 8007aa0:	10a4      	asrs	r4, r4, #2
 8007aa2:	2600      	movs	r6, #0
 8007aa4:	42a6      	cmp	r6, r4
 8007aa6:	d109      	bne.n	8007abc <__libc_init_array+0x24>
 8007aa8:	4d0b      	ldr	r5, [pc, #44]	; (8007ad8 <__libc_init_array+0x40>)
 8007aaa:	4c0c      	ldr	r4, [pc, #48]	; (8007adc <__libc_init_array+0x44>)
 8007aac:	f000 f81a 	bl	8007ae4 <_init>
 8007ab0:	1b64      	subs	r4, r4, r5
 8007ab2:	10a4      	asrs	r4, r4, #2
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	42a6      	cmp	r6, r4
 8007ab8:	d105      	bne.n	8007ac6 <__libc_init_array+0x2e>
 8007aba:	bd70      	pop	{r4, r5, r6, pc}
 8007abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac0:	4798      	blx	r3
 8007ac2:	3601      	adds	r6, #1
 8007ac4:	e7ee      	b.n	8007aa4 <__libc_init_array+0xc>
 8007ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aca:	4798      	blx	r3
 8007acc:	3601      	adds	r6, #1
 8007ace:	e7f2      	b.n	8007ab6 <__libc_init_array+0x1e>
 8007ad0:	08007b48 	.word	0x08007b48
 8007ad4:	08007b48 	.word	0x08007b48
 8007ad8:	08007b48 	.word	0x08007b48
 8007adc:	08007b4c 	.word	0x08007b4c

08007ae0 <__retarget_lock_acquire_recursive>:
 8007ae0:	4770      	bx	lr

08007ae2 <__retarget_lock_release_recursive>:
 8007ae2:	4770      	bx	lr

08007ae4 <_init>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr

08007af0 <_fini>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	bf00      	nop
 8007af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af6:	bc08      	pop	{r3}
 8007af8:	469e      	mov	lr, r3
 8007afa:	4770      	bx	lr
