
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bdc  08005bdc  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005be4  08005be4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000074c  20000060  08005c4c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08005c4c  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ff7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e7e  00000000  00000000  000370ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  00039f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001058  00000000  00000000  0003b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f499  00000000  00000000  0003c478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5d9  00000000  00000000  0005b911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caddd  00000000  00000000  00075eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d0c  00000000  00000000  00140cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001469d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005b80 	.word	0x08005b80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08005b80 	.word	0x08005b80

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]


	ResetCodec(hi2c1);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f87d 	bl	8000df8 <ResetCodec>

	HAL_Delay(25);
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 fe1c 	bl	800193c <HAL_Delay>


	// -----------

	//Connect Linput1 to inverting input of left input PGA, 0db gain, connecting Left input PGA to input booster
	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000d04:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d08:	2120      	movs	r1, #32
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f881 	bl	8000e12 <WriteCodecRegister>

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000d10:	f240 1279 	movw	r2, #377	; 0x179
 8000d14:	2102      	movs	r1, #2
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f87b 	bl	8000e12 <WriteCodecRegister>

	//un mute left channel
	WriteCodecRegister(hi2c1, 0x00, 0b100000000);
 8000d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d20:	2100      	movs	r1, #0
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f875 	bl	8000e12 <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 0b100000000);
 8000d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f86f 	bl	8000e12 <WriteCodecRegister>

	//Enable LB2LO
	WriteCodecRegister(hi2c1, 0x2D, 0b101010000);
 8000d34:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000d38:	212d      	movs	r1, #45	; 0x2d
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f869 	bl	8000e12 <WriteCodecRegister>


	// ----- Power Management -----

	// outdated R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b111111100);
 8000d40:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000d44:	2119      	movs	r1, #25
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f863 	bl	8000e12 <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b111010000);
 8000d4c:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000d50:	211a      	movs	r1, #26
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f85d 	bl	8000e12 <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000111100);
 8000d58:	223c      	movs	r2, #60	; 0x3c
 8000d5a:	212f      	movs	r1, #47	; 0x2f
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f858 	bl	8000e12 <WriteCodecRegister>

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b100000000);
 8000d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d66:	2102      	movs	r1, #2
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f852 	bl	8000e12 <WriteCodecRegister>



	// Disable master mode codec
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 8000d6e:	220a      	movs	r2, #10
 8000d70:	2107      	movs	r1, #7
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f84d 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000d78:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f847 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x21, 0b100001000);
 8000d84:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d88:	2121      	movs	r1, #33	; 0x21
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f841 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x2D, 0b000000000);
 8000d90:	2200      	movs	r2, #0
 8000d92:	212d      	movs	r1, #45	; 0x2d
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f83c 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x2E, 0b000000000);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	212e      	movs	r1, #46	; 0x2e
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f837 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x22, 0b101010000);
 8000da4:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000da8:	2122      	movs	r1, #34	; 0x22
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f831 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x25, 0b101010000);
 8000db0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000db4:	2125      	movs	r1, #37	; 0x25
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f82b 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x34, 0b000000000);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2134      	movs	r1, #52	; 0x34
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f826 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x04, 0b000000000);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2104      	movs	r1, #4
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f821 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x08, 0b111000000);
 8000dd0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f81b 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x05, 0b000000000);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2105      	movs	r1, #5
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f816 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x09, 0b000000001);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2109      	movs	r1, #9
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f811 	bl	8000e12 <WriteCodecRegister>
	HAL_I2C_Master_Transmit(hi2c1, codecAddr, buf, 1 , HAL_MAX_DELAY);

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/

}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	210f      	movs	r1, #15
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f804 	bl	8000e12 <WriteCodecRegister>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint16_t reg, uint16_t pData){
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b088      	sub	sp, #32
 8000e16:	af04      	add	r7, sp, #16
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	803b      	strh	r3, [r7, #0]
	uint8_t lowByte  = (uint8_t)(pData & 0xFF);
 8000e22:	883b      	ldrh	r3, [r7, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	73fb      	strb	r3, [r7, #15]
	uint8_t highByte = (uint8_t)(pData >> 8);
 8000e28:	883b      	ldrh	r3, [r7, #0]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &highByte, 1, HAL_MAX_DELAY);
 8000e32:	2334      	movs	r3, #52	; 0x34
 8000e34:	b299      	uxth	r1, r3
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	f107 030e 	add.w	r3, r7, #14
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f001 fb50 	bl	80024f0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 8000e50:	2334      	movs	r3, #52	; 0x34
 8000e52:	b299      	uxth	r1, r3
 8000e54:	887a      	ldrh	r2, [r7, #2]
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	f107 030f 	add.w	r3, r7, #15
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f001 fb41 	bl	80024f0 <HAL_I2C_Mem_Write>

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000e7c:	2340      	movs	r3, #64	; 0x40
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 fd85 	bl	8005990 <malloc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <InitDSP+0x2c>)
 8000e8c:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 fd7c 	bl	8005990 <malloc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <InitDSP+0x30>)
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000007c 	.word	0x2000007c
 8000ea8:	20000080 	.word	0x20000080

08000eac <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const SampleType* input, SampleType* output, size_t bufferLength) {
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e002      	b.n	8000ec4 <processBuffer+0x18>
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f8      	bhi.n	8000ebe <processBuffer+0x12>
        //output[i] = i;
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_I2S_RxHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000ee8:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000eee:	601a      	str	r2, [r3, #0]

	processBuffer(adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000ef0:	2240      	movs	r2, #64	; 0x40
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000ef6:	f7ff ffd9 	bl	8000eac <processBuffer>

	//HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);

	dataReadyFlag = 1;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]

}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000654 	.word	0x20000654
 8000f0c:	20000254 	.word	0x20000254
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000454 	.word	0x20000454
 8000f18:	20000658 	.word	0x20000658

08000f1c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <HAL_I2S_RxCpltCallback+0x28>)
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_I2S_RxCpltCallback+0x2c>)
 8000f28:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_I2S_RxCpltCallback+0x30>)
 8000f2c:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <HAL_I2S_RxCpltCallback+0x34>)
 8000f2e:	601a      	str	r2, [r3, #0]

	//processBuffer((SampleType*)(adcBuf+AUDIO_BUFFER_SIZE/2), (SampleType*)(dacBuf+AUDIO_BUFFER_SIZE/2), AUDIO_BUFFER_SIZE/2);
	//HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);

	dataReadyFlag = 1;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <HAL_I2S_RxCpltCallback+0x38>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000654 	.word	0x20000654
 8000f48:	20000354 	.word	0x20000354
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000554 	.word	0x20000554
 8000f54:	20000658 	.word	0x20000658

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fc7c 	bl	800185a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f837 	bl	8000fd4 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f66:	b662      	cpsie	i
}
 8000f68:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f000 f9ad 	bl	80012c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6e:	f000 f981 	bl	8001274 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000f72:	f000 f8e3 	bl	800113c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8000f76:	f000 f92b 	bl	80011d0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000f7a:	f000 f877 	bl	800106c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f7e:	f000 f8b5 	bl	80010ec <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DMA_Start(&hdma_spi2_rx, (uint32_t)hi2s2.pRxBuffPtr, (uint32_t)adcBuf, AUDIO_BUFFER_SIZE);


  HAL_TIM_Base_Start(&htim6);
 8000f82:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <main+0x68>)
 8000f84:	f003 fd46 	bl	8004a14 <HAL_TIM_Base_Start>

  InitDSP();
 8000f88:	f7ff ff76 	bl	8000e78 <InitDSP>

  CodecInit(&hi2c1);
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <main+0x6c>)
 8000f8e:	f7ff feaf 	bl	8000cf0 <CodecInit>

  for(int i = 0; i < AUDIO_BUFFER_SIZE;i++){
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	e007      	b.n	8000fa8 <main+0x50>
	  dacBuf[i] = i;
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	490b      	ldr	r1, [pc, #44]	; (8000fc8 <main+0x70>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < AUDIO_BUFFER_SIZE;i++){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b7f      	cmp	r3, #127	; 0x7f
 8000fac:	ddf4      	ble.n	8000f98 <main+0x40>
  }

  HAL_Delay(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f000 fcc4 	bl	800193c <HAL_Delay>

  HAL_I2S_Receive_DMA(&hi2s3, (uint16_t*)&adcBuf[0], AUDIO_BUFFER_SIZE/2);
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	4905      	ldr	r1, [pc, #20]	; (8000fcc <main+0x74>)
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <main+0x78>)
 8000fba:	f001 ff93 	bl	8002ee4 <HAL_I2S_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <main+0x66>
 8000fc0:	20000208 	.word	0x20000208
 8000fc4:	20000084 	.word	0x20000084
 8000fc8:	20000454 	.word	0x20000454
 8000fcc:	20000254 	.word	0x20000254
 8000fd0:	200000d8 	.word	0x200000d8

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	2238      	movs	r2, #56	; 0x38
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 fd88 	bl	8005af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f002 f890 	bl	800311c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001006:	2340      	movs	r3, #64	; 0x40
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001012:	2304      	movs	r3, #4
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001016:	2355      	movs	r3, #85	; 0x55
 8001018:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101e:	2302      	movs	r3, #2
 8001020:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	4618      	mov	r0, r3
 800102c:	f002 f92a 	bl	8003284 <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001036:	f000 f9c5 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2303      	movs	r3, #3
 8001040:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2104      	movs	r1, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f002 fc28 	bl	80038a8 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800105e:	f000 f9b1 	bl	80013c4 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3750      	adds	r7, #80	; 0x50
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <MX_I2C1_Init+0x78>)
 8001074:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <MX_I2C1_Init+0x7c>)
 800107a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_I2C1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001084:	2201      	movs	r2, #1
 8001086:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_I2C1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010a8:	f001 f986 	bl	80023b8 <HAL_I2C_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010b2:	f000 f987 	bl	80013c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010ba:	f001 fd9b 	bl	8002bf4 <HAL_I2CEx_ConfigAnalogFilter>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c4:	f000 f97e 	bl	80013c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_I2C1_Init+0x74>)
 80010cc:	f001 fddd 	bl	8002c8a <HAL_I2CEx_ConfigDigitalFilter>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f000 f975 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000084 	.word	0x20000084
 80010e4:	40005400 	.word	0x40005400
 80010e8:	30a0a7fb 	.word	0x30a0a7fb

080010ec <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_I2S3_Init+0x48>)
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <MX_I2S3_Init+0x4c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_RX;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2S3_Init+0x48>)
 80010f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010fc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_I2S3_Init+0x48>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_I2S3_Init+0x48>)
 8001106:	2203      	movs	r2, #3
 8001108:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2S3_Init+0x48>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_I2S3_Init+0x48>)
 8001112:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001116:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2S3_Init+0x48>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_I2S3_Init+0x48>)
 8001120:	f001 fe00 	bl	8002d24 <HAL_I2S_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_I2S3_Init+0x42>
  {
    Error_Handler();
 800112a:	f000 f94b 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200000d8 	.word	0x200000d8
 8001138:	40003c00 	.word	0x40003c00

0800113c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <MX_LPUART1_UART_Init+0x90>)
 8001144:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800117e:	4812      	ldr	r0, [pc, #72]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001180:	f003 fdc8 	bl	8004d14 <HAL_UART_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 f91b 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 8001192:	f004 fb33 	bl	80057fc <HAL_UARTEx_SetTxFifoThreshold>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800119c:	f000 f912 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 80011a4:	f004 fb68 	bl	8005878 <HAL_UARTEx_SetRxFifoThreshold>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011ae:	f000 f909 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_LPUART1_UART_Init+0x8c>)
 80011b4:	f004 fae9 	bl	800578a <HAL_UARTEx_DisableFifoMode>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011be:	f000 f901 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000174 	.word	0x20000174
 80011cc:	40008000 	.word	0x40008000

080011d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_TIM6_Init+0x98>)
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <MX_TIM6_Init+0x9c>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <MX_TIM6_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM6_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_TIM6_Init+0x98>)
 80011f4:	f640 7218 	movw	r2, #3864	; 0xf18
 80011f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <MX_TIM6_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001200:	4819      	ldr	r0, [pc, #100]	; (8001268 <MX_TIM6_Init+0x98>)
 8001202:	f003 fbaf 	bl	8004964 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800120c:	f000 f8da 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001210:	2320      	movs	r3, #32
 8001212:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <MX_TIM6_Init+0x98>)
 800121e:	f003 fcf7 	bl	8004c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001228:	f000 f8cc 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 800122c:	4b10      	ldr	r3, [pc, #64]	; (8001270 <MX_TIM6_Init+0xa0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f943 	bl	80004bc <__aeabi_i2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	a109      	add	r1, pc, #36	; (adr r1, 8001260 <MX_TIM6_Init+0x90>)
 800123c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001240:	f7ff fad0 	bl	80007e4 <__aeabi_ddiv>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fbb2 	bl	80009b4 <__aeabi_d2uiz>
 8001250:	4603      	mov	r3, r0
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <MX_TIM6_Init+0x98>)
 8001254:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	00000000 	.word	0x00000000
 8001264:	41a443fd 	.word	0x41a443fd
 8001268:	20000208 	.word	0x20000208
 800126c:	40001000 	.word	0x40001000
 8001270:	08005b98 	.word	0x08005b98

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_DMA_Init+0x50>)
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <MX_DMA_Init+0x50>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6493      	str	r3, [r2, #72]	; 0x48
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_DMA_Init+0x50>)
 8001288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_DMA_Init+0x50>)
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MX_DMA_Init+0x50>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6493      	str	r3, [r2, #72]	; 0x48
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x50>)
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200b      	movs	r0, #11
 80012b0:	f000 fc41 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012b4:	200b      	movs	r0, #11
 80012b6:	f000 fc58 	bl	8001b6a <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <MX_GPIO_Init+0xf0>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <MX_GPIO_Init+0xf0>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <MX_GPIO_Init+0xf0>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <MX_GPIO_Init+0xf0>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <MX_GPIO_Init+0xf0>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <MX_GPIO_Init+0xf0>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_GPIO_Init+0xf0>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <MX_GPIO_Init+0xf0>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_GPIO_Init+0xf0>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_GPIO_Init+0xf0>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <MX_GPIO_Init+0xf0>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_GPIO_Init+0xf0>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f001 f81e 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2107      	movs	r1, #7
 8001350:	481a      	ldr	r0, [pc, #104]	; (80013bc <MX_GPIO_Init+0xf4>)
 8001352:	f001 f819 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4814      	ldr	r0, [pc, #80]	; (80013c0 <MX_GPIO_Init+0xf8>)
 800136e:	f000 fe89 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 8001372:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f000 fe79 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegClk_Pin ShiftRegData_Pin ShiftRegEn_Pin */
  GPIO_InitStruct.Pin = ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin;
 8001392:	2307      	movs	r3, #7
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_GPIO_Init+0xf4>)
 80013aa:	f000 fe6b 	bl	8002084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	48000800 	.word	0x48000800

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x44>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x44>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6613      	str	r3, [r2, #96]	; 0x60
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x44>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x44>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x44>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6593      	str	r3, [r2, #88]	; 0x58
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x44>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001406:	f001 ff2d 	bl	8003264 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b09a      	sub	sp, #104	; 0x68
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	2244      	movs	r2, #68	; 0x44
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fb5d 	bl	8005af8 <memset>
  if(hi2c->Instance==I2C1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <HAL_I2C_MspInit+0xa8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d136      	bne.n	80014b6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001448:	2340      	movs	r3, #64	; 0x40
 800144a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fc43 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001460:	f7ff ffb0 	bl	80013c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_I2C_MspInit+0xac>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <HAL_I2C_MspInit+0xac>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_I2C_MspInit+0xac>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001480:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001482:	2312      	movs	r3, #18
 8001484:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800148e:	2304      	movs	r3, #4
 8001490:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001496:	4619      	mov	r1, r3
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <HAL_I2C_MspInit+0xb0>)
 800149a:	f000 fdf3 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_I2C_MspInit+0xac>)
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_I2C_MspInit+0xac>)
 80014a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a8:	6593      	str	r3, [r2, #88]	; 0x58
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_I2C_MspInit+0xac>)
 80014ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3768      	adds	r7, #104	; 0x68
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40005400 	.word	0x40005400
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000400 	.word	0x48000400

080014cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b09c      	sub	sp, #112	; 0x70
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	2244      	movs	r2, #68	; 0x44
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fb03 	bl	8005af8 <memset>
  if(hi2s->Instance==SPI3)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a45      	ldr	r2, [pc, #276]	; (800160c <HAL_I2S_MspInit+0x140>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	f040 8082 	bne.w	8001602 <HAL_I2S_MspInit+0x136>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001502:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001504:	2300      	movs	r3, #0
 8001506:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fbe7 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001518:	f7ff ff54 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800151c:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <HAL_I2S_MspInit+0x144>)
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	4a3b      	ldr	r2, [pc, #236]	; (8001610 <HAL_I2S_MspInit+0x144>)
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	6593      	str	r3, [r2, #88]	; 0x58
 8001528:	4b39      	ldr	r3, [pc, #228]	; (8001610 <HAL_I2S_MspInit+0x144>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_I2S_MspInit+0x144>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	4a35      	ldr	r2, [pc, #212]	; (8001610 <HAL_I2S_MspInit+0x144>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001540:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_I2S_MspInit+0x144>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_I2S_MspInit+0x144>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <HAL_I2S_MspInit+0x144>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_I2S_MspInit+0x144>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
    /**I2S3 GPIO Configuration
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001568:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001576:	2306      	movs	r3, #6
 8001578:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001584:	f000 fd7e 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800158c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800159a:	2306      	movs	r3, #6
 800159c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a2:	4619      	mov	r1, r3
 80015a4:	481b      	ldr	r0, [pc, #108]	; (8001614 <HAL_I2S_MspInit+0x148>)
 80015a6:	f000 fd6d 	bl	8002084 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel1;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_I2S_MspInit+0x150>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015b2:	220e      	movs	r2, #14
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ce:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d6:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015da:	2220      	movs	r2, #32
 80015dc:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015e0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80015e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80015e6:	480c      	ldr	r0, [pc, #48]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015e8:	f000 fada 	bl	8001ba0 <HAL_DMA_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2S_MspInit+0x12a>
    {
      Error_Handler();
 80015f2:	f7ff fee7 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi3_rx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_I2S_MspInit+0x14c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3770      	adds	r7, #112	; 0x70
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40003c00 	.word	0x40003c00
 8001610:	40021000 	.word	0x40021000
 8001614:	48000800 	.word	0x48000800
 8001618:	20000114 	.word	0x20000114
 800161c:	40020008 	.word	0x40020008

08001620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b09a      	sub	sp, #104	; 0x68
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2244      	movs	r2, #68	; 0x44
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fa59 	bl	8005af8 <memset>
  if(huart->Instance==LPUART1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_UART_MspInit+0xa8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d136      	bne.n	80016be <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001650:	2320      	movs	r3, #32
 8001652:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4618      	mov	r0, r3
 800165e:	f002 fb3f 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001668:	f7ff feac 	bl	80013c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_UART_MspInit+0xac>)
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_UART_MspInit+0xac>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_UART_MspInit+0xac>)
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_UART_MspInit+0xac>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_UART_MspInit+0xac>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_UART_MspInit+0xac>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800169c:	230c      	movs	r3, #12
 800169e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016ac:	230c      	movs	r3, #12
 80016ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f000 fce3 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3768      	adds	r7, #104	; 0x68
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40008000 	.word	0x40008000
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_TIM_Base_MspInit+0x38>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10b      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_TIM_Base_MspInit+0x3c>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x3c>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	6593      	str	r3, [r2, #88]	; 0x58
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_TIM_Base_MspInit+0x3c>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40001000 	.word	0x40001000
 800170c:	40021000 	.word	0x40021000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	e7fe      	b.n	8001714 <NMI_Handler+0x4>

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 f8d0 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA1_Channel1_IRQHandler+0x10>)
 800176a:	f000 fb3c 	bl	8001de6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000114 	.word	0x20000114

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f004 f9be 	bl	8005b28 <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20008000 	.word	0x20008000
 80017d8:	00000400 	.word	0x00000400
 80017dc:	2000065c 	.word	0x2000065c
 80017e0:	200007b0 	.word	0x200007b0

080017e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800180c:	f7ff ffea 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopForever+0xe>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopForever+0x16>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f004 f97d 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800183a:	f7ff fb8d 	bl	8000f58 <main>

0800183e <LoopForever>:

LoopForever:
    b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   r0, =_estack
 8001840:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800184c:	08005bec 	.word	0x08005bec
  ldr r2, =_sbss
 8001850:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001854:	200007ac 	.word	0x200007ac

08001858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>

0800185a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f95b 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f80e 	bl	800188c <HAL_InitTick>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	e001      	b.n	8001880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187c:	f7ff fda8 	bl	80013d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001880:	79fb      	ldrb	r3, [r7, #7]

}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_InitTick+0x68>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d022      	beq.n	80018e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_InitTick+0x6c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_InitTick+0x68>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f966 	bl	8001b86 <HAL_SYSTICK_Config>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10f      	bne.n	80018e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b0f      	cmp	r3, #15
 80018c4:	d809      	bhi.n	80018da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c6:	2200      	movs	r2, #0
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	f04f 30ff 	mov.w	r0, #4294967295
 80018ce:	f000 f932 	bl	8001b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_InitTick+0x70>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e007      	b.n	80018ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	73fb      	strb	r3, [r7, #15]
 80018de:	e004      	b.n	80018ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e001      	b.n	80018ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	20000004 	.word	0x20000004
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_IncTick+0x1c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_IncTick+0x20>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4413      	add	r3, r2
 800190e:	4a03      	ldr	r2, [pc, #12]	; (800191c <HAL_IncTick+0x1c>)
 8001910:	6013      	str	r3, [r2, #0]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	20000660 	.word	0x20000660
 8001920:	2000000c 	.word	0x2000000c

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000660 	.word	0x20000660

0800193c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001944:	f7ff ffee 	bl	8001924 <HAL_GetTick>
 8001948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d004      	beq.n	8001960 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_Delay+0x40>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4413      	add	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001960:	bf00      	nop
 8001962:	f7ff ffdf 	bl	8001924 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	429a      	cmp	r2, r3
 8001970:	d8f7      	bhi.n	8001962 <HAL_Delay+0x26>
  {
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000000c 	.word	0x2000000c

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	60d3      	str	r3, [r2, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff29 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff40 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff33 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa4 	bl	8001adc <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e08d      	b.n	8001cce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_DMA_Init+0x138>)
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d80f      	bhi.n	8001bde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b45      	ldr	r3, [pc, #276]	; (8001cdc <HAL_DMA_Init+0x13c>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_DMA_Init+0x140>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	009a      	lsls	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	; (8001ce4 <HAL_DMA_Init+0x144>)
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	e00e      	b.n	8001bfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <HAL_DMA_Init+0x148>)
 8001be6:	4413      	add	r3, r2
 8001be8:	4a3d      	ldr	r2, [pc, #244]	; (8001ce0 <HAL_DMA_Init+0x140>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	009a      	lsls	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a3c      	ldr	r2, [pc, #240]	; (8001cec <HAL_DMA_Init+0x14c>)
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f9b6 	bl	8001fc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c5c:	d102      	bne.n	8001c64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d010      	beq.n	8001ca4 <HAL_DMA_Init+0x104>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d80c      	bhi.n	8001ca4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f9d6 	bl	800203c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	e008      	b.n	8001cb6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40020407 	.word	0x40020407
 8001cdc:	bffdfff8 	.word	0xbffdfff8
 8001ce0:	cccccccd 	.word	0xcccccccd
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	bffdfbf8 	.word	0xbffdfbf8
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Start_IT+0x20>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e066      	b.n	8001dde <HAL_DMA_Start_IT+0xee>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d155      	bne.n	8001dd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f8fb 	bl	8001f44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 020e 	orr.w	r2, r2, #14
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e00f      	b.n	8001d88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0204 	bic.w	r2, r2, #4
 8001d76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 020a 	orr.w	r2, r2, #10
 8001d86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d007      	beq.n	8001da6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e005      	b.n	8001ddc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2204      	movs	r2, #4
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d026      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x7a>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d021      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0204 	bic.w	r2, r2, #4
 8001e38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2104      	movs	r1, #4
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d071      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001e5e:	e06c      	b.n	8001f3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	2202      	movs	r2, #2
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d02e      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d029      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10b      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 020a 	bic.w	r2, r2, #10
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	2102      	movs	r1, #2
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d038      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001ed0:	e033      	b.n	8001f3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 031f 	and.w	r3, r3, #31
 8001eda:	2208      	movs	r2, #8
 8001edc:	409a      	lsls	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d02a      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d025      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020e 	bic.w	r2, r2, #14
 8001efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d004      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
}
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f003 021f 	and.w	r2, r3, #31
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d108      	bne.n	8001fa4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fa2:	e007      	b.n	8001fb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	60da      	str	r2, [r3, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d802      	bhi.n	8001fda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	e001      	b.n	8001fde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001fdc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3b08      	subs	r3, #8
 8001fea:	4a12      	ldr	r2, [pc, #72]	; (8002034 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	009a      	lsls	r2, r3, #2
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	461a      	mov	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800200a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2201      	movs	r2, #1
 8002014:	409a      	lsls	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	651a      	str	r2, [r3, #80]	; 0x50
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40020407 	.word	0x40020407
 800202c:	40020800 	.word	0x40020800
 8002030:	40020820 	.word	0x40020820
 8002034:	cccccccd 	.word	0xcccccccd
 8002038:	40020880 	.word	0x40020880

0800203c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	461a      	mov	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a08      	ldr	r2, [pc, #32]	; (8002080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800205e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3b01      	subs	r3, #1
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2201      	movs	r2, #1
 800206a:	409a      	lsls	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	1000823f 	.word	0x1000823f
 8002080:	40020940 	.word	0x40020940

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002092:	e15a      	b.n	800234a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 814c 	beq.w	8002344 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d005      	beq.n	80020c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d130      	bne.n	8002126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020fa:	2201      	movs	r2, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0201 	and.w	r2, r3, #1
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b03      	cmp	r3, #3
 8002130:	d017      	beq.n	8002162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d123      	bne.n	80021b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	6939      	ldr	r1, [r7, #16]
 80021b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0203 	and.w	r2, r3, #3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80a6 	beq.w	8002344 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f8:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_GPIO_Init+0x2e4>)
 80021fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fc:	4a5a      	ldr	r2, [pc, #360]	; (8002368 <HAL_GPIO_Init+0x2e4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6613      	str	r3, [r2, #96]	; 0x60
 8002204:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_GPIO_Init+0x2e4>)
 8002206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002210:	4a56      	ldr	r2, [pc, #344]	; (800236c <HAL_GPIO_Init+0x2e8>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800223a:	d01f      	beq.n	800227c <HAL_GPIO_Init+0x1f8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a4c      	ldr	r2, [pc, #304]	; (8002370 <HAL_GPIO_Init+0x2ec>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d019      	beq.n	8002278 <HAL_GPIO_Init+0x1f4>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_GPIO_Init+0x2f0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_GPIO_Init+0x1f0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_GPIO_Init+0x2f4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_GPIO_Init+0x1ec>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a49      	ldr	r2, [pc, #292]	; (800237c <HAL_GPIO_Init+0x2f8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x1e8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_GPIO_Init+0x2fc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_GPIO_Init+0x1e4>
 8002264:	2305      	movs	r3, #5
 8002266:	e00a      	b.n	800227e <HAL_GPIO_Init+0x1fa>
 8002268:	2306      	movs	r3, #6
 800226a:	e008      	b.n	800227e <HAL_GPIO_Init+0x1fa>
 800226c:	2304      	movs	r3, #4
 800226e:	e006      	b.n	800227e <HAL_GPIO_Init+0x1fa>
 8002270:	2303      	movs	r3, #3
 8002272:	e004      	b.n	800227e <HAL_GPIO_Init+0x1fa>
 8002274:	2302      	movs	r3, #2
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x1fa>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_GPIO_Init+0x1fa>
 800227c:	2300      	movs	r3, #0
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	f002 0203 	and.w	r2, r2, #3
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	4093      	lsls	r3, r2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228e:	4937      	ldr	r1, [pc, #220]	; (800236c <HAL_GPIO_Init+0x2e8>)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_GPIO_Init+0x300>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c0:	4a30      	ldr	r2, [pc, #192]	; (8002384 <HAL_GPIO_Init+0x300>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_GPIO_Init+0x300>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ea:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_GPIO_Init+0x300>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_GPIO_Init+0x300>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_GPIO_Init+0x300>)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_GPIO_Init+0x300>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_GPIO_Init+0x300>)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f ae9d 	bne.w	8002094 <HAL_GPIO_Init+0x10>
  }
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000
 8002370:	48000400 	.word	0x48000400
 8002374:	48000800 	.word	0x48000800
 8002378:	48000c00 	.word	0x48000c00
 800237c:	48001000 	.word	0x48001000
 8002380:	48001400 	.word	0x48001400
 8002384:	40010400 	.word	0x40010400

08002388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023a4:	e002      	b.n	80023ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e08d      	b.n	80024e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff f81a 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2224      	movs	r2, #36	; 0x24
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	e006      	b.n	8002440 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800243e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d108      	bne.n	800245a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	e007      	b.n	800246a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002468:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69d9      	ldr	r1, [r3, #28]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	817b      	strh	r3, [r7, #10]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	f040 80f9 	bne.w	800270a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <HAL_I2C_Mem_Write+0x34>
 800251e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0ed      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_I2C_Mem_Write+0x4e>
 800253a:	2302      	movs	r3, #2
 800253c:	e0e6      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002546:	f7ff f9ed 	bl	8001924 <HAL_GetTick>
 800254a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2319      	movs	r3, #25
 8002552:	2201      	movs	r2, #1
 8002554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 f955 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0d1      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2221      	movs	r2, #33	; 0x21
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2240      	movs	r2, #64	; 0x40
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a3a      	ldr	r2, [r7, #32]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002590:	88f8      	ldrh	r0, [r7, #6]
 8002592:	893a      	ldrh	r2, [r7, #8]
 8002594:	8979      	ldrh	r1, [r7, #10]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4603      	mov	r3, r0
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f8b9 	bl	8002718 <I2C_RequestMemoryWrite>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0a9      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2bff      	cmp	r3, #255	; 0xff
 80025c0:	d90e      	bls.n	80025e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	22ff      	movs	r2, #255	; 0xff
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fad9 	bl	8002b90 <I2C_TransferConfig>
 80025de:	e00f      	b.n	8002600 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	8979      	ldrh	r1, [r7, #10]
 80025f2:	2300      	movs	r3, #0
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fac8 	bl	8002b90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f958 	bl	80028ba <I2C_WaitOnTXISFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e07b      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d034      	beq.n	80026b8 <HAL_I2C_Mem_Write+0x1c8>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	d130      	bne.n	80026b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	2200      	movs	r2, #0
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f8d1 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e04d      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d90e      	bls.n	8002698 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	22ff      	movs	r2, #255	; 0xff
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	b2da      	uxtb	r2, r3
 8002686:	8979      	ldrh	r1, [r7, #10]
 8002688:	2300      	movs	r3, #0
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fa7d 	bl	8002b90 <I2C_TransferConfig>
 8002696:	e00f      	b.n	80026b8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	8979      	ldrh	r1, [r7, #10]
 80026aa:	2300      	movs	r3, #0
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fa6c 	bl	8002b90 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d19e      	bne.n	8002600 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f93e 	bl	8002948 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e01a      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2220      	movs	r2, #32
 80026dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_I2C_Mem_Write+0x224>)
 80026ea:	400b      	ands	r3, r1
 80026ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	fe00e800 	.word	0xfe00e800

08002718 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	817b      	strh	r3, [r7, #10]
 800272a:	460b      	mov	r3, r1
 800272c:	813b      	strh	r3, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	8979      	ldrh	r1, [r7, #10]
 8002738:	4b20      	ldr	r3, [pc, #128]	; (80027bc <I2C_RequestMemoryWrite+0xa4>)
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fa25 	bl	8002b90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	69b9      	ldr	r1, [r7, #24]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f8b5 	bl	80028ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e02c      	b.n	80027b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002760:	893b      	ldrh	r3, [r7, #8]
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
 800276a:	e015      	b.n	8002798 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800276c:	893b      	ldrh	r3, [r7, #8]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	b29b      	uxth	r3, r3
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	69b9      	ldr	r1, [r7, #24]
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f89b 	bl	80028ba <I2C_WaitOnTXISFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e012      	b.n	80027b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800278e:	893b      	ldrh	r3, [r7, #8]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2200      	movs	r2, #0
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f830 	bl	8002808 <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	80002000 	.word	0x80002000

080027c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d103      	bne.n	80027de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2200      	movs	r2, #0
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d007      	beq.n	80027fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	619a      	str	r2, [r3, #24]
  }
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002818:	e03b      	b.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	6839      	ldr	r1, [r7, #0]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f8d6 	bl	80029d0 <I2C_IsErrorOccurred>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e041      	b.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d02d      	beq.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7ff f875 	bl	8001924 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d122      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4013      	ands	r3, r2
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	429a      	cmp	r2, r3
 8002868:	d113      	bne.n	8002892 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f043 0220 	orr.w	r2, r3, #32
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00f      	b.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	699a      	ldr	r2, [r3, #24]
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4013      	ands	r3, r2
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	bf0c      	ite	eq
 80028a2:	2301      	moveq	r3, #1
 80028a4:	2300      	movne	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d0b4      	beq.n	800281a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028c6:	e033      	b.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f87f 	bl	80029d0 <I2C_IsErrorOccurred>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e031      	b.n	8002940 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d025      	beq.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e4:	f7ff f81e 	bl	8001924 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d302      	bcc.n	80028fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11a      	bne.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d013      	beq.n	8002930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e007      	b.n	8002940 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d1c4      	bne.n	80028c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002954:	e02f      	b.n	80029b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f838 	bl	80029d0 <I2C_IsErrorOccurred>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e02d      	b.n	80029c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe ffdb 	bl	8001924 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11a      	bne.n	80029b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b20      	cmp	r3, #32
 800298c:	d013      	beq.n	80029b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f043 0220 	orr.w	r2, r3, #32
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e007      	b.n	80029c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d1c8      	bne.n	8002956 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d068      	beq.n	8002ace <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2210      	movs	r2, #16
 8002a02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a04:	e049      	b.n	8002a9a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d045      	beq.n	8002a9a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7fe ff89 	bl	8001924 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <I2C_IsErrorOccurred+0x54>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d13a      	bne.n	8002a9a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a46:	d121      	bne.n	8002a8c <I2C_IsErrorOccurred+0xbc>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a4e:	d01d      	beq.n	8002a8c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d01a      	beq.n	8002a8c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a66:	f7fe ff5d 	bl	8001924 <HAL_GetTick>
 8002a6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6c:	e00e      	b.n	8002a8c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a6e:	f7fe ff59 	bl	8001924 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b19      	cmp	r3, #25
 8002a7a:	d907      	bls.n	8002a8c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f043 0320 	orr.w	r3, r3, #32
 8002a82:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002a8a:	e006      	b.n	8002a9a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d1e9      	bne.n	8002a6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d003      	beq.n	8002ab0 <I2C_IsErrorOccurred+0xe0>
 8002aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0aa      	beq.n	8002a06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d103      	bne.n	8002ac0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2220      	movs	r2, #32
 8002abe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f043 0308 	orr.w	r3, r3, #8
 8002b08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01c      	beq.n	8002b7e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fe3b 	bl	80027c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <I2C_IsErrorOccurred+0x1bc>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	fe00e800 	.word	0xfe00e800

08002b90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	817b      	strh	r3, [r7, #10]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ba8:	7a7b      	ldrb	r3, [r7, #9]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	0d5b      	lsrs	r3, r3, #21
 8002bca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <I2C_TransferConfig+0x60>)
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	ea02 0103 	and.w	r1, r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	03ff63ff 	.word	0x03ff63ff

08002bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d138      	bne.n	8002c7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e032      	b.n	8002c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d139      	bne.n	8002d14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e033      	b.n	8002d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2224      	movs	r2, #36	; 0x24
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0d0      	b.n	8002ed8 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fbbe 	bl	80014cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002d66:	f023 030f 	bic.w	r3, r3, #15
 8002d6a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2202      	movs	r2, #2
 8002d72:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d061      	beq.n	8002e40 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d102      	bne.n	8002d8a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002d84:	2310      	movs	r3, #16
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e001      	b.n	8002d8e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d802      	bhi.n	8002d9c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002d9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002da0:	f001 f98e 	bl	80040c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002da4:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dae:	d125      	bne.n	8002dfc <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d010      	beq.n	8002dda <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	461a      	mov	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	3305      	adds	r3, #5
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	e01f      	b.n	8002e1a <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	461a      	mov	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	3305      	adds	r3, #5
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	e00e      	b.n	8002e1a <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	3305      	adds	r3, #5
 8002e18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4a30      	ldr	r2, [pc, #192]	; (8002ee0 <HAL_I2S_Init+0x1bc>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	08db      	lsrs	r3, r3, #3
 8002e24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e003      	b.n	8002e48 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d902      	bls.n	8002e54 <HAL_I2S_Init+0x130>
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	2bff      	cmp	r3, #255	; 0xff
 8002e52:	d907      	bls.n	8002e64 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	f043 0210 	orr.w	r2, r3, #16
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e039      	b.n	8002ed8 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e82:	f023 030f 	bic.w	r3, r3, #15
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6851      	ldr	r1, [r2, #4]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6892      	ldr	r2, [r2, #8]
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68d2      	ldr	r2, [r2, #12]
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6992      	ldr	r2, [r2, #24]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b30      	cmp	r3, #48	; 0x30
 8002eae:	d003      	beq.n	8002eb8 <HAL_I2S_Init+0x194>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2bb0      	cmp	r3, #176	; 0xb0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ec6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	cccccccd 	.word	0xcccccccd

08002ee4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_I2S_Receive_DMA+0x1a>
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0a1      	b.n	8003046 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2S_Receive_DMA+0x2e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e099      	b.n	8003046 <HAL_I2S_Receive_DMA+0x162>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d005      	beq.n	8002f32 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e089      	b.n	8003046 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2204      	movs	r2, #4
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pRxBuffPtr = pData;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d002      	beq.n	8002f5e <HAL_I2S_Receive_DMA+0x7a>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d10a      	bne.n	8002f74 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = (Size << 1U);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f72:	e005      	b.n	8002f80 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	88fa      	ldrh	r2, [r7, #6]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	4a32      	ldr	r2, [pc, #200]	; (8003050 <HAL_I2S_Receive_DMA+0x16c>)
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4a31      	ldr	r2, [pc, #196]	; (8003054 <HAL_I2S_Receive_DMA+0x170>)
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a30      	ldr	r2, [pc, #192]	; (8003058 <HAL_I2S_Receive_DMA+0x174>)
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa6:	d10a      	bne.n	8002fbe <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	4619      	mov	r1, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002fd6:	f7fe fe8b 	bl	8001cf0 <HAL_DMA_Start_IT>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00f      	beq.n	8003000 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	f043 0208 	orr.w	r2, r3, #8
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e022      	b.n	8003046 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800301c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	080030b3 	.word	0x080030b3
 8003054:	08003071 	.word	0x08003071
 8003058:	080030cf 	.word	0x080030cf

0800305c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10e      	bne.n	80030a4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7fd ff39 	bl	8000f1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7fd ff0b 	bl	8000edc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80030c6:	bf00      	nop
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0203 	bic.w	r2, r2, #3
 80030ea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	f043 0208 	orr.w	r2, r3, #8
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff ffa5 	bl	800305c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d141      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800312a:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d131      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	4a46      	ldr	r2, [pc, #280]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003150:	4a41      	ldr	r2, [pc, #260]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2232      	movs	r2, #50	; 0x32
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800316e:	e002      	b.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3b01      	subs	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003182:	d102      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318a:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d158      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e057      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319c:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031ac:	e04d      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b4:	d141      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031b6:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d131      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ca:	4a23      	ldr	r2, [pc, #140]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2232      	movs	r2, #50	; 0x32
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	3301      	adds	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fa:	e002      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d102      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f2      	bne.n	80031fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d112      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e011      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003238:	e007      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003248:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40007000 	.word	0x40007000
 800325c:	20000004 	.word	0x20000004
 8003260:	431bde83 	.word	0x431bde83

08003264 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800326e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003272:	6093      	str	r3, [r2, #8]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e2fe      	b.n	8003894 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d075      	beq.n	800338e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032a2:	4b97      	ldr	r3, [pc, #604]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ac:	4b94      	ldr	r3, [pc, #592]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3e>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d002      	beq.n	80032c8 <HAL_RCC_OscConfig+0x44>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	4b8d      	ldr	r3, [pc, #564]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d157      	bne.n	800338c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e2d9      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x74>
 80032ea:	4b85      	ldr	r3, [pc, #532]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a84      	ldr	r2, [pc, #528]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7e      	ldr	r2, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b7c      	ldr	r3, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7b      	ldr	r2, [pc, #492]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 800331c:	4b78      	ldr	r3, [pc, #480]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a77      	ldr	r2, [pc, #476]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b75      	ldr	r3, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a74      	ldr	r2, [pc, #464]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe faf2 	bl	8001924 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe faee 	bl	8001924 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e29e      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003356:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xc0>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fade 	bl	8001924 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fada 	bl	8001924 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e28a      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800337e:	4b60      	ldr	r3, [pc, #384]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0xe8>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d075      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339a:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a4:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d102      	bne.n	80033ba <HAL_RCC_OscConfig+0x136>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d002      	beq.n	80033c0 <HAL_RCC_OscConfig+0x13c>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11f      	bne.n	8003400 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x154>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e25d      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	4946      	ldr	r1, [pc, #280]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033ec:	4b45      	ldr	r3, [pc, #276]	; (8003504 <HAL_RCC_OscConfig+0x280>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe fa4b 	bl	800188c <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d043      	beq.n	8003484 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e249      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800340e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe fa86 	bl	8001924 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7fe fa82 	bl	8001924 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e232      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800342e:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	061b      	lsls	r3, r3, #24
 8003448:	492d      	ldr	r1, [pc, #180]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
 800344e:	e01a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003450:	4b2b      	ldr	r3, [pc, #172]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003456:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fa62 	bl	8001924 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fe fa5e 	bl	8001924 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e20e      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x1e0>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d041      	beq.n	8003516 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01c      	beq.n	80034d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fe fa3b 	bl	8001924 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fe fa37 	bl	8001924 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e1e7      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0ef      	beq.n	80034b2 <HAL_RCC_OscConfig+0x22e>
 80034d2:	e020      	b.n	8003516 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_OscConfig+0x27c>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fa1e 	bl	8001924 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ea:	e00d      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fe fa1a 	bl	8001924 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d906      	bls.n	8003508 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1ca      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003508:	4b8c      	ldr	r3, [pc, #560]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 800350a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1ea      	bne.n	80034ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a6 	beq.w	8003670 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003528:	4b84      	ldr	r3, [pc, #528]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_RCC_OscConfig+0x2b4>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x2b6>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	4b7f      	ldr	r3, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4a7e      	ldr	r2, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800355a:	4b79      	ldr	r3, [pc, #484]	; (8003740 <HAL_RCC_OscConfig+0x4bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003566:	4b76      	ldr	r3, [pc, #472]	; (8003740 <HAL_RCC_OscConfig+0x4bc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a75      	ldr	r2, [pc, #468]	; (8003740 <HAL_RCC_OscConfig+0x4bc>)
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe f9d7 	bl	8001924 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe f9d3 	bl	8001924 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e183      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <HAL_RCC_OscConfig+0x4bc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d108      	bne.n	80035b2 <HAL_RCC_OscConfig+0x32e>
 80035a0:	4b66      	ldr	r3, [pc, #408]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	4a65      	ldr	r2, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b0:	e024      	b.n	80035fc <HAL_RCC_OscConfig+0x378>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d110      	bne.n	80035dc <HAL_RCC_OscConfig+0x358>
 80035ba:	4b60      	ldr	r3, [pc, #384]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	4a5e      	ldr	r2, [pc, #376]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ca:	4b5c      	ldr	r3, [pc, #368]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	4a5a      	ldr	r2, [pc, #360]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035da:	e00f      	b.n	80035fc <HAL_RCC_OscConfig+0x378>
 80035dc:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fe f98e 	bl	8001924 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fe f98a 	bl	8001924 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e138      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	4b46      	ldr	r3, [pc, #280]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ed      	beq.n	800360c <HAL_RCC_OscConfig+0x388>
 8003630:	e015      	b.n	800365e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003632:	f7fe f977 	bl	8001924 <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003638:	e00a      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fe f973 	bl	8001924 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e121      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003650:	4b3a      	ldr	r3, [pc, #232]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ed      	bne.n	800363a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800365e:	7ffb      	ldrb	r3, [r7, #31]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4b35      	ldr	r3, [pc, #212]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	4a34      	ldr	r2, [pc, #208]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d03c      	beq.n	80036f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01c      	beq.n	80036be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800368a:	4a2c      	ldr	r2, [pc, #176]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fe f946 	bl	8001924 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800369c:	f7fe f942 	bl	8001924 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0f2      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ef      	beq.n	800369c <HAL_RCC_OscConfig+0x418>
 80036bc:	e01b      	b.n	80036f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036be:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036c4:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ce:	f7fe f929 	bl	8001924 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036d6:	f7fe f925 	bl	8001924 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0d5      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ef      	bne.n	80036d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80c9 	beq.w	8003892 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b0c      	cmp	r3, #12
 800370a:	f000 8083 	beq.w	8003814 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d15e      	bne.n	80037d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fe f8ff 	bl	8001924 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	e00c      	b.n	8003744 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372a:	f7fe f8fb 	bl	8001924 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d905      	bls.n	8003744 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0ab      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
 800373c:	40021000 	.word	0x40021000
 8003740:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003744:	4b55      	ldr	r3, [pc, #340]	; (800389c <HAL_RCC_OscConfig+0x618>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ec      	bne.n	800372a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003750:	4b52      	ldr	r3, [pc, #328]	; (800389c <HAL_RCC_OscConfig+0x618>)
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4b52      	ldr	r3, [pc, #328]	; (80038a0 <HAL_RCC_OscConfig+0x61c>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6a11      	ldr	r1, [r2, #32]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003760:	3a01      	subs	r2, #1
 8003762:	0112      	lsls	r2, r2, #4
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800376a:	0212      	lsls	r2, r2, #8
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003772:	0852      	lsrs	r2, r2, #1
 8003774:	3a01      	subs	r2, #1
 8003776:	0552      	lsls	r2, r2, #21
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800377e:	0852      	lsrs	r2, r2, #1
 8003780:	3a01      	subs	r2, #1
 8003782:	0652      	lsls	r2, r2, #25
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800378a:	06d2      	lsls	r2, r2, #27
 800378c:	430a      	orrs	r2, r1
 800378e:	4943      	ldr	r1, [pc, #268]	; (800389c <HAL_RCC_OscConfig+0x618>)
 8003790:	4313      	orrs	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b41      	ldr	r3, [pc, #260]	; (800389c <HAL_RCC_OscConfig+0x618>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a40      	ldr	r2, [pc, #256]	; (800389c <HAL_RCC_OscConfig+0x618>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a0:	4b3e      	ldr	r3, [pc, #248]	; (800389c <HAL_RCC_OscConfig+0x618>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a3d      	ldr	r2, [pc, #244]	; (800389c <HAL_RCC_OscConfig+0x618>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f8ba 	bl	8001924 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe f8b6 	bl	8001924 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e066      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <HAL_RCC_OscConfig+0x618>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x530>
 80037d2:	e05e      	b.n	8003892 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_RCC_OscConfig+0x618>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a30      	ldr	r2, [pc, #192]	; (800389c <HAL_RCC_OscConfig+0x618>)
 80037da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe f8a0 	bl	8001924 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe f89c 	bl	8001924 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04c      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fa:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_RCC_OscConfig+0x618>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_OscConfig+0x618>)
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	4924      	ldr	r1, [pc, #144]	; (800389c <HAL_RCC_OscConfig+0x618>)
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <HAL_RCC_OscConfig+0x620>)
 800380e:	4013      	ands	r3, r2
 8003810:	60cb      	str	r3, [r1, #12]
 8003812:	e03e      	b.n	8003892 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e039      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_RCC_OscConfig+0x618>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	429a      	cmp	r2, r3
 8003832:	d12c      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	3b01      	subs	r3, #1
 8003840:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d123      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003852:	429a      	cmp	r2, r3
 8003854:	d11b      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003860:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	429a      	cmp	r2, r3
 8003864:	d113      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	019f800c 	.word	0x019f800c
 80038a4:	feeefffc 	.word	0xfeeefffc

080038a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e11e      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b91      	ldr	r3, [pc, #580]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d910      	bls.n	80038f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b8e      	ldr	r3, [pc, #568]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 020f 	bic.w	r2, r3, #15
 80038d6:	498c      	ldr	r1, [pc, #560]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b8a      	ldr	r3, [pc, #552]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e106      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d073      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d129      	bne.n	8003958 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003904:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0f4      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003914:	f000 f99e 	bl	8003c54 <RCC_GetSysClockFreqFromPLLSource>
 8003918:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4a7c      	ldr	r2, [pc, #496]	; (8003b10 <HAL_RCC_ClockConfig+0x268>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d93f      	bls.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003922:	4b7a      	ldr	r3, [pc, #488]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	d033      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d12f      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003942:	4b72      	ldr	r3, [pc, #456]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800394a:	4a70      	ldr	r2, [pc, #448]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 800394c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003950:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e024      	b.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d107      	bne.n	8003970 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0c6      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003970:	4b66      	ldr	r3, [pc, #408]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0be      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003980:	f000 f8ce 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003984:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4a61      	ldr	r2, [pc, #388]	; (8003b10 <HAL_RCC_ClockConfig+0x268>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d909      	bls.n	80039a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800398e:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b5a      	ldr	r3, [pc, #360]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4957      	ldr	r1, [pc, #348]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b4:	f7fd ffb6 	bl	8001924 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fd ffb2 	bl	8001924 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e095      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d023      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a42      	ldr	r2, [pc, #264]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003a14:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a1c:	4a3b      	ldr	r2, [pc, #236]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a24:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4936      	ldr	r1, [pc, #216]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	608b      	str	r3, [r1, #8]
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b80      	cmp	r3, #128	; 0x80
 8003a3c:	d105      	bne.n	8003a4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003a44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4a:	4b2f      	ldr	r3, [pc, #188]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d21d      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 020f 	bic.w	r2, r3, #15
 8003a60:	4929      	ldr	r1, [pc, #164]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a68:	f7fd ff5c 	bl	8001924 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fd ff58 	bl	8001924 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e03b      	b.n	8003afe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1ed      	bne.n	8003a70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	490f      	ldr	r1, [pc, #60]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad2:	f000 f825 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_RCC_ClockConfig+0x264>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	490c      	ldr	r1, [pc, #48]	; (8003b14 <HAL_RCC_ClockConfig+0x26c>)
 8003ae4:	5ccb      	ldrb	r3, [r1, r3]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x270>)
 8003af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd fec8 	bl	800188c <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	04c4b400 	.word	0x04c4b400
 8003b14:	08005b9c 	.word	0x08005b9c
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	20000008 	.word	0x20000008

08003b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b26:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	e047      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d102      	bne.n	8003b4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	e03e      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b4a:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d136      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b60:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b74:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7e:	68d2      	ldr	r2, [r2, #12]
 8003b80:	0a12      	lsrs	r2, r2, #8
 8003b82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	617b      	str	r3, [r7, #20]
      break;
 8003b8c:	e00c      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b8e:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b96:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	0a12      	lsrs	r2, r2, #8
 8003b9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]
      break;
 8003ba6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0e5b      	lsrs	r3, r3, #25
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	e001      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003bc8:	693b      	ldr	r3, [r7, #16]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	00f42400 	.word	0x00f42400
 8003be0:	016e3600 	.word	0x016e3600

08003be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bea:	681b      	ldr	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000004 	.word	0x20000004

08003bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c00:	f7ff fff0 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	4904      	ldr	r1, [pc, #16]	; (8003c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08005bac 	.word	0x08005bac

08003c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c2c:	f7ff ffda 	bl	8003be4 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0adb      	lsrs	r3, r3, #11
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4904      	ldr	r1, [pc, #16]	; (8003c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08005bac 	.word	0x08005bac

08003c54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c5a:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d10c      	bne.n	8003c92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c78:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	0a12      	lsrs	r2, r2, #8
 8003c86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	617b      	str	r3, [r7, #20]
    break;
 8003c90:	e00c      	b.n	8003cac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	4a0e      	ldr	r2, [pc, #56]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	0a12      	lsrs	r2, r2, #8
 8003ca0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
    break;
 8003caa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	0e5b      	lsrs	r3, r3, #25
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003cc6:	687b      	ldr	r3, [r7, #4]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	016e3600 	.word	0x016e3600
 8003cdc:	00f42400 	.word	0x00f42400

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ce8:	2300      	movs	r3, #0
 8003cea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cec:	2300      	movs	r3, #0
 8003cee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8098 	beq.w	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d02:	4b43      	ldr	r3, [pc, #268]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	4a3f      	ldr	r2, [pc, #252]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6593      	str	r3, [r2, #88]	; 0x58
 8003d1a:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d22:	60bb      	str	r3, [r7, #8]
 8003d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d26:	2301      	movs	r3, #1
 8003d28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a39      	ldr	r2, [pc, #228]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d36:	f7fd fdf5 	bl	8001924 <HAL_GetTick>
 8003d3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d3c:	e009      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fdf1 	bl	8001924 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d902      	bls.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	74fb      	strb	r3, [r7, #19]
        break;
 8003d50:	e005      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0ef      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d159      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01e      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d019      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d80:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d8c:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d016      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fd fdb1 	bl	8001924 <HAL_GetTick>
 8003dc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc4:	e00b      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc6:	f7fd fdad 	bl	8001924 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	74fb      	strb	r3, [r7, #19]
            break;
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ec      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e08:	e008      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	74bb      	strb	r3, [r7, #18]
 8003e0e:	e005      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e1c:	7c7b      	ldrb	r3, [r7, #17]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d105      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e22:	4ba6      	ldr	r3, [pc, #664]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4aa5      	ldr	r2, [pc, #660]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e3a:	4ba0      	ldr	r3, [pc, #640]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	499c      	ldr	r1, [pc, #624]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e5c:	4b97      	ldr	r3, [pc, #604]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 020c 	bic.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4994      	ldr	r1, [pc, #592]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e7e:	4b8f      	ldr	r3, [pc, #572]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	498b      	ldr	r1, [pc, #556]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ea0:	4b86      	ldr	r3, [pc, #536]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	4983      	ldr	r1, [pc, #524]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec2:	4b7e      	ldr	r3, [pc, #504]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	497a      	ldr	r1, [pc, #488]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee4:	4b75      	ldr	r3, [pc, #468]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	4972      	ldr	r1, [pc, #456]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f06:	4b6d      	ldr	r3, [pc, #436]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4969      	ldr	r1, [pc, #420]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f28:	4b64      	ldr	r3, [pc, #400]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	4961      	ldr	r1, [pc, #388]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4a:	4b5c      	ldr	r3, [pc, #368]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	4958      	ldr	r1, [pc, #352]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d015      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	4950      	ldr	r1, [pc, #320]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f8a:	d105      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8c:	4b4b      	ldr	r3, [pc, #300]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a4a      	ldr	r2, [pc, #296]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d015      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003fa4:	4b45      	ldr	r3, [pc, #276]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4942      	ldr	r1, [pc, #264]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d105      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc4:	4b3d      	ldr	r3, [pc, #244]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a3c      	ldr	r2, [pc, #240]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fdc:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4934      	ldr	r1, [pc, #208]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ffa:	d105      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffc:	4b2f      	ldr	r3, [pc, #188]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004006:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004014:	4b29      	ldr	r3, [pc, #164]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	4926      	ldr	r1, [pc, #152]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004032:	d105      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a20      	ldr	r2, [pc, #128]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	4918      	ldr	r1, [pc, #96]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	4a12      	ldr	r2, [pc, #72]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004076:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d015      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	490a      	ldr	r1, [pc, #40]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80040b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000

080040c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040d2:	d136      	bne.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80040d4:	4bac      	ldr	r3, [pc, #688]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80040e0:	4ba9      	ldr	r3, [pc, #676]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80040e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d108      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f4:	d104      	bne.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80040f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	f000 bc2a 	b.w	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004100:	4ba1      	ldr	r3, [pc, #644]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d108      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004114:	d104      	bne.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8004116:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	f000 bc1a 	b.w	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412c:	f040 8412 	bne.w	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004136:	f040 840d 	bne.w	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    {
      frequency = HSE_VALUE / 32U;
 800413a:	4b94      	ldr	r3, [pc, #592]	; (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	f000 bc09 	b.w	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8004142:	4b91      	ldr	r3, [pc, #580]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d10c      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800414e:	4b8e      	ldr	r3, [pc, #568]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415a:	d102      	bne.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 800415c:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	e017      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e014      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8004168:	4b87      	ldr	r3, [pc, #540]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b03      	cmp	r3, #3
 8004172:	d10c      	bne.n	800418e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004174:	4b84      	ldr	r3, [pc, #528]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004180:	d102      	bne.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8004182:	4b84      	ldr	r3, [pc, #528]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e004      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	e001      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004192:	4b7d      	ldr	r3, [pc, #500]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	091b      	lsrs	r3, r3, #4
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	3301      	adds	r3, #1
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a4:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ac:	f000 8378 	beq.w	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b6:	f200 83ae 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c0:	f000 8337 	beq.w	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ca:	f200 83a4 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d4:	f000 82ff 	beq.w	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041de:	f200 839a 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	f000 82c0 	beq.w	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f2:	f200 8390 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fc:	f000 8272 	beq.w	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004206:	f200 8386 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004210:	f000 8224 	beq.w	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421a:	f200 837c 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004224:	f000 81da 	beq.w	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422e:	f200 8372 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004238:	f000 81ab 	beq.w	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004242:	f200 8368 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	f000 817d 	beq.w	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	f200 8360 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b20      	cmp	r3, #32
 800425a:	d84b      	bhi.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8359 	beq.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	2b1f      	cmp	r3, #31
 800426a:	f200 8354 	bhi.w	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	080042ff 	.word	0x080042ff
 8004278:	08004361 	.word	0x08004361
 800427c:	08004917 	.word	0x08004917
 8004280:	080043d3 	.word	0x080043d3
 8004284:	08004917 	.word	0x08004917
 8004288:	08004917 	.word	0x08004917
 800428c:	08004917 	.word	0x08004917
 8004290:	08004435 	.word	0x08004435
 8004294:	08004917 	.word	0x08004917
 8004298:	08004917 	.word	0x08004917
 800429c:	08004917 	.word	0x08004917
 80042a0:	08004917 	.word	0x08004917
 80042a4:	08004917 	.word	0x08004917
 80042a8:	08004917 	.word	0x08004917
 80042ac:	08004917 	.word	0x08004917
 80042b0:	08004917 	.word	0x08004917
 80042b4:	08004917 	.word	0x08004917
 80042b8:	08004917 	.word	0x08004917
 80042bc:	08004917 	.word	0x08004917
 80042c0:	08004917 	.word	0x08004917
 80042c4:	08004917 	.word	0x08004917
 80042c8:	08004917 	.word	0x08004917
 80042cc:	08004917 	.word	0x08004917
 80042d0:	08004917 	.word	0x08004917
 80042d4:	08004917 	.word	0x08004917
 80042d8:	08004917 	.word	0x08004917
 80042dc:	08004917 	.word	0x08004917
 80042e0:	08004917 	.word	0x08004917
 80042e4:	08004917 	.word	0x08004917
 80042e8:	08004917 	.word	0x08004917
 80042ec:	08004917 	.word	0x08004917
 80042f0:	08004497 	.word	0x08004497
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	f000 8101 	beq.w	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
      break;

#endif /* QUADSPI */

    default:
      break;
 80042fc:	e30b      	b.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        frequency = HAL_RCC_GetPCLK2Freq();
 8004310:	f7ff fc8a 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 8004314:	61f8      	str	r0, [r7, #28]
      break;
 8004316:	e300      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d103      	bne.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        frequency = HAL_RCC_GetSysClockFreq();
 800431e:	f7ff fbff 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8004322:	61f8      	str	r0, [r7, #28]
      break;
 8004324:	e2f9      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d102      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HSI_VALUE;
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800433c:	61fb      	str	r3, [r7, #28]
      break;
 800433e:	e2ec      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	f040 82e5 	bne.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b03      	cmp	r3, #3
 8004354:	f040 82e1 	bne.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        frequency = LSE_VALUE;
 8004358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435c:	61fb      	str	r3, [r7, #28]
      break;
 800435e:	e2dc      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004372:	f7ff fc43 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 8004376:	61f8      	str	r0, [r7, #28]
      break;
 8004378:	e2d1      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b04      	cmp	r3, #4
 800437e:	d10b      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8004380:	f7ff fbce 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8004384:	61f8      	str	r0, [r7, #28]
      break;
 8004386:	e2ca      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8004388:	40021000 	.word	0x40021000
 800438c:	000b71b0 	.word	0x000b71b0
 8004390:	00f42400 	.word	0x00f42400
 8004394:	016e3600 	.word	0x016e3600
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004398:	4b9e      	ldr	r3, [pc, #632]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d102      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HSI_VALUE;
 80043ac:	4b9a      	ldr	r3, [pc, #616]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80043ae:	61fb      	str	r3, [r7, #28]
      break;
 80043b0:	e2b5      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80043b2:	4b98      	ldr	r3, [pc, #608]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	f040 82ae 	bne.w	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	f040 82aa 	bne.w	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        frequency = LSE_VALUE;
 80043ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ce:	61fb      	str	r3, [r7, #28]
      break;
 80043d0:	e2a5      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80043d2:	4b90      	ldr	r3, [pc, #576]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043dc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80043e4:	f7ff fc0a 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80043e8:	61f8      	str	r0, [r7, #28]
      break;
 80043ea:	e29a      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d103      	bne.n	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
        frequency = HAL_RCC_GetSysClockFreq();
 80043f2:	f7ff fb95 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80043f6:	61f8      	str	r0, [r7, #28]
      break;
 80043f8:	e293      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80043fa:	4b86      	ldr	r3, [pc, #536]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b20      	cmp	r3, #32
 800440c:	d102      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
        frequency = HSI_VALUE;
 800440e:	4b82      	ldr	r3, [pc, #520]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004410:	61fb      	str	r3, [r7, #28]
      break;
 8004412:	e286      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004414:	4b7f      	ldr	r3, [pc, #508]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b02      	cmp	r3, #2
 8004420:	f040 827f 	bne.w	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b30      	cmp	r3, #48	; 0x30
 8004428:	f040 827b 	bne.w	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
        frequency = LSE_VALUE;
 800442c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004430:	61fb      	str	r3, [r7, #28]
      break;
 8004432:	e276      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004434:	4b77      	ldr	r3, [pc, #476]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800443e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004446:	f7ff fbd9 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 800444a:	61f8      	str	r0, [r7, #28]
      break;
 800444c:	e26b      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d103      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
        frequency = HAL_RCC_GetSysClockFreq();
 8004454:	f7ff fb64 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8004458:	61f8      	str	r0, [r7, #28]
      break;
 800445a:	e264      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800445c:	4b6d      	ldr	r3, [pc, #436]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004468:	d105      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b80      	cmp	r3, #128	; 0x80
 800446e:	d102      	bne.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
        frequency = HSI_VALUE;
 8004470:	4b69      	ldr	r3, [pc, #420]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004472:	61fb      	str	r3, [r7, #28]
      break;
 8004474:	e257      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004476:	4b67      	ldr	r3, [pc, #412]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	f040 8250 	bne.w	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2bc0      	cmp	r3, #192	; 0xc0
 800448a:	f040 824c 	bne.w	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        frequency = LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	61fb      	str	r3, [r7, #28]
      break;
 8004494:	e247      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004496:	4b5f      	ldr	r3, [pc, #380]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044a0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d103      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
        frequency = HAL_RCC_GetPCLK1Freq();
 80044a8:	f7ff fba8 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80044ac:	61f8      	str	r0, [r7, #28]
      break;
 80044ae:	e23c      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b6:	d103      	bne.n	80044c0 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
        frequency = HAL_RCC_GetSysClockFreq();
 80044b8:	f7ff fb32 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80044bc:	61f8      	str	r0, [r7, #28]
      break;
 80044be:	e234      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80044c0:	4b54      	ldr	r3, [pc, #336]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d106      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d4:	d102      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        frequency = HSI_VALUE;
 80044d6:	4b50      	ldr	r3, [pc, #320]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80044d8:	61fb      	str	r3, [r7, #28]
      break;
 80044da:	e226      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80044dc:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	f040 821f 	bne.w	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044f2:	f040 821a 	bne.w	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        frequency = LSE_VALUE;
 80044f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fa:	61fb      	str	r3, [r7, #28]
      break;
 80044fc:	e215      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80044fe:	4b45      	ldr	r3, [pc, #276]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004504:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004508:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004510:	f7ff fb74 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 8004514:	61f8      	str	r0, [r7, #28]
      break;
 8004516:	e20a      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451e:	d103      	bne.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        frequency = HAL_RCC_GetSysClockFreq();
 8004520:	f7ff fafe 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8004524:	61f8      	str	r0, [r7, #28]
      break;
 8004526:	e202      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004534:	f040 81fb 	bne.w	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453e:	f040 81f6 	bne.w	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
        frequency = HSI_VALUE;
 8004542:	4b35      	ldr	r3, [pc, #212]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004544:	61fb      	str	r3, [r7, #28]
      break;
 8004546:	e1f2      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004552:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
        frequency = HAL_RCC_GetPCLK1Freq();
 800455a:	f7ff fb4f 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 800455e:	61f8      	str	r0, [r7, #28]
      break;
 8004560:	e1e7      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004568:	d103      	bne.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        frequency = HAL_RCC_GetSysClockFreq();
 800456a:	f7ff fad9 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 800456e:	61f8      	str	r0, [r7, #28]
      break;
 8004570:	e1df      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004572:	4b28      	ldr	r3, [pc, #160]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457e:	f040 81d8 	bne.w	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	f040 81d3 	bne.w	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
        frequency = HSI_VALUE;
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800458e:	61fb      	str	r3, [r7, #28]
      break;
 8004590:	e1cf      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800459c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 80045a4:	f7ff fb2a 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80045a8:	61f8      	str	r0, [r7, #28]
      break;
 80045aa:	e1c4      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b2:	d103      	bne.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetSysClockFreq();
 80045b4:	f7ff fab4 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80045b8:	61f8      	str	r0, [r7, #28]
      break;
 80045ba:	e1bc      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c8:	f040 81b5 	bne.w	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d2:	f040 81b0 	bne.w	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
        frequency = HSI_VALUE;
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80045d8:	61fb      	str	r3, [r7, #28]
      break;
 80045da:	e1ac      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80045dc:	4b0d      	ldr	r3, [pc, #52]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80045e6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
        frequency = HAL_RCC_GetPCLK1Freq();
 80045ee:	f7ff fb05 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80045f2:	61f8      	str	r0, [r7, #28]
      break;
 80045f4:	e1a1      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	d10b      	bne.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800460a:	d107      	bne.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
        frequency = LSI_VALUE;
 800460c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	e022      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8004614:	40021000 	.word	0x40021000
 8004618:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800461c:	4b9b      	ldr	r3, [pc, #620]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004628:	d106      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004630:	d102      	bne.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
        frequency = HSI_VALUE;
 8004632:	4b97      	ldr	r3, [pc, #604]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e010      	b.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004638:	4b94      	ldr	r3, [pc, #592]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	f040 8179 	bne.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800464e:	f040 8174 	bne.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        frequency = LSE_VALUE;
 8004652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004656:	61fb      	str	r3, [r7, #28]
      break;
 8004658:	e16f      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 800465a:	e16e      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800465c:	4b8b      	ldr	r3, [pc, #556]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004666:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
        frequency = HAL_RCC_GetSysClockFreq();
 800466e:	f7ff fa57 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8004672:	61f8      	str	r0, [r7, #28]
      break;
 8004674:	e163      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467c:	d11b      	bne.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800467e:	4b83      	ldr	r3, [pc, #524]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8159 	beq.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800468c:	4b7f      	ldr	r3, [pc, #508]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004696:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	fb03 f202 	mul.w	r2, r3, r2
 80046a0:	4b7a      	ldr	r3, [pc, #488]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	0d5b      	lsrs	r3, r3, #21
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	3301      	adds	r3, #1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	61fb      	str	r3, [r7, #28]
      break;
 80046b4:	e143      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046bc:	d102      	bne.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        frequency = EXTERNAL_CLOCK_VALUE;
 80046be:	4b75      	ldr	r3, [pc, #468]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 80046c0:	61fb      	str	r3, [r7, #28]
      break;
 80046c2:	e13c      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 80046c4:	4b71      	ldr	r3, [pc, #452]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d0:	f040 8135 	bne.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046da:	f040 8130 	bne.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        frequency = HSI_VALUE;
 80046de:	4b6c      	ldr	r3, [pc, #432]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 80046e0:	61fb      	str	r3, [r7, #28]
      break;
 80046e2:	e12c      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046e4:	4b69      	ldr	r3, [pc, #420]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80046ee:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
        frequency = HAL_RCC_GetSysClockFreq();
 80046f6:	f7ff fa13 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80046fa:	61f8      	str	r0, [r7, #28]
      break;
 80046fc:	e121      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004704:	d11b      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 8117 	beq.w	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004714:	4b5d      	ldr	r3, [pc, #372]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	fb03 f202 	mul.w	r2, r3, r2
 8004728:	4b58      	ldr	r3, [pc, #352]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	0d5b      	lsrs	r3, r3, #21
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	3301      	adds	r3, #1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	fbb2 f3f3 	udiv	r3, r2, r3
 800473a:	61fb      	str	r3, [r7, #28]
      break;
 800473c:	e101      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004744:	d102      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004746:	4b53      	ldr	r3, [pc, #332]	; (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8004748:	61fb      	str	r3, [r7, #28]
      break;
 800474a:	e0fa      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 800474c:	4b4f      	ldr	r3, [pc, #316]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	f040 80f3 	bne.w	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004762:	f040 80ee 	bne.w	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        frequency = HSI_VALUE;
 8004766:	4b4a      	ldr	r3, [pc, #296]	; (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8004768:	61fb      	str	r3, [r7, #28]
      break;
 800476a:	e0ea      	b.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800476c:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004776:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800477e:	d103      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004780:	f7ff fa3c 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 8004784:	61f8      	str	r0, [r7, #28]
      break;
 8004786:	e0de      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = HSE_VALUE;
 800478e:	4b42      	ldr	r3, [pc, #264]	; (8004898 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>)
 8004790:	61fb      	str	r3, [r7, #28]
      break;
 8004792:	e0d8      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800479a:	f040 80d4 	bne.w	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800479e:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80cd 	beq.w	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047ac:	4b37      	ldr	r3, [pc, #220]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	fb03 f202 	mul.w	r2, r3, r2
 80047c0:	4b32      	ldr	r3, [pc, #200]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0d5b      	lsrs	r3, r3, #21
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	3301      	adds	r3, #1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	61fb      	str	r3, [r7, #28]
      break;
 80047d4:	e0b7      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 80047d6:	4b2d      	ldr	r3, [pc, #180]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80047e0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e8:	d114      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f4:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	fb03 f202 	mul.w	r2, r3, r2
 80047fe:	4b23      	ldr	r3, [pc, #140]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	0d5b      	lsrs	r3, r3, #21
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	3301      	adds	r3, #1
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	61fb      	str	r3, [r7, #28]
      break;
 8004812:	e09a      	b.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b02      	cmp	r3, #2
 8004820:	f040 8093 	bne.w	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 808f 	bne.w	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
        frequency = HSI48_VALUE;
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 800482e:	61fb      	str	r3, [r7, #28]
      break;
 8004830:	e08b      	b.n	800494a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004832:	4b16      	ldr	r3, [pc, #88]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800483c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004844:	d114      	bne.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004850:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	fb03 f202 	mul.w	r2, r3, r2
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	0d5b      	lsrs	r3, r3, #21
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	3301      	adds	r3, #1
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	61fb      	str	r3, [r7, #28]
      break;
 800486e:	e06e      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d167      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d164      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
        frequency = HSI48_VALUE;
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8004886:	61fb      	str	r3, [r7, #28]
      break;
 8004888:	e061      	b.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800488a:	bf00      	nop
 800488c:	40021000 	.word	0x40021000
 8004890:	00f42400 	.word	0x00f42400
 8004894:	00bb8000 	.word	0x00bb8000
 8004898:	016e3600 	.word	0x016e3600
 800489c:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048aa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b2:	d128      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80048b4:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d048      	beq.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0a1b      	lsrs	r3, r3, #8
 80048c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ca:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0edb      	lsrs	r3, r3, #27
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
              pllp = 17U;
 80048ea:	2311      	movs	r3, #17
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e001      	b.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
              pllp = 7U;
 80048f0:	2307      	movs	r3, #7
 80048f2:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	fb03 f202 	mul.w	r2, r3, r2
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	61fb      	str	r3, [r7, #28]
      break;
 8004904:	e025      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800490c:	d121      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        frequency = HAL_RCC_GetSysClockFreq();
 800490e:	f7ff f907 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8004912:	61f8      	str	r0, [r7, #28]
      break;
 8004914:	e01d      	b.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      break;
 8004916:	bf00      	nop
 8004918:	e01c      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800491a:	bf00      	nop
 800491c:	e01a      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800491e:	bf00      	nop
 8004920:	e018      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004922:	bf00      	nop
 8004924:	e016      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004926:	bf00      	nop
 8004928:	e014      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800492a:	bf00      	nop
 800492c:	e012      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800492e:	bf00      	nop
 8004930:	e010      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004932:	bf00      	nop
 8004934:	e00e      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004936:	bf00      	nop
 8004938:	e00c      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800493a:	bf00      	nop
 800493c:	e00a      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800493e:	bf00      	nop
 8004940:	e008      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004942:	bf00      	nop
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004952:	bf00      	nop
    }
  }

  return(frequency);
 8004954:	69fb      	ldr	r3, [r7, #28]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000

08004964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e049      	b.n	8004a0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc fea0 	bl	80016d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f000 f898 	bl	8004ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d001      	beq.n	8004a2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e042      	b.n	8004ab2 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a21      	ldr	r2, [pc, #132]	; (8004ac0 <HAL_TIM_Base_Start+0xac>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_TIM_Base_Start+0x5c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d013      	beq.n	8004a70 <HAL_TIM_Base_Start+0x5c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <HAL_TIM_Base_Start+0xb0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_TIM_Base_Start+0x5c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <HAL_TIM_Base_Start+0xb4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_TIM_Base_Start+0x5c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <HAL_TIM_Base_Start+0xb8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_TIM_Base_Start+0x5c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a19      	ldr	r2, [pc, #100]	; (8004ad0 <HAL_TIM_Base_Start+0xbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d115      	bne.n	8004a9c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <HAL_TIM_Base_Start+0xc0>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d015      	beq.n	8004aae <HAL_TIM_Base_Start+0x9a>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a88:	d011      	beq.n	8004aae <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9a:	e008      	b.n	8004aae <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e000      	b.n	8004ab0 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40013400 	.word	0x40013400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	00010007 	.word	0x00010007

08004ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a42      	ldr	r2, [pc, #264]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00f      	beq.n	8004b10 <TIM_Base_SetConfig+0x38>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d00b      	beq.n	8004b10 <TIM_Base_SetConfig+0x38>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_Base_SetConfig+0x38>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3e      	ldr	r2, [pc, #248]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_Base_SetConfig+0x38>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a3d      	ldr	r2, [pc, #244]	; (8004c00 <TIM_Base_SetConfig+0x128>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d108      	bne.n	8004b22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a33      	ldr	r2, [pc, #204]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d01b      	beq.n	8004b62 <TIM_Base_SetConfig+0x8a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d017      	beq.n	8004b62 <TIM_Base_SetConfig+0x8a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a30      	ldr	r2, [pc, #192]	; (8004bf8 <TIM_Base_SetConfig+0x120>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <TIM_Base_SetConfig+0x8a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2f      	ldr	r2, [pc, #188]	; (8004bfc <TIM_Base_SetConfig+0x124>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00f      	beq.n	8004b62 <TIM_Base_SetConfig+0x8a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a2e      	ldr	r2, [pc, #184]	; (8004c00 <TIM_Base_SetConfig+0x128>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00b      	beq.n	8004b62 <TIM_Base_SetConfig+0x8a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <TIM_Base_SetConfig+0x12c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d007      	beq.n	8004b62 <TIM_Base_SetConfig+0x8a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <TIM_Base_SetConfig+0x130>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_Base_SetConfig+0x8a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <TIM_Base_SetConfig+0x134>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d108      	bne.n	8004b74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <TIM_Base_SetConfig+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0xe8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <TIM_Base_SetConfig+0x128>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0xe8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a16      	ldr	r2, [pc, #88]	; (8004c04 <TIM_Base_SetConfig+0x12c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0xe8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <TIM_Base_SetConfig+0x130>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0xe8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <TIM_Base_SetConfig+0x134>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d103      	bne.n	8004bc8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f023 0201 	bic.w	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	611a      	str	r2, [r3, #16]
  }
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40013400 	.word	0x40013400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400
 8004c0c:	40014800 	.word	0x40014800

08004c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e065      	b.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2c      	ldr	r2, [pc, #176]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2b      	ldr	r2, [pc, #172]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d018      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d013      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00e      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d009      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d10c      	bne.n	8004ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40013400 	.word	0x40013400
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40014000 	.word	0x40014000

08004d14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e042      	b.n	8004dac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fc fc71 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2224      	movs	r2, #36	; 0x24
 8004d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 faf4 	bl	800534c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f825 	bl	8004db4 <UART_SetConfig>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e01b      	b.n	8004dac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fb73 	bl	8005490 <UART_CheckIdleState>
 8004daa:	4603      	mov	r3, r0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db8:	b08c      	sub	sp, #48	; 0x30
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4bab      	ldr	r3, [pc, #684]	; (8005090 <UART_SetConfig+0x2dc>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4aa0      	ldr	r2, [pc, #640]	; (8005094 <UART_SetConfig+0x2e0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d004      	beq.n	8004e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	f023 010f 	bic.w	r1, r3, #15
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a91      	ldr	r2, [pc, #580]	; (8005098 <UART_SetConfig+0x2e4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d125      	bne.n	8004ea4 <UART_SetConfig+0xf0>
 8004e58:	4b90      	ldr	r3, [pc, #576]	; (800509c <UART_SetConfig+0x2e8>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d81a      	bhi.n	8004e9c <UART_SetConfig+0xe8>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0xb8>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e7d 	.word	0x08004e7d
 8004e70:	08004e8d 	.word	0x08004e8d
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e82:	e0d6      	b.n	8005032 <UART_SetConfig+0x27e>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8a:	e0d2      	b.n	8005032 <UART_SetConfig+0x27e>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e92:	e0ce      	b.n	8005032 <UART_SetConfig+0x27e>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9a:	e0ca      	b.n	8005032 <UART_SetConfig+0x27e>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea2:	e0c6      	b.n	8005032 <UART_SetConfig+0x27e>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a7d      	ldr	r2, [pc, #500]	; (80050a0 <UART_SetConfig+0x2ec>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d138      	bne.n	8004f20 <UART_SetConfig+0x16c>
 8004eae:	4b7b      	ldr	r3, [pc, #492]	; (800509c <UART_SetConfig+0x2e8>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f003 030c 	and.w	r3, r3, #12
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	d82d      	bhi.n	8004f18 <UART_SetConfig+0x164>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x110>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004f19 	.word	0x08004f19
 8004ecc:	08004f19 	.word	0x08004f19
 8004ed0:	08004f19 	.word	0x08004f19
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f19 	.word	0x08004f19
 8004edc:	08004f19 	.word	0x08004f19
 8004ee0:	08004f19 	.word	0x08004f19
 8004ee4:	08004f01 	.word	0x08004f01
 8004ee8:	08004f19 	.word	0x08004f19
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efe:	e098      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f00:	2302      	movs	r3, #2
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e094      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f08:	2304      	movs	r3, #4
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	e090      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f10:	2308      	movs	r3, #8
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f16:	e08c      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1e:	e088      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5f      	ldr	r2, [pc, #380]	; (80050a4 <UART_SetConfig+0x2f0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d125      	bne.n	8004f76 <UART_SetConfig+0x1c2>
 8004f2a:	4b5c      	ldr	r3, [pc, #368]	; (800509c <UART_SetConfig+0x2e8>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f34:	2b30      	cmp	r3, #48	; 0x30
 8004f36:	d016      	beq.n	8004f66 <UART_SetConfig+0x1b2>
 8004f38:	2b30      	cmp	r3, #48	; 0x30
 8004f3a:	d818      	bhi.n	8004f6e <UART_SetConfig+0x1ba>
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d00a      	beq.n	8004f56 <UART_SetConfig+0x1a2>
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d814      	bhi.n	8004f6e <UART_SetConfig+0x1ba>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <UART_SetConfig+0x19a>
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d008      	beq.n	8004f5e <UART_SetConfig+0x1aa>
 8004f4c:	e00f      	b.n	8004f6e <UART_SetConfig+0x1ba>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f54:	e06d      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f56:	2302      	movs	r3, #2
 8004f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5c:	e069      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f5e:	2304      	movs	r3, #4
 8004f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f64:	e065      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f66:	2308      	movs	r3, #8
 8004f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6c:	e061      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f6e:	2310      	movs	r3, #16
 8004f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f74:	e05d      	b.n	8005032 <UART_SetConfig+0x27e>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a4b      	ldr	r2, [pc, #300]	; (80050a8 <UART_SetConfig+0x2f4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d125      	bne.n	8004fcc <UART_SetConfig+0x218>
 8004f80:	4b46      	ldr	r3, [pc, #280]	; (800509c <UART_SetConfig+0x2e8>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f8c:	d016      	beq.n	8004fbc <UART_SetConfig+0x208>
 8004f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f90:	d818      	bhi.n	8004fc4 <UART_SetConfig+0x210>
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d00a      	beq.n	8004fac <UART_SetConfig+0x1f8>
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d814      	bhi.n	8004fc4 <UART_SetConfig+0x210>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <UART_SetConfig+0x1f0>
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d008      	beq.n	8004fb4 <UART_SetConfig+0x200>
 8004fa2:	e00f      	b.n	8004fc4 <UART_SetConfig+0x210>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004faa:	e042      	b.n	8005032 <UART_SetConfig+0x27e>
 8004fac:	2302      	movs	r3, #2
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb2:	e03e      	b.n	8005032 <UART_SetConfig+0x27e>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e03a      	b.n	8005032 <UART_SetConfig+0x27e>
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e036      	b.n	8005032 <UART_SetConfig+0x27e>
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fca:	e032      	b.n	8005032 <UART_SetConfig+0x27e>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a30      	ldr	r2, [pc, #192]	; (8005094 <UART_SetConfig+0x2e0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d12a      	bne.n	800502c <UART_SetConfig+0x278>
 8004fd6:	4b31      	ldr	r3, [pc, #196]	; (800509c <UART_SetConfig+0x2e8>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fe4:	d01a      	beq.n	800501c <UART_SetConfig+0x268>
 8004fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fea:	d81b      	bhi.n	8005024 <UART_SetConfig+0x270>
 8004fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff0:	d00c      	beq.n	800500c <UART_SetConfig+0x258>
 8004ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff6:	d815      	bhi.n	8005024 <UART_SetConfig+0x270>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <UART_SetConfig+0x250>
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005000:	d008      	beq.n	8005014 <UART_SetConfig+0x260>
 8005002:	e00f      	b.n	8005024 <UART_SetConfig+0x270>
 8005004:	2300      	movs	r3, #0
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500a:	e012      	b.n	8005032 <UART_SetConfig+0x27e>
 800500c:	2302      	movs	r3, #2
 800500e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005012:	e00e      	b.n	8005032 <UART_SetConfig+0x27e>
 8005014:	2304      	movs	r3, #4
 8005016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800501a:	e00a      	b.n	8005032 <UART_SetConfig+0x27e>
 800501c:	2308      	movs	r3, #8
 800501e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005022:	e006      	b.n	8005032 <UART_SetConfig+0x27e>
 8005024:	2310      	movs	r3, #16
 8005026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502a:	e002      	b.n	8005032 <UART_SetConfig+0x27e>
 800502c:	2310      	movs	r3, #16
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <UART_SetConfig+0x2e0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	f040 80a8 	bne.w	800518e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800503e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005042:	2b08      	cmp	r3, #8
 8005044:	d834      	bhi.n	80050b0 <UART_SetConfig+0x2fc>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <UART_SetConfig+0x298>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005071 	.word	0x08005071
 8005050:	080050b1 	.word	0x080050b1
 8005054:	08005079 	.word	0x08005079
 8005058:	080050b1 	.word	0x080050b1
 800505c:	0800507f 	.word	0x0800507f
 8005060:	080050b1 	.word	0x080050b1
 8005064:	080050b1 	.word	0x080050b1
 8005068:	080050b1 	.word	0x080050b1
 800506c:	08005087 	.word	0x08005087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005070:	f7fe fdc4 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 8005074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005076:	e021      	b.n	80050bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <UART_SetConfig+0x2f8>)
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800507c:	e01e      	b.n	80050bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fe fd4f 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8005082:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005084:	e01a      	b.n	80050bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800508c:	e016      	b.n	80050bc <UART_SetConfig+0x308>
 800508e:	bf00      	nop
 8005090:	cfff69f3 	.word	0xcfff69f3
 8005094:	40008000 	.word	0x40008000
 8005098:	40013800 	.word	0x40013800
 800509c:	40021000 	.word	0x40021000
 80050a0:	40004400 	.word	0x40004400
 80050a4:	40004800 	.word	0x40004800
 80050a8:	40004c00 	.word	0x40004c00
 80050ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 812a 	beq.w	8005318 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	4a9e      	ldr	r2, [pc, #632]	; (8005344 <UART_SetConfig+0x590>)
 80050ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d305      	bcc.n	80050f4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d903      	bls.n	80050fc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050fa:	e10d      	b.n	8005318 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2200      	movs	r2, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	60fa      	str	r2, [r7, #12]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	4a8e      	ldr	r2, [pc, #568]	; (8005344 <UART_SetConfig+0x590>)
 800510a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510e:	b29b      	uxth	r3, r3
 8005110:	2200      	movs	r2, #0
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800511e:	f7fb fc69 	bl	80009f4 <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	020b      	lsls	r3, r1, #8
 8005134:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005138:	0202      	lsls	r2, r0, #8
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	6849      	ldr	r1, [r1, #4]
 800513e:	0849      	lsrs	r1, r1, #1
 8005140:	2000      	movs	r0, #0
 8005142:	460c      	mov	r4, r1
 8005144:	4605      	mov	r5, r0
 8005146:	eb12 0804 	adds.w	r8, r2, r4
 800514a:	eb43 0905 	adc.w	r9, r3, r5
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	469a      	mov	sl, r3
 8005156:	4693      	mov	fp, r2
 8005158:	4652      	mov	r2, sl
 800515a:	465b      	mov	r3, fp
 800515c:	4640      	mov	r0, r8
 800515e:	4649      	mov	r1, r9
 8005160:	f7fb fc48 	bl	80009f4 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005172:	d308      	bcc.n	8005186 <UART_SetConfig+0x3d2>
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517a:	d204      	bcs.n	8005186 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	60da      	str	r2, [r3, #12]
 8005184:	e0c8      	b.n	8005318 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800518c:	e0c4      	b.n	8005318 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005196:	d167      	bne.n	8005268 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800519c:	2b08      	cmp	r3, #8
 800519e:	d828      	bhi.n	80051f2 <UART_SetConfig+0x43e>
 80051a0:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x3f4>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051f3 	.word	0x080051f3
 80051b8:	080051e3 	.word	0x080051e3
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	080051eb 	.word	0x080051eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7fe fd16 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051d2:	e014      	b.n	80051fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d4:	f7fe fd28 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 80051d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051da:	e010      	b.n	80051fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051dc:	4b5a      	ldr	r3, [pc, #360]	; (8005348 <UART_SetConfig+0x594>)
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051e0:	e00d      	b.n	80051fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e2:	f7fe fc9d 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80051e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e8:	e009      	b.n	80051fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051f0:	e005      	b.n	80051fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8089 	beq.w	8005318 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	4a4e      	ldr	r2, [pc, #312]	; (8005344 <UART_SetConfig+0x590>)
 800520c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005210:	461a      	mov	r2, r3
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	fbb3 f3f2 	udiv	r3, r3, r2
 8005218:	005a      	lsls	r2, r3, #1
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	085b      	lsrs	r3, r3, #1
 8005220:	441a      	add	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d916      	bls.n	8005260 <UART_SetConfig+0x4ac>
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d212      	bcs.n	8005260 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f023 030f 	bic.w	r3, r3, #15
 8005242:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	b29b      	uxth	r3, r3
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	b29a      	uxth	r2, r3
 8005250:	8bfb      	ldrh	r3, [r7, #30]
 8005252:	4313      	orrs	r3, r2
 8005254:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	8bfa      	ldrh	r2, [r7, #30]
 800525c:	60da      	str	r2, [r3, #12]
 800525e:	e05b      	b.n	8005318 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005266:	e057      	b.n	8005318 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005268:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800526c:	2b08      	cmp	r3, #8
 800526e:	d828      	bhi.n	80052c2 <UART_SetConfig+0x50e>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x4c4>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052a5 	.word	0x080052a5
 8005280:	080052ad 	.word	0x080052ad
 8005284:	080052c3 	.word	0x080052c3
 8005288:	080052b3 	.word	0x080052b3
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052c3 	.word	0x080052c3
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7fe fcae 	bl	8003bfc <HAL_RCC_GetPCLK1Freq>
 80052a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052a2:	e014      	b.n	80052ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a4:	f7fe fcc0 	bl	8003c28 <HAL_RCC_GetPCLK2Freq>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <UART_SetConfig+0x594>)
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052b0:	e00d      	b.n	80052ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7fe fc35 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80052b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052b8:	e009      	b.n	80052ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052c0:	e005      	b.n	80052ce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052cc:	bf00      	nop
    }

    if (pclk != 0U)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d021      	beq.n	8005318 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	4a1a      	ldr	r2, [pc, #104]	; (8005344 <UART_SetConfig+0x590>)
 80052da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052de:	461a      	mov	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	441a      	add	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d909      	bls.n	8005312 <UART_SetConfig+0x55e>
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005304:	d205      	bcs.n	8005312 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	b29a      	uxth	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60da      	str	r2, [r3, #12]
 8005310:	e002      	b.n	8005318 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2201      	movs	r2, #1
 800531c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2201      	movs	r2, #1
 8005324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2200      	movs	r2, #0
 800532c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2200      	movs	r2, #0
 8005332:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005334:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005338:	4618      	mov	r0, r3
 800533a:	3730      	adds	r7, #48	; 0x30
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005342:	bf00      	nop
 8005344:	08005bb4 	.word	0x08005bb4
 8005348:	00f42400 	.word	0x00f42400

0800534c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01a      	beq.n	8005462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544a:	d10a      	bne.n	8005462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b098      	sub	sp, #96	; 0x60
 8005494:	af02      	add	r7, sp, #8
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a0:	f7fc fa40 	bl	8001924 <HAL_GetTick>
 80054a4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d12f      	bne.n	8005514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054bc:	2200      	movs	r2, #0
 80054be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f88e 	bl	80055e4 <UART_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d022      	beq.n	8005514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e2:	653b      	str	r3, [r7, #80]	; 0x50
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	647b      	str	r3, [r7, #68]	; 0x44
 80054ee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e6      	bne.n	80054ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e063      	b.n	80055dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b04      	cmp	r3, #4
 8005520:	d149      	bne.n	80055b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552a:	2200      	movs	r2, #0
 800552c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f857 	bl	80055e4 <UART_WaitOnFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d03c      	beq.n	80055b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	623b      	str	r3, [r7, #32]
   return(result);
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	633b      	str	r3, [r7, #48]	; 0x30
 800555c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e6      	bne.n	800553c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	60fb      	str	r3, [r7, #12]
   return(result);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	64bb      	str	r3, [r7, #72]	; 0x48
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558e:	61fa      	str	r2, [r7, #28]
 8005590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	617b      	str	r3, [r7, #20]
   return(result);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e012      	b.n	80055dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3758      	adds	r7, #88	; 0x58
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055f4:	e04f      	b.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d04b      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fc f991 	bl	8001924 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <UART_WaitOnFlagUntilTimeout+0x30>
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e04e      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d037      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d034      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b40      	cmp	r3, #64	; 0x40
 8005630:	d031      	beq.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b08      	cmp	r3, #8
 800563e:	d110      	bne.n	8005662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2208      	movs	r2, #8
 8005646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f838 	bl	80056be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2208      	movs	r2, #8
 8005652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e029      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005670:	d111      	bne.n	8005696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f81e 	bl	80056be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e00f      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d0a0      	beq.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056be:	b480      	push	{r7}
 80056c0:	b095      	sub	sp, #84	; 0x54
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e4:	643b      	str	r3, [r7, #64]	; 0x40
 80056e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e6      	bne.n	80056c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	61fb      	str	r3, [r7, #28]
   return(result);
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570e:	f023 0301 	bic.w	r3, r3, #1
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800571c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005724:	e841 2300 	strex	r3, r2, [r1]
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e3      	bne.n	80056f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d118      	bne.n	800576a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	60bb      	str	r3, [r7, #8]
   return(result);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0310 	bic.w	r3, r3, #16
 800574c:	647b      	str	r3, [r7, #68]	; 0x44
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6979      	ldr	r1, [r7, #20]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	613b      	str	r3, [r7, #16]
   return(result);
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e6      	bne.n	8005738 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800577e:	bf00      	nop
 8005780:	3754      	adds	r7, #84	; 0x54
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800579c:	2302      	movs	r3, #2
 800579e:	e027      	b.n	80057f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e02d      	b.n	8005870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f84f 	bl	80058f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800588c:	2302      	movs	r3, #2
 800588e:	e02d      	b.n	80058ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2224      	movs	r2, #36	; 0x24
 800589c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f811 	bl	80058f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005900:	2b00      	cmp	r3, #0
 8005902:	d108      	bne.n	8005916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005914:	e031      	b.n	800597a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005916:	2308      	movs	r3, #8
 8005918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800591a:	2308      	movs	r3, #8
 800591c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	0e5b      	lsrs	r3, r3, #25
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	0f5b      	lsrs	r3, r3, #29
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	7b3a      	ldrb	r2, [r7, #12]
 8005942:	4911      	ldr	r1, [pc, #68]	; (8005988 <UARTEx_SetNbDataToProcess+0x94>)
 8005944:	5c8a      	ldrb	r2, [r1, r2]
 8005946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800594a:	7b3a      	ldrb	r2, [r7, #12]
 800594c:	490f      	ldr	r1, [pc, #60]	; (800598c <UARTEx_SetNbDataToProcess+0x98>)
 800594e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005950:	fb93 f3f2 	sdiv	r3, r3, r2
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	7b7a      	ldrb	r2, [r7, #13]
 8005960:	4909      	ldr	r1, [pc, #36]	; (8005988 <UARTEx_SetNbDataToProcess+0x94>)
 8005962:	5c8a      	ldrb	r2, [r1, r2]
 8005964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005968:	7b7a      	ldrb	r2, [r7, #13]
 800596a:	4908      	ldr	r1, [pc, #32]	; (800598c <UARTEx_SetNbDataToProcess+0x98>)
 800596c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800596e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005972:	b29a      	uxth	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800597a:	bf00      	nop
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	08005bcc 	.word	0x08005bcc
 800598c:	08005bd4 	.word	0x08005bd4

08005990 <malloc>:
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <malloc+0xc>)
 8005992:	4601      	mov	r1, r0
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	f000 b823 	b.w	80059e0 <_malloc_r>
 800599a:	bf00      	nop
 800599c:	2000005c 	.word	0x2000005c

080059a0 <sbrk_aligned>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4e0e      	ldr	r6, [pc, #56]	; (80059dc <sbrk_aligned+0x3c>)
 80059a4:	460c      	mov	r4, r1
 80059a6:	6831      	ldr	r1, [r6, #0]
 80059a8:	4605      	mov	r5, r0
 80059aa:	b911      	cbnz	r1, 80059b2 <sbrk_aligned+0x12>
 80059ac:	f000 f8ac 	bl	8005b08 <_sbrk_r>
 80059b0:	6030      	str	r0, [r6, #0]
 80059b2:	4621      	mov	r1, r4
 80059b4:	4628      	mov	r0, r5
 80059b6:	f000 f8a7 	bl	8005b08 <_sbrk_r>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	d00a      	beq.n	80059d4 <sbrk_aligned+0x34>
 80059be:	1cc4      	adds	r4, r0, #3
 80059c0:	f024 0403 	bic.w	r4, r4, #3
 80059c4:	42a0      	cmp	r0, r4
 80059c6:	d007      	beq.n	80059d8 <sbrk_aligned+0x38>
 80059c8:	1a21      	subs	r1, r4, r0
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 f89c 	bl	8005b08 <_sbrk_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d101      	bne.n	80059d8 <sbrk_aligned+0x38>
 80059d4:	f04f 34ff 	mov.w	r4, #4294967295
 80059d8:	4620      	mov	r0, r4
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	20000668 	.word	0x20000668

080059e0 <_malloc_r>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	1ccd      	adds	r5, r1, #3
 80059e6:	f025 0503 	bic.w	r5, r5, #3
 80059ea:	3508      	adds	r5, #8
 80059ec:	2d0c      	cmp	r5, #12
 80059ee:	bf38      	it	cc
 80059f0:	250c      	movcc	r5, #12
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	4607      	mov	r7, r0
 80059f6:	db01      	blt.n	80059fc <_malloc_r+0x1c>
 80059f8:	42a9      	cmp	r1, r5
 80059fa:	d905      	bls.n	8005a08 <_malloc_r+0x28>
 80059fc:	230c      	movs	r3, #12
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	2600      	movs	r6, #0
 8005a02:	4630      	mov	r0, r6
 8005a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005adc <_malloc_r+0xfc>
 8005a0c:	f000 f868 	bl	8005ae0 <__malloc_lock>
 8005a10:	f8d8 3000 	ldr.w	r3, [r8]
 8005a14:	461c      	mov	r4, r3
 8005a16:	bb5c      	cbnz	r4, 8005a70 <_malloc_r+0x90>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4638      	mov	r0, r7
 8005a1c:	f7ff ffc0 	bl	80059a0 <sbrk_aligned>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	4604      	mov	r4, r0
 8005a24:	d155      	bne.n	8005ad2 <_malloc_r+0xf2>
 8005a26:	f8d8 4000 	ldr.w	r4, [r8]
 8005a2a:	4626      	mov	r6, r4
 8005a2c:	2e00      	cmp	r6, #0
 8005a2e:	d145      	bne.n	8005abc <_malloc_r+0xdc>
 8005a30:	2c00      	cmp	r4, #0
 8005a32:	d048      	beq.n	8005ac6 <_malloc_r+0xe6>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	4631      	mov	r1, r6
 8005a38:	4638      	mov	r0, r7
 8005a3a:	eb04 0903 	add.w	r9, r4, r3
 8005a3e:	f000 f863 	bl	8005b08 <_sbrk_r>
 8005a42:	4581      	cmp	r9, r0
 8005a44:	d13f      	bne.n	8005ac6 <_malloc_r+0xe6>
 8005a46:	6821      	ldr	r1, [r4, #0]
 8005a48:	1a6d      	subs	r5, r5, r1
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	f7ff ffa7 	bl	80059a0 <sbrk_aligned>
 8005a52:	3001      	adds	r0, #1
 8005a54:	d037      	beq.n	8005ac6 <_malloc_r+0xe6>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	442b      	add	r3, r5
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d038      	beq.n	8005ad6 <_malloc_r+0xf6>
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	42a2      	cmp	r2, r4
 8005a68:	d12b      	bne.n	8005ac2 <_malloc_r+0xe2>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	605a      	str	r2, [r3, #4]
 8005a6e:	e00f      	b.n	8005a90 <_malloc_r+0xb0>
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	1b52      	subs	r2, r2, r5
 8005a74:	d41f      	bmi.n	8005ab6 <_malloc_r+0xd6>
 8005a76:	2a0b      	cmp	r2, #11
 8005a78:	d917      	bls.n	8005aaa <_malloc_r+0xca>
 8005a7a:	1961      	adds	r1, r4, r5
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	6025      	str	r5, [r4, #0]
 8005a80:	bf18      	it	ne
 8005a82:	6059      	strne	r1, [r3, #4]
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	bf08      	it	eq
 8005a88:	f8c8 1000 	streq.w	r1, [r8]
 8005a8c:	5162      	str	r2, [r4, r5]
 8005a8e:	604b      	str	r3, [r1, #4]
 8005a90:	4638      	mov	r0, r7
 8005a92:	f104 060b 	add.w	r6, r4, #11
 8005a96:	f000 f829 	bl	8005aec <__malloc_unlock>
 8005a9a:	f026 0607 	bic.w	r6, r6, #7
 8005a9e:	1d23      	adds	r3, r4, #4
 8005aa0:	1af2      	subs	r2, r6, r3
 8005aa2:	d0ae      	beq.n	8005a02 <_malloc_r+0x22>
 8005aa4:	1b9b      	subs	r3, r3, r6
 8005aa6:	50a3      	str	r3, [r4, r2]
 8005aa8:	e7ab      	b.n	8005a02 <_malloc_r+0x22>
 8005aaa:	42a3      	cmp	r3, r4
 8005aac:	6862      	ldr	r2, [r4, #4]
 8005aae:	d1dd      	bne.n	8005a6c <_malloc_r+0x8c>
 8005ab0:	f8c8 2000 	str.w	r2, [r8]
 8005ab4:	e7ec      	b.n	8005a90 <_malloc_r+0xb0>
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	6864      	ldr	r4, [r4, #4]
 8005aba:	e7ac      	b.n	8005a16 <_malloc_r+0x36>
 8005abc:	4634      	mov	r4, r6
 8005abe:	6876      	ldr	r6, [r6, #4]
 8005ac0:	e7b4      	b.n	8005a2c <_malloc_r+0x4c>
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	e7cc      	b.n	8005a60 <_malloc_r+0x80>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4638      	mov	r0, r7
 8005acc:	f000 f80e 	bl	8005aec <__malloc_unlock>
 8005ad0:	e797      	b.n	8005a02 <_malloc_r+0x22>
 8005ad2:	6025      	str	r5, [r4, #0]
 8005ad4:	e7dc      	b.n	8005a90 <_malloc_r+0xb0>
 8005ad6:	605b      	str	r3, [r3, #4]
 8005ad8:	deff      	udf	#255	; 0xff
 8005ada:	bf00      	nop
 8005adc:	20000664 	.word	0x20000664

08005ae0 <__malloc_lock>:
 8005ae0:	4801      	ldr	r0, [pc, #4]	; (8005ae8 <__malloc_lock+0x8>)
 8005ae2:	f000 b84b 	b.w	8005b7c <__retarget_lock_acquire_recursive>
 8005ae6:	bf00      	nop
 8005ae8:	200007a8 	.word	0x200007a8

08005aec <__malloc_unlock>:
 8005aec:	4801      	ldr	r0, [pc, #4]	; (8005af4 <__malloc_unlock+0x8>)
 8005aee:	f000 b846 	b.w	8005b7e <__retarget_lock_release_recursive>
 8005af2:	bf00      	nop
 8005af4:	200007a8 	.word	0x200007a8

08005af8 <memset>:
 8005af8:	4402      	add	r2, r0
 8005afa:	4603      	mov	r3, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <_sbrk_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d06      	ldr	r5, [pc, #24]	; (8005b24 <_sbrk_r+0x1c>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	f7fb fe30 	bl	8001778 <_sbrk>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_sbrk_r+0x1a>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_sbrk_r+0x1a>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	200007a4 	.word	0x200007a4

08005b28 <__errno>:
 8005b28:	4b01      	ldr	r3, [pc, #4]	; (8005b30 <__errno+0x8>)
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	2000005c 	.word	0x2000005c

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4d0d      	ldr	r5, [pc, #52]	; (8005b6c <__libc_init_array+0x38>)
 8005b38:	4c0d      	ldr	r4, [pc, #52]	; (8005b70 <__libc_init_array+0x3c>)
 8005b3a:	1b64      	subs	r4, r4, r5
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	2600      	movs	r6, #0
 8005b40:	42a6      	cmp	r6, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	4d0b      	ldr	r5, [pc, #44]	; (8005b74 <__libc_init_array+0x40>)
 8005b46:	4c0c      	ldr	r4, [pc, #48]	; (8005b78 <__libc_init_array+0x44>)
 8005b48:	f000 f81a 	bl	8005b80 <_init>
 8005b4c:	1b64      	subs	r4, r4, r5
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	2600      	movs	r6, #0
 8005b52:	42a6      	cmp	r6, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5c:	4798      	blx	r3
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b66:	4798      	blx	r3
 8005b68:	3601      	adds	r6, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08005be4 	.word	0x08005be4
 8005b70:	08005be4 	.word	0x08005be4
 8005b74:	08005be4 	.word	0x08005be4
 8005b78:	08005be8 	.word	0x08005be8

08005b7c <__retarget_lock_acquire_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <__retarget_lock_release_recursive>:
 8005b7e:	4770      	bx	lr

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
