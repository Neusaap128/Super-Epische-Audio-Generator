
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ac  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad0  08007ad0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000060  08007b38  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08007b38  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e843  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039fe  00000000  00000000  0003e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  00042318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ce  00000000  00000000  00043dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220c4  00000000  00000000  0004528e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000208c3  00000000  00000000  00067352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2fcd  00000000  00000000  00087c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077a4  00000000  00000000  0016abe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00172388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007a6c 	.word	0x08007a6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08007a6c 	.word	0x08007a6c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

	ResetCodec(hi2c1);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f82d 	bl	8000d58 <ResetCodec>

	HAL_Delay(25);
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 ffe0 	bl	8001cc4 <HAL_Delay>

	//un mute left channel
	WriteCodecRegister(hi2c1, 0x00, 0b100010111);
 8000d04:	f240 1217 	movw	r2, #279	; 0x117
 8000d08:	2100      	movs	r1, #0
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f831 	bl	8000d72 <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 1 << 7);
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	2101      	movs	r1, #1
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f82c 	bl	8000d72 <WriteCodecRegister>


	// ----- Power Management -----

	// R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b011101000);
 8000d1a:	22e8      	movs	r2, #232	; 0xe8
 8000d1c:	2119      	movs	r1, #25
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f827 	bl	8000d72 <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b101010101);
 8000d24:	f240 1255 	movw	r2, #341	; 0x155
 8000d28:	211a      	movs	r1, #26
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f821 	bl	8000d72 <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000101000);
 8000d30:	2228      	movs	r2, #40	; 0x28
 8000d32:	212f      	movs	r1, #47	; 0x2f
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f81c 	bl	8000d72 <WriteCodecRegister>

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000d3a:	f240 1279 	movw	r2, #377	; 0x179
 8000d3e:	2102      	movs	r1, #2
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f816 	bl	8000d72 <WriteCodecRegister>


	// Disable master mode codec
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 8000d46:	220a      	movs	r2, #10
 8000d48:	2107      	movs	r1, #7
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f811 	bl	8000d72 <WriteCodecRegister>

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/


}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 8000d60:	22ff      	movs	r2, #255	; 0xff
 8000d62:	210f      	movs	r1, #15
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f804 	bl	8000d72 <WriteCodecRegister>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint16_t reg, uint16_t pData){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b088      	sub	sp, #32
 8000d76:	af04      	add	r7, sp, #16
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	807b      	strh	r3, [r7, #2]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	803b      	strh	r3, [r7, #0]
	uint8_t lowByte  = (uint8_t)(pData & 0xFF);
 8000d82:	883b      	ldrh	r3, [r7, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]
	uint8_t highByte = (uint8_t)(pData >> 8);
 8000d88:	883b      	ldrh	r3, [r7, #0]
 8000d8a:	0a1b      	lsrs	r3, r3, #8
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &highByte, 1, HAL_MAX_DELAY);
 8000d92:	2334      	movs	r3, #52	; 0x34
 8000d94:	b299      	uxth	r1, r3
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	f107 030e 	add.w	r3, r7, #14
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f003 fb08 	bl	80043c0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 8000db0:	2334      	movs	r3, #52	; 0x34
 8000db2:	b299      	uxth	r1, r3
 8000db4:	887a      	ldrh	r2, [r7, #2]
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	f107 030f 	add.w	r3, r7, #15
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f003 faf9 	bl	80043c0 <HAL_I2C_Mem_Write>

}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4618      	mov	r0, r3
 8000de2:	f006 fd4b 	bl	800787c <malloc>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <InitDSP+0x2c>)
 8000dec:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 fd42 	bl	800787c <malloc>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <InitDSP+0x30>)
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000007c 	.word	0x2000007c
 8000e08:	20000080 	.word	0x20000080

08000e0c <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const uint16_t* input, uint16_t* output, size_t bufferLength) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e00c      	b.n	8000e38 <processBuffer+0x2c>
        output[i] = input[i];
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	441a      	add	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	8812      	ldrh	r2, [r2, #0]
 8000e30:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferLength; i++) {
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8ee      	bhi.n	8000e1e <processBuffer+0x12>
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <HAL_ADC_ConvHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000e5c:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000e60:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000e62:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000e64:	2240      	movs	r2, #64	; 0x40
 8000e66:	490b      	ldr	r1, [pc, #44]	; (8000e94 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000e68:	4808      	ldr	r0, [pc, #32]	; (8000e8c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000e6a:	f7ff ffcf 	bl	8000e0c <processBuffer>

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f003 f9ed 	bl	8004254 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]

}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000570 	.word	0x20000570
 8000e8c:	20000370 	.word	0x20000370
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000470 	.word	0x20000470
 8000e98:	20000574 	.word	0x20000574

08000e9c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_ADC_ConvCpltCallback+0x40>)
 8000ea8:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_ADC_ConvCpltCallback+0x44>)
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000eae:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)(adcBuf+AUDIO_BUFFER_SIZE/2), (uint16_t*)(dacBuf+AUDIO_BUFFER_SIZE/2), AUDIO_BUFFER_SIZE/2);
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_ADC_ConvCpltCallback+0x40>)
 8000eb2:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ffa8 	bl	8000e0c <processBuffer>
	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000ebc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f003 f9c6 	bl	8004254 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000570 	.word	0x20000570
 8000edc:	200003f0 	.word	0x200003f0
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	200004f0 	.word	0x200004f0
 8000ee8:	20000574 	.word	0x20000574

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f000 fe76 	bl	8001be2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f83f 	bl	8000f78 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000efa:	b662      	cpsie	i
}
 8000efc:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 fa9b 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f02:	f000 fa67 	bl	80013d4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000f06:	f000 f9c7 	bl	8001298 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000f0a:	f000 f881 	bl	8001010 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f0e:	f000 f8f9 	bl	8001104 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000f12:	f000 fa0d 	bl	8001330 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000f16:	f000 f92f 	bl	8001178 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000f1a:	f000 f96d 	bl	80011f8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000f1e:	f000 f993 	bl	8001248 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000f22:	480e      	ldr	r0, [pc, #56]	; (8000f5c <main+0x70>)
 8000f24:	f005 fcec 	bl	8006900 <HAL_TIM_Base_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  InitDSP();
 8000f28:	f7ff ff56 	bl	8000dd8 <InitDSP>

  CodecInit(&hi2c1);
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <main+0x74>)
 8000f2e:	f7ff fedf 	bl	8000cf0 <CodecInit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, AUDIO_BUFFER_SIZE);
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	490b      	ldr	r1, [pc, #44]	; (8000f64 <main+0x78>)
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <main+0x7c>)
 8000f38:	f001 fa88 	bl	800244c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacBuf, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <main+0x80>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <main+0x84>)
 8000f48:	f002 fa44 	bl	80033d4 <HAL_DAC_Start_DMA>
      //float sinVal = (sin( (float)timerValue/3863*2*M_PI)+1)/2 *3.3;
      //uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      //DAC1->DHR12R1 = dacOutput;
	  HAL_I2S_Transmit(&hi2s2,  0x55, 2, HAL_MAX_DELAY);
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	2202      	movs	r2, #2
 8000f52:	2155      	movs	r1, #85	; 0x55
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <main+0x88>)
 8000f56:	f003 ff2d 	bl	8004db4 <HAL_I2S_Transmit>
 8000f5a:	e7f7      	b.n	8000f4c <main+0x60>
 8000f5c:	20000324 	.word	0x20000324
 8000f60:	200001c4 	.word	0x200001c4
 8000f64:	20000370 	.word	0x20000370
 8000f68:	20000084 	.word	0x20000084
 8000f6c:	20000470 	.word	0x20000470
 8000f70:	20000150 	.word	0x20000150
 8000f74:	20000218 	.word	0x20000218

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	2238      	movs	r2, #56	; 0x38
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fd2c 	bl	80079e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f004 f834 	bl	8005008 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000faa:	2340      	movs	r3, #64	; 0x40
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fba:	2355      	movs	r3, #85	; 0x55
 8000fbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 f8ce 	bl	8005170 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fda:	f000 faab 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fbcc 	bl	8005794 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001002:	f000 fa97 	bl	8001534 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3750      	adds	r7, #80	; 0x50
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2220      	movs	r2, #32
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f006 fcdb 	bl	80079e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <MX_ADC1_Init+0xec>)
 8001030:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001034:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <MX_ADC1_Init+0xec>)
 8001038:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800103c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <MX_ADC1_Init+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_ADC1_Init+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <MX_ADC1_Init+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <MX_ADC1_Init+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <MX_ADC1_Init+0xec>)
 8001058:	2204      	movs	r2, #4
 800105a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800105c:	4b27      	ldr	r3, [pc, #156]	; (80010fc <MX_ADC1_Init+0xec>)
 800105e:	2200      	movs	r2, #0
 8001060:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_ADC1_Init+0xec>)
 8001064:	2201      	movs	r2, #1
 8001066:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <MX_ADC1_Init+0xec>)
 800106a:	2201      	movs	r2, #1
 800106c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <MX_ADC1_Init+0xec>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <MX_ADC1_Init+0xec>)
 8001078:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <MX_ADC1_Init+0xec>)
 8001080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001084:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <MX_ADC1_Init+0xec>)
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <MX_ADC1_Init+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109c:	4817      	ldr	r0, [pc, #92]	; (80010fc <MX_ADC1_Init+0xec>)
 800109e:	f001 f851 	bl	8002144 <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010a8:	f000 fa44 	bl	8001534 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4811      	ldr	r0, [pc, #68]	; (80010fc <MX_ADC1_Init+0xec>)
 80010b8:	f001 ffb6 	bl	8003028 <HAL_ADCEx_MultiModeConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010c2:	f000 fa37 	bl	8001534 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_ADC1_Init+0xf0>)
 80010c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ca:	2306      	movs	r3, #6
 80010cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010d2:	237f      	movs	r3, #127	; 0x7f
 80010d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010d6:	2304      	movs	r3, #4
 80010d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	; (80010fc <MX_ADC1_Init+0xec>)
 80010e4:	f001 fa70 	bl	80025c8 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010ee:	f000 fa21 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000084 	.word	0x20000084
 8001100:	04300002 	.word	0x04300002

08001104 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2230      	movs	r2, #48	; 0x30
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f006 fc67 	bl	80079e4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_DAC1_Init+0x6c>)
 8001118:	4a16      	ldr	r2, [pc, #88]	; (8001174 <MX_DAC1_Init+0x70>)
 800111a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800111c:	4814      	ldr	r0, [pc, #80]	; (8001170 <MX_DAC1_Init+0x6c>)
 800111e:	f002 f936 	bl	800338e <HAL_DAC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001128:	f000 fa04 	bl	8001534 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800112c:	2302      	movs	r3, #2
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800113c:	231e      	movs	r3, #30
 800113e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_DAC1_Init+0x6c>)
 8001158:	f002 fa2e 	bl	80035b8 <HAL_DAC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001162:	f000 f9e7 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	; 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000150 	.word	0x20000150
 8001174:	50000800 	.word	0x50000800

08001178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_I2C1_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <MX_I2C1_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_I2C1_Init+0x74>)
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x7c>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_I2C1_Init+0x74>)
 8001190:	2201      	movs	r2, #1
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_I2C1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b2:	480e      	ldr	r0, [pc, #56]	; (80011ec <MX_I2C1_Init+0x74>)
 80011b4:	f003 f868 	bl	8004288 <HAL_I2C_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011be:	f000 f9b9 	bl	8001534 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <MX_I2C1_Init+0x74>)
 80011c6:	f003 fc7d 	bl	8004ac4 <HAL_I2CEx_ConfigAnalogFilter>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011d0:	f000 f9b0 	bl	8001534 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_I2C1_Init+0x74>)
 80011d8:	f003 fcbf 	bl	8004b5a <HAL_I2CEx_ConfigDigitalFilter>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011e2:	f000 f9a7 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001c4 	.word	0x200001c4
 80011f0:	40005400 	.word	0x40005400
 80011f4:	30a0a7fb 	.word	0x30a0a7fb

080011f8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_I2S2_Init+0x48>)
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <MX_I2S2_Init+0x4c>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_I2S2_Init+0x48>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <MX_I2S2_Init+0x48>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_I2S2_Init+0x48>)
 8001212:	2203      	movs	r2, #3
 8001214:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_I2S2_Init+0x48>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_I2S2_Init+0x48>)
 800121e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001222:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_I2S2_Init+0x48>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_I2S2_Init+0x48>)
 800122c:	f003 fce2 	bl	8004bf4 <HAL_I2S_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8001236:	f000 f97d 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000218 	.word	0x20000218
 8001244:	40003800 	.word	0x40003800

08001248 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800124c:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_I2S3_Init+0x48>)
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <MX_I2S3_Init+0x4c>)
 8001250:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_I2S3_Init+0x48>)
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <MX_I2S3_Init+0x48>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_I2S3_Init+0x48>)
 8001262:	2203      	movs	r2, #3
 8001264:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_I2S3_Init+0x48>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_I2S3_Init+0x48>)
 800126e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001272:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_I2S3_Init+0x48>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_I2S3_Init+0x48>)
 800127c:	f003 fcba 	bl	8004bf4 <HAL_I2S_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2S3_Init+0x42>
  {
    Error_Handler();
 8001286:	f000 f955 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000254 	.word	0x20000254
 8001294:	40003c00 	.word	0x40003c00

08001298 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 800129e:	4a22      	ldr	r2, [pc, #136]	; (8001328 <MX_LPUART1_UART_Init+0x90>)
 80012a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012da:	4812      	ldr	r0, [pc, #72]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012dc:	f005 fc90 	bl	8006c00 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012e6:	f000 f925 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 80012ee:	f006 f9fb 	bl	80076e8 <HAL_UARTEx_SetTxFifoThreshold>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012f8:	f000 f91c 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 8001300:	f006 fa30 	bl	8007764 <HAL_UARTEx_SetRxFifoThreshold>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800130a:	f000 f913 	bl	8001534 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_LPUART1_UART_Init+0x8c>)
 8001310:	f006 f9b1 	bl	8007676 <HAL_UARTEx_DisableFifoMode>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800131a:	f000 f90b 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000290 	.word	0x20000290
 8001328:	40008000 	.word	0x40008000
 800132c:	00000000 	.word	0x00000000

08001330 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001340:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <MX_TIM6_Init+0x98>)
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <MX_TIM6_Init+0x9c>)
 8001344:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <MX_TIM6_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <MX_TIM6_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_TIM6_Init+0x98>)
 8001354:	f640 7218 	movw	r2, #3864	; 0xf18
 8001358:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_TIM6_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001360:	4819      	ldr	r0, [pc, #100]	; (80013c8 <MX_TIM6_Init+0x98>)
 8001362:	f005 fa75 	bl	8006850 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800136c:	f000 f8e2 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001370:	2320      	movs	r3, #32
 8001372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4812      	ldr	r0, [pc, #72]	; (80013c8 <MX_TIM6_Init+0x98>)
 800137e:	f005 fbbd 	bl	8006afc <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001388:	f000 f8d4 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_TIM6_Init+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f893 	bl	80004bc <__aeabi_i2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	a109      	add	r1, pc, #36	; (adr r1, 80013c0 <MX_TIM6_Init+0x90>)
 800139c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013a0:	f7ff fa20 	bl	80007e4 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fb02 	bl	80009b4 <__aeabi_d2uiz>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <MX_TIM6_Init+0x98>)
 80013b4:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000
 80013c4:	41a443fd 	.word	0x41a443fd
 80013c8:	20000324 	.word	0x20000324
 80013cc:	40001000 	.word	0x40001000
 80013d0:	08007a84 	.word	0x08007a84

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_DMA_Init+0x60>)
 80013dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013de:	4a15      	ldr	r2, [pc, #84]	; (8001434 <MX_DMA_Init+0x60>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6493      	str	r3, [r2, #72]	; 0x48
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_DMA_Init+0x60>)
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_DMA_Init+0x60>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <MX_DMA_Init+0x60>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6493      	str	r3, [r2, #72]	; 0x48
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <MX_DMA_Init+0x60>)
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	200b      	movs	r0, #11
 8001410:	f001 ff89 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001414:	200b      	movs	r0, #11
 8001416:	f001 ffa0 	bl	800335a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	200c      	movs	r0, #12
 8001420:	f001 ff81 	bl	8003326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001424:	200c      	movs	r0, #12
 8001426:	f001 ff98 	bl	800335a <HAL_NVIC_EnableIRQ>

}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a35      	ldr	r2, [pc, #212]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MX_GPIO_Init+0xf0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001466:	4b30      	ldr	r3, [pc, #192]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a2f      	ldr	r2, [pc, #188]	; (8001528 <MX_GPIO_Init+0xf0>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b27      	ldr	r3, [pc, #156]	; (8001528 <MX_GPIO_Init+0xf0>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_GPIO_Init+0xf0>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <MX_GPIO_Init+0xf0>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a2:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_GPIO_Init+0xf0>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b8:	f002 feb4 	bl	8004224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2107      	movs	r1, #7
 80014c0:	481a      	ldr	r0, [pc, #104]	; (800152c <MX_GPIO_Init+0xf4>)
 80014c2:	f002 feaf 	bl	8004224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4814      	ldr	r0, [pc, #80]	; (8001530 <MX_GPIO_Init+0xf8>)
 80014de:	f002 fd1f 	bl	8003f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 80014e2:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f002 fd0f 	bl	8003f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegClk_Pin ShiftRegData_Pin ShiftRegEn_Pin */
  GPIO_InitStruct.Pin = ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin;
 8001502:	2307      	movs	r3, #7
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_GPIO_Init+0xf4>)
 800151a:	f002 fd01 	bl	8003f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	; 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	48000400 	.word	0x48000400
 8001530:	48000800 	.word	0x48000800

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_MspInit+0x44>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <HAL_MspInit+0x44>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6613      	str	r3, [r2, #96]	; 0x60
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_MspInit+0x44>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_MspInit+0x44>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_MspInit+0x44>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_MspInit+0x44>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001576:	f003 fdeb 	bl	8005150 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09a      	sub	sp, #104	; 0x68
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2244      	movs	r2, #68	; 0x44
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fa1b 	bl	80079e4 <memset>
  if(hadc->Instance==ADC1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b6:	d160      	bne.n	800167a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 faff 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80015d4:	f7ff ffae 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_ADC_MspInit+0xfc>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_ADC_MspInit+0xfc>)
 80015de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_ADC_MspInit+0xfc>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_ADC_MspInit+0xfc>)
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_ADC_MspInit+0xfc>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_ADC_MspInit+0xfc>)
 80015fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 8001608:	2301      	movs	r3, #1
 800160a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160c:	2303      	movs	r3, #3
 800160e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f002 fc7f 	bl	8003f20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001624:	4a19      	ldr	r2, [pc, #100]	; (800168c <HAL_ADC_MspInit+0x104>)
 8001626:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_ADC_MspInit+0x100>)
 800162a:	2205      	movs	r2, #5
 800162c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_ADC_MspInit+0x100>)
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001646:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_ADC_MspInit+0x100>)
 800164a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001652:	2220      	movs	r2, #32
 8001654:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001658:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800165c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001660:	f002 f9ec 	bl	8003a3c <HAL_DMA_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800166a:	f7ff ff63 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_ADC_MspInit+0x100>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3768      	adds	r7, #104	; 0x68
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	200000f0 	.word	0x200000f0
 800168c:	40020008 	.word	0x40020008

08001690 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a2b      	ldr	r2, [pc, #172]	; (800175c <HAL_DAC_MspInit+0xcc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d150      	bne.n	8001754 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_DAC_MspInit+0xd0>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a2a      	ldr	r2, [pc, #168]	; (8001760 <HAL_DAC_MspInit+0xd0>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <HAL_DAC_MspInit+0xd0>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b25      	ldr	r3, [pc, #148]	; (8001760 <HAL_DAC_MspInit+0xd0>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	4a24      	ldr	r2, [pc, #144]	; (8001760 <HAL_DAC_MspInit+0xd0>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d6:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_DAC_MspInit+0xd0>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016e2:	2310      	movs	r3, #16
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e6:	2303      	movs	r3, #3
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f8:	f002 fc12 	bl	8003f20 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_DAC_MspInit+0xd8>)
 8001700:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 8001704:	2206      	movs	r2, #6
 8001706:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 800170a:	2210      	movs	r2, #16
 800170c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 800171c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001720:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 8001724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001728:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 800172c:	2220      	movs	r2, #32
 800172e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 8001732:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001736:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001738:	480a      	ldr	r0, [pc, #40]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 800173a:	f002 f97f 	bl	8003a3c <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001744:	f7ff fef6 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a06      	ldr	r2, [pc, #24]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_DAC_MspInit+0xd4>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	50000800 	.word	0x50000800
 8001760:	40021000 	.word	0x40021000
 8001764:	20000164 	.word	0x20000164
 8001768:	4002001c 	.word	0x4002001c

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b09a      	sub	sp, #104	; 0x68
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2244      	movs	r2, #68	; 0x44
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f006 f929 	bl	80079e4 <memset>
  if(hi2c->Instance==I2C1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_I2C_MspInit+0xa8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d136      	bne.n	800180a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800179c:	2340      	movs	r3, #64	; 0x40
 800179e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 fa0f 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017b4:	f7ff febe 	bl	8001534 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_I2C_MspInit+0xac>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HAL_I2C_MspInit+0xac>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_I2C_MspInit+0xac>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d6:	2312      	movs	r3, #18
 80017d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e2:	2304      	movs	r3, #4
 80017e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ea:	4619      	mov	r1, r3
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <HAL_I2C_MspInit+0xb0>)
 80017ee:	f002 fb97 	bl	8003f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_I2C_MspInit+0xac>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a08      	ldr	r2, [pc, #32]	; (8001818 <HAL_I2C_MspInit+0xac>)
 80017f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_I2C_MspInit+0xac>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3768      	adds	r7, #104	; 0x68
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40005400 	.word	0x40005400
 8001818:	40021000 	.word	0x40021000
 800181c:	48000400 	.word	0x48000400

08001820 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b09e      	sub	sp, #120	; 0x78
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	2244      	movs	r2, #68	; 0x44
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f006 f8cf 	bl	80079e4 <memset>
  if(hi2s->Instance==SPI2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a4d      	ldr	r2, [pc, #308]	; (8001980 <HAL_I2S_MspInit+0x160>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d138      	bne.n	80018c2 <HAL_I2S_MspInit+0xa2>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001854:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001856:	2300      	movs	r3, #0
 8001858:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	4618      	mov	r0, r3
 8001860:	f004 f9b4 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 800186a:	f7ff fe63 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a44      	ldr	r2, [pc, #272]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b42      	ldr	r3, [pc, #264]	; (8001984 <HAL_I2S_MspInit+0x164>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4a3e      	ldr	r2, [pc, #248]	; (8001984 <HAL_I2S_MspInit+0x164>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800189e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80018a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b0:	2305      	movs	r3, #5
 80018b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018b8:	4619      	mov	r1, r3
 80018ba:	4833      	ldr	r0, [pc, #204]	; (8001988 <HAL_I2S_MspInit+0x168>)
 80018bc:	f002 fb30 	bl	8003f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018c0:	e05a      	b.n	8001978 <HAL_I2S_MspInit+0x158>
  else if(hi2s->Instance==SPI3)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a31      	ldr	r2, [pc, #196]	; (800198c <HAL_I2S_MspInit+0x16c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d155      	bne.n	8001978 <HAL_I2S_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	4618      	mov	r0, r3
 80018dc:	f004 f976 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2S_MspInit+0xca>
      Error_Handler();
 80018e6:	f7ff fe25 	bl	8001534 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_I2S_MspInit+0x164>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	4a25      	ldr	r2, [pc, #148]	; (8001984 <HAL_I2S_MspInit+0x164>)
 80018f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_I2S_MspInit+0x164>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_I2S_MspInit+0x164>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a19      	ldr	r2, [pc, #100]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_I2S_MspInit+0x164>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001936:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001944:	2306      	movs	r3, #6
 8001946:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800194c:	4619      	mov	r1, r3
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001952:	f002 fae5 	bl	8003f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001956:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800195a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001968:	2306      	movs	r3, #6
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <HAL_I2S_MspInit+0x170>)
 8001974:	f002 fad4 	bl	8003f20 <HAL_GPIO_Init>
}
 8001978:	bf00      	nop
 800197a:	3778      	adds	r7, #120	; 0x78
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40003800 	.word	0x40003800
 8001984:	40021000 	.word	0x40021000
 8001988:	48000400 	.word	0x48000400
 800198c:	40003c00 	.word	0x40003c00
 8001990:	48000800 	.word	0x48000800

08001994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b09a      	sub	sp, #104	; 0x68
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	2244      	movs	r2, #68	; 0x44
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 f815 	bl	80079e4 <memset>
  if(huart->Instance==LPUART1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1f      	ldr	r2, [pc, #124]	; (8001a3c <HAL_UART_MspInit+0xa8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d136      	bne.n	8001a32 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019c4:	2320      	movs	r3, #32
 80019c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4618      	mov	r0, r3
 80019d2:	f004 f8fb 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019dc:	f7ff fdaa 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_UART_MspInit+0xac>)
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_UART_MspInit+0xac>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_UART_MspInit+0xac>)
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_UART_MspInit+0xac>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_UART_MspInit+0xac>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_UART_MspInit+0xac>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001a10:	230c      	movs	r3, #12
 8001a12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001a20:	230c      	movs	r3, #12
 8001a22:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f002 fa77 	bl	8003f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3768      	adds	r7, #104	; 0x68
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40008000 	.word	0x40008000
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_TIM_Base_MspInit+0x38>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10b      	bne.n	8001a6e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_TIM_Base_MspInit+0x3c>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_TIM_Base_MspInit+0x3c>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6593      	str	r3, [r2, #88]	; 0x58
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_TIM_Base_MspInit+0x3c>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40001000 	.word	0x40001000
 8001a80:	40021000 	.word	0x40021000

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad0:	f000 f8da 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA1_Channel1_IRQHandler+0x10>)
 8001ade:	f002 f8d0 	bl	8003c82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000f0 	.word	0x200000f0

08001aec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <DMA1_Channel2_IRQHandler+0x10>)
 8001af2:	f002 f8c6 	bl	8003c82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000164 	.word	0x20000164

08001b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <_sbrk+0x5c>)
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <_sbrk+0x60>)
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <_sbrk+0x64>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <_sbrk+0x68>)
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b30:	f005 ff70 	bl	8007a14 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	220c      	movs	r2, #12
 8001b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3e:	e009      	b.n	8001b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <_sbrk+0x64>)
 8001b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b52:	68fb      	ldr	r3, [r7, #12]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20008000 	.word	0x20008000
 8001b60:	00000400 	.word	0x00000400
 8001b64:	20000578 	.word	0x20000578
 8001b68:	200006c8 	.word	0x200006c8

08001b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <SystemInit+0x20>)
 8001b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <SystemInit+0x20>)
 8001b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b94:	f7ff ffea 	bl	8001b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <LoopForever+0xe>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <LoopForever+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f005 ff2f 	bl	8007a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc2:	f7ff f993 	bl	8000eec <main>

08001bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   r0, =_estack
 8001bc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001bd4:	08007ad8 	.word	0x08007ad8
  ldr r2, =_sbss
 8001bd8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001bdc:	200006c8 	.word	0x200006c8

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>

08001be2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f001 fb8f 	bl	8003310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f80e 	bl	8001c14 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	71fb      	strb	r3, [r7, #7]
 8001c02:	e001      	b.n	8001c08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c04:	f7ff fc9c 	bl	8001540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c08:	79fb      	ldrb	r3, [r7, #7]

}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_InitTick+0x68>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d022      	beq.n	8001c6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_InitTick+0x6c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_InitTick+0x68>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fb9a 	bl	8003376 <HAL_SYSTICK_Config>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10f      	bne.n	8001c68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b0f      	cmp	r3, #15
 8001c4c:	d809      	bhi.n	8001c62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	f04f 30ff 	mov.w	r0, #4294967295
 8001c56:	f001 fb66 	bl	8003326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <HAL_InitTick+0x70>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e007      	b.n	8001c72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	73fb      	strb	r3, [r7, #15]
 8001c66:	e004      	b.n	8001c72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e001      	b.n	8001c72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000008 	.word	0x20000008

08001c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_IncTick+0x1c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_IncTick+0x1c>)
 8001c98:	6013      	str	r3, [r2, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	2000057c 	.word	0x2000057c
 8001ca8:	2000000c 	.word	0x2000000c

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	2000057c 	.word	0x2000057c

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d004      	beq.n	8001ce8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_Delay+0x40>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce8:	bf00      	nop
 8001cea:	f7ff ffdf 	bl	8001cac <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d8f7      	bhi.n	8001cea <HAL_Delay+0x26>
  {
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000000c 	.word	0x2000000c

08001d08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3360      	adds	r3, #96	; 0x60
 8001d82:	461a      	mov	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <LL_ADC_SetOffset+0x44>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	03fff000 	.word	0x03fff000

08001db8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3360      	adds	r3, #96	; 0x60
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3360      	adds	r3, #96	; 0x60
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e0e:	bf00      	nop
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3360      	adds	r3, #96	; 0x60
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e44:	bf00      	nop
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3360      	adds	r3, #96	; 0x60
 8001e60:	461a      	mov	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	615a      	str	r2, [r3, #20]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b087      	sub	sp, #28
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3330      	adds	r3, #48	; 0x30
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	4413      	add	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	211f      	movs	r1, #31
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	401a      	ands	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	f003 011f 	and.w	r1, r3, #31
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b087      	sub	sp, #28
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3314      	adds	r3, #20
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	0e5b      	lsrs	r3, r3, #25
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0d1b      	lsrs	r3, r3, #20
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2107      	movs	r1, #7
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0d1b      	lsrs	r3, r3, #20
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0318 	and.w	r3, r3, #24
 8001fa2:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fa4:	40d9      	lsrs	r1, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	400b      	ands	r3, r1
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	0007ffff 	.word	0x0007ffff

08001fc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6093      	str	r3, [r2, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800201c:	d101      	bne.n	8002022 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002044:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800206c:	d101      	bne.n	8002072 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_IsEnabled+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_IsEnabled+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e2:	f043 0204 	orr.w	r2, r3, #4
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d101      	bne.n	800210e <LL_ADC_REG_IsConversionOngoing+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b08      	cmp	r3, #8
 800212e:	d101      	bne.n	8002134 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e167      	b.n	800242e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff fa0b 	bl	8001588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff3f 	bl	8002008 <LL_ADC_IsDeepPowerDownEnabled>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff25 	bl	8001fe4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff5a 	bl	8002058 <LL_ADC_IsInternalRegulatorEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff3e 	bl	8002030 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021b4:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <HAL_ADC_Init+0x2f4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	4aa0      	ldr	r2, [pc, #640]	; (800243c <HAL_ADC_Init+0x2f8>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	099b      	lsrs	r3, r3, #6
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021c8:	e002      	b.n	80021d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f9      	bne.n	80021ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff ff3c 	bl	8002058 <LL_ADC_IsInternalRegulatorEnabled>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff75 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 800220c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	f040 8100 	bne.w	800241c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 80fc 	bne.w	800241c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800222c:	f043 0202 	orr.w	r2, r3, #2
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff35 	bl	80020a8 <LL_ADC_IsEnabled>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d111      	bne.n	8002268 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002244:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002248:	f7ff ff2e 	bl	80020a8 <LL_ADC_IsEnabled>
 800224c:	4604      	mov	r4, r0
 800224e:	487c      	ldr	r0, [pc, #496]	; (8002440 <HAL_ADC_Init+0x2fc>)
 8002250:	f7ff ff2a 	bl	80020a8 <LL_ADC_IsEnabled>
 8002254:	4603      	mov	r3, r0
 8002256:	4323      	orrs	r3, r4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4619      	mov	r1, r3
 8002262:	4878      	ldr	r0, [pc, #480]	; (8002444 <HAL_ADC_Init+0x300>)
 8002264:	f7ff fd50 	bl	8001d08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7f5b      	ldrb	r3, [r3, #29]
 800226c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002272:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002278:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800227e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002286:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002292:	2b01      	cmp	r3, #1
 8002294:	d106      	bne.n	80022a4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	3b01      	subs	r3, #1
 800229c:	045b      	lsls	r3, r3, #17
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d009      	beq.n	80022c0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <HAL_ADC_Init+0x304>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff14 	bl	800211c <LL_ADC_INJ_IsConversionOngoing>
 80022f4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d16d      	bne.n	80023d8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d16a      	bne.n	80023d8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002306:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800230e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800231e:	f023 0302 	bic.w	r3, r3, #2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	430b      	orrs	r3, r1
 800232a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002342:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800234c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6911      	ldr	r1, [r2, #16]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002362:	e013      	b.n	800238c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002372:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002388:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002392:	2b01      	cmp	r3, #1
 8002394:	d118      	bne.n	80023c8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023a0:	f023 0304 	bic.w	r3, r3, #4
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ac:	4311      	orrs	r1, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023b2:	4311      	orrs	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023b8:	430a      	orrs	r2, r1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	e007      	b.n	80023d8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10c      	bne.n	80023fa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f023 010f 	bic.w	r1, r3, #15
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
 80023f8:	e007      	b.n	800240a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 020f 	bic.w	r2, r2, #15
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	65da      	str	r2, [r3, #92]	; 0x5c
 800241a:	e007      	b.n	800242c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	f043 0210 	orr.w	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800242c:	7ffb      	ldrb	r3, [r7, #31]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd90      	pop	{r4, r7, pc}
 8002436:	bf00      	nop
 8002438:	20000004 	.word	0x20000004
 800243c:	053e2d63 	.word	0x053e2d63
 8002440:	50000100 	.word	0x50000100
 8002444:	50000300 	.word	0x50000300
 8002448:	fff04007 	.word	0xfff04007

0800244c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002458:	4851      	ldr	r0, [pc, #324]	; (80025a0 <HAL_ADC_Start_DMA+0x154>)
 800245a:	f7ff fdb5 	bl	8001fc8 <LL_ADC_GetMultimode>
 800245e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fe46 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 808f 	bne.w	8002590 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_ADC_Start_DMA+0x34>
 800247c:	2302      	movs	r3, #2
 800247e:	e08a      	b.n	8002596 <HAL_ADC_Start_DMA+0x14a>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b05      	cmp	r3, #5
 8002492:	d002      	beq.n	800249a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b09      	cmp	r3, #9
 8002498:	d173      	bne.n	8002582 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fc84 	bl	8002da8 <ADC_Enable>
 80024a0:	4603      	mov	r3, r0
 80024a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d166      	bne.n	8002578 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <HAL_ADC_Start_DMA+0x158>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d002      	beq.n	80024ce <HAL_ADC_Start_DMA+0x82>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e001      	b.n	80024d2 <HAL_ADC_Start_DMA+0x86>
 80024ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d002      	beq.n	80024e0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fc:	f023 0206 	bic.w	r2, r3, #6
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	661a      	str	r2, [r3, #96]	; 0x60
 8002504:	e002      	b.n	800250c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_ADC_Start_DMA+0x15c>)
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_ADC_Start_DMA+0x160>)
 800251a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_ADC_Start_DMA+0x164>)
 8002522:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	221c      	movs	r2, #28
 800252a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0210 	orr.w	r2, r2, #16
 8002542:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3340      	adds	r3, #64	; 0x40
 800255e:	4619      	mov	r1, r3
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f001 fb12 	bl	8003b8c <HAL_DMA_Start_IT>
 8002568:	4603      	mov	r3, r0
 800256a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fdac 	bl	80020ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002576:	e00d      	b.n	8002594 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002580:	e008      	b.n	8002594 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800258e:	e001      	b.n	8002594 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002590:	2302      	movs	r3, #2
 8002592:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	50000300 	.word	0x50000300
 80025a4:	50000100 	.word	0x50000100
 80025a8:	08002eb5 	.word	0x08002eb5
 80025ac:	08002f8d 	.word	0x08002f8d
 80025b0:	08002fa9 	.word	0x08002fa9

080025b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b0b6      	sub	sp, #216	; 0xd8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x22>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e3c8      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x7b4>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fd7d 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 83ad 	bne.w	8002d5e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	f7ff fc5e 	bl	8001ed2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fd6b 	bl	80020f6 <LL_ADC_REG_IsConversionOngoing>
 8002620:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fd77 	bl	800211c <LL_ADC_INJ_IsConversionOngoing>
 800262e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002632:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 81d9 	bne.w	80029ee <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800263c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 81d4 	bne.w	80029ee <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800264e:	d10f      	bne.n	8002670 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2200      	movs	r2, #0
 800265a:	4619      	mov	r1, r3
 800265c:	f7ff fc65 	bl	8001f2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fc0c 	bl	8001e86 <LL_ADC_SetSamplingTimeCommonConfig>
 800266e:	e00e      	b.n	800268e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	461a      	mov	r2, r3
 800267e:	f7ff fc54 	bl	8001f2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2100      	movs	r1, #0
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fbfc 	bl	8001e86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d022      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6919      	ldr	r1, [r3, #16]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026c0:	f7ff fb56 	bl	8001d70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f7ff fba2 	bl	8001e1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d102      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x124>
 80026e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ea:	e000      	b.n	80026ee <HAL_ADC_ConfigChannel+0x126>
 80026ec:	2300      	movs	r3, #0
 80026ee:	461a      	mov	r2, r3
 80026f0:	f7ff fbae 	bl	8001e50 <LL_ADC_SetOffsetSaturation>
 80026f4:	e17b      	b.n	80029ee <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fb5b 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x15a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fb50 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 021f 	and.w	r2, r3, #31
 8002720:	e01e      	b.n	8002760 <HAL_ADC_ConfigChannel+0x198>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fb45 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002740:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002750:	2320      	movs	r3, #32
 8002752:	e004      	b.n	800275e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002754:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x1b0>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	f003 031f 	and.w	r3, r3, #31
 8002776:	e018      	b.n	80027aa <HAL_ADC_ConfigChannel+0x1e2>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800278c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e004      	b.n	80027aa <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80027a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d106      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fb14 	bl	8001de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff faf8 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x220>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff faed 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	0e9b      	lsrs	r3, r3, #26
 80027e2:	f003 021f 	and.w	r2, r3, #31
 80027e6:	e01e      	b.n	8002826 <HAL_ADC_ConfigChannel+0x25e>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fae2 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002806:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800280a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800280e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e004      	b.n	8002824 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800281a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ADC_ConfigChannel+0x276>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	e018      	b.n	8002870 <HAL_ADC_ConfigChannel+0x2a8>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800285a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002862:	2320      	movs	r3, #32
 8002864:	e004      	b.n	8002870 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002866:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002870:	429a      	cmp	r2, r3
 8002872:	d106      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2200      	movs	r2, #0
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fab1 	bl	8001de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fa95 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x2e6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fa8a 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	e01e      	b.n	80028ec <HAL_ADC_ConfigChannel+0x324>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2102      	movs	r1, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fa7f 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e004      	b.n	80028ea <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80028e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x33c>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	e016      	b.n	8002932 <HAL_ADC_ConfigChannel+0x36a>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002916:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002918:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800291c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002924:	2320      	movs	r3, #32
 8002926:	e004      	b.n	8002932 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002932:	429a      	cmp	r2, r3
 8002934:	d106      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	2102      	movs	r1, #2
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fa50 	bl	8001de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2103      	movs	r1, #3
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fa34 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x3a8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2103      	movs	r1, #3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fa29 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	e017      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x3d8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2103      	movs	r1, #3
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fa1e 	bl	8001db8 <LL_ADC_GetOffsetChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800298a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800298c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e003      	b.n	800299e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x3f0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	e011      	b.n	80029dc <HAL_ADC_ConfigChannel+0x414>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80029c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80029d0:	2320      	movs	r3, #32
 80029d2:	e003      	b.n	80029dc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029dc:	429a      	cmp	r2, r3
 80029de:	d106      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2103      	movs	r1, #3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f9fb 	bl	8001de4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fb58 	bl	80020a8 <LL_ADC_IsEnabled>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 8140 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f7ff fab7 	bl	8001f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4a8f      	ldr	r2, [pc, #572]	; (8002c54 <HAL_ADC_ConfigChannel+0x68c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	f040 8131 	bne.w	8002c80 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x47e>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	bf94      	ite	ls
 8002a3e:	2301      	movls	r3, #1
 8002a40:	2300      	movhi	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e019      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x4b2>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a56:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002a5e:	2320      	movs	r3, #32
 8002a60:	e003      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d079      	beq.n	8002b72 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x4d2>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	3301      	adds	r3, #1
 8002a92:	069b      	lsls	r3, r3, #26
 8002a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a98:	e015      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x4fe>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aaa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e003      	b.n	8002abe <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab8:	fab3 f383 	clz	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	069b      	lsls	r3, r3, #26
 8002ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x51e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	e017      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x54e>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002afe:	2320      	movs	r3, #32
 8002b00:	e003      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2101      	movs	r1, #1
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	ea42 0103 	orr.w	r1, r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10a      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x574>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0e9b      	lsrs	r3, r3, #26
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f003 021f 	and.w	r2, r3, #31
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	051b      	lsls	r3, r3, #20
 8002b3a:	e018      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x5a6>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002b54:	2320      	movs	r3, #32
 8002b56:	e003      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 021f 	and.w	r2, r3, #31
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	e081      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x5c6>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	3301      	adds	r3, #1
 8002b86:	069b      	lsls	r3, r3, #26
 8002b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8c:	e015      	b.n	8002bba <HAL_ADC_ConfigChannel+0x5f2>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	069b      	lsls	r3, r3, #26
 8002bb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x612>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	3301      	adds	r3, #1
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	e017      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x642>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	61fb      	str	r3, [r7, #28]
  return result;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e003      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	ea42 0103 	orr.w	r1, r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x66e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	3301      	adds	r3, #1
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b1e      	subs	r3, #30
 8002c2e:	051b      	lsls	r3, r3, #20
 8002c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c34:	e01e      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x6ac>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	613b      	str	r3, [r7, #16]
  return result;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e006      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x698>
 8002c52:	bf00      	nop
 8002c54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	3301      	adds	r3, #1
 8002c62:	f003 021f 	and.w	r2, r3, #31
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3b1e      	subs	r3, #30
 8002c6e:	051b      	lsls	r3, r3, #20
 8002c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7ff f955 	bl	8001f2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b3f      	ldr	r3, [pc, #252]	; (8002d84 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d071      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c8c:	483e      	ldr	r0, [pc, #248]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c8e:	f7ff f861 	bl	8001d54 <LL_ADC_GetCommonPathInternalCh>
 8002c92:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a3c      	ldr	r2, [pc, #240]	; (8002d8c <HAL_ADC_ConfigChannel+0x7c4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x6e2>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a3a      	ldr	r2, [pc, #232]	; (8002d90 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d127      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d121      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbe:	d157      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc8:	4619      	mov	r1, r3
 8002cca:	482f      	ldr	r0, [pc, #188]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ccc:	f7ff f82f 	bl	8001d2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd0:	4b30      	ldr	r3, [pc, #192]	; (8002d94 <HAL_ADC_ConfigChannel+0x7cc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	4a30      	ldr	r2, [pc, #192]	; (8002d98 <HAL_ADC_ConfigChannel+0x7d0>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cea:	e002      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f9      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf8:	e03a      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_ADC_ConfigChannel+0x7d4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d113      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10d      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02a      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d22:	4619      	mov	r1, r3
 8002d24:	4818      	ldr	r0, [pc, #96]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d26:	f7ff f802 	bl	8001d2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d2a:	e021      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d11c      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d116      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d011      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d54:	4619      	mov	r1, r3
 8002d56:	480c      	ldr	r0, [pc, #48]	; (8002d88 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d58:	f7fe ffe9 	bl	8001d2e <LL_ADC_SetCommonPathInternalCh>
 8002d5c:	e008      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d78:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	37d8      	adds	r7, #216	; 0xd8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	80080000 	.word	0x80080000
 8002d88:	50000300 	.word	0x50000300
 8002d8c:	c3210000 	.word	0xc3210000
 8002d90:	90c00010 	.word	0x90c00010
 8002d94:	20000004 	.word	0x20000004
 8002d98:	053e2d63 	.word	0x053e2d63
 8002d9c:	c7520000 	.word	0xc7520000
 8002da0:	50000100 	.word	0x50000100
 8002da4:	cb840000 	.word	0xcb840000

08002da8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f975 	bl	80020a8 <LL_ADC_IsEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d169      	bne.n	8002e98 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <ADC_Enable+0xfc>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e055      	b.n	8002e9a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f944 	bl	8002080 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002df8:	482b      	ldr	r0, [pc, #172]	; (8002ea8 <ADC_Enable+0x100>)
 8002dfa:	f7fe ffab 	bl	8001d54 <LL_ADC_GetCommonPathInternalCh>
 8002dfe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e08:	4b28      	ldr	r3, [pc, #160]	; (8002eac <ADC_Enable+0x104>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	099b      	lsrs	r3, r3, #6
 8002e0e:	4a28      	ldr	r2, [pc, #160]	; (8002eb0 <ADC_Enable+0x108>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e22:	e002      	b.n	8002e2a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f9      	bne.n	8002e24 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e30:	f7fe ff3c 	bl	8001cac <HAL_GetTick>
 8002e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e36:	e028      	b.n	8002e8a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff f933 	bl	80020a8 <LL_ADC_IsEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff f917 	bl	8002080 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e52:	f7fe ff2b 	bl	8001cac <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d914      	bls.n	8002e8a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d00d      	beq.n	8002e8a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e007      	b.n	8002e9a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d1cf      	bne.n	8002e38 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	8000003f 	.word	0x8000003f
 8002ea8:	50000300 	.word	0x50000300
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	053e2d63 	.word	0x053e2d63

08002eb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d14b      	bne.n	8002f66 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d021      	beq.n	8002f2c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ffdd 	bl	8001eac <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d032      	beq.n	8002f5e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d12b      	bne.n	8002f5e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11f      	bne.n	8002f5e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f2a:	e018      	b.n	8002f5e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d111      	bne.n	8002f5e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d105      	bne.n	8002f5e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7fd ff9c 	bl	8000e9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f64:	e00e      	b.n	8002f84 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f7ff fb1e 	bl	80025b4 <HAL_ADC_ErrorCallback>
}
 8002f78:	e004      	b.n	8002f84 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7fd ff58 	bl	8000e50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff faf0 	bl	80025b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <LL_ADC_IsEnabled>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <LL_ADC_IsEnabled+0x18>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <LL_ADC_IsEnabled+0x1a>
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_ADC_REG_IsConversionOngoing>:
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b04      	cmp	r3, #4
 8003014:	d101      	bne.n	800301a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b0a1      	sub	sp, #132	; 0x84
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003042:	2302      	movs	r3, #2
 8003044:	e08b      	b.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800304e:	2300      	movs	r3, #0
 8003050:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003052:	2300      	movs	r3, #0
 8003054:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305e:	d102      	bne.n	8003066 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003060:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	e001      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e06a      	b.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ffb9 	bl	8003002 <LL_ADC_REG_IsConversionOngoing>
 8003090:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ffb3 	bl	8003002 <LL_ADC_REG_IsConversionOngoing>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d14c      	bne.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d149      	bne.n	800313c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030a8:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030aa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d028      	beq.n	8003106 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030c6:	035b      	lsls	r3, r3, #13
 80030c8:	430b      	orrs	r3, r1
 80030ca:	431a      	orrs	r2, r3
 80030cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030d4:	f7ff ff82 	bl	8002fdc <LL_ADC_IsEnabled>
 80030d8:	4604      	mov	r4, r0
 80030da:	4823      	ldr	r0, [pc, #140]	; (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030dc:	f7ff ff7e 	bl	8002fdc <LL_ADC_IsEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4323      	orrs	r3, r4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d133      	bne.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6811      	ldr	r1, [r2, #0]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	6892      	ldr	r2, [r2, #8]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	431a      	orrs	r2, r3
 8003100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003102:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003104:	e024      	b.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800310e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003110:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003112:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003116:	f7ff ff61 	bl	8002fdc <LL_ADC_IsEnabled>
 800311a:	4604      	mov	r4, r0
 800311c:	4812      	ldr	r0, [pc, #72]	; (8003168 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800311e:	f7ff ff5d 	bl	8002fdc <LL_ADC_IsEnabled>
 8003122:	4603      	mov	r3, r0
 8003124:	4323      	orrs	r3, r4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d112      	bne.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800312a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003132:	f023 030f 	bic.w	r3, r3, #15
 8003136:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003138:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800313a:	e009      	b.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800314e:	e000      	b.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003150:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800315a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800315e:	4618      	mov	r0, r3
 8003160:	3784      	adds	r7, #132	; 0x84
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}
 8003166:	bf00      	nop
 8003168:	50000100 	.word	0x50000100
 800316c:	50000300 	.word	0x50000300

08003170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800318c:	4013      	ands	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800319c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <__NVIC_SetPriorityGrouping+0x44>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	60d3      	str	r3, [r2, #12]
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <__NVIC_GetPriorityGrouping+0x18>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 0307 	and.w	r3, r3, #7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	db0b      	blt.n	80031fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4907      	ldr	r1, [pc, #28]	; (800320c <__NVIC_EnableIRQ+0x38>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	2001      	movs	r0, #1
 80031f6:	fa00 f202 	lsl.w	r2, r0, r2
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000e100 	.word	0xe000e100

08003210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db0a      	blt.n	800323a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	b2da      	uxtb	r2, r3
 8003228:	490c      	ldr	r1, [pc, #48]	; (800325c <__NVIC_SetPriority+0x4c>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	0112      	lsls	r2, r2, #4
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	440b      	add	r3, r1
 8003234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003238:	e00a      	b.n	8003250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4908      	ldr	r1, [pc, #32]	; (8003260 <__NVIC_SetPriority+0x50>)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	3b04      	subs	r3, #4
 8003248:	0112      	lsls	r2, r2, #4
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	440b      	add	r3, r1
 800324e:	761a      	strb	r2, [r3, #24]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000e100 	.word	0xe000e100
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003264:	b480      	push	{r7}
 8003266:	b089      	sub	sp, #36	; 0x24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f1c3 0307 	rsb	r3, r3, #7
 800327e:	2b04      	cmp	r3, #4
 8003280:	bf28      	it	cs
 8003282:	2304      	movcs	r3, #4
 8003284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3304      	adds	r3, #4
 800328a:	2b06      	cmp	r3, #6
 800328c:	d902      	bls.n	8003294 <NVIC_EncodePriority+0x30>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3b03      	subs	r3, #3
 8003292:	e000      	b.n	8003296 <NVIC_EncodePriority+0x32>
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	401a      	ands	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ac:	f04f 31ff 	mov.w	r1, #4294967295
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43d9      	mvns	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032bc:	4313      	orrs	r3, r2
         );
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032dc:	d301      	bcc.n	80032e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032de:	2301      	movs	r3, #1
 80032e0:	e00f      	b.n	8003302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <SysTick_Config+0x40>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ea:	210f      	movs	r1, #15
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	f7ff ff8e 	bl	8003210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <SysTick_Config+0x40>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032fa:	4b04      	ldr	r3, [pc, #16]	; (800330c <SysTick_Config+0x40>)
 80032fc:	2207      	movs	r2, #7
 80032fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	e000e010 	.word	0xe000e010

08003310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff29 	bl	8003170 <__NVIC_SetPriorityGrouping>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003334:	f7ff ff40 	bl	80031b8 <__NVIC_GetPriorityGrouping>
 8003338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff ff90 	bl	8003264 <NVIC_EncodePriority>
 8003344:	4602      	mov	r2, r0
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff ff5f 	bl	8003210 <__NVIC_SetPriority>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff33 	bl	80031d4 <__NVIC_EnableIRQ>
}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ffa4 	bl	80032cc <SysTick_Config>
 8003384:	4603      	mov	r3, r0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e014      	b.n	80033ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	791b      	ldrb	r3, [r3, #4]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d105      	bne.n	80033b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7fe f96d 	bl	8001690 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b2      	b.n	8003552 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	795b      	ldrb	r3, [r3, #5]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_DAC_Start_DMA+0x24>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e0ac      	b.n	8003552 <HAL_DAC_Start_DMA+0x17e>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d129      	bne.n	800345e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4a53      	ldr	r2, [pc, #332]	; (800355c <HAL_DAC_Start_DMA+0x188>)
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_DAC_Start_DMA+0x18c>)
 8003418:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_DAC_Start_DMA+0x190>)
 8003420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003430:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_DAC_Start_DMA+0x6c>
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	2b04      	cmp	r3, #4
 800343c:	d005      	beq.n	800344a <HAL_DAC_Start_DMA+0x76>
 800343e:	e009      	b.n	8003454 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3308      	adds	r3, #8
 8003446:	61bb      	str	r3, [r7, #24]
        break;
 8003448:	e033      	b.n	80034b2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	61bb      	str	r3, [r7, #24]
        break;
 8003452:	e02e      	b.n	80034b2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3310      	adds	r3, #16
 800345a:	61bb      	str	r3, [r7, #24]
        break;
 800345c:	e029      	b.n	80034b2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4a41      	ldr	r2, [pc, #260]	; (8003568 <HAL_DAC_Start_DMA+0x194>)
 8003464:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a40      	ldr	r2, [pc, #256]	; (800356c <HAL_DAC_Start_DMA+0x198>)
 800346c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4a3f      	ldr	r2, [pc, #252]	; (8003570 <HAL_DAC_Start_DMA+0x19c>)
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003484:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_DAC_Start_DMA+0xc0>
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	2b04      	cmp	r3, #4
 8003490:	d005      	beq.n	800349e <HAL_DAC_Start_DMA+0xca>
 8003492:	e009      	b.n	80034a8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e009      	b.n	80034b2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3318      	adds	r3, #24
 80034a4:	61bb      	str	r3, [r7, #24]
        break;
 80034a6:	e004      	b.n	80034b2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	331c      	adds	r3, #28
 80034ae:	61bb      	str	r3, [r7, #24]
        break;
 80034b0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d111      	bne.n	80034dc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6898      	ldr	r0, [r3, #8]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	f000 fb5b 	bl	8003b8c <HAL_DMA_Start_IT>
 80034d6:	4603      	mov	r3, r0
 80034d8:	77fb      	strb	r3, [r7, #31]
 80034da:	e010      	b.n	80034fe <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68d8      	ldr	r0, [r3, #12]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	f000 fb49 	bl	8003b8c <HAL_DMA_Start_IT>
 80034fa:	4603      	mov	r3, r0
 80034fc:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003504:	7ffb      	ldrb	r3, [r7, #31]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11c      	bne.n	8003544 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_DAC_Start_DMA+0x1a0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	099b      	lsrs	r3, r3, #6
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_DAC_Start_DMA+0x1a4>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003534:	e002      	b.n	800353c <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3b01      	subs	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f9      	bne.n	8003536 <HAL_DAC_Start_DMA+0x162>
 8003542:	e005      	b.n	8003550 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f043 0204 	orr.w	r2, r3, #4
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003550:	7ffb      	ldrb	r3, [r7, #31]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	08003929 	.word	0x08003929
 8003560:	0800394b 	.word	0x0800394b
 8003564:	08003967 	.word	0x08003967
 8003568:	080039d1 	.word	0x080039d1
 800356c:	080039f3 	.word	0x080039f3
 8003570:	08003a0f 	.word	0x08003a0f
 8003574:	20000004 	.word	0x20000004
 8003578:	053e2d63 	.word	0x053e2d63

0800357c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_DAC_ConfigChannel+0x1c>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e19e      	b.n	8003916 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	795b      	ldrb	r3, [r3, #5]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_DAC_ConfigChannel+0x2c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e198      	b.n	8003916 <HAL_DAC_ConfigChannel+0x35e>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d17a      	bne.n	80036ee <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80035f8:	f7fe fb58 	bl	8001cac <HAL_GetTick>
 80035fc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d13d      	bne.n	8003680 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003604:	e018      	b.n	8003638 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003606:	f7fe fb51 	bl	8001cac <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d911      	bls.n	8003638 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f043 0208 	orr.w	r2, r3, #8
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2203      	movs	r2, #3
 8003632:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e16e      	b.n	8003916 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1df      	bne.n	8003606 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
 8003650:	e020      	b.n	8003694 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003652:	f7fe fb2b 	bl	8001cac <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d90f      	bls.n	8003680 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	da0a      	bge.n	8003680 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f043 0208 	orr.w	r2, r3, #8
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2203      	movs	r2, #3
 800367a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e14a      	b.n	8003916 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	dbe3      	blt.n	8003652 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	ea02 0103 	and.w	r1, r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	21ff      	movs	r1, #255	; 0xff
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	ea02 0103 	and.w	r1, r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d11d      	bne.n	8003732 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	221f      	movs	r2, #31
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	4013      	ands	r3, r2
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	4313      	orrs	r3, r2
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2207      	movs	r2, #7
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374a:	4013      	ands	r3, r2
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003756:	2300      	movs	r3, #0
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	e00f      	b.n	800377c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d102      	bne.n	800376a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003764:	2301      	movs	r3, #1
 8003766:	623b      	str	r3, [r7, #32]
 8003768:	e008      	b.n	800377c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003772:	2301      	movs	r3, #1
 8003774:	623b      	str	r3, [r7, #32]
 8003776:	e001      	b.n	800377c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003778:	2300      	movs	r3, #0
 800377a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	6a3a      	ldr	r2, [r7, #32]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	4013      	ands	r3, r2
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	791b      	ldrb	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d102      	bne.n	80037b0 <HAL_DAC_ConfigChannel+0x1f8>
 80037aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ae:	e000      	b.n	80037b2 <HAL_DAC_ConfigChannel+0x1fa>
 80037b0:	2300      	movs	r3, #0
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ca:	4013      	ands	r3, r2
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	795b      	ldrb	r3, [r3, #5]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <HAL_DAC_ConfigChannel+0x224>
 80037d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037da:	e000      	b.n	80037de <HAL_DAC_ConfigChannel+0x226>
 80037dc:	2300      	movs	r3, #0
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d114      	bne.n	800381e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80037f4:	f002 f96c 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 80037f8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4a48      	ldr	r2, [pc, #288]	; (8003920 <HAL_DAC_ConfigChannel+0x368>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d904      	bls.n	800380c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	e00f      	b.n	800382c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4a45      	ldr	r2, [pc, #276]	; (8003924 <HAL_DAC_ConfigChannel+0x36c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d90a      	bls.n	800382a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
 800381c:	e006      	b.n	800382c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	4313      	orrs	r3, r2
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	e000      	b.n	800382c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800382a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	4313      	orrs	r3, r2
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6819      	ldr	r1, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	400a      	ands	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387e:	4013      	ands	r3, r2
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	4313      	orrs	r3, r2
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	22c0      	movs	r2, #192	; 0xc0
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43da      	mvns	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	400a      	ands	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	ea02 0103 	and.w	r1, r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003914:	7ffb      	ldrb	r3, [r7, #31]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3728      	adds	r7, #40	; 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	09896800 	.word	0x09896800
 8003924:	04c4b400 	.word	0x04c4b400

08003928 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fe20 	bl	800357c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	711a      	strb	r2, [r3, #4]
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff fe19 	bl	8003590 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff fe0f 	bl	80035a4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	711a      	strb	r2, [r3, #4]
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ffd8 	bl	8003994 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	711a      	strb	r2, [r3, #4]
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f7ff ffd1 	bl	80039a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f043 0204 	orr.w	r2, r3, #4
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7ff ffc7 	bl	80039bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	711a      	strb	r2, [r3, #4]
}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e08d      	b.n	8003b6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_DMA_Init+0x138>)
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d80f      	bhi.n	8003a7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_DMA_Init+0x13c>)
 8003a62:	4413      	add	r3, r2
 8003a64:	4a45      	ldr	r2, [pc, #276]	; (8003b7c <HAL_DMA_Init+0x140>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	009a      	lsls	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a42      	ldr	r2, [pc, #264]	; (8003b80 <HAL_DMA_Init+0x144>)
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40
 8003a78:	e00e      	b.n	8003a98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <HAL_DMA_Init+0x148>)
 8003a82:	4413      	add	r3, r2
 8003a84:	4a3d      	ldr	r2, [pc, #244]	; (8003b7c <HAL_DMA_Init+0x140>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	009a      	lsls	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a3c      	ldr	r2, [pc, #240]	; (8003b88 <HAL_DMA_Init+0x14c>)
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9b6 	bl	8003e5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af8:	d102      	bne.n	8003b00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b14:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <HAL_DMA_Init+0x104>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d80c      	bhi.n	8003b40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9d6 	bl	8003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e008      	b.n	8003b52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40020407 	.word	0x40020407
 8003b78:	bffdfff8 	.word	0xbffdfff8
 8003b7c:	cccccccd 	.word	0xcccccccd
 8003b80:	40020000 	.word	0x40020000
 8003b84:	bffdfbf8 	.word	0xbffdfbf8
 8003b88:	40020400 	.word	0x40020400

08003b8c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_DMA_Start_IT+0x20>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e066      	b.n	8003c7a <HAL_DMA_Start_IT+0xee>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d155      	bne.n	8003c6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f8fb 	bl	8003de0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f042 020e 	orr.w	r2, r2, #14
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e00f      	b.n	8003c24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 020a 	orr.w	r2, r2, #10
 8003c22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e005      	b.n	8003c78 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
 8003c76:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f003 031f 	and.w	r3, r3, #31
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d026      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x7a>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d021      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0204 	bic.w	r2, r2, #4
 8003cd4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f003 021f 	and.w	r2, r3, #31
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d071      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cfa:	e06c      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2202      	movs	r2, #2
 8003d06:	409a      	lsls	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d02e      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d029      	beq.n	8003d6e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 020a 	bic.w	r2, r2, #10
 8003d36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2102      	movs	r1, #2
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d038      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d6c:	e033      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2208      	movs	r2, #8
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02a      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d025      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 020e 	bic.w	r2, r2, #14
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f003 021f 	and.w	r2, r3, #31
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	2101      	movs	r1, #1
 8003daa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d004      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
}
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
 8003dec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003df6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f003 021f 	and.w	r2, r3, #31
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	2101      	movs	r1, #1
 8003e18:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d108      	bne.n	8003e40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e3e:	e007      	b.n	8003e50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b16      	ldr	r3, [pc, #88]	; (8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d802      	bhi.n	8003e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	e001      	b.n	8003e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e78:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	3b08      	subs	r3, #8
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	089b      	lsrs	r3, r3, #2
 8003e96:	009a      	lsls	r2, r3, #2
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a0b      	ldr	r2, [pc, #44]	; (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ea6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	2201      	movs	r2, #1
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40020407 	.word	0x40020407
 8003ec8:	40020800 	.word	0x40020800
 8003ecc:	40020820 	.word	0x40020820
 8003ed0:	cccccccd 	.word	0xcccccccd
 8003ed4:	40020880 	.word	0x40020880

08003ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003efa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	f003 031f 	and.w	r3, r3, #31
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	1000823f 	.word	0x1000823f
 8003f1c:	40020940 	.word	0x40020940

08003f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f2e:	e15a      	b.n	80041e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2101      	movs	r1, #1
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa01 f303 	lsl.w	r3, r1, r3
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 814c 	beq.w	80041e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d005      	beq.n	8003f60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d130      	bne.n	8003fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4013      	ands	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f96:	2201      	movs	r2, #1
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0201 	and.w	r2, r3, #1
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d017      	beq.n	8003ffe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	2203      	movs	r2, #3
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d123      	bne.n	8004052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	08da      	lsrs	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3208      	adds	r2, #8
 8004012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	220f      	movs	r2, #15
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	08da      	lsrs	r2, r3, #3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3208      	adds	r2, #8
 800404c:	6939      	ldr	r1, [r7, #16]
 800404e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	2203      	movs	r2, #3
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0203 	and.w	r2, r3, #3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80a6 	beq.w	80041e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004094:	4b5b      	ldr	r3, [pc, #364]	; (8004204 <HAL_GPIO_Init+0x2e4>)
 8004096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004098:	4a5a      	ldr	r2, [pc, #360]	; (8004204 <HAL_GPIO_Init+0x2e4>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6613      	str	r3, [r2, #96]	; 0x60
 80040a0:	4b58      	ldr	r3, [pc, #352]	; (8004204 <HAL_GPIO_Init+0x2e4>)
 80040a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ac:	4a56      	ldr	r2, [pc, #344]	; (8004208 <HAL_GPIO_Init+0x2e8>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	220f      	movs	r2, #15
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040d6:	d01f      	beq.n	8004118 <HAL_GPIO_Init+0x1f8>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a4c      	ldr	r2, [pc, #304]	; (800420c <HAL_GPIO_Init+0x2ec>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d019      	beq.n	8004114 <HAL_GPIO_Init+0x1f4>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a4b      	ldr	r2, [pc, #300]	; (8004210 <HAL_GPIO_Init+0x2f0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d013      	beq.n	8004110 <HAL_GPIO_Init+0x1f0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a4a      	ldr	r2, [pc, #296]	; (8004214 <HAL_GPIO_Init+0x2f4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00d      	beq.n	800410c <HAL_GPIO_Init+0x1ec>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a49      	ldr	r2, [pc, #292]	; (8004218 <HAL_GPIO_Init+0x2f8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <HAL_GPIO_Init+0x1e8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a48      	ldr	r2, [pc, #288]	; (800421c <HAL_GPIO_Init+0x2fc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_GPIO_Init+0x1e4>
 8004100:	2305      	movs	r3, #5
 8004102:	e00a      	b.n	800411a <HAL_GPIO_Init+0x1fa>
 8004104:	2306      	movs	r3, #6
 8004106:	e008      	b.n	800411a <HAL_GPIO_Init+0x1fa>
 8004108:	2304      	movs	r3, #4
 800410a:	e006      	b.n	800411a <HAL_GPIO_Init+0x1fa>
 800410c:	2303      	movs	r3, #3
 800410e:	e004      	b.n	800411a <HAL_GPIO_Init+0x1fa>
 8004110:	2302      	movs	r3, #2
 8004112:	e002      	b.n	800411a <HAL_GPIO_Init+0x1fa>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_GPIO_Init+0x1fa>
 8004118:	2300      	movs	r3, #0
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	f002 0203 	and.w	r2, r2, #3
 8004120:	0092      	lsls	r2, r2, #2
 8004122:	4093      	lsls	r3, r2
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800412a:	4937      	ldr	r1, [pc, #220]	; (8004208 <HAL_GPIO_Init+0x2e8>)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	3302      	adds	r3, #2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004138:	4b39      	ldr	r3, [pc, #228]	; (8004220 <HAL_GPIO_Init+0x300>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800415c:	4a30      	ldr	r2, [pc, #192]	; (8004220 <HAL_GPIO_Init+0x300>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004162:	4b2f      	ldr	r3, [pc, #188]	; (8004220 <HAL_GPIO_Init+0x300>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43db      	mvns	r3, r3
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004186:	4a26      	ldr	r2, [pc, #152]	; (8004220 <HAL_GPIO_Init+0x300>)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800418c:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_GPIO_Init+0x300>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <HAL_GPIO_Init+0x300>)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_GPIO_Init+0x300>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041da:	4a11      	ldr	r2, [pc, #68]	; (8004220 <HAL_GPIO_Init+0x300>)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3301      	adds	r3, #1
 80041e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f47f ae9d 	bne.w	8003f30 <HAL_GPIO_Init+0x10>
  }
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40021000 	.word	0x40021000
 8004208:	40010000 	.word	0x40010000
 800420c:	48000400 	.word	0x48000400
 8004210:	48000800 	.word	0x48000800
 8004214:	48000c00 	.word	0x48000c00
 8004218:	48001000 	.word	0x48001000
 800421c:	48001400 	.word	0x48001400
 8004220:	40010400 	.word	0x40010400

08004224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	807b      	strh	r3, [r7, #2]
 8004230:	4613      	mov	r3, r2
 8004232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004234:	787b      	ldrb	r3, [r7, #1]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800423a:	887a      	ldrh	r2, [r7, #2]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004240:	e002      	b.n	8004248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004266:	887a      	ldrh	r2, [r7, #2]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4013      	ands	r3, r2
 800426c:	041a      	lsls	r2, r3, #16
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	43d9      	mvns	r1, r3
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	400b      	ands	r3, r1
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e08d      	b.n	80043b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fd fa5c 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	e006      	b.n	8004310 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800430e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d108      	bne.n	800432a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	e007      	b.n	800433a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800435c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69d9      	ldr	r1, [r3, #28]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	f040 80f9 	bne.w	80045da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_I2C_Mem_Write+0x34>
 80043ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0ed      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_I2C_Mem_Write+0x4e>
 800440a:	2302      	movs	r3, #2
 800440c:	e0e6      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004416:	f7fd fc49 	bl	8001cac <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2319      	movs	r3, #25
 8004422:	2201      	movs	r2, #1
 8004424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f955 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0d1      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2221      	movs	r2, #33	; 0x21
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004460:	88f8      	ldrh	r0, [r7, #6]
 8004462:	893a      	ldrh	r2, [r7, #8]
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4603      	mov	r3, r0
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f8b9 	bl	80045e8 <I2C_RequestMemoryWrite>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0a9      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d90e      	bls.n	80044b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	b2da      	uxtb	r2, r3
 800449e:	8979      	ldrh	r1, [r7, #10]
 80044a0:	2300      	movs	r3, #0
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fad9 	bl	8004a60 <I2C_TransferConfig>
 80044ae:	e00f      	b.n	80044d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	8979      	ldrh	r1, [r7, #10]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fac8 	bl	8004a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f958 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e07b      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d034      	beq.n	8004588 <HAL_I2C_Mem_Write+0x1c8>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d130      	bne.n	8004588 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	2200      	movs	r2, #0
 800452e:	2180      	movs	r1, #128	; 0x80
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f8d1 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e04d      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2bff      	cmp	r3, #255	; 0xff
 8004548:	d90e      	bls.n	8004568 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	22ff      	movs	r2, #255	; 0xff
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	b2da      	uxtb	r2, r3
 8004556:	8979      	ldrh	r1, [r7, #10]
 8004558:	2300      	movs	r3, #0
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fa7d 	bl	8004a60 <I2C_TransferConfig>
 8004566:	e00f      	b.n	8004588 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	b2da      	uxtb	r2, r3
 8004578:	8979      	ldrh	r1, [r7, #10]
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 fa6c 	bl	8004a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d19e      	bne.n	80044d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f93e 	bl	8004818 <I2C_WaitOnSTOPFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e01a      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2220      	movs	r2, #32
 80045ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <HAL_I2C_Mem_Write+0x224>)
 80045ba:	400b      	ands	r3, r1
 80045bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e000      	b.n	80045dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	fe00e800 	.word	0xfe00e800

080045e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	4608      	mov	r0, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	460b      	mov	r3, r1
 80045fc:	813b      	strh	r3, [r7, #8]
 80045fe:	4613      	mov	r3, r2
 8004600:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	8979      	ldrh	r1, [r7, #10]
 8004608:	4b20      	ldr	r3, [pc, #128]	; (800468c <I2C_RequestMemoryWrite+0xa4>)
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fa25 	bl	8004a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	69b9      	ldr	r1, [r7, #24]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f8b5 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e02c      	b.n	8004684 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004630:	893b      	ldrh	r3, [r7, #8]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	629a      	str	r2, [r3, #40]	; 0x28
 800463a:	e015      	b.n	8004668 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	0a1b      	lsrs	r3, r3, #8
 8004640:	b29b      	uxth	r3, r3
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	69b9      	ldr	r1, [r7, #24]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f89b 	bl	800478a <I2C_WaitOnTXISFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e012      	b.n	8004684 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800465e:	893b      	ldrh	r3, [r7, #8]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2200      	movs	r2, #0
 8004670:	2180      	movs	r1, #128	; 0x80
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f830 	bl	80046d8 <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	80002000 	.word	0x80002000

08004690 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d103      	bne.n	80046ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d007      	beq.n	80046cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	619a      	str	r2, [r3, #24]
  }
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e8:	e03b      	b.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f8d6 	bl	80048a0 <I2C_IsErrorOccurred>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e041      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d02d      	beq.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004706:	f7fd fad1 	bl	8001cac <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d122      	bne.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	4013      	ands	r3, r2
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	429a      	cmp	r2, r3
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	429a      	cmp	r2, r3
 8004738:	d113      	bne.n	8004762 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e00f      	b.n	8004782 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	429a      	cmp	r2, r3
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	429a      	cmp	r2, r3
 800477e:	d0b4      	beq.n	80046ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004796:	e033      	b.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f87f 	bl	80048a0 <I2C_IsErrorOccurred>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e031      	b.n	8004810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d025      	beq.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fd fa7a 	bl	8001cac <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11a      	bne.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d013      	beq.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e007      	b.n	8004810 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b02      	cmp	r3, #2
 800480c:	d1c4      	bne.n	8004798 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004824:	e02f      	b.n	8004886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f838 	bl	80048a0 <I2C_IsErrorOccurred>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e02d      	b.n	8004896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483a:	f7fd fa37 	bl	8001cac <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11a      	bne.n	8004886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b20      	cmp	r3, #32
 800485c:	d013      	beq.n	8004886 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e007      	b.n	8004896 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d1c8      	bne.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d068      	beq.n	800499e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2210      	movs	r2, #16
 80048d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d4:	e049      	b.n	800496a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d045      	beq.n	800496a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fd f9e5 	bl	8001cac <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_IsErrorOccurred+0x54>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d13a      	bne.n	800496a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004906:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004916:	d121      	bne.n	800495c <I2C_IsErrorOccurred+0xbc>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491e:	d01d      	beq.n	800495c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b20      	cmp	r3, #32
 8004924:	d01a      	beq.n	800495c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004934:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004936:	f7fd f9b9 	bl	8001cac <HAL_GetTick>
 800493a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800493c:	e00e      	b.n	800495c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800493e:	f7fd f9b5 	bl	8001cac <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b19      	cmp	r3, #25
 800494a:	d907      	bls.n	800495c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f043 0320 	orr.w	r3, r3, #32
 8004952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800495a:	e006      	b.n	800496a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d1e9      	bne.n	800493e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b20      	cmp	r3, #32
 8004976:	d003      	beq.n	8004980 <I2C_IsErrorOccurred+0xe0>
 8004978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0aa      	beq.n	80048d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2220      	movs	r2, #32
 800498e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f043 0304 	orr.w	r3, r3, #4
 8004996:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	f043 0301 	orr.w	r3, r3, #1
 80049b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f043 0308 	orr.w	r3, r3, #8
 80049d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f043 0302 	orr.w	r3, r3, #2
 80049fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01c      	beq.n	8004a4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fe3b 	bl	8004690 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <I2C_IsErrorOccurred+0x1bc>)
 8004a26:	400b      	ands	r3, r1
 8004a28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3728      	adds	r7, #40	; 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	fe00e800 	.word	0xfe00e800

08004a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607b      	str	r3, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	817b      	strh	r3, [r7, #10]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a78:	7a7b      	ldrb	r3, [r7, #9]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	0d5b      	lsrs	r3, r3, #21
 8004a9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a9e:	4b08      	ldr	r3, [pc, #32]	; (8004ac0 <I2C_TransferConfig+0x60>)
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	ea02 0103 	and.w	r1, r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	03ff63ff 	.word	0x03ff63ff

08004ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d138      	bne.n	8004b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e032      	b.n	8004b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6819      	ldr	r1, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d139      	bne.n	8004be4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e033      	b.n	8004be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2224      	movs	r2, #36	; 0x24
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e0d0      	b.n	8004da8 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fc fe00 	bl	8001820 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c36:	f023 030f 	bic.w	r3, r3, #15
 8004c3a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2202      	movs	r2, #2
 8004c42:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d061      	beq.n	8004d10 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c54:	2310      	movs	r3, #16
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e001      	b.n	8004c5e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d802      	bhi.n	8004c6c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c70:	f001 f99c 	bl	8005fac <HAL_RCCEx_GetPeriphCLKFreq>
 8004c74:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7e:	d125      	bne.n	8004ccc <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d010      	beq.n	8004caa <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	3305      	adds	r3, #5
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e01f      	b.n	8004cea <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	3305      	adds	r3, #5
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	e00e      	b.n	8004cea <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	3305      	adds	r3, #5
 8004ce8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	4a30      	ldr	r2, [pc, #192]	; (8004db0 <HAL_I2S_Init+0x1bc>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	08db      	lsrs	r3, r3, #3
 8004cf4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e003      	b.n	8004d18 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d10:	2302      	movs	r3, #2
 8004d12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d902      	bls.n	8004d24 <HAL_I2S_Init+0x130>
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	2bff      	cmp	r3, #255	; 0xff
 8004d22:	d907      	bls.n	8004d34 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f043 0210 	orr.w	r2, r3, #16
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e039      	b.n	8004da8 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	ea42 0103 	orr.w	r1, r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d52:	f023 030f 	bic.w	r3, r3, #15
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6851      	ldr	r1, [r2, #4]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6892      	ldr	r2, [r2, #8]
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68d2      	ldr	r2, [r2, #12]
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6992      	ldr	r2, [r2, #24]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d76:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b30      	cmp	r3, #48	; 0x30
 8004d7e:	d003      	beq.n	8004d88 <HAL_I2S_Init+0x194>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2bb0      	cmp	r3, #176	; 0xb0
 8004d86:	d107      	bne.n	8004d98 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	cccccccd 	.word	0xcccccccd

08004db4 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_I2S_Transmit+0x1c>
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0dc      	b.n	8004f8e <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_I2S_Transmit+0x30>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e0d4      	b.n	8004f8e <HAL_I2S_Transmit+0x1da>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d005      	beq.n	8004e04 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8004e00:	2302      	movs	r3, #2
 8004e02:	e0c4      	b.n	8004f8e <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2203      	movs	r2, #3
 8004e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d002      	beq.n	8004e30 <HAL_I2S_Transmit+0x7c>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	d10a      	bne.n	8004e46 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	845a      	strh	r2, [r3, #34]	; 0x22
 8004e44:	e005      	b.n	8004e52 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	88fa      	ldrh	r2, [r7, #6]
 8004e4a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	88fa      	ldrh	r2, [r7, #6]
 8004e50:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d007      	beq.n	8004e7a <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e78:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2102      	movs	r1, #2
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f888 	bl	8004f96 <I2S_WaitFlagStateUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d04e      	beq.n	8004f2a <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    __HAL_UNLOCK(hi2s);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e070      	b.n	8004f8e <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f85d 	bl	8004f96 <I2S_WaitFlagStateUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00f      	beq.n	8004f02 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e045      	b.n	8004f8e <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d10c      	bne.n	8004f2a <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	f043 0204 	orr.w	r2, r3, #4
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1bb      	bne.n	8004eac <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f48:	d118      	bne.n	8004f7c <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2180      	movs	r1, #128	; 0x80
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f820 	bl	8004f96 <I2S_WaitFlagStateUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00f      	beq.n	8004f7c <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	f043 0201 	orr.w	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e008      	b.n	8004f8e <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hi2s);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa6:	f7fc fe81 	bl	8001cac <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004fac:	e018      	b.n	8004fe0 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d014      	beq.n	8004fe0 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004fb6:	f7fc fe79 	bl	8001cac <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d902      	bls.n	8004fcc <I2S_WaitFlagStateUntilTimeout+0x36>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d109      	bne.n	8004fe0 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e00f      	b.n	8005000 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d1d7      	bne.n	8004fae <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d141      	bne.n	800509a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005016:	4b4b      	ldr	r3, [pc, #300]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800501e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005022:	d131      	bne.n	8005088 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005024:	4b47      	ldr	r3, [pc, #284]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800502a:	4a46      	ldr	r2, [pc, #280]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800503c:	4a41      	ldr	r2, [pc, #260]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005044:	4b40      	ldr	r3, [pc, #256]	; (8005148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2232      	movs	r2, #50	; 0x32
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	4a3f      	ldr	r2, [pc, #252]	; (800514c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005050:	fba2 2303 	umull	r2, r3, r2, r3
 8005054:	0c9b      	lsrs	r3, r3, #18
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800505a:	e002      	b.n	8005062 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3b01      	subs	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005062:	4b38      	ldr	r3, [pc, #224]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d102      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f2      	bne.n	800505c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005076:	4b33      	ldr	r3, [pc, #204]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005082:	d158      	bne.n	8005136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e057      	b.n	8005138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005088:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508e:	4a2d      	ldr	r2, [pc, #180]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005098:	e04d      	b.n	8005136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a0:	d141      	bne.n	8005126 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050a2:	4b28      	ldr	r3, [pc, #160]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ae:	d131      	bne.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b0:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b6:	4a23      	ldr	r2, [pc, #140]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050c0:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050c8:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2232      	movs	r2, #50	; 0x32
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	4a1c      	ldr	r2, [pc, #112]	; (800514c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050dc:	fba2 2303 	umull	r2, r3, r2, r3
 80050e0:	0c9b      	lsrs	r3, r3, #18
 80050e2:	3301      	adds	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050e6:	e002      	b.n	80050ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d102      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f2      	bne.n	80050e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510e:	d112      	bne.n	8005136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e011      	b.n	8005138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005124:	e007      	b.n	8005136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800512e:	4a05      	ldr	r2, [pc, #20]	; (8005144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005134:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	40007000 	.word	0x40007000
 8005148:	20000004 	.word	0x20000004
 800514c:	431bde83 	.word	0x431bde83

08005150 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800515a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800515e:	6093      	str	r3, [r2, #8]
}
 8005160:	bf00      	nop
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40007000 	.word	0x40007000

08005170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e2fe      	b.n	8005780 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d075      	beq.n	800527a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518e:	4b97      	ldr	r3, [pc, #604]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005198:	4b94      	ldr	r3, [pc, #592]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d102      	bne.n	80051ae <HAL_RCC_OscConfig+0x3e>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d002      	beq.n	80051b4 <HAL_RCC_OscConfig+0x44>
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d10b      	bne.n	80051cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b4:	4b8d      	ldr	r3, [pc, #564]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05b      	beq.n	8005278 <HAL_RCC_OscConfig+0x108>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d157      	bne.n	8005278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e2d9      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x74>
 80051d6:	4b85      	ldr	r3, [pc, #532]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a84      	ldr	r2, [pc, #528]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e01d      	b.n	8005220 <HAL_RCC_OscConfig+0xb0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051ec:	d10c      	bne.n	8005208 <HAL_RCC_OscConfig+0x98>
 80051ee:	4b7f      	ldr	r3, [pc, #508]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a7e      	ldr	r2, [pc, #504]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80051f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4b7c      	ldr	r3, [pc, #496]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a7b      	ldr	r2, [pc, #492]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e00b      	b.n	8005220 <HAL_RCC_OscConfig+0xb0>
 8005208:	4b78      	ldr	r3, [pc, #480]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a77      	ldr	r2, [pc, #476]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800520e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	4b75      	ldr	r3, [pc, #468]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a74      	ldr	r2, [pc, #464]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800521a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800521e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d013      	beq.n	8005250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fc fd40 	bl	8001cac <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005230:	f7fc fd3c 	bl	8001cac <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b64      	cmp	r3, #100	; 0x64
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e29e      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005242:	4b6a      	ldr	r3, [pc, #424]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0xc0>
 800524e:	e014      	b.n	800527a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fc fd2c 	bl	8001cac <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005258:	f7fc fd28 	bl	8001cac <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b64      	cmp	r3, #100	; 0x64
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e28a      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800526a:	4b60      	ldr	r3, [pc, #384]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0xe8>
 8005276:	e000      	b.n	800527a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d075      	beq.n	8005372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005286:	4b59      	ldr	r3, [pc, #356]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005290:	4b56      	ldr	r3, [pc, #344]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d102      	bne.n	80052a6 <HAL_RCC_OscConfig+0x136>
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_OscConfig+0x13c>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d11f      	bne.n	80052ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ac:	4b4f      	ldr	r3, [pc, #316]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_OscConfig+0x154>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e25d      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	061b      	lsls	r3, r3, #24
 80052d2:	4946      	ldr	r1, [pc, #280]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052d8:	4b45      	ldr	r3, [pc, #276]	; (80053f0 <HAL_RCC_OscConfig+0x280>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fc fc99 	bl	8001c14 <HAL_InitTick>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d043      	beq.n	8005370 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e249      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d023      	beq.n	800533c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f4:	4b3d      	ldr	r3, [pc, #244]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a3c      	ldr	r2, [pc, #240]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80052fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fc fcd4 	bl	8001cac <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005308:	f7fc fcd0 	bl	8001cac <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e232      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800531a:	4b34      	ldr	r3, [pc, #208]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005326:	4b31      	ldr	r3, [pc, #196]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	492d      	ldr	r1, [pc, #180]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
 800533a:	e01a      	b.n	8005372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800533c:	4b2b      	ldr	r3, [pc, #172]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fc fcb0 	bl	8001cac <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005350:	f7fc fcac 	bl	8001cac <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e20e      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005362:	4b22      	ldr	r3, [pc, #136]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x1e0>
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d041      	beq.n	8005402 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01c      	beq.n	80053c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005386:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 8005388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538c:	4a17      	ldr	r2, [pc, #92]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005396:	f7fc fc89 	bl	8001cac <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800539e:	f7fc fc85 	bl	8001cac <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e1e7      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80053b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0ef      	beq.n	800539e <HAL_RCC_OscConfig+0x22e>
 80053be:	e020      	b.n	8005402 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80053c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <HAL_RCC_OscConfig+0x27c>)
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fc fc6c 	bl	8001cac <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053d6:	e00d      	b.n	80053f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d8:	f7fc fc68 	bl	8001cac <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d906      	bls.n	80053f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1ca      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
 80053ea:	bf00      	nop
 80053ec:	40021000 	.word	0x40021000
 80053f0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053f4:	4b8c      	ldr	r3, [pc, #560]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1ea      	bne.n	80053d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80a6 	beq.w	800555c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005410:	2300      	movs	r3, #0
 8005412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005414:	4b84      	ldr	r3, [pc, #528]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_OscConfig+0x2b4>
 8005420:	2301      	movs	r3, #1
 8005422:	e000      	b.n	8005426 <HAL_RCC_OscConfig+0x2b6>
 8005424:	2300      	movs	r3, #0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00d      	beq.n	8005446 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542a:	4b7f      	ldr	r3, [pc, #508]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542e:	4a7e      	ldr	r2, [pc, #504]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6593      	str	r3, [r2, #88]	; 0x58
 8005436:	4b7c      	ldr	r3, [pc, #496]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005442:	2301      	movs	r3, #1
 8005444:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005446:	4b79      	ldr	r3, [pc, #484]	; (800562c <HAL_RCC_OscConfig+0x4bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d118      	bne.n	8005484 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005452:	4b76      	ldr	r3, [pc, #472]	; (800562c <HAL_RCC_OscConfig+0x4bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a75      	ldr	r2, [pc, #468]	; (800562c <HAL_RCC_OscConfig+0x4bc>)
 8005458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800545e:	f7fc fc25 	bl	8001cac <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005466:	f7fc fc21 	bl	8001cac <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e183      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005478:	4b6c      	ldr	r3, [pc, #432]	; (800562c <HAL_RCC_OscConfig+0x4bc>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d108      	bne.n	800549e <HAL_RCC_OscConfig+0x32e>
 800548c:	4b66      	ldr	r3, [pc, #408]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	4a65      	ldr	r2, [pc, #404]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f043 0301 	orr.w	r3, r3, #1
 8005498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800549c:	e024      	b.n	80054e8 <HAL_RCC_OscConfig+0x378>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d110      	bne.n	80054c8 <HAL_RCC_OscConfig+0x358>
 80054a6:	4b60      	ldr	r3, [pc, #384]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	4a5e      	ldr	r2, [pc, #376]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054ae:	f043 0304 	orr.w	r3, r3, #4
 80054b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054b6:	4b5c      	ldr	r3, [pc, #368]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054bc:	4a5a      	ldr	r2, [pc, #360]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c6:	e00f      	b.n	80054e8 <HAL_RCC_OscConfig+0x378>
 80054c8:	4b57      	ldr	r3, [pc, #348]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ce:	4a56      	ldr	r2, [pc, #344]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054d0:	f023 0301 	bic.w	r3, r3, #1
 80054d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054d8:	4b53      	ldr	r3, [pc, #332]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054de:	4a52      	ldr	r2, [pc, #328]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80054e0:	f023 0304 	bic.w	r3, r3, #4
 80054e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d016      	beq.n	800551e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f0:	f7fc fbdc 	bl	8001cac <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f6:	e00a      	b.n	800550e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f8:	f7fc fbd8 	bl	8001cac <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	f241 3288 	movw	r2, #5000	; 0x1388
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e138      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550e:	4b46      	ldr	r3, [pc, #280]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0ed      	beq.n	80054f8 <HAL_RCC_OscConfig+0x388>
 800551c:	e015      	b.n	800554a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551e:	f7fc fbc5 	bl	8001cac <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005524:	e00a      	b.n	800553c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005526:	f7fc fbc1 	bl	8001cac <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f241 3288 	movw	r2, #5000	; 0x1388
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e121      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800553c:	4b3a      	ldr	r3, [pc, #232]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1ed      	bne.n	8005526 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800554a:	7ffb      	ldrb	r3, [r7, #31]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d105      	bne.n	800555c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005550:	4b35      	ldr	r3, [pc, #212]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005554:	4a34      	ldr	r2, [pc, #208]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800555a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d03c      	beq.n	80055e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01c      	beq.n	80055aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005570:	4b2d      	ldr	r3, [pc, #180]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005576:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7fc fb94 	bl	8001cac <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005588:	f7fc fb90 	bl	8001cac <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e0f2      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559a:	4b23      	ldr	r3, [pc, #140]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 800559c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0ef      	beq.n	8005588 <HAL_RCC_OscConfig+0x418>
 80055a8:	e01b      	b.n	80055e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055aa:	4b1f      	ldr	r3, [pc, #124]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80055ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055b0:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ba:	f7fc fb77 	bl	8001cac <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055c2:	f7fc fb73 	bl	8001cac <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e0d5      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80055d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1ef      	bne.n	80055c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80c9 	beq.w	800577e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ec:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	f000 8083 	beq.w	8005700 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d15e      	bne.n	80056c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005602:	4b09      	ldr	r3, [pc, #36]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <HAL_RCC_OscConfig+0x4b8>)
 8005608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560e:	f7fc fb4d 	bl	8001cac <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005614:	e00c      	b.n	8005630 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005616:	f7fc fb49 	bl	8001cac <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d905      	bls.n	8005630 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e0ab      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
 8005628:	40021000 	.word	0x40021000
 800562c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005630:	4b55      	ldr	r3, [pc, #340]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1ec      	bne.n	8005616 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800563c:	4b52      	ldr	r3, [pc, #328]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b52      	ldr	r3, [pc, #328]	; (800578c <HAL_RCC_OscConfig+0x61c>)
 8005642:	4013      	ands	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6a11      	ldr	r1, [r2, #32]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800564c:	3a01      	subs	r2, #1
 800564e:	0112      	lsls	r2, r2, #4
 8005650:	4311      	orrs	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005656:	0212      	lsls	r2, r2, #8
 8005658:	4311      	orrs	r1, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800565e:	0852      	lsrs	r2, r2, #1
 8005660:	3a01      	subs	r2, #1
 8005662:	0552      	lsls	r2, r2, #21
 8005664:	4311      	orrs	r1, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800566a:	0852      	lsrs	r2, r2, #1
 800566c:	3a01      	subs	r2, #1
 800566e:	0652      	lsls	r2, r2, #25
 8005670:	4311      	orrs	r1, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005676:	06d2      	lsls	r2, r2, #27
 8005678:	430a      	orrs	r2, r1
 800567a:	4943      	ldr	r1, [pc, #268]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 800567c:	4313      	orrs	r3, r2
 800567e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005680:	4b41      	ldr	r3, [pc, #260]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a40      	ldr	r2, [pc, #256]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 8005686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800568a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800568c:	4b3e      	ldr	r3, [pc, #248]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a3d      	ldr	r2, [pc, #244]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 8005692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005696:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fc fb08 	bl	8001cac <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fc fb04 	bl	8001cac <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e066      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b2:	4b35      	ldr	r3, [pc, #212]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x530>
 80056be:	e05e      	b.n	800577e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a30      	ldr	r2, [pc, #192]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 80056c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fc faee 	bl	8001cac <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d4:	f7fc faea 	bl	8001cac <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e04c      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e6:	4b28      	ldr	r3, [pc, #160]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056f2:	4b25      	ldr	r3, [pc, #148]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	4924      	ldr	r1, [pc, #144]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <HAL_RCC_OscConfig+0x620>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	60cb      	str	r3, [r1, #12]
 80056fe:	e03e      	b.n	800577e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e039      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800570c:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <HAL_RCC_OscConfig+0x618>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f003 0203 	and.w	r2, r3, #3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	429a      	cmp	r2, r3
 800571e:	d12c      	bne.n	800577a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	3b01      	subs	r3, #1
 800572c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d123      	bne.n	800577a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d11b      	bne.n	800577a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d113      	bne.n	800577a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	3b01      	subs	r3, #1
 8005760:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d109      	bne.n	800577a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	3b01      	subs	r3, #1
 8005774:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d001      	beq.n	800577e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3720      	adds	r7, #32
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021000 	.word	0x40021000
 800578c:	019f800c 	.word	0x019f800c
 8005790:	feeefffc 	.word	0xfeeefffc

08005794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e11e      	b.n	80059ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057ac:	4b91      	ldr	r3, [pc, #580]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d910      	bls.n	80057dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b8e      	ldr	r3, [pc, #568]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 020f 	bic.w	r2, r3, #15
 80057c2:	498c      	ldr	r1, [pc, #560]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b8a      	ldr	r3, [pc, #552]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e106      	b.n	80059ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d073      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d129      	bne.n	8005844 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f0:	4b81      	ldr	r3, [pc, #516]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d101      	bne.n	8005800 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0f4      	b.n	80059ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005800:	f000 f99e 	bl	8005b40 <RCC_GetSysClockFreqFromPLLSource>
 8005804:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4a7c      	ldr	r2, [pc, #496]	; (80059fc <HAL_RCC_ClockConfig+0x268>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d93f      	bls.n	800588e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800580e:	4b7a      	ldr	r3, [pc, #488]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d009      	beq.n	800582e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005822:	2b00      	cmp	r3, #0
 8005824:	d033      	beq.n	800588e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800582a:	2b00      	cmp	r3, #0
 800582c:	d12f      	bne.n	800588e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800582e:	4b72      	ldr	r3, [pc, #456]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005836:	4a70      	ldr	r2, [pc, #448]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800583e:	2380      	movs	r3, #128	; 0x80
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e024      	b.n	800588e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d107      	bne.n	800585c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800584c:	4b6a      	ldr	r3, [pc, #424]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0c6      	b.n	80059ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800585c:	4b66      	ldr	r3, [pc, #408]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0be      	b.n	80059ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800586c:	f000 f8ce 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8005870:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4a61      	ldr	r2, [pc, #388]	; (80059fc <HAL_RCC_ClockConfig+0x268>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d909      	bls.n	800588e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800587a:	4b5f      	ldr	r3, [pc, #380]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005882:	4a5d      	ldr	r2, [pc, #372]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005888:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800588a:	2380      	movs	r3, #128	; 0x80
 800588c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800588e:	4b5a      	ldr	r3, [pc, #360]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 0203 	bic.w	r2, r3, #3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4957      	ldr	r1, [pc, #348]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a0:	f7fc fa04 	bl	8001cac <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a6:	e00a      	b.n	80058be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a8:	f7fc fa00 	bl	8001cac <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e095      	b.n	80059ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	4b4e      	ldr	r3, [pc, #312]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 020c 	and.w	r2, r3, #12
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d1eb      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d023      	beq.n	8005924 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e8:	4b43      	ldr	r3, [pc, #268]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a42      	ldr	r2, [pc, #264]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 80058ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005900:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005908:	4a3b      	ldr	r2, [pc, #236]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800590a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800590e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005910:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4936      	ldr	r1, [pc, #216]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
 8005922:	e008      	b.n	8005936 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b80      	cmp	r3, #128	; 0x80
 8005928:	d105      	bne.n	8005936 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800592a:	4b33      	ldr	r3, [pc, #204]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	4a32      	ldr	r2, [pc, #200]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 8005930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005934:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005936:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d21d      	bcs.n	8005980 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005944:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f023 020f 	bic.w	r2, r3, #15
 800594c:	4929      	ldr	r1, [pc, #164]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005954:	f7fc f9aa 	bl	8001cac <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595a:	e00a      	b.n	8005972 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fc f9a6 	bl	8001cac <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e03b      	b.n	80059ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <HAL_RCC_ClockConfig+0x260>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d1ed      	bne.n	800595c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4917      	ldr	r1, [pc, #92]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	490f      	ldr	r1, [pc, #60]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059be:	f000 f825 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80059c2:	4602      	mov	r2, r0
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_RCC_ClockConfig+0x264>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	490c      	ldr	r1, [pc, #48]	; (8005a00 <HAL_RCC_ClockConfig+0x26c>)
 80059d0:	5ccb      	ldrb	r3, [r1, r3]
 80059d2:	f003 031f 	and.w	r3, r3, #31
 80059d6:	fa22 f303 	lsr.w	r3, r2, r3
 80059da:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <HAL_RCC_ClockConfig+0x270>)
 80059dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059de:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <HAL_RCC_ClockConfig+0x274>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fc f916 	bl	8001c14 <HAL_InitTick>
 80059e8:	4603      	mov	r3, r0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3718      	adds	r7, #24
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40022000 	.word	0x40022000
 80059f8:	40021000 	.word	0x40021000
 80059fc:	04c4b400 	.word	0x04c4b400
 8005a00:	08007a88 	.word	0x08007a88
 8005a04:	20000004 	.word	0x20000004
 8005a08:	20000008 	.word	0x20000008

08005a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a12:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d102      	bne.n	8005a24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	e047      	b.n	8005ab4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a24:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d102      	bne.n	8005a36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a30:	4b26      	ldr	r3, [pc, #152]	; (8005acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e03e      	b.n	8005ab4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a36:	4b23      	ldr	r3, [pc, #140]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d136      	bne.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	3301      	adds	r3, #1
 8005a58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d10c      	bne.n	8005a7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a6a:	68d2      	ldr	r2, [r2, #12]
 8005a6c:	0a12      	lsrs	r2, r2, #8
 8005a6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	617b      	str	r3, [r7, #20]
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	4a10      	ldr	r2, [pc, #64]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a84:	68d2      	ldr	r2, [r2, #12]
 8005a86:	0a12      	lsrs	r2, r2, #8
 8005a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
      break;
 8005a92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a94:	4b0b      	ldr	r3, [pc, #44]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	0e5b      	lsrs	r3, r3, #25
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e001      	b.n	8005ab4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ab4:	693b      	ldr	r3, [r7, #16]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	00f42400 	.word	0x00f42400
 8005acc:	016e3600 	.word	0x016e3600

08005ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ad4:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000004 	.word	0x20000004

08005ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005aec:	f7ff fff0 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0a1b      	lsrs	r3, r3, #8
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4904      	ldr	r1, [pc, #16]	; (8005b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	08007a98 	.word	0x08007a98

08005b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b18:	f7ff ffda 	bl	8005ad0 <HAL_RCC_GetHCLKFreq>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	0adb      	lsrs	r3, r3, #11
 8005b24:	f003 0307 	and.w	r3, r3, #7
 8005b28:	4904      	ldr	r1, [pc, #16]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b2a:	5ccb      	ldrb	r3, [r1, r3]
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	08007a98 	.word	0x08007a98

08005b40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b46:	4b1e      	ldr	r3, [pc, #120]	; (8005bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	091b      	lsrs	r3, r3, #4
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d10c      	bne.n	8005b7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b64:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b6c:	4a14      	ldr	r2, [pc, #80]	; (8005bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b6e:	68d2      	ldr	r2, [r2, #12]
 8005b70:	0a12      	lsrs	r2, r2, #8
 8005b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	617b      	str	r3, [r7, #20]
    break;
 8005b7c:	e00c      	b.n	8005b98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b7e:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	4a0e      	ldr	r2, [pc, #56]	; (8005bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b88:	68d2      	ldr	r2, [r2, #12]
 8005b8a:	0a12      	lsrs	r2, r2, #8
 8005b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
    break;
 8005b96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	0e5b      	lsrs	r3, r3, #25
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bb2:	687b      	ldr	r3, [r7, #4]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	371c      	adds	r7, #28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	016e3600 	.word	0x016e3600
 8005bc8:	00f42400 	.word	0x00f42400

08005bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bd8:	2300      	movs	r3, #0
 8005bda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8098 	beq.w	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bea:	2300      	movs	r3, #0
 8005bec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bee:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10d      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	4b40      	ldr	r3, [pc, #256]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	4a3f      	ldr	r2, [pc, #252]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c04:	6593      	str	r3, [r2, #88]	; 0x58
 8005c06:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c12:	2301      	movs	r3, #1
 8005c14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c16:	4b3a      	ldr	r3, [pc, #232]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a39      	ldr	r2, [pc, #228]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c22:	f7fc f843 	bl	8001cac <HAL_GetTick>
 8005c26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c28:	e009      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2a:	f7fc f83f 	bl	8001cac <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d902      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	74fb      	strb	r3, [r7, #19]
        break;
 8005c3c:	e005      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c3e:	4b30      	ldr	r3, [pc, #192]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0ef      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c4a:	7cfb      	ldrb	r3, [r7, #19]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d159      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c50:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01e      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d019      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c6c:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c78:	4b20      	ldr	r3, [pc, #128]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	4a1f      	ldr	r2, [pc, #124]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d016      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fb ffff 	bl	8001cac <HAL_GetTick>
 8005cae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb0:	e00b      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fb fffb 	bl	8001cac <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d902      	bls.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	74fb      	strb	r3, [r7, #19]
            break;
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ec      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	4903      	ldr	r1, [pc, #12]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cf4:	e008      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cf6:	7cfb      	ldrb	r3, [r7, #19]
 8005cf8:	74bb      	strb	r3, [r7, #18]
 8005cfa:	e005      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d04:	7cfb      	ldrb	r3, [r7, #19]
 8005d06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d08:	7c7b      	ldrb	r3, [r7, #17]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d105      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0e:	4ba6      	ldr	r3, [pc, #664]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	4aa5      	ldr	r2, [pc, #660]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d26:	4ba0      	ldr	r3, [pc, #640]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f023 0203 	bic.w	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	499c      	ldr	r1, [pc, #624]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d48:	4b97      	ldr	r3, [pc, #604]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f023 020c 	bic.w	r2, r3, #12
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	4994      	ldr	r1, [pc, #592]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d6a:	4b8f      	ldr	r3, [pc, #572]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	498b      	ldr	r1, [pc, #556]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d8c:	4b86      	ldr	r3, [pc, #536]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	4983      	ldr	r1, [pc, #524]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dae:	4b7e      	ldr	r3, [pc, #504]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	497a      	ldr	r1, [pc, #488]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dd0:	4b75      	ldr	r3, [pc, #468]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	4972      	ldr	r1, [pc, #456]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005df2:	4b6d      	ldr	r3, [pc, #436]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	4969      	ldr	r1, [pc, #420]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e14:	4b64      	ldr	r3, [pc, #400]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	4961      	ldr	r1, [pc, #388]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e36:	4b5c      	ldr	r3, [pc, #368]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	4958      	ldr	r1, [pc, #352]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d015      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e58:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	4950      	ldr	r1, [pc, #320]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e76:	d105      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e78:	4b4b      	ldr	r3, [pc, #300]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a4a      	ldr	r2, [pc, #296]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d015      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e90:	4b45      	ldr	r3, [pc, #276]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	4942      	ldr	r1, [pc, #264]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb0:	4b3d      	ldr	r3, [pc, #244]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a3c      	ldr	r2, [pc, #240]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ec8:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	4934      	ldr	r1, [pc, #208]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ee6:	d105      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee8:	4b2f      	ldr	r3, [pc, #188]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4a2e      	ldr	r2, [pc, #184]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ef2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d015      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f00:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	4926      	ldr	r1, [pc, #152]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f1e:	d105      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	4a20      	ldr	r2, [pc, #128]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d015      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	4918      	ldr	r1, [pc, #96]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f56:	d105      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d015      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f70:	4b0d      	ldr	r3, [pc, #52]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	490a      	ldr	r1, [pc, #40]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8e:	d105      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	4a04      	ldr	r2, [pc, #16]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40021000 	.word	0x40021000

08005fac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fbe:	d136      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005fc0:	4bac      	ldr	r3, [pc, #688]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fca:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005fcc:	4ba9      	ldr	r3, [pc, #676]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d108      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe0:	d104      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	f000 bc2a 	b.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005fec:	4ba1      	ldr	r3, [pc, #644]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d108      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006000:	d104      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8006002:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006006:	61fb      	str	r3, [r7, #28]
 8006008:	f000 bc1a 	b.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800600c:	4b99      	ldr	r3, [pc, #612]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006018:	f040 8412 	bne.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006022:	f040 840d 	bne.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    {
      frequency = HSE_VALUE / 32U;
 8006026:	4b94      	ldr	r3, [pc, #592]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006028:	61fb      	str	r3, [r7, #28]
 800602a:	f000 bc09 	b.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800602e:	4b91      	ldr	r3, [pc, #580]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d10c      	bne.n	8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800603a:	4b8e      	ldr	r3, [pc, #568]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006046:	d102      	bne.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8006048:	4b8c      	ldr	r3, [pc, #560]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	e017      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
 8006052:	e014      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8006054:	4b87      	ldr	r3, [pc, #540]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b03      	cmp	r3, #3
 800605e:	d10c      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006060:	4b84      	ldr	r3, [pc, #528]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800606c:	d102      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 800606e:	4b84      	ldr	r3, [pc, #528]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	e004      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e001      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800607e:	4b7d      	ldr	r3, [pc, #500]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	3301      	adds	r3, #1
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	f000 8378 	beq.w	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	f200 83ae 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060ac:	f000 8337 	beq.w	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060b6:	f200 83a4 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c0:	f000 82ff 	beq.w	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ca:	f200 839a 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	f000 82c0 	beq.w	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060de:	f200 8390 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e8:	f000 8272 	beq.w	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f2:	f200 8386 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fc:	f000 8224 	beq.w	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006106:	f200 837c 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006110:	f000 81da 	beq.w	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611a:	f200 8372 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006124:	f000 81ab 	beq.w	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612e:	f200 8368 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	f000 817d 	beq.w	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	f200 8360 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b20      	cmp	r3, #32
 8006146:	d84b      	bhi.n	80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 8359 	beq.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3b01      	subs	r3, #1
 8006154:	2b1f      	cmp	r3, #31
 8006156:	f200 8354 	bhi.w	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800615a:	a201      	add	r2, pc, #4	; (adr r2, 8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061eb 	.word	0x080061eb
 8006164:	0800624d 	.word	0x0800624d
 8006168:	08006803 	.word	0x08006803
 800616c:	080062bf 	.word	0x080062bf
 8006170:	08006803 	.word	0x08006803
 8006174:	08006803 	.word	0x08006803
 8006178:	08006803 	.word	0x08006803
 800617c:	08006321 	.word	0x08006321
 8006180:	08006803 	.word	0x08006803
 8006184:	08006803 	.word	0x08006803
 8006188:	08006803 	.word	0x08006803
 800618c:	08006803 	.word	0x08006803
 8006190:	08006803 	.word	0x08006803
 8006194:	08006803 	.word	0x08006803
 8006198:	08006803 	.word	0x08006803
 800619c:	08006803 	.word	0x08006803
 80061a0:	08006803 	.word	0x08006803
 80061a4:	08006803 	.word	0x08006803
 80061a8:	08006803 	.word	0x08006803
 80061ac:	08006803 	.word	0x08006803
 80061b0:	08006803 	.word	0x08006803
 80061b4:	08006803 	.word	0x08006803
 80061b8:	08006803 	.word	0x08006803
 80061bc:	08006803 	.word	0x08006803
 80061c0:	08006803 	.word	0x08006803
 80061c4:	08006803 	.word	0x08006803
 80061c8:	08006803 	.word	0x08006803
 80061cc:	08006803 	.word	0x08006803
 80061d0:	08006803 	.word	0x08006803
 80061d4:	08006803 	.word	0x08006803
 80061d8:	08006803 	.word	0x08006803
 80061dc:	08006383 	.word	0x08006383
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	f000 8101 	beq.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
      break;

#endif /* QUADSPI */

    default:
      break;
 80061e8:	e30b      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061ea:	4b22      	ldr	r3, [pc, #136]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        frequency = HAL_RCC_GetPCLK2Freq();
 80061fc:	f7ff fc8a 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8006200:	61f8      	str	r0, [r7, #28]
      break;
 8006202:	e300      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d103      	bne.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        frequency = HAL_RCC_GetSysClockFreq();
 800620a:	f7ff fbff 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 800620e:	61f8      	str	r0, [r7, #28]
      break;
 8006210:	e2f9      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8006212:	4b18      	ldr	r3, [pc, #96]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621e:	d105      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d102      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HSI_VALUE;
 8006226:	4b15      	ldr	r3, [pc, #84]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006228:	61fb      	str	r3, [r7, #28]
      break;
 800622a:	e2ec      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b02      	cmp	r3, #2
 8006238:	f040 82e5 	bne.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b03      	cmp	r3, #3
 8006240:	f040 82e1 	bne.w	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        frequency = LSE_VALUE;
 8006244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006248:	61fb      	str	r3, [r7, #28]
      break;
 800624a:	e2dc      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006252:	f003 030c 	and.w	r3, r3, #12
 8006256:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetPCLK1Freq();
 800625e:	f7ff fc43 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006262:	61f8      	str	r0, [r7, #28]
      break;
 8006264:	e2d1      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b04      	cmp	r3, #4
 800626a:	d10b      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = HAL_RCC_GetSysClockFreq();
 800626c:	f7ff fbce 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8006270:	61f8      	str	r0, [r7, #28]
      break;
 8006272:	e2ca      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006274:	40021000 	.word	0x40021000
 8006278:	000b71b0 	.word	0x000b71b0
 800627c:	00f42400 	.word	0x00f42400
 8006280:	016e3600 	.word	0x016e3600
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006284:	4b9e      	ldr	r3, [pc, #632]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800628c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006290:	d105      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b08      	cmp	r3, #8
 8006296:	d102      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HSI_VALUE;
 8006298:	4b9a      	ldr	r3, [pc, #616]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800629a:	61fb      	str	r3, [r7, #28]
      break;
 800629c:	e2b5      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800629e:	4b98      	ldr	r3, [pc, #608]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	f040 82ae 	bne.w	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	f040 82aa 	bne.w	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        frequency = LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ba:	61fb      	str	r3, [r7, #28]
      break;
 80062bc:	e2a5      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062be:	4b90      	ldr	r3, [pc, #576]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062c8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d103      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7ff fc0a 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 80062d4:	61f8      	str	r0, [r7, #28]
      break;
 80062d6:	e29a      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b10      	cmp	r3, #16
 80062dc:	d103      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
        frequency = HAL_RCC_GetSysClockFreq();
 80062de:	f7ff fb95 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80062e2:	61f8      	str	r0, [r7, #28]
      break;
 80062e4:	e293      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062e6:	4b86      	ldr	r3, [pc, #536]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f2:	d105      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d102      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
        frequency = HSI_VALUE;
 80062fa:	4b82      	ldr	r3, [pc, #520]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80062fc:	61fb      	str	r3, [r7, #28]
      break;
 80062fe:	e286      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006300:	4b7f      	ldr	r3, [pc, #508]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	f040 827f 	bne.w	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	f040 827b 	bne.w	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
        frequency = LSE_VALUE;
 8006318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631c:	61fb      	str	r3, [r7, #28]
      break;
 800631e:	e276      	b.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006320:	4b77      	ldr	r3, [pc, #476]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800632a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006332:	f7ff fbd9 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006336:	61f8      	str	r0, [r7, #28]
      break;
 8006338:	e26b      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d103      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
        frequency = HAL_RCC_GetSysClockFreq();
 8006340:	f7ff fb64 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8006344:	61f8      	str	r0, [r7, #28]
      break;
 8006346:	e264      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006348:	4b6d      	ldr	r3, [pc, #436]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006354:	d105      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b80      	cmp	r3, #128	; 0x80
 800635a:	d102      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
        frequency = HSI_VALUE;
 800635c:	4b69      	ldr	r3, [pc, #420]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800635e:	61fb      	str	r3, [r7, #28]
      break;
 8006360:	e257      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006362:	4b67      	ldr	r3, [pc, #412]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b02      	cmp	r3, #2
 800636e:	f040 8250 	bne.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2bc0      	cmp	r3, #192	; 0xc0
 8006376:	f040 824c 	bne.w	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        frequency = LSE_VALUE;
 800637a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800637e:	61fb      	str	r3, [r7, #28]
      break;
 8006380:	e247      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006382:	4b5f      	ldr	r3, [pc, #380]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800638c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006394:	f7ff fba8 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006398:	61f8      	str	r0, [r7, #28]
      break;
 800639a:	e23c      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a2:	d103      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x400>
        frequency = HAL_RCC_GetSysClockFreq();
 80063a4:	f7ff fb32 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80063a8:	61f8      	str	r0, [r7, #28]
      break;
 80063aa:	e234      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80063ac:	4b54      	ldr	r3, [pc, #336]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b8:	d106      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c0:	d102      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        frequency = HSI_VALUE;
 80063c2:	4b50      	ldr	r3, [pc, #320]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80063c4:	61fb      	str	r3, [r7, #28]
      break;
 80063c6:	e226      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80063c8:	4b4d      	ldr	r3, [pc, #308]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	f040 821f 	bne.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063de:	f040 821a 	bne.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        frequency = LSE_VALUE;
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	61fb      	str	r3, [r7, #28]
      break;
 80063e8:	e215      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80063ea:	4b45      	ldr	r3, [pc, #276]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063f4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d103      	bne.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7ff fb74 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006400:	61f8      	str	r0, [r7, #28]
      break;
 8006402:	e20a      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640a:	d103      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        frequency = HAL_RCC_GetSysClockFreq();
 800640c:	f7ff fafe 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8006410:	61f8      	str	r0, [r7, #28]
      break;
 8006412:	e202      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006414:	4b3a      	ldr	r3, [pc, #232]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	f040 81fb 	bne.w	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642a:	f040 81f6 	bne.w	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
        frequency = HSI_VALUE;
 800642e:	4b35      	ldr	r3, [pc, #212]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006430:	61fb      	str	r3, [r7, #28]
      break;
 8006432:	e1f2      	b.n	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006434:	4b32      	ldr	r3, [pc, #200]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800643e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006446:	f7ff fb4f 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 800644a:	61f8      	str	r0, [r7, #28]
      break;
 800644c:	e1e7      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006454:	d103      	bne.n	800645e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        frequency = HAL_RCC_GetSysClockFreq();
 8006456:	f7ff fad9 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 800645a:	61f8      	str	r0, [r7, #28]
      break;
 800645c:	e1df      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800645e:	4b28      	ldr	r3, [pc, #160]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646a:	f040 81d8 	bne.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006474:	f040 81d3 	bne.w	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
        frequency = HSI_VALUE;
 8006478:	4b22      	ldr	r3, [pc, #136]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800647a:	61fb      	str	r3, [r7, #28]
      break;
 800647c:	e1cf      	b.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800647e:	4b20      	ldr	r3, [pc, #128]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006488:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d103      	bne.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006490:	f7ff fb2a 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006494:	61f8      	str	r0, [r7, #28]
      break;
 8006496:	e1c4      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649e:	d103      	bne.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetSysClockFreq();
 80064a0:	f7ff fab4 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80064a4:	61f8      	str	r0, [r7, #28]
      break;
 80064a6:	e1bc      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80064a8:	4b15      	ldr	r3, [pc, #84]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b4:	f040 81b5 	bne.w	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064be:	f040 81b0 	bne.w	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
        frequency = HSI_VALUE;
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80064c4:	61fb      	str	r3, [r7, #28]
      break;
 80064c6:	e1ac      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80064c8:	4b0d      	ldr	r3, [pc, #52]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80064d2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d103      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
        frequency = HAL_RCC_GetPCLK1Freq();
 80064da:	f7ff fb05 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 80064de:	61f8      	str	r0, [r7, #28]
      break;
 80064e0:	e1a1      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80064e2:	4b07      	ldr	r3, [pc, #28]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80064e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d10b      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064f6:	d107      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
        frequency = LSI_VALUE;
 80064f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	e022      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8006500:	40021000 	.word	0x40021000
 8006504:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006508:	4b9b      	ldr	r3, [pc, #620]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006514:	d106      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800651c:	d102      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
        frequency = HSI_VALUE;
 800651e:	4b97      	ldr	r3, [pc, #604]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	e010      	b.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006524:	4b94      	ldr	r3, [pc, #592]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b02      	cmp	r3, #2
 8006530:	f040 8179 	bne.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800653a:	f040 8174 	bne.w	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        frequency = LSE_VALUE;
 800653e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006542:	61fb      	str	r3, [r7, #28]
      break;
 8006544:	e16f      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8006546:	e16e      	b.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006548:	4b8b      	ldr	r3, [pc, #556]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006552:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d103      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
        frequency = HAL_RCC_GetSysClockFreq();
 800655a:	f7ff fa57 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 800655e:	61f8      	str	r0, [r7, #28]
      break;
 8006560:	e163      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006568:	d11b      	bne.n	80065a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800656a:	4b83      	ldr	r3, [pc, #524]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8159 	beq.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006578:	4b7f      	ldr	r3, [pc, #508]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006582:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	fb03 f202 	mul.w	r2, r3, r2
 800658c:	4b7a      	ldr	r3, [pc, #488]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	0d5b      	lsrs	r3, r3, #21
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	3301      	adds	r3, #1
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	fbb2 f3f3 	udiv	r3, r2, r3
 800659e:	61fb      	str	r3, [r7, #28]
      break;
 80065a0:	e143      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065a8:	d102      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        frequency = EXTERNAL_CLOCK_VALUE;
 80065aa:	4b75      	ldr	r3, [pc, #468]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 80065ac:	61fb      	str	r3, [r7, #28]
      break;
 80065ae:	e13c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 80065b0:	4b71      	ldr	r3, [pc, #452]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065bc:	f040 8135 	bne.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065c6:	f040 8130 	bne.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        frequency = HSI_VALUE;
 80065ca:	4b6c      	ldr	r3, [pc, #432]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 80065cc:	61fb      	str	r3, [r7, #28]
      break;
 80065ce:	e12c      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80065d0:	4b69      	ldr	r3, [pc, #420]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80065da:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
        frequency = HAL_RCC_GetSysClockFreq();
 80065e2:	f7ff fa13 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80065e6:	61f8      	str	r0, [r7, #28]
      break;
 80065e8:	e121      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f0:	d11b      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80065f2:	4b61      	ldr	r3, [pc, #388]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8117 	beq.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006600:	4b5d      	ldr	r3, [pc, #372]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660a:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	fb03 f202 	mul.w	r2, r3, r2
 8006614:	4b58      	ldr	r3, [pc, #352]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	0d5b      	lsrs	r3, r3, #21
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	3301      	adds	r3, #1
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	fbb2 f3f3 	udiv	r3, r2, r3
 8006626:	61fb      	str	r3, [r7, #28]
      break;
 8006628:	e101      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006630:	d102      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006632:	4b53      	ldr	r3, [pc, #332]	; (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8006634:	61fb      	str	r3, [r7, #28]
      break;
 8006636:	e0fa      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8006638:	4b4f      	ldr	r3, [pc, #316]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	f040 80f3 	bne.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800664e:	f040 80ee 	bne.w	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        frequency = HSI_VALUE;
 8006652:	4b4a      	ldr	r3, [pc, #296]	; (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8006654:	61fb      	str	r3, [r7, #28]
      break;
 8006656:	e0ea      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006658:	4b47      	ldr	r3, [pc, #284]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006662:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800666a:	d103      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 800666c:	f7ff fa3c 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006670:	61f8      	str	r0, [r7, #28]
      break;
 8006672:	e0de      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d102      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = HSE_VALUE;
 800667a:	4b42      	ldr	r3, [pc, #264]	; (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>)
 800667c:	61fb      	str	r3, [r7, #28]
      break;
 800667e:	e0d8      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006686:	f040 80d4 	bne.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800668a:	4b3b      	ldr	r3, [pc, #236]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80cd 	beq.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006698:	4b37      	ldr	r3, [pc, #220]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	0a1b      	lsrs	r3, r3, #8
 800669e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a2:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	fb03 f202 	mul.w	r2, r3, r2
 80066ac:	4b32      	ldr	r3, [pc, #200]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	0d5b      	lsrs	r3, r3, #21
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	3301      	adds	r3, #1
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	61fb      	str	r3, [r7, #28]
      break;
 80066c0:	e0b7      	b.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 80066c2:	4b2d      	ldr	r3, [pc, #180]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80066cc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d4:	d114      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80066d6:	4b28      	ldr	r3, [pc, #160]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e0:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	fb03 f202 	mul.w	r2, r3, r2
 80066ea:	4b23      	ldr	r3, [pc, #140]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	0d5b      	lsrs	r3, r3, #21
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	3301      	adds	r3, #1
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	61fb      	str	r3, [r7, #28]
      break;
 80066fe:	e09a      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b02      	cmp	r3, #2
 800670c:	f040 8093 	bne.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 808f 	bne.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
        frequency = HSI48_VALUE;
 8006718:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 800671a:	61fb      	str	r3, [r7, #28]
      break;
 800671c:	e08b      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800671e:	4b16      	ldr	r3, [pc, #88]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006724:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006728:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006730:	d114      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006732:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	0a1b      	lsrs	r3, r3, #8
 8006738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673c:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	fb03 f202 	mul.w	r2, r3, r2
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	0d5b      	lsrs	r3, r3, #21
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	3301      	adds	r3, #1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	61fb      	str	r3, [r7, #28]
      break;
 800675a:	e06e      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800675e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b02      	cmp	r3, #2
 8006768:	d167      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d164      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
        frequency = HSI48_VALUE;
 8006770:	4b05      	ldr	r3, [pc, #20]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8006772:	61fb      	str	r3, [r7, #28]
      break;
 8006774:	e061      	b.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8006776:	bf00      	nop
 8006778:	40021000 	.word	0x40021000
 800677c:	00f42400 	.word	0x00f42400
 8006780:	00bb8000 	.word	0x00bb8000
 8006784:	016e3600 	.word	0x016e3600
 8006788:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800678c:	4b2f      	ldr	r3, [pc, #188]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006796:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800679e:	d128      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80067a0:	4b2a      	ldr	r3, [pc, #168]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d048      	beq.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b6:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80067b8:	4b24      	ldr	r3, [pc, #144]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	0edb      	lsrs	r3, r3, #27
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x830>
              pllp = 17U;
 80067d6:	2311      	movs	r3, #17
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	e001      	b.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
              pllp = 7U;
 80067dc:	2307      	movs	r3, #7
 80067de:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	fb03 f202 	mul.w	r2, r3, r2
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ee:	61fb      	str	r3, [r7, #28]
      break;
 80067f0:	e025      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067f8:	d121      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        frequency = HAL_RCC_GetSysClockFreq();
 80067fa:	f7ff f907 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80067fe:	61f8      	str	r0, [r7, #28]
      break;
 8006800:	e01d      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      break;
 8006802:	bf00      	nop
 8006804:	e01c      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006806:	bf00      	nop
 8006808:	e01a      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800680a:	bf00      	nop
 800680c:	e018      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800680e:	bf00      	nop
 8006810:	e016      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006812:	bf00      	nop
 8006814:	e014      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006816:	bf00      	nop
 8006818:	e012      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800681a:	bf00      	nop
 800681c:	e010      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800681e:	bf00      	nop
 8006820:	e00e      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006822:	bf00      	nop
 8006824:	e00c      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006826:	bf00      	nop
 8006828:	e00a      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800682a:	bf00      	nop
 800682c:	e008      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800682e:	bf00      	nop
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 800683e:	bf00      	nop
    }
  }

  return(frequency);
 8006840:	69fb      	ldr	r3, [r7, #28]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3720      	adds	r7, #32
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40021000 	.word	0x40021000

08006850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e049      	b.n	80068f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fb f8e4 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3304      	adds	r3, #4
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f000 f898 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	d001      	beq.n	8006918 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e042      	b.n	800699e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a21      	ldr	r2, [pc, #132]	; (80069ac <HAL_TIM_Base_Start+0xac>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d018      	beq.n	800695c <HAL_TIM_Base_Start+0x5c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d013      	beq.n	800695c <HAL_TIM_Base_Start+0x5c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <HAL_TIM_Base_Start+0xb0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00e      	beq.n	800695c <HAL_TIM_Base_Start+0x5c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <HAL_TIM_Base_Start+0xb4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d009      	beq.n	800695c <HAL_TIM_Base_Start+0x5c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <HAL_TIM_Base_Start+0xb8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_TIM_Base_Start+0x5c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a19      	ldr	r2, [pc, #100]	; (80069bc <HAL_TIM_Base_Start+0xbc>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d115      	bne.n	8006988 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <HAL_TIM_Base_Start+0xc0>)
 8006964:	4013      	ands	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b06      	cmp	r3, #6
 800696c:	d015      	beq.n	800699a <HAL_TIM_Base_Start+0x9a>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006974:	d011      	beq.n	800699a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	e008      	b.n	800699a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e000      	b.n	800699c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40012c00 	.word	0x40012c00
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	00010007 	.word	0x00010007

080069c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a42      	ldr	r2, [pc, #264]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00f      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d00b      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3f      	ldr	r2, [pc, #252]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d007      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3e      	ldr	r2, [pc, #248]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0x38>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3d      	ldr	r2, [pc, #244]	; (8006aec <TIM_Base_SetConfig+0x128>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d108      	bne.n	8006a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a33      	ldr	r2, [pc, #204]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01b      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1c:	d017      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a30      	ldr	r2, [pc, #192]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d013      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2f      	ldr	r2, [pc, #188]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00f      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2e      	ldr	r2, [pc, #184]	; (8006aec <TIM_Base_SetConfig+0x128>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00b      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2d      	ldr	r2, [pc, #180]	; (8006af0 <TIM_Base_SetConfig+0x12c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d007      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2c      	ldr	r2, [pc, #176]	; (8006af4 <TIM_Base_SetConfig+0x130>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_Base_SetConfig+0x8a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2b      	ldr	r2, [pc, #172]	; (8006af8 <TIM_Base_SetConfig+0x134>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d108      	bne.n	8006a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a16      	ldr	r2, [pc, #88]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_Base_SetConfig+0xe8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	; (8006aec <TIM_Base_SetConfig+0x128>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_Base_SetConfig+0xe8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <TIM_Base_SetConfig+0x12c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_Base_SetConfig+0xe8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <TIM_Base_SetConfig+0x130>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_Base_SetConfig+0xe8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <TIM_Base_SetConfig+0x134>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d103      	bne.n	8006ab4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691a      	ldr	r2, [r3, #16]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d105      	bne.n	8006ad2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	611a      	str	r2, [r3, #16]
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40000400 	.word	0x40000400
 8006ae8:	40000800 	.word	0x40000800
 8006aec:	40013400 	.word	0x40013400
 8006af0:	40014000 	.word	0x40014000
 8006af4:	40014400 	.word	0x40014400
 8006af8:	40014800 	.word	0x40014800

08006afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e065      	b.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2b      	ldr	r2, [pc, #172]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d108      	bne.n	8006b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d018      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8a:	d013      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a18      	ldr	r2, [pc, #96]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00e      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a17      	ldr	r2, [pc, #92]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d10c      	bne.n	8006bce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	40012c00 	.word	0x40012c00
 8006bf0:	40013400 	.word	0x40013400
 8006bf4:	40000400 	.word	0x40000400
 8006bf8:	40000800 	.word	0x40000800
 8006bfc:	40014000 	.word	0x40014000

08006c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e042      	b.n	8006c98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d106      	bne.n	8006c2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7fa feb5 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2224      	movs	r2, #36	; 0x24
 8006c2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 faf4 	bl	8007238 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f825 	bl	8006ca0 <UART_SetConfig>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e01b      	b.n	8006c98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fb73 	bl	800737c <UART_CheckIdleState>
 8006c96:	4603      	mov	r3, r0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca4:	b08c      	sub	sp, #48	; 0x30
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	4bab      	ldr	r3, [pc, #684]	; (8006f7c <UART_SetConfig+0x2dc>)
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4aa0      	ldr	r2, [pc, #640]	; (8006f80 <UART_SetConfig+0x2e0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d004      	beq.n	8006d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d20:	430b      	orrs	r3, r1
 8006d22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	f023 010f 	bic.w	r1, r3, #15
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a91      	ldr	r2, [pc, #580]	; (8006f84 <UART_SetConfig+0x2e4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d125      	bne.n	8006d90 <UART_SetConfig+0xf0>
 8006d44:	4b90      	ldr	r3, [pc, #576]	; (8006f88 <UART_SetConfig+0x2e8>)
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d81a      	bhi.n	8006d88 <UART_SetConfig+0xe8>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <UART_SetConfig+0xb8>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006d79 	.word	0x08006d79
 8006d60:	08006d71 	.word	0x08006d71
 8006d64:	08006d81 	.word	0x08006d81
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d6e:	e0d6      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006d70:	2302      	movs	r3, #2
 8006d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d76:	e0d2      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006d78:	2304      	movs	r3, #4
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d7e:	e0ce      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006d80:	2308      	movs	r3, #8
 8006d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d86:	e0ca      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006d88:	2310      	movs	r3, #16
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8e:	e0c6      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a7d      	ldr	r2, [pc, #500]	; (8006f8c <UART_SetConfig+0x2ec>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d138      	bne.n	8006e0c <UART_SetConfig+0x16c>
 8006d9a:	4b7b      	ldr	r3, [pc, #492]	; (8006f88 <UART_SetConfig+0x2e8>)
 8006d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da0:	f003 030c 	and.w	r3, r3, #12
 8006da4:	2b0c      	cmp	r3, #12
 8006da6:	d82d      	bhi.n	8006e04 <UART_SetConfig+0x164>
 8006da8:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x110>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006de5 	.word	0x08006de5
 8006db4:	08006e05 	.word	0x08006e05
 8006db8:	08006e05 	.word	0x08006e05
 8006dbc:	08006e05 	.word	0x08006e05
 8006dc0:	08006df5 	.word	0x08006df5
 8006dc4:	08006e05 	.word	0x08006e05
 8006dc8:	08006e05 	.word	0x08006e05
 8006dcc:	08006e05 	.word	0x08006e05
 8006dd0:	08006ded 	.word	0x08006ded
 8006dd4:	08006e05 	.word	0x08006e05
 8006dd8:	08006e05 	.word	0x08006e05
 8006ddc:	08006e05 	.word	0x08006e05
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	2300      	movs	r3, #0
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dea:	e098      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006dec:	2302      	movs	r3, #2
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e094      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006df4:	2304      	movs	r3, #4
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e090      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e08c      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e04:	2310      	movs	r3, #16
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0a:	e088      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a5f      	ldr	r2, [pc, #380]	; (8006f90 <UART_SetConfig+0x2f0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d125      	bne.n	8006e62 <UART_SetConfig+0x1c2>
 8006e16:	4b5c      	ldr	r3, [pc, #368]	; (8006f88 <UART_SetConfig+0x2e8>)
 8006e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e20:	2b30      	cmp	r3, #48	; 0x30
 8006e22:	d016      	beq.n	8006e52 <UART_SetConfig+0x1b2>
 8006e24:	2b30      	cmp	r3, #48	; 0x30
 8006e26:	d818      	bhi.n	8006e5a <UART_SetConfig+0x1ba>
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d00a      	beq.n	8006e42 <UART_SetConfig+0x1a2>
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d814      	bhi.n	8006e5a <UART_SetConfig+0x1ba>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <UART_SetConfig+0x19a>
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d008      	beq.n	8006e4a <UART_SetConfig+0x1aa>
 8006e38:	e00f      	b.n	8006e5a <UART_SetConfig+0x1ba>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e40:	e06d      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e42:	2302      	movs	r3, #2
 8006e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e48:	e069      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e4a:	2304      	movs	r3, #4
 8006e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e50:	e065      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e52:	2308      	movs	r3, #8
 8006e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e58:	e061      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e5a:	2310      	movs	r3, #16
 8006e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e60:	e05d      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a4b      	ldr	r2, [pc, #300]	; (8006f94 <UART_SetConfig+0x2f4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d125      	bne.n	8006eb8 <UART_SetConfig+0x218>
 8006e6c:	4b46      	ldr	r3, [pc, #280]	; (8006f88 <UART_SetConfig+0x2e8>)
 8006e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e76:	2bc0      	cmp	r3, #192	; 0xc0
 8006e78:	d016      	beq.n	8006ea8 <UART_SetConfig+0x208>
 8006e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e7c:	d818      	bhi.n	8006eb0 <UART_SetConfig+0x210>
 8006e7e:	2b80      	cmp	r3, #128	; 0x80
 8006e80:	d00a      	beq.n	8006e98 <UART_SetConfig+0x1f8>
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d814      	bhi.n	8006eb0 <UART_SetConfig+0x210>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <UART_SetConfig+0x1f0>
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d008      	beq.n	8006ea0 <UART_SetConfig+0x200>
 8006e8e:	e00f      	b.n	8006eb0 <UART_SetConfig+0x210>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e96:	e042      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e9e:	e03e      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea6:	e03a      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eae:	e036      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb6:	e032      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a30      	ldr	r2, [pc, #192]	; (8006f80 <UART_SetConfig+0x2e0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d12a      	bne.n	8006f18 <UART_SetConfig+0x278>
 8006ec2:	4b31      	ldr	r3, [pc, #196]	; (8006f88 <UART_SetConfig+0x2e8>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ecc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ed0:	d01a      	beq.n	8006f08 <UART_SetConfig+0x268>
 8006ed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ed6:	d81b      	bhi.n	8006f10 <UART_SetConfig+0x270>
 8006ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006edc:	d00c      	beq.n	8006ef8 <UART_SetConfig+0x258>
 8006ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee2:	d815      	bhi.n	8006f10 <UART_SetConfig+0x270>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <UART_SetConfig+0x250>
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eec:	d008      	beq.n	8006f00 <UART_SetConfig+0x260>
 8006eee:	e00f      	b.n	8006f10 <UART_SetConfig+0x270>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ef6:	e012      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006efe:	e00e      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f06:	e00a      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006f08:	2308      	movs	r3, #8
 8006f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0e:	e006      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f16:	e002      	b.n	8006f1e <UART_SetConfig+0x27e>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <UART_SetConfig+0x2e0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	f040 80a8 	bne.w	800707a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d834      	bhi.n	8006f9c <UART_SetConfig+0x2fc>
 8006f32:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <UART_SetConfig+0x298>)
 8006f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f38:	08006f5d 	.word	0x08006f5d
 8006f3c:	08006f9d 	.word	0x08006f9d
 8006f40:	08006f65 	.word	0x08006f65
 8006f44:	08006f9d 	.word	0x08006f9d
 8006f48:	08006f6b 	.word	0x08006f6b
 8006f4c:	08006f9d 	.word	0x08006f9d
 8006f50:	08006f9d 	.word	0x08006f9d
 8006f54:	08006f9d 	.word	0x08006f9d
 8006f58:	08006f73 	.word	0x08006f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f5c:	f7fe fdc4 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 8006f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f62:	e021      	b.n	8006fa8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <UART_SetConfig+0x2f8>)
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f68:	e01e      	b.n	8006fa8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fe fd4f 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 8006f6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f70:	e01a      	b.n	8006fa8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f78:	e016      	b.n	8006fa8 <UART_SetConfig+0x308>
 8006f7a:	bf00      	nop
 8006f7c:	cfff69f3 	.word	0xcfff69f3
 8006f80:	40008000 	.word	0x40008000
 8006f84:	40013800 	.word	0x40013800
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	40004400 	.word	0x40004400
 8006f90:	40004800 	.word	0x40004800
 8006f94:	40004c00 	.word	0x40004c00
 8006f98:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fa6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 812a 	beq.w	8007204 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	4a9e      	ldr	r2, [pc, #632]	; (8007230 <UART_SetConfig+0x590>)
 8006fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d305      	bcc.n	8006fe0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d903      	bls.n	8006fe8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fe6:	e10d      	b.n	8007204 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	2200      	movs	r2, #0
 8006fec:	60bb      	str	r3, [r7, #8]
 8006fee:	60fa      	str	r2, [r7, #12]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	4a8e      	ldr	r2, [pc, #568]	; (8007230 <UART_SetConfig+0x590>)
 8006ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	607a      	str	r2, [r7, #4]
 8007002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800700a:	f7f9 fcf3 	bl	80009f4 <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	020b      	lsls	r3, r1, #8
 8007020:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007024:	0202      	lsls	r2, r0, #8
 8007026:	6979      	ldr	r1, [r7, #20]
 8007028:	6849      	ldr	r1, [r1, #4]
 800702a:	0849      	lsrs	r1, r1, #1
 800702c:	2000      	movs	r0, #0
 800702e:	460c      	mov	r4, r1
 8007030:	4605      	mov	r5, r0
 8007032:	eb12 0804 	adds.w	r8, r2, r4
 8007036:	eb43 0905 	adc.w	r9, r3, r5
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	469a      	mov	sl, r3
 8007042:	4693      	mov	fp, r2
 8007044:	4652      	mov	r2, sl
 8007046:	465b      	mov	r3, fp
 8007048:	4640      	mov	r0, r8
 800704a:	4649      	mov	r1, r9
 800704c:	f7f9 fcd2 	bl	80009f4 <__aeabi_uldivmod>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4613      	mov	r3, r2
 8007056:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705e:	d308      	bcc.n	8007072 <UART_SetConfig+0x3d2>
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007066:	d204      	bcs.n	8007072 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6a3a      	ldr	r2, [r7, #32]
 800706e:	60da      	str	r2, [r3, #12]
 8007070:	e0c8      	b.n	8007204 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007078:	e0c4      	b.n	8007204 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007082:	d167      	bne.n	8007154 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007084:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007088:	2b08      	cmp	r3, #8
 800708a:	d828      	bhi.n	80070de <UART_SetConfig+0x43e>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0x3f4>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070cf 	.word	0x080070cf
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070df 	.word	0x080070df
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fe fd16 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 80070bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070be:	e014      	b.n	80070ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fe fd28 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 80070c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070c6:	e010      	b.n	80070ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c8:	4b5a      	ldr	r3, [pc, #360]	; (8007234 <UART_SetConfig+0x594>)
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070cc:	e00d      	b.n	80070ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ce:	f7fe fc9d 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80070d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070d4:	e009      	b.n	80070ea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 8089 	beq.w	8007204 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	4a4e      	ldr	r2, [pc, #312]	; (8007230 <UART_SetConfig+0x590>)
 80070f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	fbb3 f3f2 	udiv	r3, r3, r2
 8007104:	005a      	lsls	r2, r3, #1
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	085b      	lsrs	r3, r3, #1
 800710c:	441a      	add	r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2b0f      	cmp	r3, #15
 800711c:	d916      	bls.n	800714c <UART_SetConfig+0x4ac>
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007124:	d212      	bcs.n	800714c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	b29b      	uxth	r3, r3
 800712a:	f023 030f 	bic.w	r3, r3, #15
 800712e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	b29b      	uxth	r3, r3
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	b29a      	uxth	r2, r3
 800713c:	8bfb      	ldrh	r3, [r7, #30]
 800713e:	4313      	orrs	r3, r2
 8007140:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	8bfa      	ldrh	r2, [r7, #30]
 8007148:	60da      	str	r2, [r3, #12]
 800714a:	e05b      	b.n	8007204 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007152:	e057      	b.n	8007204 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007154:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007158:	2b08      	cmp	r3, #8
 800715a:	d828      	bhi.n	80071ae <UART_SetConfig+0x50e>
 800715c:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <UART_SetConfig+0x4c4>)
 800715e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007162:	bf00      	nop
 8007164:	08007189 	.word	0x08007189
 8007168:	08007191 	.word	0x08007191
 800716c:	08007199 	.word	0x08007199
 8007170:	080071af 	.word	0x080071af
 8007174:	0800719f 	.word	0x0800719f
 8007178:	080071af 	.word	0x080071af
 800717c:	080071af 	.word	0x080071af
 8007180:	080071af 	.word	0x080071af
 8007184:	080071a7 	.word	0x080071a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007188:	f7fe fcae 	bl	8005ae8 <HAL_RCC_GetPCLK1Freq>
 800718c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800718e:	e014      	b.n	80071ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007190:	f7fe fcc0 	bl	8005b14 <HAL_RCC_GetPCLK2Freq>
 8007194:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007196:	e010      	b.n	80071ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007198:	4b26      	ldr	r3, [pc, #152]	; (8007234 <UART_SetConfig+0x594>)
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800719c:	e00d      	b.n	80071ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800719e:	f7fe fc35 	bl	8005a0c <HAL_RCC_GetSysClockFreq>
 80071a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071a4:	e009      	b.n	80071ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071ac:	e005      	b.n	80071ba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071b8:	bf00      	nop
    }

    if (pclk != 0U)
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d021      	beq.n	8007204 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	4a1a      	ldr	r2, [pc, #104]	; (8007230 <UART_SetConfig+0x590>)
 80071c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ca:	461a      	mov	r2, r3
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	441a      	add	r2, r3
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	2b0f      	cmp	r3, #15
 80071e8:	d909      	bls.n	80071fe <UART_SetConfig+0x55e>
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f0:	d205      	bcs.n	80071fe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60da      	str	r2, [r3, #12]
 80071fc:	e002      	b.n	8007204 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2201      	movs	r2, #1
 8007208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2201      	movs	r2, #1
 8007210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007220:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007224:	4618      	mov	r0, r3
 8007226:	3730      	adds	r7, #48	; 0x30
 8007228:	46bd      	mov	sp, r7
 800722a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800722e:	bf00      	nop
 8007230:	08007aa0 	.word	0x08007aa0
 8007234:	00f42400 	.word	0x00f42400

08007238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01a      	beq.n	800734e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007336:	d10a      	bne.n	800734e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	605a      	str	r2, [r3, #4]
  }
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b098      	sub	sp, #96	; 0x60
 8007380:	af02      	add	r7, sp, #8
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800738c:	f7fa fc8e 	bl	8001cac <HAL_GetTick>
 8007390:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0308 	and.w	r3, r3, #8
 800739c:	2b08      	cmp	r3, #8
 800739e:	d12f      	bne.n	8007400 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a8:	2200      	movs	r2, #0
 80073aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f88e 	bl	80074d0 <UART_WaitOnFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d022      	beq.n	8007400 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ce:	653b      	str	r3, [r7, #80]	; 0x50
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073d8:	647b      	str	r3, [r7, #68]	; 0x44
 80073da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e6      	bne.n	80073ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e063      	b.n	80074c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	2b04      	cmp	r3, #4
 800740c:	d149      	bne.n	80074a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800740e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007416:	2200      	movs	r2, #0
 8007418:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f857 	bl	80074d0 <UART_WaitOnFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d03c      	beq.n	80074a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	623b      	str	r3, [r7, #32]
   return(result);
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800743c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007446:	633b      	str	r3, [r7, #48]	; 0x30
 8007448:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	60fb      	str	r3, [r7, #12]
   return(result);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f023 0301 	bic.w	r3, r3, #1
 8007470:	64bb      	str	r3, [r7, #72]	; 0x48
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800747a:	61fa      	str	r2, [r7, #28]
 800747c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	69b9      	ldr	r1, [r7, #24]
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	617b      	str	r3, [r7, #20]
   return(result);
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e012      	b.n	80074c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3758      	adds	r7, #88	; 0x58
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	4613      	mov	r3, r2
 80074de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e0:	e04f      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d04b      	beq.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ea:	f7fa fbdf 	bl	8001cac <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d302      	bcc.n	8007500 <UART_WaitOnFlagUntilTimeout+0x30>
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e04e      	b.n	80075a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0304 	and.w	r3, r3, #4
 800750e:	2b00      	cmp	r3, #0
 8007510:	d037      	beq.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	d034      	beq.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b40      	cmp	r3, #64	; 0x40
 800751c:	d031      	beq.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b08      	cmp	r3, #8
 800752a:	d110      	bne.n	800754e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2208      	movs	r2, #8
 8007532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f838 	bl	80075aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2208      	movs	r2, #8
 800753e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e029      	b.n	80075a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755c:	d111      	bne.n	8007582 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f81e 	bl	80075aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2220      	movs	r2, #32
 8007572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e00f      	b.n	80075a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	4013      	ands	r3, r2
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	429a      	cmp	r2, r3
 8007590:	bf0c      	ite	eq
 8007592:	2301      	moveq	r3, #1
 8007594:	2300      	movne	r3, #0
 8007596:	b2db      	uxtb	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	429a      	cmp	r2, r3
 800759e:	d0a0      	beq.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b095      	sub	sp, #84	; 0x54
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d0:	643b      	str	r3, [r7, #64]	; 0x40
 80075d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e6      	bne.n	80075b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3308      	adds	r3, #8
 80075ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800760e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e3      	bne.n	80075e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d118      	bne.n	8007656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	60bb      	str	r3, [r7, #8]
   return(result);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f023 0310 	bic.w	r3, r3, #16
 8007638:	647b      	str	r3, [r7, #68]	; 0x44
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007642:	61bb      	str	r3, [r7, #24]
 8007644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	6979      	ldr	r1, [r7, #20]
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	613b      	str	r3, [r7, #16]
   return(result);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e6      	bne.n	8007624 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	675a      	str	r2, [r3, #116]	; 0x74
}
 800766a:	bf00      	nop
 800766c:	3754      	adds	r7, #84	; 0x54
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_UARTEx_DisableFifoMode+0x16>
 8007688:	2302      	movs	r3, #2
 800768a:	e027      	b.n	80076dc <HAL_UARTEx_DisableFifoMode+0x66>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2224      	movs	r2, #36	; 0x24
 8007698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0201 	bic.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e02d      	b.n	800775c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2224      	movs	r2, #36	; 0x24
 800770c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f84f 	bl	80077e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007778:	2302      	movs	r3, #2
 800777a:	e02d      	b.n	80077d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2224      	movs	r2, #36	; 0x24
 8007788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0201 	bic.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f811 	bl	80077e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d108      	bne.n	8007802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007800:	e031      	b.n	8007866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007802:	2308      	movs	r3, #8
 8007804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007806:	2308      	movs	r3, #8
 8007808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	0e5b      	lsrs	r3, r3, #25
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	0f5b      	lsrs	r3, r3, #29
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	7b3a      	ldrb	r2, [r7, #12]
 800782e:	4911      	ldr	r1, [pc, #68]	; (8007874 <UARTEx_SetNbDataToProcess+0x94>)
 8007830:	5c8a      	ldrb	r2, [r1, r2]
 8007832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007836:	7b3a      	ldrb	r2, [r7, #12]
 8007838:	490f      	ldr	r1, [pc, #60]	; (8007878 <UARTEx_SetNbDataToProcess+0x98>)
 800783a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007840:	b29a      	uxth	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	7b7a      	ldrb	r2, [r7, #13]
 800784c:	4909      	ldr	r1, [pc, #36]	; (8007874 <UARTEx_SetNbDataToProcess+0x94>)
 800784e:	5c8a      	ldrb	r2, [r1, r2]
 8007850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007854:	7b7a      	ldrb	r2, [r7, #13]
 8007856:	4908      	ldr	r1, [pc, #32]	; (8007878 <UARTEx_SetNbDataToProcess+0x98>)
 8007858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800785a:	fb93 f3f2 	sdiv	r3, r3, r2
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007866:	bf00      	nop
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	08007ab8 	.word	0x08007ab8
 8007878:	08007ac0 	.word	0x08007ac0

0800787c <malloc>:
 800787c:	4b02      	ldr	r3, [pc, #8]	; (8007888 <malloc+0xc>)
 800787e:	4601      	mov	r1, r0
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	f000 b823 	b.w	80078cc <_malloc_r>
 8007886:	bf00      	nop
 8007888:	2000005c 	.word	0x2000005c

0800788c <sbrk_aligned>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4e0e      	ldr	r6, [pc, #56]	; (80078c8 <sbrk_aligned+0x3c>)
 8007890:	460c      	mov	r4, r1
 8007892:	6831      	ldr	r1, [r6, #0]
 8007894:	4605      	mov	r5, r0
 8007896:	b911      	cbnz	r1, 800789e <sbrk_aligned+0x12>
 8007898:	f000 f8ac 	bl	80079f4 <_sbrk_r>
 800789c:	6030      	str	r0, [r6, #0]
 800789e:	4621      	mov	r1, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 f8a7 	bl	80079f4 <_sbrk_r>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	d00a      	beq.n	80078c0 <sbrk_aligned+0x34>
 80078aa:	1cc4      	adds	r4, r0, #3
 80078ac:	f024 0403 	bic.w	r4, r4, #3
 80078b0:	42a0      	cmp	r0, r4
 80078b2:	d007      	beq.n	80078c4 <sbrk_aligned+0x38>
 80078b4:	1a21      	subs	r1, r4, r0
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 f89c 	bl	80079f4 <_sbrk_r>
 80078bc:	3001      	adds	r0, #1
 80078be:	d101      	bne.n	80078c4 <sbrk_aligned+0x38>
 80078c0:	f04f 34ff 	mov.w	r4, #4294967295
 80078c4:	4620      	mov	r0, r4
 80078c6:	bd70      	pop	{r4, r5, r6, pc}
 80078c8:	20000584 	.word	0x20000584

080078cc <_malloc_r>:
 80078cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d0:	1ccd      	adds	r5, r1, #3
 80078d2:	f025 0503 	bic.w	r5, r5, #3
 80078d6:	3508      	adds	r5, #8
 80078d8:	2d0c      	cmp	r5, #12
 80078da:	bf38      	it	cc
 80078dc:	250c      	movcc	r5, #12
 80078de:	2d00      	cmp	r5, #0
 80078e0:	4607      	mov	r7, r0
 80078e2:	db01      	blt.n	80078e8 <_malloc_r+0x1c>
 80078e4:	42a9      	cmp	r1, r5
 80078e6:	d905      	bls.n	80078f4 <_malloc_r+0x28>
 80078e8:	230c      	movs	r3, #12
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	2600      	movs	r6, #0
 80078ee:	4630      	mov	r0, r6
 80078f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079c8 <_malloc_r+0xfc>
 80078f8:	f000 f868 	bl	80079cc <__malloc_lock>
 80078fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007900:	461c      	mov	r4, r3
 8007902:	bb5c      	cbnz	r4, 800795c <_malloc_r+0x90>
 8007904:	4629      	mov	r1, r5
 8007906:	4638      	mov	r0, r7
 8007908:	f7ff ffc0 	bl	800788c <sbrk_aligned>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	4604      	mov	r4, r0
 8007910:	d155      	bne.n	80079be <_malloc_r+0xf2>
 8007912:	f8d8 4000 	ldr.w	r4, [r8]
 8007916:	4626      	mov	r6, r4
 8007918:	2e00      	cmp	r6, #0
 800791a:	d145      	bne.n	80079a8 <_malloc_r+0xdc>
 800791c:	2c00      	cmp	r4, #0
 800791e:	d048      	beq.n	80079b2 <_malloc_r+0xe6>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	4631      	mov	r1, r6
 8007924:	4638      	mov	r0, r7
 8007926:	eb04 0903 	add.w	r9, r4, r3
 800792a:	f000 f863 	bl	80079f4 <_sbrk_r>
 800792e:	4581      	cmp	r9, r0
 8007930:	d13f      	bne.n	80079b2 <_malloc_r+0xe6>
 8007932:	6821      	ldr	r1, [r4, #0]
 8007934:	1a6d      	subs	r5, r5, r1
 8007936:	4629      	mov	r1, r5
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff ffa7 	bl	800788c <sbrk_aligned>
 800793e:	3001      	adds	r0, #1
 8007940:	d037      	beq.n	80079b2 <_malloc_r+0xe6>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	442b      	add	r3, r5
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	f8d8 3000 	ldr.w	r3, [r8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d038      	beq.n	80079c2 <_malloc_r+0xf6>
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	42a2      	cmp	r2, r4
 8007954:	d12b      	bne.n	80079ae <_malloc_r+0xe2>
 8007956:	2200      	movs	r2, #0
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	e00f      	b.n	800797c <_malloc_r+0xb0>
 800795c:	6822      	ldr	r2, [r4, #0]
 800795e:	1b52      	subs	r2, r2, r5
 8007960:	d41f      	bmi.n	80079a2 <_malloc_r+0xd6>
 8007962:	2a0b      	cmp	r2, #11
 8007964:	d917      	bls.n	8007996 <_malloc_r+0xca>
 8007966:	1961      	adds	r1, r4, r5
 8007968:	42a3      	cmp	r3, r4
 800796a:	6025      	str	r5, [r4, #0]
 800796c:	bf18      	it	ne
 800796e:	6059      	strne	r1, [r3, #4]
 8007970:	6863      	ldr	r3, [r4, #4]
 8007972:	bf08      	it	eq
 8007974:	f8c8 1000 	streq.w	r1, [r8]
 8007978:	5162      	str	r2, [r4, r5]
 800797a:	604b      	str	r3, [r1, #4]
 800797c:	4638      	mov	r0, r7
 800797e:	f104 060b 	add.w	r6, r4, #11
 8007982:	f000 f829 	bl	80079d8 <__malloc_unlock>
 8007986:	f026 0607 	bic.w	r6, r6, #7
 800798a:	1d23      	adds	r3, r4, #4
 800798c:	1af2      	subs	r2, r6, r3
 800798e:	d0ae      	beq.n	80078ee <_malloc_r+0x22>
 8007990:	1b9b      	subs	r3, r3, r6
 8007992:	50a3      	str	r3, [r4, r2]
 8007994:	e7ab      	b.n	80078ee <_malloc_r+0x22>
 8007996:	42a3      	cmp	r3, r4
 8007998:	6862      	ldr	r2, [r4, #4]
 800799a:	d1dd      	bne.n	8007958 <_malloc_r+0x8c>
 800799c:	f8c8 2000 	str.w	r2, [r8]
 80079a0:	e7ec      	b.n	800797c <_malloc_r+0xb0>
 80079a2:	4623      	mov	r3, r4
 80079a4:	6864      	ldr	r4, [r4, #4]
 80079a6:	e7ac      	b.n	8007902 <_malloc_r+0x36>
 80079a8:	4634      	mov	r4, r6
 80079aa:	6876      	ldr	r6, [r6, #4]
 80079ac:	e7b4      	b.n	8007918 <_malloc_r+0x4c>
 80079ae:	4613      	mov	r3, r2
 80079b0:	e7cc      	b.n	800794c <_malloc_r+0x80>
 80079b2:	230c      	movs	r3, #12
 80079b4:	603b      	str	r3, [r7, #0]
 80079b6:	4638      	mov	r0, r7
 80079b8:	f000 f80e 	bl	80079d8 <__malloc_unlock>
 80079bc:	e797      	b.n	80078ee <_malloc_r+0x22>
 80079be:	6025      	str	r5, [r4, #0]
 80079c0:	e7dc      	b.n	800797c <_malloc_r+0xb0>
 80079c2:	605b      	str	r3, [r3, #4]
 80079c4:	deff      	udf	#255	; 0xff
 80079c6:	bf00      	nop
 80079c8:	20000580 	.word	0x20000580

080079cc <__malloc_lock>:
 80079cc:	4801      	ldr	r0, [pc, #4]	; (80079d4 <__malloc_lock+0x8>)
 80079ce:	f000 b84b 	b.w	8007a68 <__retarget_lock_acquire_recursive>
 80079d2:	bf00      	nop
 80079d4:	200006c4 	.word	0x200006c4

080079d8 <__malloc_unlock>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__malloc_unlock+0x8>)
 80079da:	f000 b846 	b.w	8007a6a <__retarget_lock_release_recursive>
 80079de:	bf00      	nop
 80079e0:	200006c4 	.word	0x200006c4

080079e4 <memset>:
 80079e4:	4402      	add	r2, r0
 80079e6:	4603      	mov	r3, r0
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d100      	bne.n	80079ee <memset+0xa>
 80079ec:	4770      	bx	lr
 80079ee:	f803 1b01 	strb.w	r1, [r3], #1
 80079f2:	e7f9      	b.n	80079e8 <memset+0x4>

080079f4 <_sbrk_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d06      	ldr	r5, [pc, #24]	; (8007a10 <_sbrk_r+0x1c>)
 80079f8:	2300      	movs	r3, #0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4608      	mov	r0, r1
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	f7fa f87e 	bl	8001b00 <_sbrk>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d102      	bne.n	8007a0e <_sbrk_r+0x1a>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	b103      	cbz	r3, 8007a0e <_sbrk_r+0x1a>
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	bd38      	pop	{r3, r4, r5, pc}
 8007a10:	200006c0 	.word	0x200006c0

08007a14 <__errno>:
 8007a14:	4b01      	ldr	r3, [pc, #4]	; (8007a1c <__errno+0x8>)
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	2000005c 	.word	0x2000005c

08007a20 <__libc_init_array>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	4d0d      	ldr	r5, [pc, #52]	; (8007a58 <__libc_init_array+0x38>)
 8007a24:	4c0d      	ldr	r4, [pc, #52]	; (8007a5c <__libc_init_array+0x3c>)
 8007a26:	1b64      	subs	r4, r4, r5
 8007a28:	10a4      	asrs	r4, r4, #2
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	42a6      	cmp	r6, r4
 8007a2e:	d109      	bne.n	8007a44 <__libc_init_array+0x24>
 8007a30:	4d0b      	ldr	r5, [pc, #44]	; (8007a60 <__libc_init_array+0x40>)
 8007a32:	4c0c      	ldr	r4, [pc, #48]	; (8007a64 <__libc_init_array+0x44>)
 8007a34:	f000 f81a 	bl	8007a6c <_init>
 8007a38:	1b64      	subs	r4, r4, r5
 8007a3a:	10a4      	asrs	r4, r4, #2
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	42a6      	cmp	r6, r4
 8007a40:	d105      	bne.n	8007a4e <__libc_init_array+0x2e>
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a48:	4798      	blx	r3
 8007a4a:	3601      	adds	r6, #1
 8007a4c:	e7ee      	b.n	8007a2c <__libc_init_array+0xc>
 8007a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a52:	4798      	blx	r3
 8007a54:	3601      	adds	r6, #1
 8007a56:	e7f2      	b.n	8007a3e <__libc_init_array+0x1e>
 8007a58:	08007ad0 	.word	0x08007ad0
 8007a5c:	08007ad0 	.word	0x08007ad0
 8007a60:	08007ad0 	.word	0x08007ad0
 8007a64:	08007ad4 	.word	0x08007ad4

08007a68 <__retarget_lock_acquire_recursive>:
 8007a68:	4770      	bx	lr

08007a6a <__retarget_lock_release_recursive>:
 8007a6a:	4770      	bx	lr

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
