
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006d78  08006d78  00016d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f98  08006f98  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa0  08006fa0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa4  08006fa4  00016fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000005c  08007004  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08007004  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184de  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8b  00000000  00000000  000385ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103d  00000000  00000000  0003c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fee9  00000000  00000000  0003d855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001842f  00000000  00000000  0005d73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de640  00000000  00000000  00075b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000615c  00000000  00000000  001541b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015a30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006d60 	.word	0x08006d60

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08006d60 	.word	0x08006d60

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b970 	b.w	8000eec <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9e08      	ldr	r6, [sp, #32]
 8000c2a:	460d      	mov	r5, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	460f      	mov	r7, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4694      	mov	ip, r2
 8000c38:	d965      	bls.n	8000d06 <__udivmoddi4+0xe2>
 8000c3a:	fab2 f382 	clz	r3, r2
 8000c3e:	b143      	cbz	r3, 8000c52 <__udivmoddi4+0x2e>
 8000c40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c44:	f1c3 0220 	rsb	r2, r3, #32
 8000c48:	409f      	lsls	r7, r3
 8000c4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4e:	4317      	orrs	r7, r2
 8000c50:	409c      	lsls	r4, r3
 8000c52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c56:	fa1f f58c 	uxth.w	r5, ip
 8000c5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c5e:	0c22      	lsrs	r2, r4, #16
 8000c60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c68:	fb01 f005 	mul.w	r0, r1, r5
 8000c6c:	4290      	cmp	r0, r2
 8000c6e:	d90a      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c70:	eb1c 0202 	adds.w	r2, ip, r2
 8000c74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c78:	f080 811c 	bcs.w	8000eb4 <__udivmoddi4+0x290>
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	f240 8119 	bls.w	8000eb4 <__udivmoddi4+0x290>
 8000c82:	3902      	subs	r1, #2
 8000c84:	4462      	add	r2, ip
 8000c86:	1a12      	subs	r2, r2, r0
 8000c88:	b2a4      	uxth	r4, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c96:	fb00 f505 	mul.w	r5, r0, r5
 8000c9a:	42a5      	cmp	r5, r4
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x90>
 8000c9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca6:	f080 8107 	bcs.w	8000eb8 <__udivmoddi4+0x294>
 8000caa:	42a5      	cmp	r5, r4
 8000cac:	f240 8104 	bls.w	8000eb8 <__udivmoddi4+0x294>
 8000cb0:	4464      	add	r4, ip
 8000cb2:	3802      	subs	r0, #2
 8000cb4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb8:	1b64      	subs	r4, r4, r5
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11e      	cbz	r6, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40dc      	lsrs	r4, r3
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0xbc>
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f000 80ed 	beq.w	8000eae <__udivmoddi4+0x28a>
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	fab3 f183 	clz	r1, r3
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	d149      	bne.n	8000d7c <__udivmoddi4+0x158>
 8000ce8:	42ab      	cmp	r3, r5
 8000cea:	d302      	bcc.n	8000cf2 <__udivmoddi4+0xce>
 8000cec:	4282      	cmp	r2, r0
 8000cee:	f200 80f8 	bhi.w	8000ee2 <__udivmoddi4+0x2be>
 8000cf2:	1a84      	subs	r4, r0, r2
 8000cf4:	eb65 0203 	sbc.w	r2, r5, r3
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d0e2      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	e9c6 4700 	strd	r4, r7, [r6]
 8000d04:	e7df      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d06:	b902      	cbnz	r2, 8000d0a <__udivmoddi4+0xe6>
 8000d08:	deff      	udf	#255	; 0xff
 8000d0a:	fab2 f382 	clz	r3, r2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8090 	bne.w	8000e34 <__udivmoddi4+0x210>
 8000d14:	1a8a      	subs	r2, r1, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d24:	fb07 2015 	mls	r0, r7, r5, r2
 8000d28:	0c22      	lsrs	r2, r4, #16
 8000d2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d2e:	fb0e f005 	mul.w	r0, lr, r5
 8000d32:	4290      	cmp	r0, r2
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x124>
 8000d36:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x122>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2b8>
 8000d46:	4645      	mov	r5, r8
 8000d48:	1a12      	subs	r2, r2, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d50:	fb07 2210 	mls	r2, r7, r0, r2
 8000d54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x14e>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x14c>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2c2>
 8000d70:	4610      	mov	r0, r2
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7a:	e79f      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d7c:	f1c1 0720 	rsb	r7, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d92:	40fd      	lsrs	r5, r7
 8000d94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d98:	4323      	orrs	r3, r4
 8000d9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	fb09 5518 	mls	r5, r9, r8, r5
 8000da6:	0c1c      	lsrs	r4, r3, #16
 8000da8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dac:	fb08 f50e 	mul.w	r5, r8, lr
 8000db0:	42a5      	cmp	r5, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	fa00 f001 	lsl.w	r0, r0, r1
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b0>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2b4>
 8000dc8:	42a5      	cmp	r5, r4
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2b4>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4464      	add	r4, ip
 8000dd4:	1b64      	subs	r4, r4, r5
 8000dd6:	b29d      	uxth	r5, r3
 8000dd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ddc:	fb09 4413 	mls	r4, r9, r3, r4
 8000de0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1da>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2ac>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2ac>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e02:	fba3 9502 	umull	r9, r5, r3, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46ae      	mov	lr, r5
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x29c>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x298>
 8000e14:	b156      	cbz	r6, 8000e2c <__udivmoddi4+0x208>
 8000e16:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e22:	40ca      	lsrs	r2, r1
 8000e24:	40cc      	lsrs	r4, r1
 8000e26:	4317      	orrs	r7, r2
 8000e28:	e9c6 7400 	strd	r7, r4, [r6]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	f1c3 0120 	rsb	r1, r3, #32
 8000e38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000e40:	fa25 f101 	lsr.w	r1, r5, r1
 8000e44:	409d      	lsls	r5, r3
 8000e46:	432a      	orrs	r2, r5
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e54:	fb07 1510 	mls	r5, r7, r0, r1
 8000e58:	0c11      	lsrs	r1, r2, #16
 8000e5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e62:	428d      	cmp	r5, r1
 8000e64:	fa04 f403 	lsl.w	r4, r4, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x258>
 8000e6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b0>
 8000e74:	428d      	cmp	r5, r1
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b0>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4461      	add	r1, ip
 8000e7c:	1b49      	subs	r1, r1, r5
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e84:	fb07 1115 	mls	r1, r7, r5, r1
 8000e88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e90:	4291      	cmp	r1, r2
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x282>
 8000e94:	eb1c 0202 	adds.w	r2, ip, r2
 8000e98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2a8>
 8000e9e:	4291      	cmp	r1, r2
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2a8>
 8000ea2:	3d02      	subs	r5, #2
 8000ea4:	4462      	add	r2, ip
 8000ea6:	1a52      	subs	r2, r2, r1
 8000ea8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0xfc>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000eb4:	4639      	mov	r1, r7
 8000eb6:	e6e6      	b.n	8000c86 <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e6fb      	b.n	8000cb4 <__udivmoddi4+0x90>
 8000ebc:	4548      	cmp	r0, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f0>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f0>
 8000ecc:	4645      	mov	r5, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000ed0:	462b      	mov	r3, r5
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1da>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x258>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b0>
 8000edc:	3d02      	subs	r5, #2
 8000ede:	4462      	add	r2, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x124>
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	e70a      	b.n	8000cfc <__udivmoddi4+0xd8>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x14e>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <InitDSP>:
const int samplingRate = 88E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 fdf7 	bl	8005aec <malloc>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <InitDSP+0x2c>)
 8000f04:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 fdee 	bl	8005aec <malloc>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b02      	ldr	r3, [pc, #8]	; (8000f20 <InitDSP+0x30>)
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000078 	.word	0x20000078
 8000f20:	2000007c 	.word	0x2000007c

08000f24 <TimerCallback>:

	previousSamples[0] = sample;

}

void TimerCallback(ADC_HandleTypeDef* hadc1, UART_HandleTypeDef* hlpuart1, DAC_HandleTypeDef* hdac1){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]

	HAL_ADC_Start(hadc1);
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f001 f8c1 	bl	80020b8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 8000f36:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f001 f978 	bl	8002230 <HAL_ADC_PollForConversion>
	SampleType audioSample = HAL_ADC_GetValue(hadc1);
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f001 fa4d 	bl	80023e0 <HAL_ADC_GetValue>
 8000f46:	4603      	mov	r3, r0
 8000f48:	82fb      	strh	r3, [r7, #22]
	//sprintf(msg, "%d\r\n", (int)audioSample);
	//HAL_UART_Transmit(hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	//AppendSample(audioSample);

	DAC1->DHR12R1 = audioSample;
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <TimerCallback+0x40>)
 8000f4c:	8afb      	ldrh	r3, [r7, #22]
 8000f4e:	6093      	str	r3, [r2, #8]

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f002 fc80 	bl	800385c <HAL_GPIO_TogglePin>

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	50000800 	.word	0x50000800

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fc82 	bl	8001876 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f897 	bl	80010a4 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f76:	b662      	cpsie	i
}
 8000f78:	bf00      	nop

  /* USER CODE BEGIN SysInit */

  __enable_irq();
  hdac1.State = HAL_DAC_STATE_RESET;
 8000f7a:	4b43      	ldr	r3, [pc, #268]	; (8001088 <main+0x120>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	711a      	strb	r2, [r3, #4]


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 fa1c 	bl	80013bc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f84:	f000 f98c 	bl	80012a0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000f88:	f000 f8d8 	bl	800113c <MX_ADC1_Init>
  MX_TIM16_Init();
 8000f8c:	f000 f9d4 	bl	8001338 <MX_TIM16_Init>
  MX_DAC1_Init();
 8000f90:	f000 f94c 	bl	800122c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 8000f94:	483d      	ldr	r0, [pc, #244]	; (800108c <main+0x124>)
 8000f96:	f003 fca5 	bl	80048e4 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	483a      	ldr	r0, [pc, #232]	; (8001088 <main+0x120>)
 8000f9e:	f002 f89f 	bl	80030e0 <HAL_DAC_Start>

  InitDSP();
 8000fa2:	f7ff ffa5 	bl	8000ef0 <InitDSP>

	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  //HAL_GPIO_TogglePin(KnipperLedje_GPIO_Port, KnipperLedje_Pin);


      uint16_t timerValue = __HAL_TIM_GET_COUNTER(&htim16);
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <main+0x124>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	81fb      	strh	r3, [r7, #14]

      float sinVal = (sin( (float)timerValue/3863*2*M_PI)+1)/2 *3.3;
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb8:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001090 <main+0x128>
 8000fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fc4:	ee17 0a90 	vmov	r0, s15
 8000fc8:	f7ff fa8a 	bl	80004e0 <__aeabi_f2d>
 8000fcc:	a32a      	add	r3, pc, #168	; (adr r3, 8001078 <main+0x110>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fadd 	bl	8000590 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	ec43 2b17 	vmov	d7, r2, r3
 8000fde:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe2:	eef0 0a67 	vmov.f32	s1, s15
 8000fe6:	f004 fe7b 	bl	8005ce0 <sin>
 8000fea:	ec51 0b10 	vmov	r0, r1, d0
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <main+0x12c>)
 8000ff4:	f7ff f916 	bl	8000224 <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001008:	f7ff fbec 	bl	80007e4 <__aeabi_ddiv>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	a31a      	add	r3, pc, #104	; (adr r3, 8001080 <main+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fab9 	bl	8000590 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fd95 	bl	8000b54 <__aeabi_d2f>
 800102a:	4603      	mov	r3, r0
 800102c:	60bb      	str	r3, [r7, #8]
      uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;
 800102e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001032:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001098 <main+0x130>
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103e:	ee17 0a90 	vmov	r0, s15
 8001042:	f7ff fa2b 	bl	800049c <__aeabi_ui2d>
 8001046:	a30e      	add	r3, pc, #56	; (adr r3, 8001080 <main+0x118>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fbca 	bl	80007e4 <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f7ff fd5c 	bl	8000b14 <__aeabi_d2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	607b      	str	r3, [r7, #4]

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      //DAC1->DHR12R1 = dacOutput;


      if(timerValue == 0){
 8001060:	89fb      	ldrh	r3, [r7, #14]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d19f      	bne.n	8000fa6 <main+0x3e>

    	  TimerCallback(&hadc1, &hlpuart1, &hdac1);
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <main+0x120>)
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <main+0x134>)
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <main+0x138>)
 800106c:	f7ff ff5a 	bl	8000f24 <TimerCallback>
  {
 8001070:	e799      	b.n	8000fa6 <main+0x3e>
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	54442d18 	.word	0x54442d18
 800107c:	400921fb 	.word	0x400921fb
 8001080:	66666666 	.word	0x66666666
 8001084:	400a6666 	.word	0x400a6666
 8001088:	200000ec 	.word	0x200000ec
 800108c:	20000194 	.word	0x20000194
 8001090:	45717000 	.word	0x45717000
 8001094:	3ff00000 	.word	0x3ff00000
 8001098:	45800000 	.word	0x45800000
 800109c:	20000100 	.word	0x20000100
 80010a0:	20000080 	.word	0x20000080

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b094      	sub	sp, #80	; 0x50
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 0318 	add.w	r3, r7, #24
 80010ae:	2238      	movs	r2, #56	; 0x38
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 fdce 	bl	8005c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f002 fbe2 	bl	8003890 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d6:	2340      	movs	r3, #64	; 0x40
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010e6:	2355      	movs	r3, #85	; 0x55
 80010e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010f2:	2302      	movs	r3, #2
 80010f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fc7c 	bl	80039f8 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001106:	f000 f9d7 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2303      	movs	r3, #3
 8001110:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2104      	movs	r1, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f002 ff7a 	bl	800401c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800112e:	f000 f9c3 	bl	80014b8 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fd7d 	bl	8005c54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <MX_ADC1_Init+0xe8>)
 800115c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <MX_ADC1_Init+0xe8>)
 8001164:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001168:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <MX_ADC1_Init+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_ADC1_Init+0xe8>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <MX_ADC1_Init+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <MX_ADC1_Init+0xe8>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b28      	ldr	r3, [pc, #160]	; (8001224 <MX_ADC1_Init+0xe8>)
 8001184:	2204      	movs	r2, #4
 8001186:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <MX_ADC1_Init+0xe8>)
 800118a:	2200      	movs	r2, #0
 800118c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_ADC1_Init+0xe8>)
 8001190:	2200      	movs	r2, #0
 8001192:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_ADC1_Init+0xe8>)
 8001196:	2201      	movs	r2, #1
 8001198:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <MX_ADC1_Init+0xe8>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_ADC1_Init+0xe8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_ADC1_Init+0xe8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_ADC1_Init+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_ADC1_Init+0xe8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_ADC1_Init+0xe8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <MX_ADC1_Init+0xe8>)
 80011c6:	f000 fdf3 	bl	8001db0 <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80011d0:	f000 f972 	bl	80014b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <MX_ADC1_Init+0xe8>)
 80011e0:	f001 fda8 	bl	8002d34 <HAL_ADCEx_MultiModeConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011ea:	f000 f965 	bl	80014b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_ADC1_Init+0xec>)
 80011f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f2:	2306      	movs	r3, #6
 80011f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011fa:	237f      	movs	r3, #127	; 0x7f
 80011fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011fe:	2304      	movs	r3, #4
 8001200:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_ADC1_Init+0xe8>)
 800120c:	f001 f8f6 	bl	80023fc <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001216:	f000 f94f 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000080 	.word	0x20000080
 8001228:	04300002 	.word	0x04300002

0800122c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2230      	movs	r2, #48	; 0x30
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fd0b 	bl	8005c54 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_DAC1_Init+0x6c>)
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <MX_DAC1_Init+0x70>)
 8001242:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001244:	4814      	ldr	r0, [pc, #80]	; (8001298 <MX_DAC1_Init+0x6c>)
 8001246:	f001 ff28 	bl	800309a <HAL_DAC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001250:	f000 f932 	bl	80014b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001254:	2302      	movs	r3, #2
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_DAC1_Init+0x6c>)
 8001280:	f001 ff9a 	bl	80031b8 <HAL_DAC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800128a:	f000 f915 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3730      	adds	r7, #48	; 0x30
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000ec 	.word	0x200000ec
 800129c:	50000800 	.word	0x50000800

080012a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012a6:	4a22      	ldr	r2, [pc, #136]	; (8001330 <MX_LPUART1_UART_Init+0x90>)
 80012a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012e2:	4812      	ldr	r0, [pc, #72]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012e4:	f003 fdc4 	bl	8004e70 <HAL_UART_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f8e3 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f2:	2100      	movs	r1, #0
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 80012f6:	f004 fb2f 	bl	8005958 <HAL_UARTEx_SetTxFifoThreshold>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001300:	f000 f8da 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 8001308:	f004 fb64 	bl	80059d4 <HAL_UARTEx_SetRxFifoThreshold>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001312:	f000 f8d1 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_LPUART1_UART_Init+0x8c>)
 8001318:	f004 fae5 	bl	80058e6 <HAL_UARTEx_DisableFifoMode>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001322:	f000 f8c9 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000100 	.word	0x20000100
 8001330:	40008000 	.word	0x40008000
 8001334:	00000000 	.word	0x00000000

08001338 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_TIM16_Init+0x78>)
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <MX_TIM16_Init+0x7c>)
 8001340:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_TIM16_Init+0x78>)
 8001344:	2201      	movs	r2, #1
 8001346:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM16_Init+0x78>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3864;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM16_Init+0x78>)
 8001350:	f640 7218 	movw	r2, #3864	; 0xf18
 8001354:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_TIM16_Init+0x78>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_TIM16_Init+0x78>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_TIM16_Init+0x78>)
 8001364:	2280      	movs	r2, #128	; 0x80
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <MX_TIM16_Init+0x78>)
 800136a:	f003 fa63 	bl	8004834 <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001374:	f000 f8a0 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  htim16.Init.Period = 170E6/samplingRate; // Override period so interrupt is defined by const, not IOC
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_TIM16_Init+0x80>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f89d 	bl	80004bc <__aeabi_i2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	a108      	add	r1, pc, #32	; (adr r1, 80013a8 <MX_TIM16_Init+0x70>)
 8001388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800138c:	f7ff fa2a 	bl	80007e4 <__aeabi_ddiv>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fbbc 	bl	8000b14 <__aeabi_d2uiz>
 800139c:	4603      	mov	r3, r0
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <MX_TIM16_Init+0x78>)
 80013a0:	60d3      	str	r3, [r2, #12]
  //170E6 is 170Mhz, clock frequency. See obsidian for further explanation

  /* USER CODE END TIM16_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	00000000 	.word	0x00000000
 80013ac:	41a443fd 	.word	0x41a443fd
 80013b0:	20000194 	.word	0x20000194
 80013b4:	40014400 	.word	0x40014400
 80013b8:	08006d78 	.word	0x08006d78

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a35      	ldr	r2, [pc, #212]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b33      	ldr	r3, [pc, #204]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	4b30      	ldr	r3, [pc, #192]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a2f      	ldr	r2, [pc, #188]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <MX_GPIO_Init+0xf0>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a29      	ldr	r2, [pc, #164]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <MX_GPIO_Init+0xf0>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f002 f9f6 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	481a      	ldr	r0, [pc, #104]	; (80014b0 <MX_GPIO_Init+0xf4>)
 8001446:	f002 f9f1 	bl	800382c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001450:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4814      	ldr	r0, [pc, #80]	; (80014b4 <MX_GPIO_Init+0xf8>)
 8001462:	f002 f861 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 8001466:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800146a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f002 f851 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001486:	2310      	movs	r3, #16
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_GPIO_Init+0xf4>)
 800149e:	f002 f843 	bl	8003528 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400
 80014b4:	48000800 	.word	0x48000800

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_MspInit+0x44>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6613      	str	r3, [r2, #96]	; 0x60
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_MspInit+0x44>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_MspInit+0x44>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6593      	str	r3, [r2, #88]	; 0x58
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_MspInit+0x44>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014fa:	f002 fa6d 	bl	80039d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b09a      	sub	sp, #104	; 0x68
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2244      	movs	r2, #68	; 0x44
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f004 fb91 	bl	8005c54 <memset>
  if(hadc->Instance==ADC1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153a:	d134      	bne.n	80015a6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800153c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001540:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001542:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001546:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4618      	mov	r0, r3
 800154e:	f002 ff81 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001558:	f7ff ffae 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_ADC_MspInit+0xa4>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <HAL_ADC_MspInit+0xa4>)
 8001562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_ADC_MspInit+0xa4>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_ADC_MspInit+0xa4>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_ADC_MspInit+0xa4>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_ADC_MspInit+0xa4>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 800158c:	2301      	movs	r3, #1
 800158e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001590:	2303      	movs	r3, #3
 8001592:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800159c:	4619      	mov	r1, r3
 800159e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a2:	f001 ffc1 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3768      	adds	r7, #104	; 0x68
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_DAC_MspInit+0x74>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d124      	bne.n	8001620 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_DAC_MspInit+0x78>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f001 ff84 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	50000800 	.word	0x50000800
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b09a      	sub	sp, #104	; 0x68
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	2244      	movs	r2, #68	; 0x44
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f004 faff 	bl	8005c54 <memset>
  if(huart->Instance==LPUART1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_UART_MspInit+0xa8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d136      	bne.n	80016ce <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001660:	2320      	movs	r3, #32
 8001662:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fef1 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001678:	f7ff ff1e 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_UART_MspInit+0xac>)
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_UART_MspInit+0xac>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_UART_MspInit+0xac>)
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0xac>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_UART_MspInit+0xac>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_UART_MspInit+0xac>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80016ac:	230c      	movs	r3, #12
 80016ae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016bc:	230c      	movs	r3, #12
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f001 ff2d 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3768      	adds	r7, #104	; 0x68
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40008000 	.word	0x40008000
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_TIM_Base_MspInit+0x44>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d113      	bne.n	800171a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_TIM_Base_MspInit+0x48>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_TIM_Base_MspInit+0x48>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	6613      	str	r3, [r2, #96]	; 0x60
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_TIM_Base_MspInit+0x48>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2019      	movs	r0, #25
 8001710:	f001 fc8f 	bl	8003032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001714:	2019      	movs	r0, #25
 8001716:	f001 fca6 	bl	8003066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40014400 	.word	0x40014400
 8001728:	40021000 	.word	0x40021000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f8d0 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001786:	f003 f90f 	bl	80049a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000194 	.word	0x20000194

08001794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <_sbrk+0x5c>)
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_sbrk+0x60>)
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d102      	bne.n	80017b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <_sbrk+0x64>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_sbrk+0x68>)
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d207      	bcs.n	80017d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c4:	f004 fa5e 	bl	8005c84 <__errno>
 80017c8:	4603      	mov	r3, r0
 80017ca:	220c      	movs	r2, #12
 80017cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e009      	b.n	80017e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <_sbrk+0x64>)
 80017e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20008000 	.word	0x20008000
 80017f4:	00000400 	.word	0x00000400
 80017f8:	200001e0 	.word	0x200001e0
 80017fc:	20000330 	.word	0x20000330

08001800 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <SystemInit+0x20>)
 8001806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <SystemInit+0x20>)
 800180c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001826:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001828:	f7ff ffea 	bl	8001800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopForever+0x6>)
  ldr r1, =_edata
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <LoopForever+0xe>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001844:	4c0a      	ldr	r4, [pc, #40]	; (8001870 <LoopForever+0x16>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f004 fa1d 	bl	8005c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001856:	f7ff fb87 	bl	8000f68 <main>

0800185a <LoopForever>:

LoopForever:
    b LoopForever
 800185a:	e7fe      	b.n	800185a <LoopForever>
  ldr   r0, =_estack
 800185c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001864:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001868:	08006fa8 	.word	0x08006fa8
  ldr r2, =_sbss
 800186c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001870:	20000330 	.word	0x20000330

08001874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001874:	e7fe      	b.n	8001874 <ADC1_2_IRQHandler>

08001876 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f001 fbcb 	bl	800301c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f80e 	bl	80018a8 <HAL_InitTick>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	e001      	b.n	800189c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001898:	f7ff fe14 	bl	80014c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800189c:	79fb      	ldrb	r3, [r7, #7]

}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_InitTick+0x68>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d022      	beq.n	8001902 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_InitTick+0x6c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_InitTick+0x68>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 fbd6 	bl	8003082 <HAL_SYSTICK_Config>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10f      	bne.n	80018fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	d809      	bhi.n	80018f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e2:	2200      	movs	r2, #0
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	f001 fba2 	bl	8003032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_InitTick+0x70>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e007      	b.n	8001906 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e004      	b.n	8001906 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e001      	b.n	8001906 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000008 	.word	0x20000008
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_IncTick+0x1c>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x20>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4413      	add	r3, r2
 800192a:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_IncTick+0x1c>)
 800192c:	6013      	str	r3, [r2, #0]
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	200001e4 	.word	0x200001e4
 800193c:	20000008 	.word	0x20000008

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200001e4 	.word	0x200001e4

08001958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3360      	adds	r3, #96	; 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LL_ADC_SetOffset+0x44>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4313      	orrs	r3, r2
 80019f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	03fff000 	.word	0x03fff000

08001a08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3360      	adds	r3, #96	; 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3360      	adds	r3, #96	; 0x60
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b087      	sub	sp, #28
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3360      	adds	r3, #96	; 0x60
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3360      	adds	r3, #96	; 0x60
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	615a      	str	r2, [r3, #20]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b087      	sub	sp, #28
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3330      	adds	r3, #48	; 0x30
 8001b32:	461a      	mov	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	4413      	add	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	211f      	movs	r1, #31
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0e9b      	lsrs	r3, r3, #26
 8001b5a:	f003 011f 	and.w	r1, r3, #31
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b6e:	bf00      	nop
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b087      	sub	sp, #28
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3314      	adds	r3, #20
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	0e5b      	lsrs	r3, r3, #25
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0d1b      	lsrs	r3, r3, #20
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	2107      	movs	r1, #7
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	0d1b      	lsrs	r3, r3, #20
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bc4:	bf00      	nop
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be8:	43db      	mvns	r3, r3
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0318 	and.w	r3, r3, #24
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bf4:	40d9      	lsrs	r1, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	400b      	ands	r3, r1
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	0007ffff 	.word	0x0007ffff

08001c18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 031f 	and.w	r3, r3, #31
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6093      	str	r3, [r2, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c88:	d101      	bne.n	8001c8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cd8:	d101      	bne.n	8001cde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <LL_ADC_IsEnabled+0x18>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <LL_ADC_IsEnabled+0x1a>
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d4e:	f043 0204 	orr.w	r2, r3, #4
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d101      	bne.n	8001d7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d101      	bne.n	8001da0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e167      	b.n	800209a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fb97 	bl	800150c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff3f 	bl	8001c74 <LL_ADC_IsDeepPowerDownEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff25 	bl	8001c50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff5a 	bl	8001cc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff3e 	bl	8001c9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e20:	4ba0      	ldr	r3, [pc, #640]	; (80020a4 <HAL_ADC_Init+0x2f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	4aa0      	ldr	r2, [pc, #640]	; (80020a8 <HAL_ADC_Init+0x2f8>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	3301      	adds	r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff3c 	bl	8001cc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10d      	bne.n	8001e6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff75 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 8001e78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 8100 	bne.w	8002088 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80fc 	bne.w	8002088 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e98:	f043 0202 	orr.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff35 	bl	8001d14 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d111      	bne.n	8001ed4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001eb4:	f7ff ff2e 	bl	8001d14 <LL_ADC_IsEnabled>
 8001eb8:	4604      	mov	r4, r0
 8001eba:	487c      	ldr	r0, [pc, #496]	; (80020ac <HAL_ADC_Init+0x2fc>)
 8001ebc:	f7ff ff2a 	bl	8001d14 <LL_ADC_IsEnabled>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4878      	ldr	r0, [pc, #480]	; (80020b0 <HAL_ADC_Init+0x300>)
 8001ed0:	f7ff fd42 	bl	8001958 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7f5b      	ldrb	r3, [r3, #29]
 8001ed8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ede:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ee4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001eea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	3b01      	subs	r3, #1
 8001f08:	045b      	lsls	r3, r3, #17
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <HAL_ADC_Init+0x304>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	69b9      	ldr	r1, [r7, #24]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff14 	bl	8001d88 <LL_ADC_INJ_IsConversionOngoing>
 8001f60:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d16d      	bne.n	8002044 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d16a      	bne.n	8002044 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f72:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f7a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f8a:	f023 0302 	bic.w	r3, r3, #2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6911      	ldr	r1, [r2, #16]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001fce:	e013      	b.n	8001ff8 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d118      	bne.n	8002034 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002018:	4311      	orrs	r1, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002024:	430a      	orrs	r2, r1
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	e007      	b.n	8002044 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10c      	bne.n	8002066 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f023 010f 	bic.w	r1, r3, #15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
 8002064:	e007      	b.n	8002076 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 020f 	bic.w	r2, r2, #15
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	f023 0303 	bic.w	r3, r3, #3
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
 8002086:	e007      	b.n	8002098 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002098:	7ffb      	ldrb	r3, [r7, #31]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000
 80020a8:	053e2d63 	.word	0x053e2d63
 80020ac:	50000100 	.word	0x50000100
 80020b0:	50000300 	.word	0x50000300
 80020b4:	fff04007 	.word	0xfff04007

080020b8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020c0:	4859      	ldr	r0, [pc, #356]	; (8002228 <HAL_ADC_Start+0x170>)
 80020c2:	f7ff fda9 	bl	8001c18 <LL_ADC_GetMultimode>
 80020c6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fe48 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 809f 	bne.w	8002218 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_Start+0x30>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e09a      	b.n	800221e <HAL_ADC_Start+0x166>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fd73 	bl	8002bdc <ADC_Enable>
 80020f6:	4603      	mov	r3, r0
 80020f8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f040 8086 	bne.w	800220e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a44      	ldr	r2, [pc, #272]	; (800222c <HAL_ADC_Start+0x174>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d002      	beq.n	8002126 <HAL_ADC_Start+0x6e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	e001      	b.n	800212a <HAL_ADC_Start+0x72>
 8002126:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4293      	cmp	r3, r2
 8002130:	d002      	beq.n	8002138 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800214c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002150:	d106      	bne.n	8002160 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	f023 0206 	bic.w	r2, r3, #6
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	661a      	str	r2, [r3, #96]	; 0x60
 800215e:	e002      	b.n	8002166 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	221c      	movs	r2, #28
 800216c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_ADC_Start+0x174>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d002      	beq.n	8002186 <HAL_ADC_Start+0xce>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	e001      	b.n	800218a <HAL_ADC_Start+0xd2>
 8002186:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	4293      	cmp	r3, r2
 8002190:	d008      	beq.n	80021a4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d002      	beq.n	80021a4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b09      	cmp	r3, #9
 80021a2:	d114      	bne.n	80021ce <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fdb7 	bl	8001d3a <LL_ADC_REG_StartConversion>
 80021cc:	e026      	b.n	800221c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_ADC_Start+0x174>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d002      	beq.n	80021ea <HAL_ADC_Start+0x132>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	e001      	b.n	80021ee <HAL_ADC_Start+0x136>
 80021ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021ee:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00f      	beq.n	800221c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002204:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
 800220c:	e006      	b.n	800221c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002216:	e001      	b.n	800221c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002218:	2302      	movs	r3, #2
 800221a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800221c:	7dfb      	ldrb	r3, [r7, #23]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	50000300 	.word	0x50000300
 800222c:	50000100 	.word	0x50000100

08002230 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	4867      	ldr	r0, [pc, #412]	; (80023d8 <HAL_ADC_PollForConversion+0x1a8>)
 800223c:	f7ff fcec 	bl	8001c18 <LL_ADC_GetMultimode>
 8002240:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b08      	cmp	r3, #8
 8002248:	d102      	bne.n	8002250 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800224a:	2308      	movs	r3, #8
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	e02a      	b.n	80022a6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d002      	beq.n	8002262 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b09      	cmp	r3, #9
 8002260:	d111      	bne.n	8002286 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0a6      	b.n	80023ce <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002280:	2304      	movs	r3, #4
 8002282:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002284:	e00f      	b.n	80022a6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002286:	4854      	ldr	r0, [pc, #336]	; (80023d8 <HAL_ADC_PollForConversion+0x1a8>)
 8002288:	f7ff fcd4 	bl	8001c34 <LL_ADC_GetMultiDMATransfer>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	f043 0220 	orr.w	r2, r3, #32
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e095      	b.n	80023ce <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022a2:	2304      	movs	r3, #4
 80022a4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022a6:	f7ff fb4b 	bl	8001940 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022ac:	e021      	b.n	80022f2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d01d      	beq.n	80022f2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022b6:	f7ff fb43 	bl	8001940 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d302      	bcc.n	80022cc <HAL_ADC_PollForConversion+0x9c>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d112      	bne.n	80022f2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10b      	bne.n	80022f2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	f043 0204 	orr.w	r2, r3, #4
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e06d      	b.n	80023ce <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0d6      	beq.n	80022ae <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fbf3 	bl	8001afc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d01c      	beq.n	8002356 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7f5b      	ldrb	r3, [r3, #29]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d118      	bne.n	8002356 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b08      	cmp	r3, #8
 8002330:	d111      	bne.n	8002356 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a20      	ldr	r2, [pc, #128]	; (80023dc <HAL_ADC_PollForConversion+0x1ac>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d002      	beq.n	8002366 <HAL_ADC_PollForConversion+0x136>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e001      	b.n	800236a <HAL_ADC_PollForConversion+0x13a>
 8002366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	4293      	cmp	r3, r2
 8002370:	d008      	beq.n	8002384 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d002      	beq.n	8002384 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b09      	cmp	r3, #9
 8002382:	d104      	bne.n	800238e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e00d      	b.n	80023aa <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_ADC_PollForConversion+0x1ac>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d002      	beq.n	800239e <HAL_ADC_PollForConversion+0x16e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	e001      	b.n	80023a2 <HAL_ADC_PollForConversion+0x172>
 800239e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023a2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d104      	bne.n	80023ba <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2208      	movs	r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	e008      	b.n	80023cc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	220c      	movs	r2, #12
 80023ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3720      	adds	r7, #32
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	50000300 	.word	0x50000300
 80023dc:	50000100 	.word	0x50000100

080023e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0b6      	sub	sp, #216	; 0xd8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x22>
 800241a:	2302      	movs	r3, #2
 800241c:	e3c8      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x7b4>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fc99 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 83ad 	bne.w	8002b92 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	f7ff fb6c 	bl	8001b22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc87 	bl	8001d62 <LL_ADC_REG_IsConversionOngoing>
 8002454:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fc93 	bl	8001d88 <LL_ADC_INJ_IsConversionOngoing>
 8002462:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002466:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 81d9 	bne.w	8002822 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002470:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002474:	2b00      	cmp	r3, #0
 8002476:	f040 81d4 	bne.w	8002822 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002482:	d10f      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	4619      	mov	r1, r3
 8002490:	f7ff fb73 	bl	8001b7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fb1a 	bl	8001ad6 <LL_ADC_SetSamplingTimeCommonConfig>
 80024a2:	e00e      	b.n	80024c2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	461a      	mov	r2, r3
 80024b2:	f7ff fb62 	bl	8001b7a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fb0a 	bl	8001ad6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d022      	beq.n	800252a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6919      	ldr	r1, [r3, #16]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024f4:	f7ff fa64 	bl	80019c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6919      	ldr	r1, [r3, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	461a      	mov	r2, r3
 8002506:	f7ff fab0 	bl	8001a6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x124>
 800251a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251e:	e000      	b.n	8002522 <HAL_ADC_ConfigChannel+0x126>
 8002520:	2300      	movs	r3, #0
 8002522:	461a      	mov	r2, r3
 8002524:	f7ff fabc 	bl	8001aa0 <LL_ADC_SetOffsetSaturation>
 8002528:	e17b      	b.n	8002822 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fa69 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x15a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2100      	movs	r1, #0
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fa5e 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	e01e      	b.n	8002594 <HAL_ADC_ConfigChannel+0x198>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fa53 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002574:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002578:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800257c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002584:	2320      	movs	r3, #32
 8002586:	e004      	b.n	8002592 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002588:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259c:	2b00      	cmp	r3, #0
 800259e:	d105      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1b0>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0e9b      	lsrs	r3, r3, #26
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	e018      	b.n	80025de <HAL_ADC_ConfigChannel+0x1e2>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80025c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e004      	b.n	80025de <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80025d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025de:	429a      	cmp	r2, r3
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fa22 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa06 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <HAL_ADC_ConfigChannel+0x220>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2101      	movs	r1, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff f9fb 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	f003 021f 	and.w	r2, r3, #31
 800261a:	e01e      	b.n	800265a <HAL_ADC_ConfigChannel+0x25e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff f9f0 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002628:	4603      	mov	r3, r0
 800262a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800263a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800263e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e004      	b.n	8002658 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800264e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x276>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	e018      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x2a8>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800268a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800268e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e004      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800269a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d106      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f9bf 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2102      	movs	r1, #2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f9a3 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x2e6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff f998 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	e01e      	b.n	8002720 <HAL_ADC_ConfigChannel+0x324>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2102      	movs	r1, #2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f98d 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e004      	b.n	800271e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x33c>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	e016      	b.n	8002766 <HAL_ADC_ConfigChannel+0x36a>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800274a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800274c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e004      	b.n	8002766 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800275c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002766:	429a      	cmp	r2, r3
 8002768:	d106      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	2102      	movs	r1, #2
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f95e 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2103      	movs	r1, #3
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f942 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x3a8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2103      	movs	r1, #3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f937 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800279a:	4603      	mov	r3, r0
 800279c:	0e9b      	lsrs	r3, r3, #26
 800279e:	f003 021f 	and.w	r2, r3, #31
 80027a2:	e017      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x3d8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2103      	movs	r1, #3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f92c 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80027bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80027c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e003      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80027ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x3f0>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	e011      	b.n	8002810 <HAL_ADC_ConfigChannel+0x414>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002804:	2320      	movs	r3, #32
 8002806:	e003      	b.n	8002810 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280a:	fab3 f383 	clz	r3, r3
 800280e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002810:	429a      	cmp	r2, r3
 8002812:	d106      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	2103      	movs	r1, #3
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff f909 	bl	8001a34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fa74 	bl	8001d14 <LL_ADC_IsEnabled>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 8140 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	461a      	mov	r2, r3
 8002842:	f7ff f9c5 	bl	8001bd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a8f      	ldr	r2, [pc, #572]	; (8002a88 <HAL_ADC_ConfigChannel+0x68c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	f040 8131 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <HAL_ADC_ConfigChannel+0x47e>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	3301      	adds	r3, #1
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2b09      	cmp	r3, #9
 8002870:	bf94      	ite	ls
 8002872:	2301      	movls	r3, #1
 8002874:	2300      	movhi	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	e019      	b.n	80028ae <HAL_ADC_ConfigChannel+0x4b2>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800288c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d079      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x4d2>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	3301      	adds	r3, #1
 80028c6:	069b      	lsls	r3, r3, #26
 80028c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028cc:	e015      	b.n	80028fa <HAL_ADC_ConfigChannel+0x4fe>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d6:	fa93 f3a3 	rbit	r3, r3
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80028e6:	2320      	movs	r3, #32
 80028e8:	e003      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80028ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ec:	fab3 f383 	clz	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	069b      	lsls	r3, r3, #26
 80028f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_ADC_ConfigChannel+0x51e>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	3301      	adds	r3, #1
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	2101      	movs	r1, #1
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	e017      	b.n	800294a <HAL_ADC_ConfigChannel+0x54e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800292c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002932:	2320      	movs	r3, #32
 8002934:	e003      	b.n	800293e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	3301      	adds	r3, #1
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	ea42 0103 	orr.w	r1, r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x574>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0e9b      	lsrs	r3, r3, #26
 8002960:	3301      	adds	r3, #1
 8002962:	f003 021f 	and.w	r2, r3, #31
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	051b      	lsls	r3, r3, #20
 800296e:	e018      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x5a6>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002988:	2320      	movs	r3, #32
 800298a:	e003      	b.n	8002994 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	3301      	adds	r3, #1
 8002996:	f003 021f 	and.w	r2, r3, #31
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a2:	430b      	orrs	r3, r1
 80029a4:	e081      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d107      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x5c6>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	3301      	adds	r3, #1
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c0:	e015      	b.n	80029ee <HAL_ADC_ConfigChannel+0x5f2>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80029da:	2320      	movs	r3, #32
 80029dc:	e003      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	fab3 f383 	clz	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	069b      	lsls	r3, r3, #26
 80029ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x612>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	3301      	adds	r3, #1
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	e017      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x642>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e003      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2101      	movs	r1, #1
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	ea42 0103 	orr.w	r1, r2, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10d      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x66e>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 021f 	and.w	r2, r3, #31
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b1e      	subs	r3, #30
 8002a62:	051b      	lsls	r3, r3, #20
 8002a64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a68:	e01e      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x6ac>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	613b      	str	r3, [r7, #16]
  return result;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002a82:	2320      	movs	r3, #32
 8002a84:	e006      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x698>
 8002a86:	bf00      	nop
 8002a88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 021f 	and.w	r2, r3, #31
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b1e      	subs	r3, #30
 8002aa2:	051b      	lsls	r3, r3, #20
 8002aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f7ff f863 	bl	8001b7a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d071      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac0:	483e      	ldr	r0, [pc, #248]	; (8002bbc <HAL_ADC_ConfigChannel+0x7c0>)
 8002ac2:	f7fe ff6f 	bl	80019a4 <LL_ADC_GetCommonPathInternalCh>
 8002ac6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a3c      	ldr	r2, [pc, #240]	; (8002bc0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_ConfigChannel+0x6e2>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d127      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d121      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af2:	d157      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002af8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002afc:	4619      	mov	r1, r3
 8002afe:	482f      	ldr	r0, [pc, #188]	; (8002bbc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b00:	f7fe ff3d 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <HAL_ADC_ConfigChannel+0x7d0>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b1e:	e002      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2c:	e03a      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d113      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10d      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02a      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b56:	4619      	mov	r1, r3
 8002b58:	4818      	ldr	r0, [pc, #96]	; (8002bbc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b5a:	f7fe ff10 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b5e:	e021      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d11c      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d011      	beq.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480c      	ldr	r0, [pc, #48]	; (8002bbc <HAL_ADC_ConfigChannel+0x7c0>)
 8002b8c:	f7fe fef7 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
 8002b90:	e008      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	f043 0220 	orr.w	r2, r3, #32
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	37d8      	adds	r7, #216	; 0xd8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	80080000 	.word	0x80080000
 8002bbc:	50000300 	.word	0x50000300
 8002bc0:	c3210000 	.word	0xc3210000
 8002bc4:	90c00010 	.word	0x90c00010
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	053e2d63 	.word	0x053e2d63
 8002bd0:	c7520000 	.word	0xc7520000
 8002bd4:	50000100 	.word	0x50000100
 8002bd8:	cb840000 	.word	0xcb840000

08002bdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f891 	bl	8001d14 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d169      	bne.n	8002ccc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <ADC_Enable+0xfc>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e055      	b.n	8002cce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f860 	bl	8001cec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c2c:	482b      	ldr	r0, [pc, #172]	; (8002cdc <ADC_Enable+0x100>)
 8002c2e:	f7fe feb9 	bl	80019a4 <LL_ADC_GetCommonPathInternalCh>
 8002c32:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c3c:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <ADC_Enable+0x104>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	4a28      	ldr	r2, [pc, #160]	; (8002ce4 <ADC_Enable+0x108>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c56:	e002      	b.n	8002c5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f9      	bne.n	8002c58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c64:	f7fe fe6c 	bl	8001940 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c6a:	e028      	b.n	8002cbe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f84f 	bl	8001d14 <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f833 	bl	8001cec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c86:	f7fe fe5b 	bl	8001940 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d914      	bls.n	8002cbe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d00d      	beq.n	8002cbe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	f043 0210 	orr.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d1cf      	bne.n	8002c6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	8000003f 	.word	0x8000003f
 8002cdc:	50000300 	.word	0x50000300
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	053e2d63 	.word	0x053e2d63

08002ce8 <LL_ADC_IsEnabled>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <LL_ADC_IsEnabled+0x18>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <LL_ADC_IsEnabled+0x1a>
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b0a1      	sub	sp, #132	; 0x84
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e08b      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e001      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e06a      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ffb9 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 8002d9c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ffb3 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d14c      	bne.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d149      	bne.n	8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002db4:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002db6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d028      	beq.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dd2:	035b      	lsls	r3, r3, #13
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ddc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002de0:	f7ff ff82 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002de4:	4604      	mov	r4, r0
 8002de6:	4823      	ldr	r0, [pc, #140]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002de8:	f7ff ff7e 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4323      	orrs	r3, r4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d133      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dfc:	f023 030f 	bic.w	r3, r3, #15
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	6811      	ldr	r1, [r2, #0]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	6892      	ldr	r2, [r2, #8]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e10:	e024      	b.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e1e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e22:	f7ff ff61 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002e26:	4604      	mov	r4, r0
 8002e28:	4812      	ldr	r0, [pc, #72]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e2a:	f7ff ff5d 	bl	8002ce8 <LL_ADC_IsEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4323      	orrs	r3, r4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d112      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e3e:	f023 030f 	bic.w	r3, r3, #15
 8002e42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e46:	e009      	b.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	f043 0220 	orr.w	r2, r3, #32
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002e5a:	e000      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3784      	adds	r7, #132	; 0x84
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd90      	pop	{r4, r7, pc}
 8002e72:	bf00      	nop
 8002e74:	50000100 	.word	0x50000100
 8002e78:	50000300 	.word	0x50000300

08002e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eae:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	60d3      	str	r3, [r2, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000ed00 	.word	0xe000ed00

08002ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <__NVIC_GetPriorityGrouping+0x18>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	f003 0307 	and.w	r3, r3, #7
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	db0b      	blt.n	8002f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4907      	ldr	r1, [pc, #28]	; (8002f18 <__NVIC_EnableIRQ+0x38>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	2001      	movs	r0, #1
 8002f02:	fa00 f202 	lsl.w	r2, r0, r2
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100

08002f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	db0a      	blt.n	8002f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	490c      	ldr	r1, [pc, #48]	; (8002f68 <__NVIC_SetPriority+0x4c>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	0112      	lsls	r2, r2, #4
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f44:	e00a      	b.n	8002f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4908      	ldr	r1, [pc, #32]	; (8002f6c <__NVIC_SetPriority+0x50>)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	3b04      	subs	r3, #4
 8002f54:	0112      	lsls	r2, r2, #4
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	440b      	add	r3, r1
 8002f5a:	761a      	strb	r2, [r3, #24]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000e100 	.word	0xe000e100
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f1c3 0307 	rsb	r3, r3, #7
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	bf28      	it	cs
 8002f8e:	2304      	movcs	r3, #4
 8002f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3304      	adds	r3, #4
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d902      	bls.n	8002fa0 <NVIC_EncodePriority+0x30>
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3b03      	subs	r3, #3
 8002f9e:	e000      	b.n	8002fa2 <NVIC_EncodePriority+0x32>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43d9      	mvns	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	4313      	orrs	r3, r2
         );
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe8:	d301      	bcc.n	8002fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00f      	b.n	800300e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <SysTick_Config+0x40>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff6:	210f      	movs	r1, #15
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f7ff ff8e 	bl	8002f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SysTick_Config+0x40>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003006:	4b04      	ldr	r3, [pc, #16]	; (8003018 <SysTick_Config+0x40>)
 8003008:	2207      	movs	r2, #7
 800300a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	e000e010 	.word	0xe000e010

0800301c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff29 	bl	8002e7c <__NVIC_SetPriorityGrouping>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	4603      	mov	r3, r0
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003040:	f7ff ff40 	bl	8002ec4 <__NVIC_GetPriorityGrouping>
 8003044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6978      	ldr	r0, [r7, #20]
 800304c:	f7ff ff90 	bl	8002f70 <NVIC_EncodePriority>
 8003050:	4602      	mov	r2, r0
 8003052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff5f 	bl	8002f1c <__NVIC_SetPriority>
}
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff33 	bl	8002ee0 <__NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ffa4 	bl	8002fd8 <SysTick_Config>
 8003090:	4603      	mov	r3, r0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e014      	b.n	80030d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	791b      	ldrb	r3, [r3, #4]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7fe fa79 	bl	80015b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e056      	b.n	80031a2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	795b      	ldrb	r3, [r3, #5]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_DAC_Start+0x20>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e050      	b.n	80031a2 <HAL_DAC_Start+0xc2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2201      	movs	r2, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003124:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <HAL_DAC_Start+0xd0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_DAC_Start+0xd4>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	3301      	adds	r3, #1
 8003134:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003136:	e002      	b.n	800313e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3b01      	subs	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f9      	bne.n	8003138 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003154:	2b02      	cmp	r3, #2
 8003156:	d11d      	bne.n	8003194 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	e014      	b.n	8003194 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	2102      	movs	r1, #2
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	429a      	cmp	r2, r3
 8003182:	d107      	bne.n	8003194 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0202 	orr.w	r2, r2, #2
 8003192:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000
 80031b4:	053e2d63 	.word	0x053e2d63

080031b8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_DAC_ConfigChannel+0x1c>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e19e      	b.n	8003516 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	795b      	ldrb	r3, [r3, #5]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_DAC_ConfigChannel+0x2c>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e198      	b.n	8003516 <HAL_DAC_ConfigChannel+0x35e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2202      	movs	r2, #2
 80031ee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d17a      	bne.n	80032ee <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031f8:	f7fe fba2 	bl	8001940 <HAL_GetTick>
 80031fc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d13d      	bne.n	8003280 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003204:	e018      	b.n	8003238 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003206:	f7fe fb9b 	bl	8001940 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d911      	bls.n	8003238 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f043 0208 	orr.w	r2, r3, #8
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2203      	movs	r2, #3
 8003232:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e16e      	b.n	8003516 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1df      	bne.n	8003206 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
 8003250:	e020      	b.n	8003294 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003252:	f7fe fb75 	bl	8001940 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d90f      	bls.n	8003280 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	2b00      	cmp	r3, #0
 8003268:	da0a      	bge.n	8003280 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f043 0208 	orr.w	r2, r3, #8
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2203      	movs	r2, #3
 800327a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e14a      	b.n	8003516 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	2b00      	cmp	r3, #0
 8003288:	dbe3      	blt.n	8003252 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	ea02 0103 	and.w	r1, r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	409a      	lsls	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	21ff      	movs	r1, #255	; 0xff
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	ea02 0103 	and.w	r1, r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d11d      	bne.n	8003332 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	221f      	movs	r2, #31
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	4013      	ands	r3, r2
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	4313      	orrs	r3, r2
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2207      	movs	r2, #7
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	4013      	ands	r3, r2
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d102      	bne.n	800335c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
 800335a:	e00f      	b.n	800337c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d102      	bne.n	800336a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003364:	2301      	movs	r3, #1
 8003366:	623b      	str	r3, [r7, #32]
 8003368:	e008      	b.n	800337c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003372:	2301      	movs	r3, #1
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	e001      	b.n	800337c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003378:	2300      	movs	r3, #0
 800337a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	4013      	ands	r3, r2
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	791b      	ldrb	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d102      	bne.n	80033b0 <HAL_DAC_ConfigChannel+0x1f8>
 80033aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ae:	e000      	b.n	80033b2 <HAL_DAC_ConfigChannel+0x1fa>
 80033b0:	2300      	movs	r3, #0
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	4013      	ands	r3, r2
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	795b      	ldrb	r3, [r3, #5]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_DAC_ConfigChannel+0x224>
 80033d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033da:	e000      	b.n	80033de <HAL_DAC_ConfigChannel+0x226>
 80033dc:	2300      	movs	r3, #0
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d114      	bne.n	800341e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80033f4:	f000 ffb0 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80033f8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4a48      	ldr	r2, [pc, #288]	; (8003520 <HAL_DAC_ConfigChannel+0x368>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d904      	bls.n	800340c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	e00f      	b.n	800342c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4a45      	ldr	r2, [pc, #276]	; (8003524 <HAL_DAC_ConfigChannel+0x36c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d90a      	bls.n	800342a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	e006      	b.n	800342c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	4313      	orrs	r3, r2
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	e000      	b.n	800342c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800342a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	4313      	orrs	r3, r2
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6819      	ldr	r1, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347e:	4013      	ands	r3, r2
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0310 	and.w	r3, r3, #16
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	4313      	orrs	r3, r2
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	22c0      	movs	r2, #192	; 0xc0
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	400a      	ands	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	ea02 0103 	and.w	r1, r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003514:	7ffb      	ldrb	r3, [r7, #31]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	09896800 	.word	0x09896800
 8003524:	04c4b400 	.word	0x04c4b400

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003536:	e15a      	b.n	80037ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2101      	movs	r1, #1
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 814c 	beq.w	80037e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d005      	beq.n	8003568 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003564:	2b02      	cmp	r3, #2
 8003566:	d130      	bne.n	80035ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800359e:	2201      	movs	r2, #1
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 0201 	and.w	r2, r3, #1
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d017      	beq.n	8003606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d123      	bne.n	800365a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3208      	adds	r2, #8
 8003654:	6939      	ldr	r1, [r7, #16]
 8003656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80a6 	beq.w	80037e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369c:	4b5b      	ldr	r3, [pc, #364]	; (800380c <HAL_GPIO_Init+0x2e4>)
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	4a5a      	ldr	r2, [pc, #360]	; (800380c <HAL_GPIO_Init+0x2e4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6613      	str	r3, [r2, #96]	; 0x60
 80036a8:	4b58      	ldr	r3, [pc, #352]	; (800380c <HAL_GPIO_Init+0x2e4>)
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b4:	4a56      	ldr	r2, [pc, #344]	; (8003810 <HAL_GPIO_Init+0x2e8>)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	220f      	movs	r2, #15
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036de:	d01f      	beq.n	8003720 <HAL_GPIO_Init+0x1f8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4c      	ldr	r2, [pc, #304]	; (8003814 <HAL_GPIO_Init+0x2ec>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d019      	beq.n	800371c <HAL_GPIO_Init+0x1f4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a4b      	ldr	r2, [pc, #300]	; (8003818 <HAL_GPIO_Init+0x2f0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d013      	beq.n	8003718 <HAL_GPIO_Init+0x1f0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4a      	ldr	r2, [pc, #296]	; (800381c <HAL_GPIO_Init+0x2f4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00d      	beq.n	8003714 <HAL_GPIO_Init+0x1ec>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a49      	ldr	r2, [pc, #292]	; (8003820 <HAL_GPIO_Init+0x2f8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d007      	beq.n	8003710 <HAL_GPIO_Init+0x1e8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a48      	ldr	r2, [pc, #288]	; (8003824 <HAL_GPIO_Init+0x2fc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d101      	bne.n	800370c <HAL_GPIO_Init+0x1e4>
 8003708:	2305      	movs	r3, #5
 800370a:	e00a      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 800370c:	2306      	movs	r3, #6
 800370e:	e008      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003710:	2304      	movs	r3, #4
 8003712:	e006      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003714:	2303      	movs	r3, #3
 8003716:	e004      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003718:	2302      	movs	r3, #2
 800371a:	e002      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003720:	2300      	movs	r3, #0
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	f002 0203 	and.w	r2, r2, #3
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	4093      	lsls	r3, r2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003732:	4937      	ldr	r1, [pc, #220]	; (8003810 <HAL_GPIO_Init+0x2e8>)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3302      	adds	r3, #2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003740:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_GPIO_Init+0x300>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003764:	4a30      	ldr	r2, [pc, #192]	; (8003828 <HAL_GPIO_Init+0x300>)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800376a:	4b2f      	ldr	r3, [pc, #188]	; (8003828 <HAL_GPIO_Init+0x300>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800378e:	4a26      	ldr	r2, [pc, #152]	; (8003828 <HAL_GPIO_Init+0x300>)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_GPIO_Init+0x300>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_GPIO_Init+0x300>)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <HAL_GPIO_Init+0x300>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037e2:	4a11      	ldr	r2, [pc, #68]	; (8003828 <HAL_GPIO_Init+0x300>)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3301      	adds	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f47f ae9d 	bne.w	8003538 <HAL_GPIO_Init+0x10>
  }
}
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40021000 	.word	0x40021000
 8003810:	40010000 	.word	0x40010000
 8003814:	48000400 	.word	0x48000400
 8003818:	48000800 	.word	0x48000800
 800381c:	48000c00 	.word	0x48000c00
 8003820:	48001000 	.word	0x48001000
 8003824:	48001400 	.word	0x48001400
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003848:	e002      	b.n	8003850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4013      	ands	r3, r2
 8003874:	041a      	lsls	r2, r3, #16
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43d9      	mvns	r1, r3
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	400b      	ands	r3, r1
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d141      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800389e:	4b4b      	ldr	r3, [pc, #300]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	d131      	bne.n	8003910 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038ac:	4b47      	ldr	r3, [pc, #284]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b2:	4a46      	ldr	r2, [pc, #280]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038c4:	4a41      	ldr	r2, [pc, #260]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038cc:	4b40      	ldr	r3, [pc, #256]	; (80039d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2232      	movs	r2, #50	; 0x32
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	4a3f      	ldr	r2, [pc, #252]	; (80039d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	0c9b      	lsrs	r3, r3, #18
 80038de:	3301      	adds	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e2:	e002      	b.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ea:	4b38      	ldr	r3, [pc, #224]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f6:	d102      	bne.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f2      	bne.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038fe:	4b33      	ldr	r3, [pc, #204]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390a:	d158      	bne.n	80039be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e057      	b.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003910:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003916:	4a2d      	ldr	r2, [pc, #180]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800391c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003920:	e04d      	b.n	80039be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003928:	d141      	bne.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800392a:	4b28      	ldr	r3, [pc, #160]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003936:	d131      	bne.n	800399c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003938:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393e:	4a23      	ldr	r2, [pc, #140]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003948:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003956:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2232      	movs	r2, #50	; 0x32
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	0c9b      	lsrs	r3, r3, #18
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800396e:	e002      	b.n	8003976 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3b01      	subs	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003976:	4b15      	ldr	r3, [pc, #84]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d102      	bne.n	800398a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f2      	bne.n	8003970 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d112      	bne.n	80039be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e011      	b.n	80039c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800399e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039ac:	e007      	b.n	80039be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039b6:	4a05      	ldr	r2, [pc, #20]	; (80039cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40007000 	.word	0x40007000
 80039d0:	20000000 	.word	0x20000000
 80039d4:	431bde83 	.word	0x431bde83

080039d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80039e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e6:	6093      	str	r3, [r2, #8]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40007000 	.word	0x40007000

080039f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e2fe      	b.n	8004008 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d075      	beq.n	8003b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a16:	4b97      	ldr	r3, [pc, #604]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a20:	4b94      	ldr	r3, [pc, #592]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d102      	bne.n	8003a36 <HAL_RCC_OscConfig+0x3e>
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_OscConfig+0x44>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d10b      	bne.n	8003a54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3c:	4b8d      	ldr	r3, [pc, #564]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05b      	beq.n	8003b00 <HAL_RCC_OscConfig+0x108>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d157      	bne.n	8003b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e2d9      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_OscConfig+0x74>
 8003a5e:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a84      	ldr	r2, [pc, #528]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e01d      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x98>
 8003a76:	4b7f      	ldr	r3, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b7c      	ldr	r3, [pc, #496]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7b      	ldr	r2, [pc, #492]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0xb0>
 8003a90:	4b78      	ldr	r3, [pc, #480]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b75      	ldr	r3, [pc, #468]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a74      	ldr	r2, [pc, #464]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d013      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd ff46 	bl	8001940 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab8:	f7fd ff42 	bl	8001940 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b64      	cmp	r3, #100	; 0x64
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e29e      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aca:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xc0>
 8003ad6:	e014      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7fd ff32 	bl	8001940 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae0:	f7fd ff2e 	bl	8001940 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e28a      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af2:	4b60      	ldr	r3, [pc, #384]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xe8>
 8003afe:	e000      	b.n	8003b02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d075      	beq.n	8003bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0e:	4b59      	ldr	r3, [pc, #356]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b18:	4b56      	ldr	r3, [pc, #344]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d102      	bne.n	8003b2e <HAL_RCC_OscConfig+0x136>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d002      	beq.n	8003b34 <HAL_RCC_OscConfig+0x13c>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d11f      	bne.n	8003b74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b34:	4b4f      	ldr	r3, [pc, #316]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_OscConfig+0x154>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e25d      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	4946      	ldr	r1, [pc, #280]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b60:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <HAL_RCC_OscConfig+0x280>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fe9f 	bl	80018a8 <HAL_InitTick>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d043      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e249      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d023      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b7c:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a3c      	ldr	r2, [pc, #240]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b88:	f7fd feda 	bl	8001940 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b90:	f7fd fed6 	bl	8001940 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e232      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ba2:	4b34      	ldr	r3, [pc, #208]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	061b      	lsls	r3, r3, #24
 8003bbc:	492d      	ldr	r1, [pc, #180]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	604b      	str	r3, [r1, #4]
 8003bc2:	e01a      	b.n	8003bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a2a      	ldr	r2, [pc, #168]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd feb6 	bl	8001940 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd feb2 	bl	8001940 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e20e      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1e0>
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d041      	beq.n	8003c8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01c      	beq.n	8003c48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c14:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1e:	f7fd fe8f 	bl	8001940 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fd fe8b 	bl	8001940 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e1e7      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ef      	beq.n	8003c26 <HAL_RCC_OscConfig+0x22e>
 8003c46:	e020      	b.n	8003c8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x27c>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fd fe72 	bl	8001940 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c5e:	e00d      	b.n	8003c7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fd fe6e 	bl	8001940 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d906      	bls.n	8003c7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e1ca      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c7c:	4b8c      	ldr	r3, [pc, #560]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ea      	bne.n	8003c60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80a6 	beq.w	8003de4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c9c:	4b84      	ldr	r3, [pc, #528]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_OscConfig+0x2b4>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x2b6>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	4b7f      	ldr	r3, [pc, #508]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	4a7e      	ldr	r2, [pc, #504]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cbe:	4b7c      	ldr	r3, [pc, #496]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cce:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <HAL_RCC_OscConfig+0x4bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d118      	bne.n	8003d0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cda:	4b76      	ldr	r3, [pc, #472]	; (8003eb4 <HAL_RCC_OscConfig+0x4bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a75      	ldr	r2, [pc, #468]	; (8003eb4 <HAL_RCC_OscConfig+0x4bc>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce6:	f7fd fe2b 	bl	8001940 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cee:	f7fd fe27 	bl	8001940 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e183      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d00:	4b6c      	ldr	r3, [pc, #432]	; (8003eb4 <HAL_RCC_OscConfig+0x4bc>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d108      	bne.n	8003d26 <HAL_RCC_OscConfig+0x32e>
 8003d14:	4b66      	ldr	r3, [pc, #408]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	4a65      	ldr	r2, [pc, #404]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d24:	e024      	b.n	8003d70 <HAL_RCC_OscConfig+0x378>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d110      	bne.n	8003d50 <HAL_RCC_OscConfig+0x358>
 8003d2e:	4b60      	ldr	r3, [pc, #384]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d34:	4a5e      	ldr	r2, [pc, #376]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d36:	f043 0304 	orr.w	r3, r3, #4
 8003d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d3e:	4b5c      	ldr	r3, [pc, #368]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	4a5a      	ldr	r2, [pc, #360]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d4e:	e00f      	b.n	8003d70 <HAL_RCC_OscConfig+0x378>
 8003d50:	4b57      	ldr	r3, [pc, #348]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d56:	4a56      	ldr	r2, [pc, #344]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d60:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	4a52      	ldr	r2, [pc, #328]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fd fde2 	bl	8001940 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fd fdde 	bl	8001940 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e138      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d96:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ed      	beq.n	8003d80 <HAL_RCC_OscConfig+0x388>
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fd fdcb 	bl	8001940 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd fdc7 	bl	8001940 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e121      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc4:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ed      	bne.n	8003dae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d03c      	beq.n	8003e6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01c      	beq.n	8003e32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003df8:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd fd9a 	bl	8001940 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e10:	f7fd fd96 	bl	8001940 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e0f2      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e22:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0ef      	beq.n	8003e10 <HAL_RCC_OscConfig+0x418>
 8003e30:	e01b      	b.n	8003e6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e32:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fd fd7d 	bl	8001940 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e4a:	f7fd fd79 	bl	8001940 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0d5      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003e5c:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ef      	bne.n	8003e4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 80c9 	beq.w	8004006 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	f000 8083 	beq.w	8003f88 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d15e      	bne.n	8003f48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8a:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <HAL_RCC_OscConfig+0x4b8>)
 8003e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fd fd53 	bl	8001940 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	e00c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fd fd4f 	bl	8001940 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d905      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0ab      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	4b55      	ldr	r3, [pc, #340]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ec      	bne.n	8003e9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b52      	ldr	r3, [pc, #328]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	4b52      	ldr	r3, [pc, #328]	; (8004014 <HAL_RCC_OscConfig+0x61c>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6a11      	ldr	r1, [r2, #32]
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0112      	lsls	r2, r2, #4
 8003ed8:	4311      	orrs	r1, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ede:	0212      	lsls	r2, r2, #8
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ee6:	0852      	lsrs	r2, r2, #1
 8003ee8:	3a01      	subs	r2, #1
 8003eea:	0552      	lsls	r2, r2, #21
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef2:	0852      	lsrs	r2, r2, #1
 8003ef4:	3a01      	subs	r2, #1
 8003ef6:	0652      	lsls	r2, r2, #25
 8003ef8:	4311      	orrs	r1, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003efe:	06d2      	lsls	r2, r2, #27
 8003f00:	430a      	orrs	r2, r1
 8003f02:	4943      	ldr	r1, [pc, #268]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f08:	4b41      	ldr	r3, [pc, #260]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a40      	ldr	r2, [pc, #256]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f14:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fd0e 	bl	8001940 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd fd0a 	bl	8001940 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e066      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3a:	4b35      	ldr	r3, [pc, #212]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x530>
 8003f46:	e05e      	b.n	8004006 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a30      	ldr	r2, [pc, #192]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd fcf4 	bl	8001940 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fd fcf0 	bl	8001940 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e04c      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f7a:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	4924      	ldr	r1, [pc, #144]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f80:	4b25      	ldr	r3, [pc, #148]	; (8004018 <HAL_RCC_OscConfig+0x620>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	60cb      	str	r3, [r1, #12]
 8003f86:	e03e      	b.n	8004006 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e039      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f94:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <HAL_RCC_OscConfig+0x618>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f003 0203 	and.w	r2, r3, #3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d12c      	bne.n	8004002 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d123      	bne.n	8004002 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d11b      	bne.n	8004002 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d113      	bne.n	8004002 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d109      	bne.n	8004002 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d001      	beq.n	8004006 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40021000 	.word	0x40021000
 8004014:	019f800c 	.word	0x019f800c
 8004018:	feeefffc 	.word	0xfeeefffc

0800401c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e11e      	b.n	8004272 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b91      	ldr	r3, [pc, #580]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d910      	bls.n	8004064 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b8e      	ldr	r3, [pc, #568]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 020f 	bic.w	r2, r3, #15
 800404a:	498c      	ldr	r1, [pc, #560]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b8a      	ldr	r3, [pc, #552]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e106      	b.n	8004272 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d073      	beq.n	8004158 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d129      	bne.n	80040cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004078:	4b81      	ldr	r3, [pc, #516]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0f4      	b.n	8004272 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004088:	f000 f99e 	bl	80043c8 <RCC_GetSysClockFreqFromPLLSource>
 800408c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4a7c      	ldr	r2, [pc, #496]	; (8004284 <HAL_RCC_ClockConfig+0x268>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d93f      	bls.n	8004116 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004096:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d033      	beq.n	8004116 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d12f      	bne.n	8004116 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040b6:	4b72      	ldr	r3, [pc, #456]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040be:	4a70      	ldr	r2, [pc, #448]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	e024      	b.n	8004116 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d4:	4b6a      	ldr	r3, [pc, #424]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d109      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0c6      	b.n	8004272 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040e4:	4b66      	ldr	r3, [pc, #408]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0be      	b.n	8004272 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80040f4:	f000 f8ce 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4a61      	ldr	r2, [pc, #388]	; (8004284 <HAL_RCC_ClockConfig+0x268>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d909      	bls.n	8004116 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004102:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410a:	4a5d      	ldr	r2, [pc, #372]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004116:	4b5a      	ldr	r3, [pc, #360]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4957      	ldr	r1, [pc, #348]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fd fc0a 	bl	8001940 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	e00a      	b.n	8004146 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f7fd fc06 	bl	8001940 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e095      	b.n	8004272 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	4b4e      	ldr	r3, [pc, #312]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 020c 	and.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	429a      	cmp	r2, r3
 8004156:	d1eb      	bne.n	8004130 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d023      	beq.n	80041ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4a42      	ldr	r2, [pc, #264]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800417a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004188:	4b3d      	ldr	r3, [pc, #244]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004190:	4a3b      	ldr	r2, [pc, #236]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004196:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b39      	ldr	r3, [pc, #228]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4936      	ldr	r1, [pc, #216]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
 80041aa:	e008      	b.n	80041be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b80      	cmp	r3, #128	; 0x80
 80041b0:	d105      	bne.n	80041be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80041b2:	4b33      	ldr	r3, [pc, #204]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4a32      	ldr	r2, [pc, #200]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 80041b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041be:	4b2f      	ldr	r3, [pc, #188]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d21d      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041cc:	4b2b      	ldr	r3, [pc, #172]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f023 020f 	bic.w	r2, r3, #15
 80041d4:	4929      	ldr	r1, [pc, #164]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041dc:	f7fd fbb0 	bl	8001940 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e4:	f7fd fbac 	bl	8001940 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e03b      	b.n	8004272 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_ClockConfig+0x260>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d1ed      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4917      	ldr	r1, [pc, #92]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490f      	ldr	r1, [pc, #60]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004246:	f000 f825 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <HAL_RCC_ClockConfig+0x264>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490c      	ldr	r1, [pc, #48]	; (8004288 <HAL_RCC_ClockConfig+0x26c>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	f003 031f 	and.w	r3, r3, #31
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x270>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_RCC_ClockConfig+0x274>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd fb1c 	bl	80018a8 <HAL_InitTick>
 8004270:	4603      	mov	r3, r0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40022000 	.word	0x40022000
 8004280:	40021000 	.word	0x40021000
 8004284:	04c4b400 	.word	0x04c4b400
 8004288:	08006d7c 	.word	0x08006d7c
 800428c:	20000000 	.word	0x20000000
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800429a:	4b2c      	ldr	r3, [pc, #176]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d102      	bne.n	80042ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042a6:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	e047      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042ac:	4b27      	ldr	r3, [pc, #156]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d102      	bne.n	80042be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042b8:	4b26      	ldr	r3, [pc, #152]	; (8004354 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	e03e      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d136      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3301      	adds	r3, #1
 80042e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d10c      	bne.n	8004302 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042e8:	4a1a      	ldr	r2, [pc, #104]	; (8004354 <HAL_RCC_GetSysClockFreq+0xc0>)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	4a16      	ldr	r2, [pc, #88]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042f2:	68d2      	ldr	r2, [r2, #12]
 80042f4:	0a12      	lsrs	r2, r2, #8
 80042f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	617b      	str	r3, [r7, #20]
      break;
 8004300:	e00c      	b.n	800431c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004302:	4a13      	ldr	r2, [pc, #76]	; (8004350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	4a10      	ldr	r2, [pc, #64]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 800430c:	68d2      	ldr	r2, [r2, #12]
 800430e:	0a12      	lsrs	r2, r2, #8
 8004310:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]
      break;
 800431a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_GetSysClockFreq+0xb8>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0e5b      	lsrs	r3, r3, #25
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	3301      	adds	r3, #1
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e001      	b.n	800433c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800433c:	693b      	ldr	r3, [r7, #16]
}
 800433e:	4618      	mov	r0, r3
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	00f42400 	.word	0x00f42400
 8004354:	016e3600 	.word	0x016e3600

08004358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000000 	.word	0x20000000

08004370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004374:	f7ff fff0 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4904      	ldr	r1, [pc, #16]	; (8004398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	08006d8c 	.word	0x08006d8c

0800439c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043a0:	f7ff ffda 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0adb      	lsrs	r3, r3, #11
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4904      	ldr	r1, [pc, #16]	; (80043c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	08006d8c 	.word	0x08006d8c

080043c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ce:	4b1e      	ldr	r3, [pc, #120]	; (8004448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d10c      	bne.n	8004406 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	4a14      	ldr	r2, [pc, #80]	; (8004448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043f6:	68d2      	ldr	r2, [r2, #12]
 80043f8:	0a12      	lsrs	r2, r2, #8
 80043fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	617b      	str	r3, [r7, #20]
    break;
 8004404:	e00c      	b.n	8004420 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004410:	68d2      	ldr	r2, [r2, #12]
 8004412:	0a12      	lsrs	r2, r2, #8
 8004414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]
    break;
 800441e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	0e5b      	lsrs	r3, r3, #25
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800443a:	687b      	ldr	r3, [r7, #4]
}
 800443c:	4618      	mov	r0, r3
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	40021000 	.word	0x40021000
 800444c:	016e3600 	.word	0x016e3600
 8004450:	00f42400 	.word	0x00f42400

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800445c:	2300      	movs	r3, #0
 800445e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004460:	2300      	movs	r3, #0
 8004462:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8098 	beq.w	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	4b40      	ldr	r3, [pc, #256]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	4a3f      	ldr	r2, [pc, #252]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448c:	6593      	str	r3, [r2, #88]	; 0x58
 800448e:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449e:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a39      	ldr	r2, [pc, #228]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044aa:	f7fd fa49 	bl	8001940 <HAL_GetTick>
 80044ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b0:	e009      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b2:	f7fd fa45 	bl	8001940 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d902      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	74fb      	strb	r3, [r7, #19]
        break;
 80044c4:	e005      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044c6:	4b30      	ldr	r3, [pc, #192]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ef      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80044d2:	7cfb      	ldrb	r3, [r7, #19]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d159      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044d8:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01e      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d019      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004500:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004510:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004520:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fd fa05 	bl	8001940 <HAL_GetTick>
 8004536:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004538:	e00b      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fd fa01 	bl	8001940 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	; 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d902      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	74fb      	strb	r3, [r7, #19]
            break;
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ec      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004566:	4b07      	ldr	r3, [pc, #28]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	4903      	ldr	r1, [pc, #12]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800457c:	e008      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	74bb      	strb	r3, [r7, #18]
 8004582:	e005      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004584:	40021000 	.word	0x40021000
 8004588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004590:	7c7b      	ldrb	r3, [r7, #17]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4ba6      	ldr	r3, [pc, #664]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	4aa5      	ldr	r2, [pc, #660]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ae:	4ba0      	ldr	r3, [pc, #640]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	f023 0203 	bic.w	r2, r3, #3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	499c      	ldr	r1, [pc, #624]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d0:	4b97      	ldr	r3, [pc, #604]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 020c 	bic.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4994      	ldr	r1, [pc, #592]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045f2:	4b8f      	ldr	r3, [pc, #572]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	498b      	ldr	r1, [pc, #556]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004614:	4b86      	ldr	r3, [pc, #536]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	4983      	ldr	r1, [pc, #524]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004636:	4b7e      	ldr	r3, [pc, #504]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	497a      	ldr	r1, [pc, #488]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b75      	ldr	r3, [pc, #468]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	4972      	ldr	r1, [pc, #456]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4969      	ldr	r1, [pc, #420]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800469c:	4b64      	ldr	r3, [pc, #400]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	4961      	ldr	r1, [pc, #388]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046be:	4b5c      	ldr	r3, [pc, #368]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	4958      	ldr	r1, [pc, #352]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d015      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	4950      	ldr	r1, [pc, #320]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046fe:	d105      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004700:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a4a      	ldr	r2, [pc, #296]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800470a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004718:	4b45      	ldr	r3, [pc, #276]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	4942      	ldr	r1, [pc, #264]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b3d      	ldr	r3, [pc, #244]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004750:	4b37      	ldr	r3, [pc, #220]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004756:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	4934      	ldr	r1, [pc, #208]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800476e:	d105      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004770:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800477a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004788:	4b29      	ldr	r3, [pc, #164]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	4926      	ldr	r1, [pc, #152]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a6:	d105      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a20      	ldr	r2, [pc, #128]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d015      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	4918      	ldr	r1, [pc, #96]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047de:	d105      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a12      	ldr	r2, [pc, #72]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	490a      	ldr	r1, [pc, #40]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004816:	d105      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004824:	7cbb      	ldrb	r3, [r7, #18]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000

08004834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e049      	b.n	80048da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fc ff40 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f000 fa1a 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e042      	b.n	8004982 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a21      	ldr	r2, [pc, #132]	; (8004990 <HAL_TIM_Base_Start+0xac>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_TIM_Base_Start+0x5c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004916:	d013      	beq.n	8004940 <HAL_TIM_Base_Start+0x5c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <HAL_TIM_Base_Start+0xb0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_TIM_Base_Start+0x5c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <HAL_TIM_Base_Start+0xb4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_TIM_Base_Start+0x5c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1a      	ldr	r2, [pc, #104]	; (800499c <HAL_TIM_Base_Start+0xb8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_Base_Start+0x5c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <HAL_TIM_Base_Start+0xbc>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d115      	bne.n	800496c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_TIM_Base_Start+0xc0>)
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d015      	beq.n	800497e <HAL_TIM_Base_Start+0x9a>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d011      	beq.n	800497e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	e008      	b.n	800497e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e000      	b.n	8004980 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40013400 	.word	0x40013400
 80049a0:	40014000 	.word	0x40014000
 80049a4:	00010007 	.word	0x00010007

080049a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d020      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0202 	mvn.w	r2, #2
 80049dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f93b 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f92d 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f93e 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d020      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01b      	beq.n	8004a58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0204 	mvn.w	r2, #4
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f915 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f907 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f918 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d020      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f003 0308 	and.w	r3, r3, #8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0208 	mvn.w	r2, #8
 8004a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8ef 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8e1 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8f2 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0210 	mvn.w	r2, #16
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f8c9 	bl	8004c6e <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8bb 	bl	8004c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f8cc 	bl	8004c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0201 	mvn.w	r2, #1
 8004b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f899 	bl	8004c46 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f95b 	bl	8004df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f953 	bl	8004e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00c      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d007      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f886 	bl	8004c96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00c      	beq.n	8004bae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f06f 0220 	mvn.w	r2, #32
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f91b 	bl	8004de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00c      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f927 	bl	8004e20 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00c      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f91f 	bl	8004e34 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f917 	bl	8004e48 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00c      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f90f 	bl	8004e5c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a42      	ldr	r2, [pc, #264]	; (8004dc8 <TIM_Base_SetConfig+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a3f      	ldr	r2, [pc, #252]	; (8004dcc <TIM_Base_SetConfig+0x120>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a3e      	ldr	r2, [pc, #248]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3d      	ldr	r2, [pc, #244]	; (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a33      	ldr	r2, [pc, #204]	; (8004dc8 <TIM_Base_SetConfig+0x11c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01b      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d017      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a30      	ldr	r2, [pc, #192]	; (8004dcc <TIM_Base_SetConfig+0x120>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2f      	ldr	r2, [pc, #188]	; (8004dd0 <TIM_Base_SetConfig+0x124>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00f      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2e      	ldr	r2, [pc, #184]	; (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2c      	ldr	r2, [pc, #176]	; (8004ddc <TIM_Base_SetConfig+0x130>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	; (8004de0 <TIM_Base_SetConfig+0x134>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <TIM_Base_SetConfig+0x11c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00f      	beq.n	8004d94 <TIM_Base_SetConfig+0xe8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a17      	ldr	r2, [pc, #92]	; (8004dd4 <TIM_Base_SetConfig+0x128>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0xe8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <TIM_Base_SetConfig+0x12c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0xe8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <TIM_Base_SetConfig+0x130>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0xe8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a14      	ldr	r2, [pc, #80]	; (8004de0 <TIM_Base_SetConfig+0x134>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d103      	bne.n	8004d9c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f023 0201 	bic.w	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	611a      	str	r2, [r3, #16]
  }
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40013400 	.word	0x40013400
 8004dd8:	40014000 	.word	0x40014000
 8004ddc:	40014400 	.word	0x40014400
 8004de0:	40014800 	.word	0x40014800

08004de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e042      	b.n	8004f08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fc fbcb 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2224      	movs	r2, #36	; 0x24
 8004e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 faf4 	bl	80054a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f825 	bl	8004f10 <UART_SetConfig>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e01b      	b.n	8004f08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ede:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004eee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb73 	bl	80055ec <UART_CheckIdleState>
 8004f06:	4603      	mov	r3, r0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f14:	b08c      	sub	sp, #48	; 0x30
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4bab      	ldr	r3, [pc, #684]	; (80051ec <UART_SetConfig+0x2dc>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4aa0      	ldr	r2, [pc, #640]	; (80051f0 <UART_SetConfig+0x2e0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f86:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	f023 010f 	bic.w	r1, r3, #15
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a91      	ldr	r2, [pc, #580]	; (80051f4 <UART_SetConfig+0x2e4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d125      	bne.n	8005000 <UART_SetConfig+0xf0>
 8004fb4:	4b90      	ldr	r3, [pc, #576]	; (80051f8 <UART_SetConfig+0x2e8>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d81a      	bhi.n	8004ff8 <UART_SetConfig+0xe8>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0xb8>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004ff1 	.word	0x08004ff1
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fde:	e0d6      	b.n	800518e <UART_SetConfig+0x27e>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe6:	e0d2      	b.n	800518e <UART_SetConfig+0x27e>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fee:	e0ce      	b.n	800518e <UART_SetConfig+0x27e>
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff6:	e0ca      	b.n	800518e <UART_SetConfig+0x27e>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffe:	e0c6      	b.n	800518e <UART_SetConfig+0x27e>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7d      	ldr	r2, [pc, #500]	; (80051fc <UART_SetConfig+0x2ec>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d138      	bne.n	800507c <UART_SetConfig+0x16c>
 800500a:	4b7b      	ldr	r3, [pc, #492]	; (80051f8 <UART_SetConfig+0x2e8>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b0c      	cmp	r3, #12
 8005016:	d82d      	bhi.n	8005074 <UART_SetConfig+0x164>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0x110>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005055 	.word	0x08005055
 8005024:	08005075 	.word	0x08005075
 8005028:	08005075 	.word	0x08005075
 800502c:	08005075 	.word	0x08005075
 8005030:	08005065 	.word	0x08005065
 8005034:	08005075 	.word	0x08005075
 8005038:	08005075 	.word	0x08005075
 800503c:	08005075 	.word	0x08005075
 8005040:	0800505d 	.word	0x0800505d
 8005044:	08005075 	.word	0x08005075
 8005048:	08005075 	.word	0x08005075
 800504c:	08005075 	.word	0x08005075
 8005050:	0800506d 	.word	0x0800506d
 8005054:	2300      	movs	r3, #0
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800505a:	e098      	b.n	800518e <UART_SetConfig+0x27e>
 800505c:	2302      	movs	r3, #2
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005062:	e094      	b.n	800518e <UART_SetConfig+0x27e>
 8005064:	2304      	movs	r3, #4
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800506a:	e090      	b.n	800518e <UART_SetConfig+0x27e>
 800506c:	2308      	movs	r3, #8
 800506e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005072:	e08c      	b.n	800518e <UART_SetConfig+0x27e>
 8005074:	2310      	movs	r3, #16
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800507a:	e088      	b.n	800518e <UART_SetConfig+0x27e>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a5f      	ldr	r2, [pc, #380]	; (8005200 <UART_SetConfig+0x2f0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d125      	bne.n	80050d2 <UART_SetConfig+0x1c2>
 8005086:	4b5c      	ldr	r3, [pc, #368]	; (80051f8 <UART_SetConfig+0x2e8>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005090:	2b30      	cmp	r3, #48	; 0x30
 8005092:	d016      	beq.n	80050c2 <UART_SetConfig+0x1b2>
 8005094:	2b30      	cmp	r3, #48	; 0x30
 8005096:	d818      	bhi.n	80050ca <UART_SetConfig+0x1ba>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d00a      	beq.n	80050b2 <UART_SetConfig+0x1a2>
 800509c:	2b20      	cmp	r3, #32
 800509e:	d814      	bhi.n	80050ca <UART_SetConfig+0x1ba>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <UART_SetConfig+0x19a>
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d008      	beq.n	80050ba <UART_SetConfig+0x1aa>
 80050a8:	e00f      	b.n	80050ca <UART_SetConfig+0x1ba>
 80050aa:	2300      	movs	r3, #0
 80050ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b0:	e06d      	b.n	800518e <UART_SetConfig+0x27e>
 80050b2:	2302      	movs	r3, #2
 80050b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b8:	e069      	b.n	800518e <UART_SetConfig+0x27e>
 80050ba:	2304      	movs	r3, #4
 80050bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c0:	e065      	b.n	800518e <UART_SetConfig+0x27e>
 80050c2:	2308      	movs	r3, #8
 80050c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c8:	e061      	b.n	800518e <UART_SetConfig+0x27e>
 80050ca:	2310      	movs	r3, #16
 80050cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d0:	e05d      	b.n	800518e <UART_SetConfig+0x27e>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4b      	ldr	r2, [pc, #300]	; (8005204 <UART_SetConfig+0x2f4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d125      	bne.n	8005128 <UART_SetConfig+0x218>
 80050dc:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <UART_SetConfig+0x2e8>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050e6:	2bc0      	cmp	r3, #192	; 0xc0
 80050e8:	d016      	beq.n	8005118 <UART_SetConfig+0x208>
 80050ea:	2bc0      	cmp	r3, #192	; 0xc0
 80050ec:	d818      	bhi.n	8005120 <UART_SetConfig+0x210>
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d00a      	beq.n	8005108 <UART_SetConfig+0x1f8>
 80050f2:	2b80      	cmp	r3, #128	; 0x80
 80050f4:	d814      	bhi.n	8005120 <UART_SetConfig+0x210>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <UART_SetConfig+0x1f0>
 80050fa:	2b40      	cmp	r3, #64	; 0x40
 80050fc:	d008      	beq.n	8005110 <UART_SetConfig+0x200>
 80050fe:	e00f      	b.n	8005120 <UART_SetConfig+0x210>
 8005100:	2300      	movs	r3, #0
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005106:	e042      	b.n	800518e <UART_SetConfig+0x27e>
 8005108:	2302      	movs	r3, #2
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800510e:	e03e      	b.n	800518e <UART_SetConfig+0x27e>
 8005110:	2304      	movs	r3, #4
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005116:	e03a      	b.n	800518e <UART_SetConfig+0x27e>
 8005118:	2308      	movs	r3, #8
 800511a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800511e:	e036      	b.n	800518e <UART_SetConfig+0x27e>
 8005120:	2310      	movs	r3, #16
 8005122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005126:	e032      	b.n	800518e <UART_SetConfig+0x27e>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a30      	ldr	r2, [pc, #192]	; (80051f0 <UART_SetConfig+0x2e0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d12a      	bne.n	8005188 <UART_SetConfig+0x278>
 8005132:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <UART_SetConfig+0x2e8>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800513c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005140:	d01a      	beq.n	8005178 <UART_SetConfig+0x268>
 8005142:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005146:	d81b      	bhi.n	8005180 <UART_SetConfig+0x270>
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514c:	d00c      	beq.n	8005168 <UART_SetConfig+0x258>
 800514e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005152:	d815      	bhi.n	8005180 <UART_SetConfig+0x270>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <UART_SetConfig+0x250>
 8005158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515c:	d008      	beq.n	8005170 <UART_SetConfig+0x260>
 800515e:	e00f      	b.n	8005180 <UART_SetConfig+0x270>
 8005160:	2300      	movs	r3, #0
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005166:	e012      	b.n	800518e <UART_SetConfig+0x27e>
 8005168:	2302      	movs	r3, #2
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e00e      	b.n	800518e <UART_SetConfig+0x27e>
 8005170:	2304      	movs	r3, #4
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005176:	e00a      	b.n	800518e <UART_SetConfig+0x27e>
 8005178:	2308      	movs	r3, #8
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517e:	e006      	b.n	800518e <UART_SetConfig+0x27e>
 8005180:	2310      	movs	r3, #16
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005186:	e002      	b.n	800518e <UART_SetConfig+0x27e>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <UART_SetConfig+0x2e0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	f040 80a8 	bne.w	80052ea <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800519a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d834      	bhi.n	800520c <UART_SetConfig+0x2fc>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <UART_SetConfig+0x298>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	0800520d 	.word	0x0800520d
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	080051db 	.word	0x080051db
 80051bc:	0800520d 	.word	0x0800520d
 80051c0:	0800520d 	.word	0x0800520d
 80051c4:	0800520d 	.word	0x0800520d
 80051c8:	080051e3 	.word	0x080051e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051cc:	f7ff f8d0 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 80051d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051d2:	e021      	b.n	8005218 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <UART_SetConfig+0x2f8>)
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051d8:	e01e      	b.n	8005218 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051da:	f7ff f85b 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 80051de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051e0:	e01a      	b.n	8005218 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051e8:	e016      	b.n	8005218 <UART_SetConfig+0x308>
 80051ea:	bf00      	nop
 80051ec:	cfff69f3 	.word	0xcfff69f3
 80051f0:	40008000 	.word	0x40008000
 80051f4:	40013800 	.word	0x40013800
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40004400 	.word	0x40004400
 8005200:	40004800 	.word	0x40004800
 8005204:	40004c00 	.word	0x40004c00
 8005208:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005216:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 812a 	beq.w	8005474 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	4a9e      	ldr	r2, [pc, #632]	; (80054a0 <UART_SetConfig+0x590>)
 8005226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800522a:	461a      	mov	r2, r3
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005232:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4413      	add	r3, r2
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	429a      	cmp	r2, r3
 8005242:	d305      	bcc.n	8005250 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	429a      	cmp	r2, r3
 800524e:	d903      	bls.n	8005258 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005256:	e10d      	b.n	8005474 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2200      	movs	r2, #0
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	60fa      	str	r2, [r7, #12]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	4a8e      	ldr	r2, [pc, #568]	; (80054a0 <UART_SetConfig+0x590>)
 8005266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800526a:	b29b      	uxth	r3, r3
 800526c:	2200      	movs	r2, #0
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005276:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800527a:	f7fb fcbb 	bl	8000bf4 <__aeabi_uldivmod>
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	020b      	lsls	r3, r1, #8
 8005290:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005294:	0202      	lsls	r2, r0, #8
 8005296:	6979      	ldr	r1, [r7, #20]
 8005298:	6849      	ldr	r1, [r1, #4]
 800529a:	0849      	lsrs	r1, r1, #1
 800529c:	2000      	movs	r0, #0
 800529e:	460c      	mov	r4, r1
 80052a0:	4605      	mov	r5, r0
 80052a2:	eb12 0804 	adds.w	r8, r2, r4
 80052a6:	eb43 0905 	adc.w	r9, r3, r5
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	469a      	mov	sl, r3
 80052b2:	4693      	mov	fp, r2
 80052b4:	4652      	mov	r2, sl
 80052b6:	465b      	mov	r3, fp
 80052b8:	4640      	mov	r0, r8
 80052ba:	4649      	mov	r1, r9
 80052bc:	f7fb fc9a 	bl	8000bf4 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4613      	mov	r3, r2
 80052c6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ce:	d308      	bcc.n	80052e2 <UART_SetConfig+0x3d2>
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d6:	d204      	bcs.n	80052e2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a3a      	ldr	r2, [r7, #32]
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	e0c8      	b.n	8005474 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052e8:	e0c4      	b.n	8005474 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f2:	d167      	bne.n	80053c4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80052f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d828      	bhi.n	800534e <UART_SetConfig+0x43e>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x3f4>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	08005329 	.word	0x08005329
 8005308:	08005331 	.word	0x08005331
 800530c:	08005339 	.word	0x08005339
 8005310:	0800534f 	.word	0x0800534f
 8005314:	0800533f 	.word	0x0800533f
 8005318:	0800534f 	.word	0x0800534f
 800531c:	0800534f 	.word	0x0800534f
 8005320:	0800534f 	.word	0x0800534f
 8005324:	08005347 	.word	0x08005347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005328:	f7ff f822 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 800532c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800532e:	e014      	b.n	800535a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005330:	f7ff f834 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 8005334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005336:	e010      	b.n	800535a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005338:	4b5a      	ldr	r3, [pc, #360]	; (80054a4 <UART_SetConfig+0x594>)
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800533c:	e00d      	b.n	800535a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7fe ffa9 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8005342:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005344:	e009      	b.n	800535a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800534c:	e005      	b.n	800535a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8089 	beq.w	8005474 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	4a4e      	ldr	r2, [pc, #312]	; (80054a0 <UART_SetConfig+0x590>)
 8005368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800536c:	461a      	mov	r2, r3
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	fbb3 f3f2 	udiv	r3, r3, r2
 8005374:	005a      	lsls	r2, r3, #1
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	441a      	add	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2b0f      	cmp	r3, #15
 800538c:	d916      	bls.n	80053bc <UART_SetConfig+0x4ac>
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d212      	bcs.n	80053bc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f023 030f 	bic.w	r3, r3, #15
 800539e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	8bfb      	ldrh	r3, [r7, #30]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	8bfa      	ldrh	r2, [r7, #30]
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	e05b      	b.n	8005474 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053c2:	e057      	b.n	8005474 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d828      	bhi.n	800541e <UART_SetConfig+0x50e>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x4c4>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005409 	.word	0x08005409
 80053e0:	0800541f 	.word	0x0800541f
 80053e4:	0800540f 	.word	0x0800540f
 80053e8:	0800541f 	.word	0x0800541f
 80053ec:	0800541f 	.word	0x0800541f
 80053f0:	0800541f 	.word	0x0800541f
 80053f4:	08005417 	.word	0x08005417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7fe ffba 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053fe:	e014      	b.n	800542a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005400:	f7fe ffcc 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 8005404:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005406:	e010      	b.n	800542a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005408:	4b26      	ldr	r3, [pc, #152]	; (80054a4 <UART_SetConfig+0x594>)
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800540c:	e00d      	b.n	800542a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540e:	f7fe ff41 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8005412:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005414:	e009      	b.n	800542a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800541c:	e005      	b.n	800542a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005428:	bf00      	nop
    }

    if (pclk != 0U)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	2b00      	cmp	r3, #0
 800542e:	d021      	beq.n	8005474 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <UART_SetConfig+0x590>)
 8005436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543a:	461a      	mov	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	085b      	lsrs	r3, r3, #1
 8005448:	441a      	add	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005452:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d909      	bls.n	800546e <UART_SetConfig+0x55e>
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d205      	bcs.n	800546e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	b29a      	uxth	r2, r3
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60da      	str	r2, [r3, #12]
 800546c:	e002      	b.n	8005474 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	2201      	movs	r2, #1
 8005478:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2201      	movs	r2, #1
 8005480:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005490:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005494:	4618      	mov	r0, r3
 8005496:	3730      	adds	r7, #48	; 0x30
 8005498:	46bd      	mov	sp, r7
 800549a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549e:	bf00      	nop
 80054a0:	08006d94 	.word	0x08006d94
 80054a4:	00f42400 	.word	0x00f42400

080054a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01a      	beq.n	80055be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a6:	d10a      	bne.n	80055be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b098      	sub	sp, #96	; 0x60
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055fc:	f7fc f9a0 	bl	8001940 <HAL_GetTick>
 8005600:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d12f      	bne.n	8005670 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005618:	2200      	movs	r2, #0
 800561a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f88e 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d022      	beq.n	8005670 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563e:	653b      	str	r3, [r7, #80]	; 0x50
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005648:	647b      	str	r3, [r7, #68]	; 0x44
 800564a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800564e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e6      	bne.n	800562a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e063      	b.n	8005738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b04      	cmp	r3, #4
 800567c:	d149      	bne.n	8005712 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800567e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005686:	2200      	movs	r2, #0
 8005688:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f857 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d03c      	beq.n	8005712 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	623b      	str	r3, [r7, #32]
   return(result);
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	461a      	mov	r2, r3
 80056b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b6:	633b      	str	r3, [r7, #48]	; 0x30
 80056b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e6      	bne.n	8005698 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3308      	adds	r3, #8
 80056d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	e853 3f00 	ldrex	r3, [r3]
 80056d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 0301 	bic.w	r3, r3, #1
 80056e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ea:	61fa      	str	r2, [r7, #28]
 80056ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	69b9      	ldr	r1, [r7, #24]
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	617b      	str	r3, [r7, #20]
   return(result);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e5      	bne.n	80056ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e012      	b.n	8005738 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3758      	adds	r7, #88	; 0x58
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005750:	e04f      	b.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d04b      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fc f8f1 	bl	8001940 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <UART_WaitOnFlagUntilTimeout+0x30>
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e04e      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d037      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b80      	cmp	r3, #128	; 0x80
 8005786:	d034      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d031      	beq.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b08      	cmp	r3, #8
 800579a:	d110      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2208      	movs	r2, #8
 80057a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f838 	bl	800581a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2208      	movs	r2, #8
 80057ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e029      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057cc:	d111      	bne.n	80057f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f81e 	bl	800581a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e00f      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4013      	ands	r3, r2
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	bf0c      	ite	eq
 8005802:	2301      	moveq	r3, #1
 8005804:	2300      	movne	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	429a      	cmp	r2, r3
 800580e:	d0a0      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800581a:	b480      	push	{r7}
 800581c:	b095      	sub	sp, #84	; 0x54
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005840:	643b      	str	r3, [r7, #64]	; 0x40
 8005842:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e6      	bne.n	8005822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	61fb      	str	r3, [r7, #28]
   return(result);
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3308      	adds	r3, #8
 8005876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800587e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e3      	bne.n	8005854 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d118      	bne.n	80058c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f023 0310 	bic.w	r3, r3, #16
 80058a8:	647b      	str	r3, [r7, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6979      	ldr	r1, [r7, #20]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	613b      	str	r3, [r7, #16]
   return(result);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e6      	bne.n	8005894 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80058da:	bf00      	nop
 80058dc:	3754      	adds	r7, #84	; 0x54
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_UARTEx_DisableFifoMode+0x16>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e027      	b.n	800594c <HAL_UARTEx_DisableFifoMode+0x66>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2224      	movs	r2, #36	; 0x24
 8005908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800592a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800596c:	2302      	movs	r3, #2
 800596e:	e02d      	b.n	80059cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2224      	movs	r2, #36	; 0x24
 800597c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0201 	bic.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f84f 	bl	8005a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e02d      	b.n	8005a48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0201 	bic.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f811 	bl	8005a50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d108      	bne.n	8005a72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a70:	e031      	b.n	8005ad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a72:	2308      	movs	r3, #8
 8005a74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a76:	2308      	movs	r3, #8
 8005a78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	0e5b      	lsrs	r3, r3, #25
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	0f5b      	lsrs	r3, r3, #29
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	7b3a      	ldrb	r2, [r7, #12]
 8005a9e:	4911      	ldr	r1, [pc, #68]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8005aa0:	5c8a      	ldrb	r2, [r1, r2]
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aa6:	7b3a      	ldrb	r2, [r7, #12]
 8005aa8:	490f      	ldr	r1, [pc, #60]	; (8005ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8005aaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aac:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	7b7a      	ldrb	r2, [r7, #13]
 8005abc:	4909      	ldr	r1, [pc, #36]	; (8005ae4 <UARTEx_SetNbDataToProcess+0x94>)
 8005abe:	5c8a      	ldrb	r2, [r1, r2]
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ac4:	7b7a      	ldrb	r2, [r7, #13]
 8005ac6:	4908      	ldr	r1, [pc, #32]	; (8005ae8 <UARTEx_SetNbDataToProcess+0x98>)
 8005ac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aca:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	08006dac 	.word	0x08006dac
 8005ae8:	08006db4 	.word	0x08006db4

08005aec <malloc>:
 8005aec:	4b02      	ldr	r3, [pc, #8]	; (8005af8 <malloc+0xc>)
 8005aee:	4601      	mov	r1, r0
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	f000 b823 	b.w	8005b3c <_malloc_r>
 8005af6:	bf00      	nop
 8005af8:	20000058 	.word	0x20000058

08005afc <sbrk_aligned>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4e0e      	ldr	r6, [pc, #56]	; (8005b38 <sbrk_aligned+0x3c>)
 8005b00:	460c      	mov	r4, r1
 8005b02:	6831      	ldr	r1, [r6, #0]
 8005b04:	4605      	mov	r5, r0
 8005b06:	b911      	cbnz	r1, 8005b0e <sbrk_aligned+0x12>
 8005b08:	f000 f8ac 	bl	8005c64 <_sbrk_r>
 8005b0c:	6030      	str	r0, [r6, #0]
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 f8a7 	bl	8005c64 <_sbrk_r>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d00a      	beq.n	8005b30 <sbrk_aligned+0x34>
 8005b1a:	1cc4      	adds	r4, r0, #3
 8005b1c:	f024 0403 	bic.w	r4, r4, #3
 8005b20:	42a0      	cmp	r0, r4
 8005b22:	d007      	beq.n	8005b34 <sbrk_aligned+0x38>
 8005b24:	1a21      	subs	r1, r4, r0
 8005b26:	4628      	mov	r0, r5
 8005b28:	f000 f89c 	bl	8005c64 <_sbrk_r>
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	d101      	bne.n	8005b34 <sbrk_aligned+0x38>
 8005b30:	f04f 34ff 	mov.w	r4, #4294967295
 8005b34:	4620      	mov	r0, r4
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	200001ec 	.word	0x200001ec

08005b3c <_malloc_r>:
 8005b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b40:	1ccd      	adds	r5, r1, #3
 8005b42:	f025 0503 	bic.w	r5, r5, #3
 8005b46:	3508      	adds	r5, #8
 8005b48:	2d0c      	cmp	r5, #12
 8005b4a:	bf38      	it	cc
 8005b4c:	250c      	movcc	r5, #12
 8005b4e:	2d00      	cmp	r5, #0
 8005b50:	4607      	mov	r7, r0
 8005b52:	db01      	blt.n	8005b58 <_malloc_r+0x1c>
 8005b54:	42a9      	cmp	r1, r5
 8005b56:	d905      	bls.n	8005b64 <_malloc_r+0x28>
 8005b58:	230c      	movs	r3, #12
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c38 <_malloc_r+0xfc>
 8005b68:	f000 f868 	bl	8005c3c <__malloc_lock>
 8005b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b70:	461c      	mov	r4, r3
 8005b72:	bb5c      	cbnz	r4, 8005bcc <_malloc_r+0x90>
 8005b74:	4629      	mov	r1, r5
 8005b76:	4638      	mov	r0, r7
 8005b78:	f7ff ffc0 	bl	8005afc <sbrk_aligned>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	4604      	mov	r4, r0
 8005b80:	d155      	bne.n	8005c2e <_malloc_r+0xf2>
 8005b82:	f8d8 4000 	ldr.w	r4, [r8]
 8005b86:	4626      	mov	r6, r4
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	d145      	bne.n	8005c18 <_malloc_r+0xdc>
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	d048      	beq.n	8005c22 <_malloc_r+0xe6>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	4631      	mov	r1, r6
 8005b94:	4638      	mov	r0, r7
 8005b96:	eb04 0903 	add.w	r9, r4, r3
 8005b9a:	f000 f863 	bl	8005c64 <_sbrk_r>
 8005b9e:	4581      	cmp	r9, r0
 8005ba0:	d13f      	bne.n	8005c22 <_malloc_r+0xe6>
 8005ba2:	6821      	ldr	r1, [r4, #0]
 8005ba4:	1a6d      	subs	r5, r5, r1
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f7ff ffa7 	bl	8005afc <sbrk_aligned>
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d037      	beq.n	8005c22 <_malloc_r+0xe6>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	442b      	add	r3, r5
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d038      	beq.n	8005c32 <_malloc_r+0xf6>
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	42a2      	cmp	r2, r4
 8005bc4:	d12b      	bne.n	8005c1e <_malloc_r+0xe2>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	e00f      	b.n	8005bec <_malloc_r+0xb0>
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	1b52      	subs	r2, r2, r5
 8005bd0:	d41f      	bmi.n	8005c12 <_malloc_r+0xd6>
 8005bd2:	2a0b      	cmp	r2, #11
 8005bd4:	d917      	bls.n	8005c06 <_malloc_r+0xca>
 8005bd6:	1961      	adds	r1, r4, r5
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	6025      	str	r5, [r4, #0]
 8005bdc:	bf18      	it	ne
 8005bde:	6059      	strne	r1, [r3, #4]
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	bf08      	it	eq
 8005be4:	f8c8 1000 	streq.w	r1, [r8]
 8005be8:	5162      	str	r2, [r4, r5]
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	4638      	mov	r0, r7
 8005bee:	f104 060b 	add.w	r6, r4, #11
 8005bf2:	f000 f829 	bl	8005c48 <__malloc_unlock>
 8005bf6:	f026 0607 	bic.w	r6, r6, #7
 8005bfa:	1d23      	adds	r3, r4, #4
 8005bfc:	1af2      	subs	r2, r6, r3
 8005bfe:	d0ae      	beq.n	8005b5e <_malloc_r+0x22>
 8005c00:	1b9b      	subs	r3, r3, r6
 8005c02:	50a3      	str	r3, [r4, r2]
 8005c04:	e7ab      	b.n	8005b5e <_malloc_r+0x22>
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	6862      	ldr	r2, [r4, #4]
 8005c0a:	d1dd      	bne.n	8005bc8 <_malloc_r+0x8c>
 8005c0c:	f8c8 2000 	str.w	r2, [r8]
 8005c10:	e7ec      	b.n	8005bec <_malloc_r+0xb0>
 8005c12:	4623      	mov	r3, r4
 8005c14:	6864      	ldr	r4, [r4, #4]
 8005c16:	e7ac      	b.n	8005b72 <_malloc_r+0x36>
 8005c18:	4634      	mov	r4, r6
 8005c1a:	6876      	ldr	r6, [r6, #4]
 8005c1c:	e7b4      	b.n	8005b88 <_malloc_r+0x4c>
 8005c1e:	4613      	mov	r3, r2
 8005c20:	e7cc      	b.n	8005bbc <_malloc_r+0x80>
 8005c22:	230c      	movs	r3, #12
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4638      	mov	r0, r7
 8005c28:	f000 f80e 	bl	8005c48 <__malloc_unlock>
 8005c2c:	e797      	b.n	8005b5e <_malloc_r+0x22>
 8005c2e:	6025      	str	r5, [r4, #0]
 8005c30:	e7dc      	b.n	8005bec <_malloc_r+0xb0>
 8005c32:	605b      	str	r3, [r3, #4]
 8005c34:	deff      	udf	#255	; 0xff
 8005c36:	bf00      	nop
 8005c38:	200001e8 	.word	0x200001e8

08005c3c <__malloc_lock>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	; (8005c44 <__malloc_lock+0x8>)
 8005c3e:	f000 b84b 	b.w	8005cd8 <__retarget_lock_acquire_recursive>
 8005c42:	bf00      	nop
 8005c44:	2000032c 	.word	0x2000032c

08005c48 <__malloc_unlock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__malloc_unlock+0x8>)
 8005c4a:	f000 b846 	b.w	8005cda <__retarget_lock_release_recursive>
 8005c4e:	bf00      	nop
 8005c50:	2000032c 	.word	0x2000032c

08005c54 <memset>:
 8005c54:	4402      	add	r2, r0
 8005c56:	4603      	mov	r3, r0
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d100      	bne.n	8005c5e <memset+0xa>
 8005c5c:	4770      	bx	lr
 8005c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c62:	e7f9      	b.n	8005c58 <memset+0x4>

08005c64 <_sbrk_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d06      	ldr	r5, [pc, #24]	; (8005c80 <_sbrk_r+0x1c>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	f7fb fd90 	bl	8001794 <_sbrk>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_sbrk_r+0x1a>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_sbrk_r+0x1a>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20000328 	.word	0x20000328

08005c84 <__errno>:
 8005c84:	4b01      	ldr	r3, [pc, #4]	; (8005c8c <__errno+0x8>)
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000058 	.word	0x20000058

08005c90 <__libc_init_array>:
 8005c90:	b570      	push	{r4, r5, r6, lr}
 8005c92:	4d0d      	ldr	r5, [pc, #52]	; (8005cc8 <__libc_init_array+0x38>)
 8005c94:	4c0d      	ldr	r4, [pc, #52]	; (8005ccc <__libc_init_array+0x3c>)
 8005c96:	1b64      	subs	r4, r4, r5
 8005c98:	10a4      	asrs	r4, r4, #2
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	42a6      	cmp	r6, r4
 8005c9e:	d109      	bne.n	8005cb4 <__libc_init_array+0x24>
 8005ca0:	4d0b      	ldr	r5, [pc, #44]	; (8005cd0 <__libc_init_array+0x40>)
 8005ca2:	4c0c      	ldr	r4, [pc, #48]	; (8005cd4 <__libc_init_array+0x44>)
 8005ca4:	f001 f85c 	bl	8006d60 <_init>
 8005ca8:	1b64      	subs	r4, r4, r5
 8005caa:	10a4      	asrs	r4, r4, #2
 8005cac:	2600      	movs	r6, #0
 8005cae:	42a6      	cmp	r6, r4
 8005cb0:	d105      	bne.n	8005cbe <__libc_init_array+0x2e>
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb8:	4798      	blx	r3
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7ee      	b.n	8005c9c <__libc_init_array+0xc>
 8005cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc2:	4798      	blx	r3
 8005cc4:	3601      	adds	r6, #1
 8005cc6:	e7f2      	b.n	8005cae <__libc_init_array+0x1e>
 8005cc8:	08006fa0 	.word	0x08006fa0
 8005ccc:	08006fa0 	.word	0x08006fa0
 8005cd0:	08006fa0 	.word	0x08006fa0
 8005cd4:	08006fa4 	.word	0x08006fa4

08005cd8 <__retarget_lock_acquire_recursive>:
 8005cd8:	4770      	bx	lr

08005cda <__retarget_lock_release_recursive>:
 8005cda:	4770      	bx	lr
 8005cdc:	0000      	movs	r0, r0
	...

08005ce0 <sin>:
 8005ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ce2:	ec53 2b10 	vmov	r2, r3, d0
 8005ce6:	4828      	ldr	r0, [pc, #160]	; (8005d88 <sin+0xa8>)
 8005ce8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005cec:	4281      	cmp	r1, r0
 8005cee:	dc07      	bgt.n	8005d00 <sin+0x20>
 8005cf0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005d80 <sin+0xa0>
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	b005      	add	sp, #20
 8005cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cfc:	f000 b910 	b.w	8005f20 <__kernel_sin>
 8005d00:	4822      	ldr	r0, [pc, #136]	; (8005d8c <sin+0xac>)
 8005d02:	4281      	cmp	r1, r0
 8005d04:	dd09      	ble.n	8005d1a <sin+0x3a>
 8005d06:	ee10 0a10 	vmov	r0, s0
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f7fa fa88 	bl	8000220 <__aeabi_dsub>
 8005d10:	ec41 0b10 	vmov	d0, r0, r1
 8005d14:	b005      	add	sp, #20
 8005d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d1a:	4668      	mov	r0, sp
 8005d1c:	f000 f9c0 	bl	80060a0 <__ieee754_rem_pio2>
 8005d20:	f000 0003 	and.w	r0, r0, #3
 8005d24:	2801      	cmp	r0, #1
 8005d26:	d00c      	beq.n	8005d42 <sin+0x62>
 8005d28:	2802      	cmp	r0, #2
 8005d2a:	d011      	beq.n	8005d50 <sin+0x70>
 8005d2c:	b9f0      	cbnz	r0, 8005d6c <sin+0x8c>
 8005d2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d32:	ed9d 0b00 	vldr	d0, [sp]
 8005d36:	2001      	movs	r0, #1
 8005d38:	f000 f8f2 	bl	8005f20 <__kernel_sin>
 8005d3c:	ec51 0b10 	vmov	r0, r1, d0
 8005d40:	e7e6      	b.n	8005d10 <sin+0x30>
 8005d42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d46:	ed9d 0b00 	vldr	d0, [sp]
 8005d4a:	f000 f821 	bl	8005d90 <__kernel_cos>
 8005d4e:	e7f5      	b.n	8005d3c <sin+0x5c>
 8005d50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d54:	ed9d 0b00 	vldr	d0, [sp]
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f000 f8e1 	bl	8005f20 <__kernel_sin>
 8005d5e:	ec53 2b10 	vmov	r2, r3, d0
 8005d62:	ee10 0a10 	vmov	r0, s0
 8005d66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005d6a:	e7d1      	b.n	8005d10 <sin+0x30>
 8005d6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005d70:	ed9d 0b00 	vldr	d0, [sp]
 8005d74:	f000 f80c 	bl	8005d90 <__kernel_cos>
 8005d78:	e7f1      	b.n	8005d5e <sin+0x7e>
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w
	...
 8005d88:	3fe921fb 	.word	0x3fe921fb
 8005d8c:	7fefffff 	.word	0x7fefffff

08005d90 <__kernel_cos>:
 8005d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	ec57 6b10 	vmov	r6, r7, d0
 8005d98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005d9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005da0:	ed8d 1b00 	vstr	d1, [sp]
 8005da4:	da07      	bge.n	8005db6 <__kernel_cos+0x26>
 8005da6:	ee10 0a10 	vmov	r0, s0
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fe8a 	bl	8000ac4 <__aeabi_d2iz>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f000 8088 	beq.w	8005ec6 <__kernel_cos+0x136>
 8005db6:	4632      	mov	r2, r6
 8005db8:	463b      	mov	r3, r7
 8005dba:	4630      	mov	r0, r6
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	f7fa fbe7 	bl	8000590 <__aeabi_dmul>
 8005dc2:	4b51      	ldr	r3, [pc, #324]	; (8005f08 <__kernel_cos+0x178>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	460d      	mov	r5, r1
 8005dca:	f7fa fbe1 	bl	8000590 <__aeabi_dmul>
 8005dce:	a340      	add	r3, pc, #256	; (adr r3, 8005ed0 <__kernel_cos+0x140>)
 8005dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	468b      	mov	fp, r1
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4629      	mov	r1, r5
 8005ddc:	f7fa fbd8 	bl	8000590 <__aeabi_dmul>
 8005de0:	a33d      	add	r3, pc, #244	; (adr r3, 8005ed8 <__kernel_cos+0x148>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fa1d 	bl	8000224 <__adddf3>
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	f7fa fbcf 	bl	8000590 <__aeabi_dmul>
 8005df2:	a33b      	add	r3, pc, #236	; (adr r3, 8005ee0 <__kernel_cos+0x150>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fa12 	bl	8000220 <__aeabi_dsub>
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	462b      	mov	r3, r5
 8005e00:	f7fa fbc6 	bl	8000590 <__aeabi_dmul>
 8005e04:	a338      	add	r3, pc, #224	; (adr r3, 8005ee8 <__kernel_cos+0x158>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f7fa fa0b 	bl	8000224 <__adddf3>
 8005e0e:	4622      	mov	r2, r4
 8005e10:	462b      	mov	r3, r5
 8005e12:	f7fa fbbd 	bl	8000590 <__aeabi_dmul>
 8005e16:	a336      	add	r3, pc, #216	; (adr r3, 8005ef0 <__kernel_cos+0x160>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fa00 	bl	8000220 <__aeabi_dsub>
 8005e20:	4622      	mov	r2, r4
 8005e22:	462b      	mov	r3, r5
 8005e24:	f7fa fbb4 	bl	8000590 <__aeabi_dmul>
 8005e28:	a333      	add	r3, pc, #204	; (adr r3, 8005ef8 <__kernel_cos+0x168>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa f9f9 	bl	8000224 <__adddf3>
 8005e32:	4622      	mov	r2, r4
 8005e34:	462b      	mov	r3, r5
 8005e36:	f7fa fbab 	bl	8000590 <__aeabi_dmul>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	f7fa fba7 	bl	8000590 <__aeabi_dmul>
 8005e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e46:	4604      	mov	r4, r0
 8005e48:	460d      	mov	r5, r1
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	f7fa fb9f 	bl	8000590 <__aeabi_dmul>
 8005e52:	460b      	mov	r3, r1
 8005e54:	4602      	mov	r2, r0
 8005e56:	4629      	mov	r1, r5
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7fa f9e1 	bl	8000220 <__aeabi_dsub>
 8005e5e:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <__kernel_cos+0x17c>)
 8005e60:	4598      	cmp	r8, r3
 8005e62:	4606      	mov	r6, r0
 8005e64:	460f      	mov	r7, r1
 8005e66:	dc10      	bgt.n	8005e8a <__kernel_cos+0xfa>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	4659      	mov	r1, fp
 8005e70:	f7fa f9d6 	bl	8000220 <__aeabi_dsub>
 8005e74:	460b      	mov	r3, r1
 8005e76:	4926      	ldr	r1, [pc, #152]	; (8005f10 <__kernel_cos+0x180>)
 8005e78:	4602      	mov	r2, r0
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	f7fa f9d0 	bl	8000220 <__aeabi_dsub>
 8005e80:	ec41 0b10 	vmov	d0, r0, r1
 8005e84:	b003      	add	sp, #12
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8a:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <__kernel_cos+0x184>)
 8005e8c:	4920      	ldr	r1, [pc, #128]	; (8005f10 <__kernel_cos+0x180>)
 8005e8e:	4598      	cmp	r8, r3
 8005e90:	bfcc      	ite	gt
 8005e92:	4d21      	ldrgt	r5, [pc, #132]	; (8005f18 <__kernel_cos+0x188>)
 8005e94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005e98:	2400      	movs	r4, #0
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	f7fa f9be 	bl	8000220 <__aeabi_dsub>
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4680      	mov	r8, r0
 8005ea8:	4689      	mov	r9, r1
 8005eaa:	462b      	mov	r3, r5
 8005eac:	4650      	mov	r0, sl
 8005eae:	4659      	mov	r1, fp
 8005eb0:	f7fa f9b6 	bl	8000220 <__aeabi_dsub>
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	f7fa f9b2 	bl	8000220 <__aeabi_dsub>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	e7da      	b.n	8005e7c <__kernel_cos+0xec>
 8005ec6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005f00 <__kernel_cos+0x170>
 8005eca:	e7db      	b.n	8005e84 <__kernel_cos+0xf4>
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	be8838d4 	.word	0xbe8838d4
 8005ed4:	bda8fae9 	.word	0xbda8fae9
 8005ed8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005edc:	3e21ee9e 	.word	0x3e21ee9e
 8005ee0:	809c52ad 	.word	0x809c52ad
 8005ee4:	3e927e4f 	.word	0x3e927e4f
 8005ee8:	19cb1590 	.word	0x19cb1590
 8005eec:	3efa01a0 	.word	0x3efa01a0
 8005ef0:	16c15177 	.word	0x16c15177
 8005ef4:	3f56c16c 	.word	0x3f56c16c
 8005ef8:	5555554c 	.word	0x5555554c
 8005efc:	3fa55555 	.word	0x3fa55555
 8005f00:	00000000 	.word	0x00000000
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	3fe00000 	.word	0x3fe00000
 8005f0c:	3fd33332 	.word	0x3fd33332
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	3fe90000 	.word	0x3fe90000
 8005f18:	3fd20000 	.word	0x3fd20000
 8005f1c:	00000000 	.word	0x00000000

08005f20 <__kernel_sin>:
 8005f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f24:	ed2d 8b04 	vpush	{d8-d9}
 8005f28:	eeb0 8a41 	vmov.f32	s16, s2
 8005f2c:	eef0 8a61 	vmov.f32	s17, s3
 8005f30:	ec55 4b10 	vmov	r4, r5, d0
 8005f34:	b083      	sub	sp, #12
 8005f36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005f3e:	9001      	str	r0, [sp, #4]
 8005f40:	da06      	bge.n	8005f50 <__kernel_sin+0x30>
 8005f42:	ee10 0a10 	vmov	r0, s0
 8005f46:	4629      	mov	r1, r5
 8005f48:	f7fa fdbc 	bl	8000ac4 <__aeabi_d2iz>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d051      	beq.n	8005ff4 <__kernel_sin+0xd4>
 8005f50:	4622      	mov	r2, r4
 8005f52:	462b      	mov	r3, r5
 8005f54:	4620      	mov	r0, r4
 8005f56:	4629      	mov	r1, r5
 8005f58:	f7fa fb1a 	bl	8000590 <__aeabi_dmul>
 8005f5c:	4682      	mov	sl, r0
 8005f5e:	468b      	mov	fp, r1
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7fa fb12 	bl	8000590 <__aeabi_dmul>
 8005f6c:	a341      	add	r3, pc, #260	; (adr r3, 8006074 <__kernel_sin+0x154>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	4680      	mov	r8, r0
 8005f74:	4689      	mov	r9, r1
 8005f76:	4650      	mov	r0, sl
 8005f78:	4659      	mov	r1, fp
 8005f7a:	f7fa fb09 	bl	8000590 <__aeabi_dmul>
 8005f7e:	a33f      	add	r3, pc, #252	; (adr r3, 800607c <__kernel_sin+0x15c>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa f94c 	bl	8000220 <__aeabi_dsub>
 8005f88:	4652      	mov	r2, sl
 8005f8a:	465b      	mov	r3, fp
 8005f8c:	f7fa fb00 	bl	8000590 <__aeabi_dmul>
 8005f90:	a33c      	add	r3, pc, #240	; (adr r3, 8006084 <__kernel_sin+0x164>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa f945 	bl	8000224 <__adddf3>
 8005f9a:	4652      	mov	r2, sl
 8005f9c:	465b      	mov	r3, fp
 8005f9e:	f7fa faf7 	bl	8000590 <__aeabi_dmul>
 8005fa2:	a33a      	add	r3, pc, #232	; (adr r3, 800608c <__kernel_sin+0x16c>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa f93a 	bl	8000220 <__aeabi_dsub>
 8005fac:	4652      	mov	r2, sl
 8005fae:	465b      	mov	r3, fp
 8005fb0:	f7fa faee 	bl	8000590 <__aeabi_dmul>
 8005fb4:	a337      	add	r3, pc, #220	; (adr r3, 8006094 <__kernel_sin+0x174>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f7fa f933 	bl	8000224 <__adddf3>
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	460f      	mov	r7, r1
 8005fc4:	b9eb      	cbnz	r3, 8006002 <__kernel_sin+0xe2>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4650      	mov	r0, sl
 8005fcc:	4659      	mov	r1, fp
 8005fce:	f7fa fadf 	bl	8000590 <__aeabi_dmul>
 8005fd2:	a325      	add	r3, pc, #148	; (adr r3, 8006068 <__kernel_sin+0x148>)
 8005fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd8:	f7fa f922 	bl	8000220 <__aeabi_dsub>
 8005fdc:	4642      	mov	r2, r8
 8005fde:	464b      	mov	r3, r9
 8005fe0:	f7fa fad6 	bl	8000590 <__aeabi_dmul>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	f7fa f91a 	bl	8000224 <__adddf3>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	ec45 4b10 	vmov	d0, r4, r5
 8005ff8:	b003      	add	sp, #12
 8005ffa:	ecbd 8b04 	vpop	{d8-d9}
 8005ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <__kernel_sin+0x150>)
 8006004:	ec51 0b18 	vmov	r0, r1, d8
 8006008:	2200      	movs	r2, #0
 800600a:	f7fa fac1 	bl	8000590 <__aeabi_dmul>
 800600e:	4632      	mov	r2, r6
 8006010:	ec41 0b19 	vmov	d9, r0, r1
 8006014:	463b      	mov	r3, r7
 8006016:	4640      	mov	r0, r8
 8006018:	4649      	mov	r1, r9
 800601a:	f7fa fab9 	bl	8000590 <__aeabi_dmul>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	ec51 0b19 	vmov	r0, r1, d9
 8006026:	f7fa f8fb 	bl	8000220 <__aeabi_dsub>
 800602a:	4652      	mov	r2, sl
 800602c:	465b      	mov	r3, fp
 800602e:	f7fa faaf 	bl	8000590 <__aeabi_dmul>
 8006032:	ec53 2b18 	vmov	r2, r3, d8
 8006036:	f7fa f8f3 	bl	8000220 <__aeabi_dsub>
 800603a:	a30b      	add	r3, pc, #44	; (adr r3, 8006068 <__kernel_sin+0x148>)
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	4606      	mov	r6, r0
 8006042:	460f      	mov	r7, r1
 8006044:	4640      	mov	r0, r8
 8006046:	4649      	mov	r1, r9
 8006048:	f7fa faa2 	bl	8000590 <__aeabi_dmul>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4630      	mov	r0, r6
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa f8e6 	bl	8000224 <__adddf3>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4620      	mov	r0, r4
 800605e:	4629      	mov	r1, r5
 8006060:	f7fa f8de 	bl	8000220 <__aeabi_dsub>
 8006064:	e7c4      	b.n	8005ff0 <__kernel_sin+0xd0>
 8006066:	bf00      	nop
 8006068:	55555549 	.word	0x55555549
 800606c:	3fc55555 	.word	0x3fc55555
 8006070:	3fe00000 	.word	0x3fe00000
 8006074:	5acfd57c 	.word	0x5acfd57c
 8006078:	3de5d93a 	.word	0x3de5d93a
 800607c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006080:	3e5ae5e6 	.word	0x3e5ae5e6
 8006084:	57b1fe7d 	.word	0x57b1fe7d
 8006088:	3ec71de3 	.word	0x3ec71de3
 800608c:	19c161d5 	.word	0x19c161d5
 8006090:	3f2a01a0 	.word	0x3f2a01a0
 8006094:	1110f8a6 	.word	0x1110f8a6
 8006098:	3f811111 	.word	0x3f811111
 800609c:	00000000 	.word	0x00000000

080060a0 <__ieee754_rem_pio2>:
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	ed2d 8b02 	vpush	{d8}
 80060a8:	ec55 4b10 	vmov	r4, r5, d0
 80060ac:	4bca      	ldr	r3, [pc, #808]	; (80063d8 <__ieee754_rem_pio2+0x338>)
 80060ae:	b08b      	sub	sp, #44	; 0x2c
 80060b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80060b4:	4598      	cmp	r8, r3
 80060b6:	4682      	mov	sl, r0
 80060b8:	9502      	str	r5, [sp, #8]
 80060ba:	dc08      	bgt.n	80060ce <__ieee754_rem_pio2+0x2e>
 80060bc:	2200      	movs	r2, #0
 80060be:	2300      	movs	r3, #0
 80060c0:	ed80 0b00 	vstr	d0, [r0]
 80060c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80060c8:	f04f 0b00 	mov.w	fp, #0
 80060cc:	e028      	b.n	8006120 <__ieee754_rem_pio2+0x80>
 80060ce:	4bc3      	ldr	r3, [pc, #780]	; (80063dc <__ieee754_rem_pio2+0x33c>)
 80060d0:	4598      	cmp	r8, r3
 80060d2:	dc78      	bgt.n	80061c6 <__ieee754_rem_pio2+0x126>
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	4ec2      	ldr	r6, [pc, #776]	; (80063e0 <__ieee754_rem_pio2+0x340>)
 80060d8:	2b00      	cmp	r3, #0
 80060da:	ee10 0a10 	vmov	r0, s0
 80060de:	a3b0      	add	r3, pc, #704	; (adr r3, 80063a0 <__ieee754_rem_pio2+0x300>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	4629      	mov	r1, r5
 80060e6:	dd39      	ble.n	800615c <__ieee754_rem_pio2+0xbc>
 80060e8:	f7fa f89a 	bl	8000220 <__aeabi_dsub>
 80060ec:	45b0      	cmp	r8, r6
 80060ee:	4604      	mov	r4, r0
 80060f0:	460d      	mov	r5, r1
 80060f2:	d01b      	beq.n	800612c <__ieee754_rem_pio2+0x8c>
 80060f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x308>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa f891 	bl	8000220 <__aeabi_dsub>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	e9ca 2300 	strd	r2, r3, [sl]
 8006106:	4620      	mov	r0, r4
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa f889 	bl	8000220 <__aeabi_dsub>
 800610e:	a3a6      	add	r3, pc, #664	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x308>)
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f7fa f884 	bl	8000220 <__aeabi_dsub>
 8006118:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800611c:	f04f 0b01 	mov.w	fp, #1
 8006120:	4658      	mov	r0, fp
 8006122:	b00b      	add	sp, #44	; 0x2c
 8006124:	ecbd 8b02 	vpop	{d8}
 8006128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612c:	a3a0      	add	r3, pc, #640	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x310>)
 800612e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006132:	f7fa f875 	bl	8000220 <__aeabi_dsub>
 8006136:	a3a0      	add	r3, pc, #640	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x318>)
 8006138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613c:	4604      	mov	r4, r0
 800613e:	460d      	mov	r5, r1
 8006140:	f7fa f86e 	bl	8000220 <__aeabi_dsub>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	e9ca 2300 	strd	r2, r3, [sl]
 800614c:	4620      	mov	r0, r4
 800614e:	4629      	mov	r1, r5
 8006150:	f7fa f866 	bl	8000220 <__aeabi_dsub>
 8006154:	a398      	add	r3, pc, #608	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x318>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	e7db      	b.n	8006114 <__ieee754_rem_pio2+0x74>
 800615c:	f7fa f862 	bl	8000224 <__adddf3>
 8006160:	45b0      	cmp	r8, r6
 8006162:	4604      	mov	r4, r0
 8006164:	460d      	mov	r5, r1
 8006166:	d016      	beq.n	8006196 <__ieee754_rem_pio2+0xf6>
 8006168:	a38f      	add	r3, pc, #572	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x308>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7fa f859 	bl	8000224 <__adddf3>
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	e9ca 2300 	strd	r2, r3, [sl]
 800617a:	4620      	mov	r0, r4
 800617c:	4629      	mov	r1, r5
 800617e:	f7fa f84f 	bl	8000220 <__aeabi_dsub>
 8006182:	a389      	add	r3, pc, #548	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x308>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa f84c 	bl	8000224 <__adddf3>
 800618c:	f04f 3bff 	mov.w	fp, #4294967295
 8006190:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006194:	e7c4      	b.n	8006120 <__ieee754_rem_pio2+0x80>
 8006196:	a386      	add	r3, pc, #536	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x310>)
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f7fa f842 	bl	8000224 <__adddf3>
 80061a0:	a385      	add	r3, pc, #532	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x318>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	4604      	mov	r4, r0
 80061a8:	460d      	mov	r5, r1
 80061aa:	f7fa f83b 	bl	8000224 <__adddf3>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	e9ca 2300 	strd	r2, r3, [sl]
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa f831 	bl	8000220 <__aeabi_dsub>
 80061be:	a37e      	add	r3, pc, #504	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x318>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	e7e0      	b.n	8006188 <__ieee754_rem_pio2+0xe8>
 80061c6:	4b87      	ldr	r3, [pc, #540]	; (80063e4 <__ieee754_rem_pio2+0x344>)
 80061c8:	4598      	cmp	r8, r3
 80061ca:	f300 80d8 	bgt.w	800637e <__ieee754_rem_pio2+0x2de>
 80061ce:	f000 f96d 	bl	80064ac <fabs>
 80061d2:	ec55 4b10 	vmov	r4, r5, d0
 80061d6:	ee10 0a10 	vmov	r0, s0
 80061da:	a379      	add	r3, pc, #484	; (adr r3, 80063c0 <__ieee754_rem_pio2+0x320>)
 80061dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa f9d5 	bl	8000590 <__aeabi_dmul>
 80061e6:	4b80      	ldr	r3, [pc, #512]	; (80063e8 <__ieee754_rem_pio2+0x348>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	f7fa f81b 	bl	8000224 <__adddf3>
 80061ee:	f7fa fc69 	bl	8000ac4 <__aeabi_d2iz>
 80061f2:	4683      	mov	fp, r0
 80061f4:	f7fa f962 	bl	80004bc <__aeabi_i2d>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	ec43 2b18 	vmov	d8, r2, r3
 8006200:	a367      	add	r3, pc, #412	; (adr r3, 80063a0 <__ieee754_rem_pio2+0x300>)
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f7fa f9c3 	bl	8000590 <__aeabi_dmul>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7fa f805 	bl	8000220 <__aeabi_dsub>
 8006216:	a364      	add	r3, pc, #400	; (adr r3, 80063a8 <__ieee754_rem_pio2+0x308>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	4606      	mov	r6, r0
 800621e:	460f      	mov	r7, r1
 8006220:	ec51 0b18 	vmov	r0, r1, d8
 8006224:	f7fa f9b4 	bl	8000590 <__aeabi_dmul>
 8006228:	f1bb 0f1f 	cmp.w	fp, #31
 800622c:	4604      	mov	r4, r0
 800622e:	460d      	mov	r5, r1
 8006230:	dc0d      	bgt.n	800624e <__ieee754_rem_pio2+0x1ae>
 8006232:	4b6e      	ldr	r3, [pc, #440]	; (80063ec <__ieee754_rem_pio2+0x34c>)
 8006234:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	4543      	cmp	r3, r8
 800623e:	d006      	beq.n	800624e <__ieee754_rem_pio2+0x1ae>
 8006240:	4622      	mov	r2, r4
 8006242:	462b      	mov	r3, r5
 8006244:	4630      	mov	r0, r6
 8006246:	4639      	mov	r1, r7
 8006248:	f7f9 ffea 	bl	8000220 <__aeabi_dsub>
 800624c:	e00e      	b.n	800626c <__ieee754_rem_pio2+0x1cc>
 800624e:	462b      	mov	r3, r5
 8006250:	4622      	mov	r2, r4
 8006252:	4630      	mov	r0, r6
 8006254:	4639      	mov	r1, r7
 8006256:	f7f9 ffe3 	bl	8000220 <__aeabi_dsub>
 800625a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006264:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006268:	2b10      	cmp	r3, #16
 800626a:	dc02      	bgt.n	8006272 <__ieee754_rem_pio2+0x1d2>
 800626c:	e9ca 0100 	strd	r0, r1, [sl]
 8006270:	e039      	b.n	80062e6 <__ieee754_rem_pio2+0x246>
 8006272:	a34f      	add	r3, pc, #316	; (adr r3, 80063b0 <__ieee754_rem_pio2+0x310>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	ec51 0b18 	vmov	r0, r1, d8
 800627c:	f7fa f988 	bl	8000590 <__aeabi_dmul>
 8006280:	4604      	mov	r4, r0
 8006282:	460d      	mov	r5, r1
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4630      	mov	r0, r6
 800628a:	4639      	mov	r1, r7
 800628c:	f7f9 ffc8 	bl	8000220 <__aeabi_dsub>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4680      	mov	r8, r0
 8006296:	4689      	mov	r9, r1
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7f9 ffc0 	bl	8000220 <__aeabi_dsub>
 80062a0:	4622      	mov	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	f7f9 ffbc 	bl	8000220 <__aeabi_dsub>
 80062a8:	a343      	add	r3, pc, #268	; (adr r3, 80063b8 <__ieee754_rem_pio2+0x318>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	4604      	mov	r4, r0
 80062b0:	460d      	mov	r5, r1
 80062b2:	ec51 0b18 	vmov	r0, r1, d8
 80062b6:	f7fa f96b 	bl	8000590 <__aeabi_dmul>
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	f7f9 ffaf 	bl	8000220 <__aeabi_dsub>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4604      	mov	r4, r0
 80062c8:	460d      	mov	r5, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7f9 ffa7 	bl	8000220 <__aeabi_dsub>
 80062d2:	9a03      	ldr	r2, [sp, #12]
 80062d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b31      	cmp	r3, #49	; 0x31
 80062dc:	dc24      	bgt.n	8006328 <__ieee754_rem_pio2+0x288>
 80062de:	e9ca 0100 	strd	r0, r1, [sl]
 80062e2:	4646      	mov	r6, r8
 80062e4:	464f      	mov	r7, r9
 80062e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80062ea:	4630      	mov	r0, r6
 80062ec:	4642      	mov	r2, r8
 80062ee:	464b      	mov	r3, r9
 80062f0:	4639      	mov	r1, r7
 80062f2:	f7f9 ff95 	bl	8000220 <__aeabi_dsub>
 80062f6:	462b      	mov	r3, r5
 80062f8:	4622      	mov	r2, r4
 80062fa:	f7f9 ff91 	bl	8000220 <__aeabi_dsub>
 80062fe:	9b02      	ldr	r3, [sp, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006306:	f6bf af0b 	bge.w	8006120 <__ieee754_rem_pio2+0x80>
 800630a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800630e:	f8ca 3004 	str.w	r3, [sl, #4]
 8006312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006316:	f8ca 8000 	str.w	r8, [sl]
 800631a:	f8ca 0008 	str.w	r0, [sl, #8]
 800631e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006322:	f1cb 0b00 	rsb	fp, fp, #0
 8006326:	e6fb      	b.n	8006120 <__ieee754_rem_pio2+0x80>
 8006328:	a327      	add	r3, pc, #156	; (adr r3, 80063c8 <__ieee754_rem_pio2+0x328>)
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	ec51 0b18 	vmov	r0, r1, d8
 8006332:	f7fa f92d 	bl	8000590 <__aeabi_dmul>
 8006336:	4604      	mov	r4, r0
 8006338:	460d      	mov	r5, r1
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	f7f9 ff6d 	bl	8000220 <__aeabi_dsub>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4606      	mov	r6, r0
 800634c:	460f      	mov	r7, r1
 800634e:	4640      	mov	r0, r8
 8006350:	4649      	mov	r1, r9
 8006352:	f7f9 ff65 	bl	8000220 <__aeabi_dsub>
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	f7f9 ff61 	bl	8000220 <__aeabi_dsub>
 800635e:	a31c      	add	r3, pc, #112	; (adr r3, 80063d0 <__ieee754_rem_pio2+0x330>)
 8006360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006364:	4604      	mov	r4, r0
 8006366:	460d      	mov	r5, r1
 8006368:	ec51 0b18 	vmov	r0, r1, d8
 800636c:	f7fa f910 	bl	8000590 <__aeabi_dmul>
 8006370:	4622      	mov	r2, r4
 8006372:	462b      	mov	r3, r5
 8006374:	f7f9 ff54 	bl	8000220 <__aeabi_dsub>
 8006378:	4604      	mov	r4, r0
 800637a:	460d      	mov	r5, r1
 800637c:	e760      	b.n	8006240 <__ieee754_rem_pio2+0x1a0>
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <__ieee754_rem_pio2+0x350>)
 8006380:	4598      	cmp	r8, r3
 8006382:	dd37      	ble.n	80063f4 <__ieee754_rem_pio2+0x354>
 8006384:	ee10 2a10 	vmov	r2, s0
 8006388:	462b      	mov	r3, r5
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7f9 ff47 	bl	8000220 <__aeabi_dsub>
 8006392:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006396:	e9ca 0100 	strd	r0, r1, [sl]
 800639a:	e695      	b.n	80060c8 <__ieee754_rem_pio2+0x28>
 800639c:	f3af 8000 	nop.w
 80063a0:	54400000 	.word	0x54400000
 80063a4:	3ff921fb 	.word	0x3ff921fb
 80063a8:	1a626331 	.word	0x1a626331
 80063ac:	3dd0b461 	.word	0x3dd0b461
 80063b0:	1a600000 	.word	0x1a600000
 80063b4:	3dd0b461 	.word	0x3dd0b461
 80063b8:	2e037073 	.word	0x2e037073
 80063bc:	3ba3198a 	.word	0x3ba3198a
 80063c0:	6dc9c883 	.word	0x6dc9c883
 80063c4:	3fe45f30 	.word	0x3fe45f30
 80063c8:	2e000000 	.word	0x2e000000
 80063cc:	3ba3198a 	.word	0x3ba3198a
 80063d0:	252049c1 	.word	0x252049c1
 80063d4:	397b839a 	.word	0x397b839a
 80063d8:	3fe921fb 	.word	0x3fe921fb
 80063dc:	4002d97b 	.word	0x4002d97b
 80063e0:	3ff921fb 	.word	0x3ff921fb
 80063e4:	413921fb 	.word	0x413921fb
 80063e8:	3fe00000 	.word	0x3fe00000
 80063ec:	08006dbc 	.word	0x08006dbc
 80063f0:	7fefffff 	.word	0x7fefffff
 80063f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80063f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80063fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006400:	4620      	mov	r0, r4
 8006402:	460d      	mov	r5, r1
 8006404:	f7fa fb5e 	bl	8000ac4 <__aeabi_d2iz>
 8006408:	f7fa f858 	bl	80004bc <__aeabi_i2d>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006418:	f7f9 ff02 	bl	8000220 <__aeabi_dsub>
 800641c:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <__ieee754_rem_pio2+0x404>)
 800641e:	2200      	movs	r2, #0
 8006420:	f7fa f8b6 	bl	8000590 <__aeabi_dmul>
 8006424:	460d      	mov	r5, r1
 8006426:	4604      	mov	r4, r0
 8006428:	f7fa fb4c 	bl	8000ac4 <__aeabi_d2iz>
 800642c:	f7fa f846 	bl	80004bc <__aeabi_i2d>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4620      	mov	r0, r4
 8006436:	4629      	mov	r1, r5
 8006438:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800643c:	f7f9 fef0 	bl	8000220 <__aeabi_dsub>
 8006440:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <__ieee754_rem_pio2+0x404>)
 8006442:	2200      	movs	r2, #0
 8006444:	f7fa f8a4 	bl	8000590 <__aeabi_dmul>
 8006448:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800644c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006450:	2703      	movs	r7, #3
 8006452:	2400      	movs	r4, #0
 8006454:	2500      	movs	r5, #0
 8006456:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800645a:	4622      	mov	r2, r4
 800645c:	462b      	mov	r3, r5
 800645e:	46b9      	mov	r9, r7
 8006460:	3f01      	subs	r7, #1
 8006462:	f7fa fafd 	bl	8000a60 <__aeabi_dcmpeq>
 8006466:	2800      	cmp	r0, #0
 8006468:	d1f5      	bne.n	8006456 <__ieee754_rem_pio2+0x3b6>
 800646a:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <__ieee754_rem_pio2+0x408>)
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	2302      	movs	r3, #2
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	4632      	mov	r2, r6
 8006474:	464b      	mov	r3, r9
 8006476:	4651      	mov	r1, sl
 8006478:	a804      	add	r0, sp, #16
 800647a:	f000 f821 	bl	80064c0 <__kernel_rem_pio2>
 800647e:	9b02      	ldr	r3, [sp, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	4683      	mov	fp, r0
 8006484:	f6bf ae4c 	bge.w	8006120 <__ieee754_rem_pio2+0x80>
 8006488:	e9da 2100 	ldrd	r2, r1, [sl]
 800648c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006490:	e9ca 2300 	strd	r2, r3, [sl]
 8006494:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006498:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800649c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80064a0:	e73f      	b.n	8006322 <__ieee754_rem_pio2+0x282>
 80064a2:	bf00      	nop
 80064a4:	41700000 	.word	0x41700000
 80064a8:	08006e3c 	.word	0x08006e3c

080064ac <fabs>:
 80064ac:	ec51 0b10 	vmov	r0, r1, d0
 80064b0:	ee10 2a10 	vmov	r2, s0
 80064b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80064b8:	ec43 2b10 	vmov	d0, r2, r3
 80064bc:	4770      	bx	lr
	...

080064c0 <__kernel_rem_pio2>:
 80064c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c4:	ed2d 8b02 	vpush	{d8}
 80064c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80064cc:	f112 0f14 	cmn.w	r2, #20
 80064d0:	9306      	str	r3, [sp, #24]
 80064d2:	9104      	str	r1, [sp, #16]
 80064d4:	4bc2      	ldr	r3, [pc, #776]	; (80067e0 <__kernel_rem_pio2+0x320>)
 80064d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80064d8:	9009      	str	r0, [sp, #36]	; 0x24
 80064da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	9b06      	ldr	r3, [sp, #24]
 80064e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80064e6:	bfa8      	it	ge
 80064e8:	1ed4      	subge	r4, r2, #3
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	bfb2      	itee	lt
 80064ee:	2400      	movlt	r4, #0
 80064f0:	2318      	movge	r3, #24
 80064f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80064f6:	f06f 0317 	mvn.w	r3, #23
 80064fa:	fb04 3303 	mla	r3, r4, r3, r3
 80064fe:	eb03 0a02 	add.w	sl, r3, r2
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	9a05      	ldr	r2, [sp, #20]
 8006506:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80067d0 <__kernel_rem_pio2+0x310>
 800650a:	eb03 0802 	add.w	r8, r3, r2
 800650e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006510:	1aa7      	subs	r7, r4, r2
 8006512:	ae20      	add	r6, sp, #128	; 0x80
 8006514:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006518:	2500      	movs	r5, #0
 800651a:	4545      	cmp	r5, r8
 800651c:	dd13      	ble.n	8006546 <__kernel_rem_pio2+0x86>
 800651e:	9b06      	ldr	r3, [sp, #24]
 8006520:	aa20      	add	r2, sp, #128	; 0x80
 8006522:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006526:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800652a:	f04f 0800 	mov.w	r8, #0
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	4598      	cmp	r8, r3
 8006532:	dc31      	bgt.n	8006598 <__kernel_rem_pio2+0xd8>
 8006534:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80067d0 <__kernel_rem_pio2+0x310>
 8006538:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800653c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006540:	462f      	mov	r7, r5
 8006542:	2600      	movs	r6, #0
 8006544:	e01b      	b.n	800657e <__kernel_rem_pio2+0xbe>
 8006546:	42ef      	cmn	r7, r5
 8006548:	d407      	bmi.n	800655a <__kernel_rem_pio2+0x9a>
 800654a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800654e:	f7f9 ffb5 	bl	80004bc <__aeabi_i2d>
 8006552:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006556:	3501      	adds	r5, #1
 8006558:	e7df      	b.n	800651a <__kernel_rem_pio2+0x5a>
 800655a:	ec51 0b18 	vmov	r0, r1, d8
 800655e:	e7f8      	b.n	8006552 <__kernel_rem_pio2+0x92>
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006568:	f7fa f812 	bl	8000590 <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006574:	f7f9 fe56 	bl	8000224 <__adddf3>
 8006578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657c:	3601      	adds	r6, #1
 800657e:	9b05      	ldr	r3, [sp, #20]
 8006580:	429e      	cmp	r6, r3
 8006582:	f1a7 0708 	sub.w	r7, r7, #8
 8006586:	ddeb      	ble.n	8006560 <__kernel_rem_pio2+0xa0>
 8006588:	ed9d 7b02 	vldr	d7, [sp, #8]
 800658c:	f108 0801 	add.w	r8, r8, #1
 8006590:	ecab 7b02 	vstmia	fp!, {d7}
 8006594:	3508      	adds	r5, #8
 8006596:	e7ca      	b.n	800652e <__kernel_rem_pio2+0x6e>
 8006598:	9b00      	ldr	r3, [sp, #0]
 800659a:	aa0c      	add	r2, sp, #48	; 0x30
 800659c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80065a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80065a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80065a8:	9c00      	ldr	r4, [sp, #0]
 80065aa:	930a      	str	r3, [sp, #40]	; 0x28
 80065ac:	00e3      	lsls	r3, r4, #3
 80065ae:	9308      	str	r3, [sp, #32]
 80065b0:	ab98      	add	r3, sp, #608	; 0x260
 80065b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80065ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80065be:	ab70      	add	r3, sp, #448	; 0x1c0
 80065c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80065c4:	46c3      	mov	fp, r8
 80065c6:	46a1      	mov	r9, r4
 80065c8:	f1b9 0f00 	cmp.w	r9, #0
 80065cc:	f1a5 0508 	sub.w	r5, r5, #8
 80065d0:	dc77      	bgt.n	80066c2 <__kernel_rem_pio2+0x202>
 80065d2:	ec47 6b10 	vmov	d0, r6, r7
 80065d6:	4650      	mov	r0, sl
 80065d8:	f000 fac2 	bl	8006b60 <scalbn>
 80065dc:	ec57 6b10 	vmov	r6, r7, d0
 80065e0:	2200      	movs	r2, #0
 80065e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80065e6:	ee10 0a10 	vmov	r0, s0
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7f9 ffd0 	bl	8000590 <__aeabi_dmul>
 80065f0:	ec41 0b10 	vmov	d0, r0, r1
 80065f4:	f000 fb34 	bl	8006c60 <floor>
 80065f8:	4b7a      	ldr	r3, [pc, #488]	; (80067e4 <__kernel_rem_pio2+0x324>)
 80065fa:	ec51 0b10 	vmov	r0, r1, d0
 80065fe:	2200      	movs	r2, #0
 8006600:	f7f9 ffc6 	bl	8000590 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7f9 fe08 	bl	8000220 <__aeabi_dsub>
 8006610:	460f      	mov	r7, r1
 8006612:	4606      	mov	r6, r0
 8006614:	f7fa fa56 	bl	8000ac4 <__aeabi_d2iz>
 8006618:	9002      	str	r0, [sp, #8]
 800661a:	f7f9 ff4f 	bl	80004bc <__aeabi_i2d>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7f9 fdfb 	bl	8000220 <__aeabi_dsub>
 800662a:	f1ba 0f00 	cmp.w	sl, #0
 800662e:	4606      	mov	r6, r0
 8006630:	460f      	mov	r7, r1
 8006632:	dd6d      	ble.n	8006710 <__kernel_rem_pio2+0x250>
 8006634:	1e61      	subs	r1, r4, #1
 8006636:	ab0c      	add	r3, sp, #48	; 0x30
 8006638:	9d02      	ldr	r5, [sp, #8]
 800663a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800663e:	f1ca 0018 	rsb	r0, sl, #24
 8006642:	fa43 f200 	asr.w	r2, r3, r0
 8006646:	4415      	add	r5, r2
 8006648:	4082      	lsls	r2, r0
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	aa0c      	add	r2, sp, #48	; 0x30
 800664e:	9502      	str	r5, [sp, #8]
 8006650:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006654:	f1ca 0217 	rsb	r2, sl, #23
 8006658:	fa43 fb02 	asr.w	fp, r3, r2
 800665c:	f1bb 0f00 	cmp.w	fp, #0
 8006660:	dd65      	ble.n	800672e <__kernel_rem_pio2+0x26e>
 8006662:	9b02      	ldr	r3, [sp, #8]
 8006664:	2200      	movs	r2, #0
 8006666:	3301      	adds	r3, #1
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	4615      	mov	r5, r2
 800666c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006670:	4294      	cmp	r4, r2
 8006672:	f300 809f 	bgt.w	80067b4 <__kernel_rem_pio2+0x2f4>
 8006676:	f1ba 0f00 	cmp.w	sl, #0
 800667a:	dd07      	ble.n	800668c <__kernel_rem_pio2+0x1cc>
 800667c:	f1ba 0f01 	cmp.w	sl, #1
 8006680:	f000 80c1 	beq.w	8006806 <__kernel_rem_pio2+0x346>
 8006684:	f1ba 0f02 	cmp.w	sl, #2
 8006688:	f000 80c7 	beq.w	800681a <__kernel_rem_pio2+0x35a>
 800668c:	f1bb 0f02 	cmp.w	fp, #2
 8006690:	d14d      	bne.n	800672e <__kernel_rem_pio2+0x26e>
 8006692:	4632      	mov	r2, r6
 8006694:	463b      	mov	r3, r7
 8006696:	4954      	ldr	r1, [pc, #336]	; (80067e8 <__kernel_rem_pio2+0x328>)
 8006698:	2000      	movs	r0, #0
 800669a:	f7f9 fdc1 	bl	8000220 <__aeabi_dsub>
 800669e:	4606      	mov	r6, r0
 80066a0:	460f      	mov	r7, r1
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	d043      	beq.n	800672e <__kernel_rem_pio2+0x26e>
 80066a6:	4650      	mov	r0, sl
 80066a8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80067d8 <__kernel_rem_pio2+0x318>
 80066ac:	f000 fa58 	bl	8006b60 <scalbn>
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	ec53 2b10 	vmov	r2, r3, d0
 80066b8:	f7f9 fdb2 	bl	8000220 <__aeabi_dsub>
 80066bc:	4606      	mov	r6, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	e035      	b.n	800672e <__kernel_rem_pio2+0x26e>
 80066c2:	4b4a      	ldr	r3, [pc, #296]	; (80067ec <__kernel_rem_pio2+0x32c>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7f9 ff61 	bl	8000590 <__aeabi_dmul>
 80066ce:	f7fa f9f9 	bl	8000ac4 <__aeabi_d2iz>
 80066d2:	f7f9 fef3 	bl	80004bc <__aeabi_i2d>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	ec43 2b18 	vmov	d8, r2, r3
 80066de:	4b44      	ldr	r3, [pc, #272]	; (80067f0 <__kernel_rem_pio2+0x330>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	f7f9 ff55 	bl	8000590 <__aeabi_dmul>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4630      	mov	r0, r6
 80066ec:	4639      	mov	r1, r7
 80066ee:	f7f9 fd97 	bl	8000220 <__aeabi_dsub>
 80066f2:	f7fa f9e7 	bl	8000ac4 <__aeabi_d2iz>
 80066f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066fa:	f84b 0b04 	str.w	r0, [fp], #4
 80066fe:	ec51 0b18 	vmov	r0, r1, d8
 8006702:	f7f9 fd8f 	bl	8000224 <__adddf3>
 8006706:	f109 39ff 	add.w	r9, r9, #4294967295
 800670a:	4606      	mov	r6, r0
 800670c:	460f      	mov	r7, r1
 800670e:	e75b      	b.n	80065c8 <__kernel_rem_pio2+0x108>
 8006710:	d106      	bne.n	8006720 <__kernel_rem_pio2+0x260>
 8006712:	1e63      	subs	r3, r4, #1
 8006714:	aa0c      	add	r2, sp, #48	; 0x30
 8006716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800671e:	e79d      	b.n	800665c <__kernel_rem_pio2+0x19c>
 8006720:	4b34      	ldr	r3, [pc, #208]	; (80067f4 <__kernel_rem_pio2+0x334>)
 8006722:	2200      	movs	r2, #0
 8006724:	f7fa f9ba 	bl	8000a9c <__aeabi_dcmpge>
 8006728:	2800      	cmp	r0, #0
 800672a:	d140      	bne.n	80067ae <__kernel_rem_pio2+0x2ee>
 800672c:	4683      	mov	fp, r0
 800672e:	2200      	movs	r2, #0
 8006730:	2300      	movs	r3, #0
 8006732:	4630      	mov	r0, r6
 8006734:	4639      	mov	r1, r7
 8006736:	f7fa f993 	bl	8000a60 <__aeabi_dcmpeq>
 800673a:	2800      	cmp	r0, #0
 800673c:	f000 80c1 	beq.w	80068c2 <__kernel_rem_pio2+0x402>
 8006740:	1e65      	subs	r5, r4, #1
 8006742:	462b      	mov	r3, r5
 8006744:	2200      	movs	r2, #0
 8006746:	9900      	ldr	r1, [sp, #0]
 8006748:	428b      	cmp	r3, r1
 800674a:	da6d      	bge.n	8006828 <__kernel_rem_pio2+0x368>
 800674c:	2a00      	cmp	r2, #0
 800674e:	f000 808a 	beq.w	8006866 <__kernel_rem_pio2+0x3a6>
 8006752:	ab0c      	add	r3, sp, #48	; 0x30
 8006754:	f1aa 0a18 	sub.w	sl, sl, #24
 8006758:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80ae 	beq.w	80068be <__kernel_rem_pio2+0x3fe>
 8006762:	4650      	mov	r0, sl
 8006764:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80067d8 <__kernel_rem_pio2+0x318>
 8006768:	f000 f9fa 	bl	8006b60 <scalbn>
 800676c:	1c6b      	adds	r3, r5, #1
 800676e:	00da      	lsls	r2, r3, #3
 8006770:	9205      	str	r2, [sp, #20]
 8006772:	ec57 6b10 	vmov	r6, r7, d0
 8006776:	aa70      	add	r2, sp, #448	; 0x1c0
 8006778:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80067ec <__kernel_rem_pio2+0x32c>
 800677c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006780:	462c      	mov	r4, r5
 8006782:	f04f 0800 	mov.w	r8, #0
 8006786:	2c00      	cmp	r4, #0
 8006788:	f280 80d4 	bge.w	8006934 <__kernel_rem_pio2+0x474>
 800678c:	462c      	mov	r4, r5
 800678e:	2c00      	cmp	r4, #0
 8006790:	f2c0 8102 	blt.w	8006998 <__kernel_rem_pio2+0x4d8>
 8006794:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <__kernel_rem_pio2+0x338>)
 8006796:	461e      	mov	r6, r3
 8006798:	ab70      	add	r3, sp, #448	; 0x1c0
 800679a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800679e:	1b2b      	subs	r3, r5, r4
 80067a0:	f04f 0900 	mov.w	r9, #0
 80067a4:	f04f 0a00 	mov.w	sl, #0
 80067a8:	2700      	movs	r7, #0
 80067aa:	9306      	str	r3, [sp, #24]
 80067ac:	e0e6      	b.n	800697c <__kernel_rem_pio2+0x4bc>
 80067ae:	f04f 0b02 	mov.w	fp, #2
 80067b2:	e756      	b.n	8006662 <__kernel_rem_pio2+0x1a2>
 80067b4:	f8d8 3000 	ldr.w	r3, [r8]
 80067b8:	bb05      	cbnz	r5, 80067fc <__kernel_rem_pio2+0x33c>
 80067ba:	b123      	cbz	r3, 80067c6 <__kernel_rem_pio2+0x306>
 80067bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80067c0:	f8c8 3000 	str.w	r3, [r8]
 80067c4:	2301      	movs	r3, #1
 80067c6:	3201      	adds	r2, #1
 80067c8:	f108 0804 	add.w	r8, r8, #4
 80067cc:	461d      	mov	r5, r3
 80067ce:	e74f      	b.n	8006670 <__kernel_rem_pio2+0x1b0>
	...
 80067dc:	3ff00000 	.word	0x3ff00000
 80067e0:	08006f88 	.word	0x08006f88
 80067e4:	40200000 	.word	0x40200000
 80067e8:	3ff00000 	.word	0x3ff00000
 80067ec:	3e700000 	.word	0x3e700000
 80067f0:	41700000 	.word	0x41700000
 80067f4:	3fe00000 	.word	0x3fe00000
 80067f8:	08006f48 	.word	0x08006f48
 80067fc:	1acb      	subs	r3, r1, r3
 80067fe:	f8c8 3000 	str.w	r3, [r8]
 8006802:	462b      	mov	r3, r5
 8006804:	e7df      	b.n	80067c6 <__kernel_rem_pio2+0x306>
 8006806:	1e62      	subs	r2, r4, #1
 8006808:	ab0c      	add	r3, sp, #48	; 0x30
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006812:	a90c      	add	r1, sp, #48	; 0x30
 8006814:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006818:	e738      	b.n	800668c <__kernel_rem_pio2+0x1cc>
 800681a:	1e62      	subs	r2, r4, #1
 800681c:	ab0c      	add	r3, sp, #48	; 0x30
 800681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006822:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006826:	e7f4      	b.n	8006812 <__kernel_rem_pio2+0x352>
 8006828:	a90c      	add	r1, sp, #48	; 0x30
 800682a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800682e:	3b01      	subs	r3, #1
 8006830:	430a      	orrs	r2, r1
 8006832:	e788      	b.n	8006746 <__kernel_rem_pio2+0x286>
 8006834:	3301      	adds	r3, #1
 8006836:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800683a:	2900      	cmp	r1, #0
 800683c:	d0fa      	beq.n	8006834 <__kernel_rem_pio2+0x374>
 800683e:	9a08      	ldr	r2, [sp, #32]
 8006840:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006844:	446a      	add	r2, sp
 8006846:	3a98      	subs	r2, #152	; 0x98
 8006848:	9208      	str	r2, [sp, #32]
 800684a:	9a06      	ldr	r2, [sp, #24]
 800684c:	a920      	add	r1, sp, #128	; 0x80
 800684e:	18a2      	adds	r2, r4, r2
 8006850:	18e3      	adds	r3, r4, r3
 8006852:	f104 0801 	add.w	r8, r4, #1
 8006856:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800685a:	9302      	str	r3, [sp, #8]
 800685c:	9b02      	ldr	r3, [sp, #8]
 800685e:	4543      	cmp	r3, r8
 8006860:	da04      	bge.n	800686c <__kernel_rem_pio2+0x3ac>
 8006862:	461c      	mov	r4, r3
 8006864:	e6a2      	b.n	80065ac <__kernel_rem_pio2+0xec>
 8006866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006868:	2301      	movs	r3, #1
 800686a:	e7e4      	b.n	8006836 <__kernel_rem_pio2+0x376>
 800686c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006872:	f7f9 fe23 	bl	80004bc <__aeabi_i2d>
 8006876:	e8e5 0102 	strd	r0, r1, [r5], #8
 800687a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687c:	46ab      	mov	fp, r5
 800687e:	461c      	mov	r4, r3
 8006880:	f04f 0900 	mov.w	r9, #0
 8006884:	2600      	movs	r6, #0
 8006886:	2700      	movs	r7, #0
 8006888:	9b05      	ldr	r3, [sp, #20]
 800688a:	4599      	cmp	r9, r3
 800688c:	dd06      	ble.n	800689c <__kernel_rem_pio2+0x3dc>
 800688e:	9b08      	ldr	r3, [sp, #32]
 8006890:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006894:	f108 0801 	add.w	r8, r8, #1
 8006898:	9308      	str	r3, [sp, #32]
 800689a:	e7df      	b.n	800685c <__kernel_rem_pio2+0x39c>
 800689c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80068a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80068a4:	f7f9 fe74 	bl	8000590 <__aeabi_dmul>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7f9 fcb8 	bl	8000224 <__adddf3>
 80068b4:	f109 0901 	add.w	r9, r9, #1
 80068b8:	4606      	mov	r6, r0
 80068ba:	460f      	mov	r7, r1
 80068bc:	e7e4      	b.n	8006888 <__kernel_rem_pio2+0x3c8>
 80068be:	3d01      	subs	r5, #1
 80068c0:	e747      	b.n	8006752 <__kernel_rem_pio2+0x292>
 80068c2:	ec47 6b10 	vmov	d0, r6, r7
 80068c6:	f1ca 0000 	rsb	r0, sl, #0
 80068ca:	f000 f949 	bl	8006b60 <scalbn>
 80068ce:	ec57 6b10 	vmov	r6, r7, d0
 80068d2:	4ba0      	ldr	r3, [pc, #640]	; (8006b54 <__kernel_rem_pio2+0x694>)
 80068d4:	ee10 0a10 	vmov	r0, s0
 80068d8:	2200      	movs	r2, #0
 80068da:	4639      	mov	r1, r7
 80068dc:	f7fa f8de 	bl	8000a9c <__aeabi_dcmpge>
 80068e0:	b1f8      	cbz	r0, 8006922 <__kernel_rem_pio2+0x462>
 80068e2:	4b9d      	ldr	r3, [pc, #628]	; (8006b58 <__kernel_rem_pio2+0x698>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	4630      	mov	r0, r6
 80068e8:	4639      	mov	r1, r7
 80068ea:	f7f9 fe51 	bl	8000590 <__aeabi_dmul>
 80068ee:	f7fa f8e9 	bl	8000ac4 <__aeabi_d2iz>
 80068f2:	4680      	mov	r8, r0
 80068f4:	f7f9 fde2 	bl	80004bc <__aeabi_i2d>
 80068f8:	4b96      	ldr	r3, [pc, #600]	; (8006b54 <__kernel_rem_pio2+0x694>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	f7f9 fe48 	bl	8000590 <__aeabi_dmul>
 8006900:	460b      	mov	r3, r1
 8006902:	4602      	mov	r2, r0
 8006904:	4639      	mov	r1, r7
 8006906:	4630      	mov	r0, r6
 8006908:	f7f9 fc8a 	bl	8000220 <__aeabi_dsub>
 800690c:	f7fa f8da 	bl	8000ac4 <__aeabi_d2iz>
 8006910:	1c65      	adds	r5, r4, #1
 8006912:	ab0c      	add	r3, sp, #48	; 0x30
 8006914:	f10a 0a18 	add.w	sl, sl, #24
 8006918:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800691c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006920:	e71f      	b.n	8006762 <__kernel_rem_pio2+0x2a2>
 8006922:	4630      	mov	r0, r6
 8006924:	4639      	mov	r1, r7
 8006926:	f7fa f8cd 	bl	8000ac4 <__aeabi_d2iz>
 800692a:	ab0c      	add	r3, sp, #48	; 0x30
 800692c:	4625      	mov	r5, r4
 800692e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006932:	e716      	b.n	8006762 <__kernel_rem_pio2+0x2a2>
 8006934:	ab0c      	add	r3, sp, #48	; 0x30
 8006936:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800693a:	f7f9 fdbf 	bl	80004bc <__aeabi_i2d>
 800693e:	4632      	mov	r2, r6
 8006940:	463b      	mov	r3, r7
 8006942:	f7f9 fe25 	bl	8000590 <__aeabi_dmul>
 8006946:	4642      	mov	r2, r8
 8006948:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800694c:	464b      	mov	r3, r9
 800694e:	4630      	mov	r0, r6
 8006950:	4639      	mov	r1, r7
 8006952:	f7f9 fe1d 	bl	8000590 <__aeabi_dmul>
 8006956:	3c01      	subs	r4, #1
 8006958:	4606      	mov	r6, r0
 800695a:	460f      	mov	r7, r1
 800695c:	e713      	b.n	8006786 <__kernel_rem_pio2+0x2c6>
 800695e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006962:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006966:	f7f9 fe13 	bl	8000590 <__aeabi_dmul>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	4648      	mov	r0, r9
 8006970:	4651      	mov	r1, sl
 8006972:	f7f9 fc57 	bl	8000224 <__adddf3>
 8006976:	3701      	adds	r7, #1
 8006978:	4681      	mov	r9, r0
 800697a:	468a      	mov	sl, r1
 800697c:	9b00      	ldr	r3, [sp, #0]
 800697e:	429f      	cmp	r7, r3
 8006980:	dc02      	bgt.n	8006988 <__kernel_rem_pio2+0x4c8>
 8006982:	9b06      	ldr	r3, [sp, #24]
 8006984:	429f      	cmp	r7, r3
 8006986:	ddea      	ble.n	800695e <__kernel_rem_pio2+0x49e>
 8006988:	9a06      	ldr	r2, [sp, #24]
 800698a:	ab48      	add	r3, sp, #288	; 0x120
 800698c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006990:	e9c6 9a00 	strd	r9, sl, [r6]
 8006994:	3c01      	subs	r4, #1
 8006996:	e6fa      	b.n	800678e <__kernel_rem_pio2+0x2ce>
 8006998:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800699a:	2b02      	cmp	r3, #2
 800699c:	dc0b      	bgt.n	80069b6 <__kernel_rem_pio2+0x4f6>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	dc39      	bgt.n	8006a16 <__kernel_rem_pio2+0x556>
 80069a2:	d05d      	beq.n	8006a60 <__kernel_rem_pio2+0x5a0>
 80069a4:	9b02      	ldr	r3, [sp, #8]
 80069a6:	f003 0007 	and.w	r0, r3, #7
 80069aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80069ae:	ecbd 8b02 	vpop	{d8}
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d1f3      	bne.n	80069a4 <__kernel_rem_pio2+0x4e4>
 80069bc:	9b05      	ldr	r3, [sp, #20]
 80069be:	9500      	str	r5, [sp, #0]
 80069c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80069c4:	eb0d 0403 	add.w	r4, sp, r3
 80069c8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80069cc:	46a2      	mov	sl, r4
 80069ce:	9b00      	ldr	r3, [sp, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f1aa 0a08 	sub.w	sl, sl, #8
 80069d6:	dc69      	bgt.n	8006aac <__kernel_rem_pio2+0x5ec>
 80069d8:	46aa      	mov	sl, r5
 80069da:	f1ba 0f01 	cmp.w	sl, #1
 80069de:	f1a4 0408 	sub.w	r4, r4, #8
 80069e2:	f300 8083 	bgt.w	8006aec <__kernel_rem_pio2+0x62c>
 80069e6:	9c05      	ldr	r4, [sp, #20]
 80069e8:	ab48      	add	r3, sp, #288	; 0x120
 80069ea:	441c      	add	r4, r3
 80069ec:	2000      	movs	r0, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	2d01      	cmp	r5, #1
 80069f2:	f300 809a 	bgt.w	8006b2a <__kernel_rem_pio2+0x66a>
 80069f6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80069fa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80069fe:	f1bb 0f00 	cmp.w	fp, #0
 8006a02:	f040 8098 	bne.w	8006b36 <__kernel_rem_pio2+0x676>
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	e9c3 7800 	strd	r7, r8, [r3]
 8006a0c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006a10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006a14:	e7c6      	b.n	80069a4 <__kernel_rem_pio2+0x4e4>
 8006a16:	9e05      	ldr	r6, [sp, #20]
 8006a18:	ab48      	add	r3, sp, #288	; 0x120
 8006a1a:	441e      	add	r6, r3
 8006a1c:	462c      	mov	r4, r5
 8006a1e:	2000      	movs	r0, #0
 8006a20:	2100      	movs	r1, #0
 8006a22:	2c00      	cmp	r4, #0
 8006a24:	da33      	bge.n	8006a8e <__kernel_rem_pio2+0x5ce>
 8006a26:	f1bb 0f00 	cmp.w	fp, #0
 8006a2a:	d036      	beq.n	8006a9a <__kernel_rem_pio2+0x5da>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a32:	9c04      	ldr	r4, [sp, #16]
 8006a34:	e9c4 2300 	strd	r2, r3, [r4]
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006a40:	f7f9 fbee 	bl	8000220 <__aeabi_dsub>
 8006a44:	ae4a      	add	r6, sp, #296	; 0x128
 8006a46:	2401      	movs	r4, #1
 8006a48:	42a5      	cmp	r5, r4
 8006a4a:	da29      	bge.n	8006aa0 <__kernel_rem_pio2+0x5e0>
 8006a4c:	f1bb 0f00 	cmp.w	fp, #0
 8006a50:	d002      	beq.n	8006a58 <__kernel_rem_pio2+0x598>
 8006a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a56:	4619      	mov	r1, r3
 8006a58:	9b04      	ldr	r3, [sp, #16]
 8006a5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006a5e:	e7a1      	b.n	80069a4 <__kernel_rem_pio2+0x4e4>
 8006a60:	9c05      	ldr	r4, [sp, #20]
 8006a62:	ab48      	add	r3, sp, #288	; 0x120
 8006a64:	441c      	add	r4, r3
 8006a66:	2000      	movs	r0, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	da09      	bge.n	8006a82 <__kernel_rem_pio2+0x5c2>
 8006a6e:	f1bb 0f00 	cmp.w	fp, #0
 8006a72:	d002      	beq.n	8006a7a <__kernel_rem_pio2+0x5ba>
 8006a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a78:	4619      	mov	r1, r3
 8006a7a:	9b04      	ldr	r3, [sp, #16]
 8006a7c:	e9c3 0100 	strd	r0, r1, [r3]
 8006a80:	e790      	b.n	80069a4 <__kernel_rem_pio2+0x4e4>
 8006a82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a86:	f7f9 fbcd 	bl	8000224 <__adddf3>
 8006a8a:	3d01      	subs	r5, #1
 8006a8c:	e7ed      	b.n	8006a6a <__kernel_rem_pio2+0x5aa>
 8006a8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006a92:	f7f9 fbc7 	bl	8000224 <__adddf3>
 8006a96:	3c01      	subs	r4, #1
 8006a98:	e7c3      	b.n	8006a22 <__kernel_rem_pio2+0x562>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	e7c8      	b.n	8006a32 <__kernel_rem_pio2+0x572>
 8006aa0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006aa4:	f7f9 fbbe 	bl	8000224 <__adddf3>
 8006aa8:	3401      	adds	r4, #1
 8006aaa:	e7cd      	b.n	8006a48 <__kernel_rem_pio2+0x588>
 8006aac:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ab0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006ab4:	9b00      	ldr	r3, [sp, #0]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4632      	mov	r2, r6
 8006abc:	463b      	mov	r3, r7
 8006abe:	4640      	mov	r0, r8
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	f7f9 fbaf 	bl	8000224 <__adddf3>
 8006ac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	f7f9 fba5 	bl	8000220 <__aeabi_dsub>
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	463b      	mov	r3, r7
 8006ada:	f7f9 fba3 	bl	8000224 <__adddf3>
 8006ade:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006ae2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ae6:	ed8a 7b00 	vstr	d7, [sl]
 8006aea:	e770      	b.n	80069ce <__kernel_rem_pio2+0x50e>
 8006aec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006af0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006af4:	4640      	mov	r0, r8
 8006af6:	4632      	mov	r2, r6
 8006af8:	463b      	mov	r3, r7
 8006afa:	4649      	mov	r1, r9
 8006afc:	f7f9 fb92 	bl	8000224 <__adddf3>
 8006b00:	e9cd 0100 	strd	r0, r1, [sp]
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4640      	mov	r0, r8
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	f7f9 fb88 	bl	8000220 <__aeabi_dsub>
 8006b10:	4632      	mov	r2, r6
 8006b12:	463b      	mov	r3, r7
 8006b14:	f7f9 fb86 	bl	8000224 <__adddf3>
 8006b18:	ed9d 7b00 	vldr	d7, [sp]
 8006b1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006b20:	ed84 7b00 	vstr	d7, [r4]
 8006b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b28:	e757      	b.n	80069da <__kernel_rem_pio2+0x51a>
 8006b2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006b2e:	f7f9 fb79 	bl	8000224 <__adddf3>
 8006b32:	3d01      	subs	r5, #1
 8006b34:	e75c      	b.n	80069f0 <__kernel_rem_pio2+0x530>
 8006b36:	9b04      	ldr	r3, [sp, #16]
 8006b38:	9a04      	ldr	r2, [sp, #16]
 8006b3a:	601f      	str	r7, [r3, #0]
 8006b3c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006b40:	605c      	str	r4, [r3, #4]
 8006b42:	609d      	str	r5, [r3, #8]
 8006b44:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b48:	60d3      	str	r3, [r2, #12]
 8006b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006b4e:	6110      	str	r0, [r2, #16]
 8006b50:	6153      	str	r3, [r2, #20]
 8006b52:	e727      	b.n	80069a4 <__kernel_rem_pio2+0x4e4>
 8006b54:	41700000 	.word	0x41700000
 8006b58:	3e700000 	.word	0x3e700000
 8006b5c:	00000000 	.word	0x00000000

08006b60 <scalbn>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	ec55 4b10 	vmov	r4, r5, d0
 8006b66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	b999      	cbnz	r1, 8006b98 <scalbn+0x38>
 8006b70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b74:	4323      	orrs	r3, r4
 8006b76:	d03f      	beq.n	8006bf8 <scalbn+0x98>
 8006b78:	4b35      	ldr	r3, [pc, #212]	; (8006c50 <scalbn+0xf0>)
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	ee10 0a10 	vmov	r0, s0
 8006b80:	2200      	movs	r2, #0
 8006b82:	f7f9 fd05 	bl	8000590 <__aeabi_dmul>
 8006b86:	4b33      	ldr	r3, [pc, #204]	; (8006c54 <scalbn+0xf4>)
 8006b88:	429e      	cmp	r6, r3
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	da10      	bge.n	8006bb2 <scalbn+0x52>
 8006b90:	a327      	add	r3, pc, #156	; (adr r3, 8006c30 <scalbn+0xd0>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	e01f      	b.n	8006bd8 <scalbn+0x78>
 8006b98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006b9c:	4291      	cmp	r1, r2
 8006b9e:	d10c      	bne.n	8006bba <scalbn+0x5a>
 8006ba0:	ee10 2a10 	vmov	r2, s0
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	f7f9 fb3c 	bl	8000224 <__adddf3>
 8006bac:	4604      	mov	r4, r0
 8006bae:	460d      	mov	r5, r1
 8006bb0:	e022      	b.n	8006bf8 <scalbn+0x98>
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006bb8:	3936      	subs	r1, #54	; 0x36
 8006bba:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006bbe:	4296      	cmp	r6, r2
 8006bc0:	dd0d      	ble.n	8006bde <scalbn+0x7e>
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	a11c      	add	r1, pc, #112	; (adr r1, 8006c38 <scalbn+0xd8>)
 8006bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bca:	da02      	bge.n	8006bd2 <scalbn+0x72>
 8006bcc:	a11c      	add	r1, pc, #112	; (adr r1, 8006c40 <scalbn+0xe0>)
 8006bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd2:	a319      	add	r3, pc, #100	; (adr r3, 8006c38 <scalbn+0xd8>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f7f9 fcda 	bl	8000590 <__aeabi_dmul>
 8006bdc:	e7e6      	b.n	8006bac <scalbn+0x4c>
 8006bde:	1872      	adds	r2, r6, r1
 8006be0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006be4:	428a      	cmp	r2, r1
 8006be6:	dcec      	bgt.n	8006bc2 <scalbn+0x62>
 8006be8:	2a00      	cmp	r2, #0
 8006bea:	dd08      	ble.n	8006bfe <scalbn+0x9e>
 8006bec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bf8:	ec45 4b10 	vmov	d0, r4, r5
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006c02:	da08      	bge.n	8006c16 <scalbn+0xb6>
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	a10a      	add	r1, pc, #40	; (adr r1, 8006c30 <scalbn+0xd0>)
 8006c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c0c:	dac0      	bge.n	8006b90 <scalbn+0x30>
 8006c0e:	a10e      	add	r1, pc, #56	; (adr r1, 8006c48 <scalbn+0xe8>)
 8006c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c14:	e7bc      	b.n	8006b90 <scalbn+0x30>
 8006c16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c1a:	3236      	adds	r2, #54	; 0x36
 8006c1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006c24:	4620      	mov	r0, r4
 8006c26:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <scalbn+0xf8>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	e7d5      	b.n	8006bd8 <scalbn+0x78>
 8006c2c:	f3af 8000 	nop.w
 8006c30:	c2f8f359 	.word	0xc2f8f359
 8006c34:	01a56e1f 	.word	0x01a56e1f
 8006c38:	8800759c 	.word	0x8800759c
 8006c3c:	7e37e43c 	.word	0x7e37e43c
 8006c40:	8800759c 	.word	0x8800759c
 8006c44:	fe37e43c 	.word	0xfe37e43c
 8006c48:	c2f8f359 	.word	0xc2f8f359
 8006c4c:	81a56e1f 	.word	0x81a56e1f
 8006c50:	43500000 	.word	0x43500000
 8006c54:	ffff3cb0 	.word	0xffff3cb0
 8006c58:	3c900000 	.word	0x3c900000
 8006c5c:	00000000 	.word	0x00000000

08006c60 <floor>:
 8006c60:	ec51 0b10 	vmov	r0, r1, d0
 8006c64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006c70:	2e13      	cmp	r6, #19
 8006c72:	ee10 5a10 	vmov	r5, s0
 8006c76:	ee10 8a10 	vmov	r8, s0
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	dc31      	bgt.n	8006ce2 <floor+0x82>
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	da14      	bge.n	8006cac <floor+0x4c>
 8006c82:	a333      	add	r3, pc, #204	; (adr r3, 8006d50 <floor+0xf0>)
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f7f9 facc 	bl	8000224 <__adddf3>
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f7f9 ff0e 	bl	8000ab0 <__aeabi_dcmpgt>
 8006c94:	b138      	cbz	r0, 8006ca6 <floor+0x46>
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	da53      	bge.n	8006d42 <floor+0xe2>
 8006c9a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006c9e:	4325      	orrs	r5, r4
 8006ca0:	d052      	beq.n	8006d48 <floor+0xe8>
 8006ca2:	4c2d      	ldr	r4, [pc, #180]	; (8006d58 <floor+0xf8>)
 8006ca4:	2500      	movs	r5, #0
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	e024      	b.n	8006cf6 <floor+0x96>
 8006cac:	4f2b      	ldr	r7, [pc, #172]	; (8006d5c <floor+0xfc>)
 8006cae:	4137      	asrs	r7, r6
 8006cb0:	ea01 0307 	and.w	r3, r1, r7
 8006cb4:	4303      	orrs	r3, r0
 8006cb6:	d01e      	beq.n	8006cf6 <floor+0x96>
 8006cb8:	a325      	add	r3, pc, #148	; (adr r3, 8006d50 <floor+0xf0>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f7f9 fab1 	bl	8000224 <__adddf3>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f7f9 fef3 	bl	8000ab0 <__aeabi_dcmpgt>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d0eb      	beq.n	8006ca6 <floor+0x46>
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	bfbe      	ittt	lt
 8006cd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006cd6:	4133      	asrlt	r3, r6
 8006cd8:	18e4      	addlt	r4, r4, r3
 8006cda:	ea24 0407 	bic.w	r4, r4, r7
 8006cde:	2500      	movs	r5, #0
 8006ce0:	e7e1      	b.n	8006ca6 <floor+0x46>
 8006ce2:	2e33      	cmp	r6, #51	; 0x33
 8006ce4:	dd0b      	ble.n	8006cfe <floor+0x9e>
 8006ce6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006cea:	d104      	bne.n	8006cf6 <floor+0x96>
 8006cec:	ee10 2a10 	vmov	r2, s0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	f7f9 fa97 	bl	8000224 <__adddf3>
 8006cf6:	ec41 0b10 	vmov	d0, r0, r1
 8006cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006d02:	f04f 37ff 	mov.w	r7, #4294967295
 8006d06:	40df      	lsrs	r7, r3
 8006d08:	4238      	tst	r0, r7
 8006d0a:	d0f4      	beq.n	8006cf6 <floor+0x96>
 8006d0c:	a310      	add	r3, pc, #64	; (adr r3, 8006d50 <floor+0xf0>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fa87 	bl	8000224 <__adddf3>
 8006d16:	2200      	movs	r2, #0
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f7f9 fec9 	bl	8000ab0 <__aeabi_dcmpgt>
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	d0c1      	beq.n	8006ca6 <floor+0x46>
 8006d22:	2c00      	cmp	r4, #0
 8006d24:	da0a      	bge.n	8006d3c <floor+0xdc>
 8006d26:	2e14      	cmp	r6, #20
 8006d28:	d101      	bne.n	8006d2e <floor+0xce>
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	e006      	b.n	8006d3c <floor+0xdc>
 8006d2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006d32:	2301      	movs	r3, #1
 8006d34:	40b3      	lsls	r3, r6
 8006d36:	441d      	add	r5, r3
 8006d38:	45a8      	cmp	r8, r5
 8006d3a:	d8f6      	bhi.n	8006d2a <floor+0xca>
 8006d3c:	ea25 0507 	bic.w	r5, r5, r7
 8006d40:	e7b1      	b.n	8006ca6 <floor+0x46>
 8006d42:	2500      	movs	r5, #0
 8006d44:	462c      	mov	r4, r5
 8006d46:	e7ae      	b.n	8006ca6 <floor+0x46>
 8006d48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006d4c:	e7ab      	b.n	8006ca6 <floor+0x46>
 8006d4e:	bf00      	nop
 8006d50:	8800759c 	.word	0x8800759c
 8006d54:	7e37e43c 	.word	0x7e37e43c
 8006d58:	bff00000 	.word	0xbff00000
 8006d5c:	000fffff 	.word	0x000fffff

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
