
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08007708  08007708  00017708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007960  08007960  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007968  08007968  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  2000005c  080079cc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080079cc  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001825e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d7a  00000000  00000000  0003832d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0003b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103d  00000000  00000000  0003c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fe9c  00000000  00000000  0003d5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001837f  00000000  00000000  0005d461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de644  00000000  00000000  000757e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000639c  00000000  00000000  00153e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080076f0 	.word	0x080076f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080076f0 	.word	0x080076f0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2iz>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d215      	bcs.n	8000bb2 <__aeabi_d2iz+0x36>
 8000b86:	d511      	bpl.n	8000bac <__aeabi_d2iz+0x30>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d912      	bls.n	8000bb8 <__aeabi_d2iz+0x3c>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	4770      	bx	lr
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_d2iz+0x48>
 8000bb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2uiz>:
 8000bcc:	004a      	lsls	r2, r1, #1
 8000bce:	d211      	bcs.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd4:	d211      	bcs.n	8000bfa <__aeabi_d2uiz+0x2e>
 8000bd6:	d50d      	bpl.n	8000bf4 <__aeabi_d2uiz+0x28>
 8000bd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be0:	d40e      	bmi.n	8000c00 <__aeabi_d2uiz+0x34>
 8000be2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_d2uiz+0x3a>
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0000 	mov.w	r0, #0
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2f>:
 8000c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c14:	bf24      	itt	cs
 8000c16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1e:	d90d      	bls.n	8000c3c <__aeabi_d2f+0x30>
 8000c20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c34:	bf08      	it	eq
 8000c36:	f020 0001 	biceq.w	r0, r0, #1
 8000c3a:	4770      	bx	lr
 8000c3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c40:	d121      	bne.n	8000c86 <__aeabi_d2f+0x7a>
 8000c42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c46:	bfbc      	itt	lt
 8000c48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	4770      	bxlt	lr
 8000c4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c56:	f1c2 0218 	rsb	r2, r2, #24
 8000c5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c62:	fa20 f002 	lsr.w	r0, r0, r2
 8000c66:	bf18      	it	ne
 8000c68:	f040 0001 	orrne.w	r0, r0, #1
 8000c6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c78:	ea40 000c 	orr.w	r0, r0, ip
 8000c7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c84:	e7cc      	b.n	8000c20 <__aeabi_d2f+0x14>
 8000c86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8a:	d107      	bne.n	8000c9c <__aeabi_d2f+0x90>
 8000c8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c90:	bf1e      	ittt	ne
 8000c92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9a:	4770      	bxne	lr
 8000c9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <__aeabi_uldivmod>:
 8000cac:	b953      	cbnz	r3, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cae:	b94a      	cbnz	r2, 8000cc4 <__aeabi_uldivmod+0x18>
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	2800      	cmpeq	r0, #0
 8000cb6:	bf1c      	itt	ne
 8000cb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc0:	f000 b970 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ccc:	f000 f806 	bl	8000cdc <__udivmoddi4>
 8000cd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd8:	b004      	add	sp, #16
 8000cda:	4770      	bx	lr

08000cdc <__udivmoddi4>:
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce0:	9e08      	ldr	r6, [sp, #32]
 8000ce2:	460d      	mov	r5, r1
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	460f      	mov	r7, r1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d14a      	bne.n	8000d82 <__udivmoddi4+0xa6>
 8000cec:	428a      	cmp	r2, r1
 8000cee:	4694      	mov	ip, r2
 8000cf0:	d965      	bls.n	8000dbe <__udivmoddi4+0xe2>
 8000cf2:	fab2 f382 	clz	r3, r2
 8000cf6:	b143      	cbz	r3, 8000d0a <__udivmoddi4+0x2e>
 8000cf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cfc:	f1c3 0220 	rsb	r2, r3, #32
 8000d00:	409f      	lsls	r7, r3
 8000d02:	fa20 f202 	lsr.w	r2, r0, r2
 8000d06:	4317      	orrs	r7, r2
 8000d08:	409c      	lsls	r4, r3
 8000d0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0e:	fa1f f58c 	uxth.w	r5, ip
 8000d12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d16:	0c22      	lsrs	r2, r4, #16
 8000d18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d20:	fb01 f005 	mul.w	r0, r1, r5
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d90a      	bls.n	8000d3e <__udivmoddi4+0x62>
 8000d28:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d30:	f080 811c 	bcs.w	8000f6c <__udivmoddi4+0x290>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f240 8119 	bls.w	8000f6c <__udivmoddi4+0x290>
 8000d3a:	3902      	subs	r1, #2
 8000d3c:	4462      	add	r2, ip
 8000d3e:	1a12      	subs	r2, r2, r0
 8000d40:	b2a4      	uxth	r4, r4
 8000d42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4e:	fb00 f505 	mul.w	r5, r0, r5
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x90>
 8000d56:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5e:	f080 8107 	bcs.w	8000f70 <__udivmoddi4+0x294>
 8000d62:	42a5      	cmp	r5, r4
 8000d64:	f240 8104 	bls.w	8000f70 <__udivmoddi4+0x294>
 8000d68:	4464      	add	r4, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11e      	cbz	r6, 8000d7e <__udivmoddi4+0xa2>
 8000d76:	40dc      	lsrs	r4, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0xbc>
 8000d86:	2e00      	cmp	r6, #0
 8000d88:	f000 80ed 	beq.w	8000f66 <__udivmoddi4+0x28a>
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d92:	4608      	mov	r0, r1
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d149      	bne.n	8000e34 <__udivmoddi4+0x158>
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	d302      	bcc.n	8000daa <__udivmoddi4+0xce>
 8000da4:	4282      	cmp	r2, r0
 8000da6:	f200 80f8 	bhi.w	8000f9a <__udivmoddi4+0x2be>
 8000daa:	1a84      	subs	r4, r0, r2
 8000dac:	eb65 0203 	sbc.w	r2, r5, r3
 8000db0:	2001      	movs	r0, #1
 8000db2:	4617      	mov	r7, r2
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	d0e2      	beq.n	8000d7e <__udivmoddi4+0xa2>
 8000db8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dbc:	e7df      	b.n	8000d7e <__udivmoddi4+0xa2>
 8000dbe:	b902      	cbnz	r2, 8000dc2 <__udivmoddi4+0xe6>
 8000dc0:	deff      	udf	#255	; 0xff
 8000dc2:	fab2 f382 	clz	r3, r2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x210>
 8000dcc:	1a8a      	subs	r2, r1, r2
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ddc:	fb07 2015 	mls	r0, r7, r5, r2
 8000de0:	0c22      	lsrs	r2, r4, #16
 8000de2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de6:	fb0e f005 	mul.w	r0, lr, r5
 8000dea:	4290      	cmp	r0, r2
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x124>
 8000dee:	eb1c 0202 	adds.w	r2, ip, r2
 8000df2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x122>
 8000df8:	4290      	cmp	r0, r2
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2b8>
 8000dfe:	4645      	mov	r5, r8
 8000e00:	1a12      	subs	r2, r2, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e08:	fb07 2210 	mls	r2, r7, r0, r2
 8000e0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x14e>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x14c>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2c2>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e32:	e79f      	b.n	8000d74 <__udivmoddi4+0x98>
 8000e34:	f1c1 0720 	rsb	r7, r1, #32
 8000e38:	408b      	lsls	r3, r1
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa05 f401 	lsl.w	r4, r5, r1
 8000e46:	fa20 f307 	lsr.w	r3, r0, r7
 8000e4a:	40fd      	lsrs	r5, r7
 8000e4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e50:	4323      	orrs	r3, r4
 8000e52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5e:	0c1c      	lsrs	r4, r3, #16
 8000e60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e64:	fb08 f50e 	mul.w	r5, r8, lr
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b0>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2b4>
 8000e80:	42a5      	cmp	r5, r4
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2b4>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4464      	add	r4, ip
 8000e8c:	1b64      	subs	r4, r4, r5
 8000e8e:	b29d      	uxth	r5, r3
 8000e90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e94:	fb09 4413 	mls	r4, r9, r3, r4
 8000e98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ea0:	45a6      	cmp	lr, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1da>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2ac>
 8000eae:	45a6      	cmp	lr, r4
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2ac>
 8000eb2:	3b02      	subs	r3, #2
 8000eb4:	4464      	add	r4, ip
 8000eb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eba:	fba3 9502 	umull	r9, r5, r3, r2
 8000ebe:	eba4 040e 	sub.w	r4, r4, lr
 8000ec2:	42ac      	cmp	r4, r5
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46ae      	mov	lr, r5
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x29c>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x298>
 8000ecc:	b156      	cbz	r6, 8000ee4 <__udivmoddi4+0x208>
 8000ece:	ebb0 0208 	subs.w	r2, r0, r8
 8000ed2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eda:	40ca      	lsrs	r2, r1
 8000edc:	40cc      	lsrs	r4, r1
 8000ede:	4317      	orrs	r7, r2
 8000ee0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eec:	f1c3 0120 	rsb	r1, r3, #32
 8000ef0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef8:	fa25 f101 	lsr.w	r1, r5, r1
 8000efc:	409d      	lsls	r5, r3
 8000efe:	432a      	orrs	r2, r5
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000f10:	0c11      	lsrs	r1, r2, #16
 8000f12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f16:	fb00 f50e 	mul.w	r5, r0, lr
 8000f1a:	428d      	cmp	r5, r1
 8000f1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x258>
 8000f22:	eb1c 0101 	adds.w	r1, ip, r1
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b0>
 8000f2c:	428d      	cmp	r5, r1
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b0>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4461      	add	r1, ip
 8000f34:	1b49      	subs	r1, r1, r5
 8000f36:	b292      	uxth	r2, r2
 8000f38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	fb05 f10e 	mul.w	r1, r5, lr
 8000f48:	4291      	cmp	r1, r2
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x282>
 8000f4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2a8>
 8000f56:	4291      	cmp	r1, r2
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2a8>
 8000f5a:	3d02      	subs	r5, #2
 8000f5c:	4462      	add	r2, ip
 8000f5e:	1a52      	subs	r2, r2, r1
 8000f60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0xfc>
 8000f66:	4631      	mov	r1, r6
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e708      	b.n	8000d7e <__udivmoddi4+0xa2>
 8000f6c:	4639      	mov	r1, r7
 8000f6e:	e6e6      	b.n	8000d3e <__udivmoddi4+0x62>
 8000f70:	4610      	mov	r0, r2
 8000f72:	e6fb      	b.n	8000d6c <__udivmoddi4+0x90>
 8000f74:	4548      	cmp	r0, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f0>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f80:	3b01      	subs	r3, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f0>
 8000f84:	4645      	mov	r5, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x282>
 8000f88:	462b      	mov	r3, r5
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1da>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x258>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b0>
 8000f94:	3d02      	subs	r5, #2
 8000f96:	4462      	add	r2, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x124>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e70a      	b.n	8000db4 <__udivmoddi4+0xd8>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x14e>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <InitDSP>:
const int samplingRate = 44E3; //44Khz

uint16_t* previousSamples;
uint16_t* previousOutputs;

void InitDSP(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	previousSamples = (uint16_t*)malloc(N*sizeof(uint16_t));
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 feaf 	bl	8005d14 <malloc>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <InitDSP+0x2c>)
 8000fbc:	601a      	str	r2, [r3, #0]
	previousOutputs = (uint16_t*)malloc(N*sizeof(uint16_t));
 8000fbe:	2340      	movs	r3, #64	; 0x40
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 fea6 	bl	8005d14 <malloc>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <InitDSP+0x30>)
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000078 	.word	0x20000078
 8000fd8:	2000007c 	.word	0x2000007c

08000fdc <AppendSample>:

void AppendSample(uint16_t sample){
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	80fb      	strh	r3, [r7, #6]

	for(int i = N-2; i >= 0; i--){
 8000fe6:	2340      	movs	r3, #64	; 0x40
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e00f      	b.n	800100e <AppendSample+0x32>
		previousSamples[i+1] = previousSamples[i];
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <AppendSample+0x4c>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	441a      	add	r2, r3
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <AppendSample+0x4c>)
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	440b      	add	r3, r1
 8001004:	8812      	ldrh	r2, [r2, #0]
 8001006:	801a      	strh	r2, [r3, #0]
	for(int i = N-2; i >= 0; i--){
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3b01      	subs	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	daec      	bge.n	8000fee <AppendSample+0x12>
	}

	previousSamples[0] = sample;
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <AppendSample+0x4c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	801a      	strh	r2, [r3, #0]

}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20000078 	.word	0x20000078

0800102c <TimerCallback>:


void TimerCallback(ADC_HandleTypeDef* hadc1, UART_HandleTypeDef* hlpuart1){
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	; 0x40
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]

	HAL_ADC_Start(hadc1);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f001 f8de 	bl	80021f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc1, HAL_MAX_DELAY);
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 f995 	bl	8002370 <HAL_ADC_PollForConversion>
	uint16_t audioSample = HAL_ADC_GetValue(hadc1);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 fa6a 	bl	8002520 <HAL_ADC_GetValue>
 800104c:	4603      	mov	r3, r0
 800104e:	87fb      	strh	r3, [r7, #62]	; 0x3e

	char msg[50];
	sprintf(msg, "%d\r\n", (int)audioSample);
 8001050:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <TimerCallback+0x60>)
 8001058:	4618      	mov	r0, r3
 800105a:	f004 ff0f 	bl	8005e7c <siprintf>
	HAL_UART_Transmit(hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f8dc 	bl	8000220 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	f107 010c 	add.w	r1, r7, #12
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	6838      	ldr	r0, [r7, #0]
 8001076:	f003 ffd1 	bl	800501c <HAL_UART_Transmit>

	AppendSample(audioSample);
 800107a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ffad 	bl	8000fdc <AppendSample>

}
 8001082:	bf00      	nop
 8001084:	3740      	adds	r7, #64	; 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08007708 	.word	0x08007708

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001096:	f000 fc8e 	bl	80019b6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109a:	f000 f8a3 	bl	80011e4 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800109e:	b662      	cpsie	i
}
 80010a0:	bf00      	nop

  /* USER CODE BEGIN SysInit */

  __enable_irq();
  hdac1.State = HAL_DAC_STATE_RESET;
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <main+0x130>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	711a      	strb	r2, [r3, #4]


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 fa28 	bl	80014fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80010ac:	f000 f998 	bl	80013e0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80010b0:	f000 f8e4 	bl	800127c <MX_ADC1_Init>
  MX_TIM16_Init();
 80010b4:	f000 f9e0 	bl	8001478 <MX_TIM16_Init>
  MX_DAC1_Init();
 80010b8:	f000 f958 	bl	800136c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 80010bc:	4841      	ldr	r0, [pc, #260]	; (80011c4 <main+0x134>)
 80010be:	f003 fc97 	bl	80049f0 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80010c2:	2100      	movs	r1, #0
 80010c4:	483e      	ldr	r0, [pc, #248]	; (80011c0 <main+0x130>)
 80010c6:	f002 f8ab 	bl	8003220 <HAL_DAC_Start>

  InitDSP();
 80010ca:	f7ff ff6d 	bl	8000fa8 <InitDSP>

	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	  //HAL_GPIO_TogglePin(KnipperLedje_GPIO_Port, KnipperLedje_Pin);


      uint16_t timerValue = __HAL_TIM_GET_COUNTER(&htim16);
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <main+0x134>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	81fb      	strh	r3, [r7, #14]

      float sinVal = (sin( (float)timerValue/3863*2*M_PI/2000)+1)/2 *3.3;
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e0:	eddf 6a39 	vldr	s13, [pc, #228]	; 80011c8 <main+0x138>
 80010e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ec:	ee17 0a90 	vmov	r0, s15
 80010f0:	f7ff fa52 	bl	8000598 <__aeabi_f2d>
 80010f4:	a32e      	add	r3, pc, #184	; (adr r3, 80011b0 <main+0x120>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff faa5 	bl	8000648 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <main+0x13c>)
 800110c:	f7ff fbc6 	bl	800089c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	ec43 2b17 	vmov	d7, r2, r3
 8001118:	eeb0 0a47 	vmov.f32	s0, s14
 800111c:	eef0 0a67 	vmov.f32	s1, s15
 8001120:	f005 faa6 	bl	8006670 <sin>
 8001124:	ec51 0b10 	vmov	r0, r1, d0
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <main+0x140>)
 800112e:	f7ff f8d5 	bl	80002dc <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001142:	f7ff fbab 	bl	800089c <__aeabi_ddiv>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	a31a      	add	r3, pc, #104	; (adr r3, 80011b8 <main+0x128>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa78 	bl	8000648 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd54 	bl	8000c0c <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	60bb      	str	r3, [r7, #8]
      uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;
 8001168:	edd7 7a02 	vldr	s15, [r7, #8]
 800116c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80011d4 <main+0x144>
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001178:	ee17 0a90 	vmov	r0, s15
 800117c:	f7ff f9ea 	bl	8000554 <__aeabi_ui2d>
 8001180:	a30d      	add	r3, pc, #52	; (adr r3, 80011b8 <main+0x128>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fb89 	bl	800089c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd1b 	bl	8000bcc <__aeabi_d2uiz>
 8001196:	4603      	mov	r3, r0
 8001198:	607b      	str	r3, [r7, #4]

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      DAC1->DHR12R1 = dacOutput;
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <main+0x148>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6093      	str	r3, [r2, #8]


      if(timerValue == 0){
 80011a0:	89fb      	ldrh	r3, [r7, #14]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d193      	bne.n	80010ce <main+0x3e>

    	  TimerCallback(&hadc1, &hlpuart1);
 80011a6:	490d      	ldr	r1, [pc, #52]	; (80011dc <main+0x14c>)
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <main+0x150>)
 80011aa:	f7ff ff3f 	bl	800102c <TimerCallback>
  {
 80011ae:	e78e      	b.n	80010ce <main+0x3e>
 80011b0:	54442d18 	.word	0x54442d18
 80011b4:	400921fb 	.word	0x400921fb
 80011b8:	66666666 	.word	0x66666666
 80011bc:	400a6666 	.word	0x400a6666
 80011c0:	200000ec 	.word	0x200000ec
 80011c4:	20000194 	.word	0x20000194
 80011c8:	45717000 	.word	0x45717000
 80011cc:	409f4000 	.word	0x409f4000
 80011d0:	3ff00000 	.word	0x3ff00000
 80011d4:	45800000 	.word	0x45800000
 80011d8:	50000800 	.word	0x50000800
 80011dc:	20000100 	.word	0x20000100
 80011e0:	20000080 	.word	0x20000080

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2238      	movs	r2, #56	; 0x38
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fe62 	bl	8005ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001206:	2000      	movs	r0, #0
 8001208:	f002 fbc8 	bl	800399c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001216:	2340      	movs	r3, #64	; 0x40
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121a:	2302      	movs	r3, #2
 800121c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001222:	2304      	movs	r3, #4
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001226:	2355      	movs	r3, #85	; 0x55
 8001228:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122a:	2302      	movs	r3, #2
 800122c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122e:	2302      	movs	r3, #2
 8001230:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fc62 	bl	8003b04 <HAL_RCC_OscConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001246:	f000 f9d7 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2303      	movs	r3, #3
 8001250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2104      	movs	r1, #4
 8001262:	4618      	mov	r0, r3
 8001264:	f002 ff60 	bl	8004128 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800126e:	f000 f9c3 	bl	80015f8 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	; 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2220      	movs	r2, #32
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f004 fe11 	bl	8005ebc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <MX_ADC1_Init+0xe8>)
 800129c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b0:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012b6:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012da:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_ADC1_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <MX_ADC1_Init+0xe8>)
 8001306:	f000 fdf3 	bl	8001ef0 <HAL_ADC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001310:	f000 f972 	bl	80015f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_ADC1_Init+0xe8>)
 8001320:	f001 fda8 	bl	8002e74 <HAL_ADCEx_MultiModeConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800132a:	f000 f965 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_ADC1_Init+0xec>)
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001332:	2306      	movs	r3, #6
 8001334:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800133a:	237f      	movs	r3, #127	; 0x7f
 800133c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133e:	2304      	movs	r3, #4
 8001340:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_ADC1_Init+0xe8>)
 800134c:	f001 f8f6 	bl	800253c <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001356:	f000 f94f 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000080 	.word	0x20000080
 8001368:	04300002 	.word	0x04300002

0800136c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2230      	movs	r2, #48	; 0x30
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f004 fd9f 	bl	8005ebc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <MX_DAC1_Init+0x6c>)
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <MX_DAC1_Init+0x70>)
 8001382:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <MX_DAC1_Init+0x6c>)
 8001386:	f001 ff28 	bl	80031da <HAL_DAC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001390:	f000 f932 	bl	80015f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001394:	2302      	movs	r3, #2
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_DAC1_Init+0x6c>)
 80013c0:	f001 ff9a 	bl	80032f8 <HAL_DAC_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80013ca:	f000 f915 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	3730      	adds	r7, #48	; 0x30
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000ec 	.word	0x200000ec
 80013dc:	50000800 	.word	0x50000800

080013e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 80013e6:	4a22      	ldr	r2, [pc, #136]	; (8001470 <MX_LPUART1_UART_Init+0x90>)
 80013e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001422:	4812      	ldr	r0, [pc, #72]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001424:	f003 fdaa 	bl	8004f7c <HAL_UART_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800142e:	f000 f8e3 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001436:	f004 fba3 	bl	8005b80 <HAL_UARTEx_SetTxFifoThreshold>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001440:	f000 f8da 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4809      	ldr	r0, [pc, #36]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001448:	f004 fbd8 	bl	8005bfc <HAL_UARTEx_SetRxFifoThreshold>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001452:	f000 f8d1 	bl	80015f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_LPUART1_UART_Init+0x8c>)
 8001458:	f004 fb59 	bl	8005b0e <HAL_UARTEx_DisableFifoMode>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001462:	f000 f8c9 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000100 	.word	0x20000100
 8001470:	40008000 	.word	0x40008000
 8001474:	00000000 	.word	0x00000000

08001478 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_TIM16_Init+0x78>)
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <MX_TIM16_Init+0x7c>)
 8001480:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1;
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_TIM16_Init+0x78>)
 8001484:	2201      	movs	r2, #1
 8001486:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MX_TIM16_Init+0x78>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3864;
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_TIM16_Init+0x78>)
 8001490:	f640 7218 	movw	r2, #3864	; 0xf18
 8001494:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MX_TIM16_Init+0x78>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_TIM16_Init+0x78>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_TIM16_Init+0x78>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014a8:	4811      	ldr	r0, [pc, #68]	; (80014f0 <MX_TIM16_Init+0x78>)
 80014aa:	f003 fa49 	bl	8004940 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80014b4:	f000 f8a0 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  htim16.Init.Period = 170E6/samplingRate; // Override period so interrupt is defined by const, not IOC
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_TIM16_Init+0x80>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f859 	bl	8000574 <__aeabi_i2d>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	a108      	add	r1, pc, #32	; (adr r1, 80014e8 <MX_TIM16_Init+0x70>)
 80014c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014cc:	f7ff f9e6 	bl	800089c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fb78 	bl	8000bcc <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <MX_TIM16_Init+0x78>)
 80014e0:	60d3      	str	r3, [r2, #12]
  //170E6 is 170Mhz, clock frequency. See obsidian for further explanation

  /* USER CODE END TIM16_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	00000000 	.word	0x00000000
 80014ec:	41a443fd 	.word	0x41a443fd
 80014f0:	20000194 	.word	0x20000194
 80014f4:	40014400 	.word	0x40014400
 80014f8:	08007710 	.word	0x08007710

080014fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a35      	ldr	r2, [pc, #212]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <MX_GPIO_Init+0xf0>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <MX_GPIO_Init+0xf0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a23      	ldr	r2, [pc, #140]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MX_GPIO_Init+0xf0>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f002 f9f6 	bl	800396c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2110      	movs	r1, #16
 8001584:	481a      	ldr	r0, [pc, #104]	; (80015f0 <MX_GPIO_Init+0xf4>)
 8001586:	f002 f9f1 	bl	800396c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001590:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <MX_GPIO_Init+0xf8>)
 80015a2:	f002 f861 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 80015a6:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f002 f851 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015c6:	2310      	movs	r3, #16
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_GPIO_Init+0xf4>)
 80015de:	f002 f843 	bl	8003668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	; 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	e7fe      	b.n	8001600 <Error_Handler+0x8>
	...

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6613      	str	r3, [r2, #96]	; 0x60
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_MspInit+0x44>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x44>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800163a:	f002 fa53 	bl	8003ae4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b09a      	sub	sp, #104	; 0x68
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	2244      	movs	r2, #68	; 0x44
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f004 fc25 	bl	8005ebc <memset>
  if(hadc->Instance==ADC1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167a:	d134      	bne.n	80016e6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800167c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001680:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001682:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001686:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4618      	mov	r0, r3
 800168e:	f002 ff67 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001698:	f7ff ffae 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_ADC_MspInit+0xa4>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a0:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <HAL_ADC_MspInit+0xa4>)
 80016a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HAL_ADC_MspInit+0xa4>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_ADC_MspInit+0xa4>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_ADC_MspInit+0xa4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_ADC_MspInit+0xa4>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 80016cc:	2301      	movs	r3, #1
 80016ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d0:	2303      	movs	r3, #3
 80016d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 ffc1 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3768      	adds	r7, #104	; 0x68
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000

080016f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_DAC_MspInit+0x74>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d124      	bne.n	8001760 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_DAC_MspInit+0x78>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a14      	ldr	r2, [pc, #80]	; (800176c <HAL_DAC_MspInit+0x78>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_DAC_MspInit+0x78>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_DAC_MspInit+0x78>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <HAL_DAC_MspInit+0x78>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_DAC_MspInit+0x78>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001746:	2310      	movs	r3, #16
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174a:	2303      	movs	r3, #3
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f001 ff84 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	50000800 	.word	0x50000800
 800176c:	40021000 	.word	0x40021000

08001770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09a      	sub	sp, #104	; 0x68
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2244      	movs	r2, #68	; 0x44
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f004 fb93 	bl	8005ebc <memset>
  if(huart->Instance==LPUART1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_UART_MspInit+0xa8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d136      	bne.n	800180e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017a0:	2320      	movs	r3, #32
 80017a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 fed7 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017b8:	f7ff ff1e 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_UART_MspInit+0xac>)
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	4a16      	ldr	r2, [pc, #88]	; (800181c <HAL_UART_MspInit+0xac>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_UART_MspInit+0xac>)
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <HAL_UART_MspInit+0xac>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_UART_MspInit+0xac>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_UART_MspInit+0xac>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80017ec:	230c      	movs	r3, #12
 80017ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80017fc:	230c      	movs	r3, #12
 80017fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f001 ff2d 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3768      	adds	r7, #104	; 0x68
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40008000 	.word	0x40008000
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_TIM_Base_MspInit+0x44>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183c:	6613      	str	r3, [r2, #96]	; 0x60
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_TIM_Base_MspInit+0x48>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2019      	movs	r0, #25
 8001850:	f001 fc8f 	bl	8003172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001854:	2019      	movs	r0, #25
 8001856:	f001 fca6 	bl	80031a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40014400 	.word	0x40014400
 8001868:	40021000 	.word	0x40021000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f8d0 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018c6:	f003 f8f5 	bl	8004ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000194 	.word	0x20000194

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f004 faf2 	bl	8005eec <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20008000 	.word	0x20008000
 8001934:	00000400 	.word	0x00000400
 8001938:	200001e0 	.word	0x200001e0
 800193c:	20000330 	.word	0x20000330

08001940 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001966:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001968:	f7ff ffea 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	; (80019a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <LoopForever+0xe>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <LoopForever+0x16>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f004 fab1 	bl	8005ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001996:	f7ff fb7b 	bl	8001090 <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
  ldr   r0, =_estack
 800199c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019a8:	08007970 	.word	0x08007970
  ldr r2, =_sbss
 80019ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019b0:	20000330 	.word	0x20000330

080019b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_2_IRQHandler>

080019b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f001 fbcb 	bl	800315c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f80e 	bl	80019e8 <HAL_InitTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e001      	b.n	80019dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d8:	f7ff fe14 	bl	8001604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019dc:	79fb      	ldrb	r3, [r7, #7]

}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_InitTick+0x68>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d022      	beq.n	8001a42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_InitTick+0x6c>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_InitTick+0x68>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fbd6 	bl	80031c2 <HAL_SYSTICK_Config>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10f      	bne.n	8001a3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	d809      	bhi.n	8001a36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a22:	2200      	movs	r2, #0
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2a:	f001 fba2 	bl	8003172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_InitTick+0x70>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e007      	b.n	8001a46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e004      	b.n	8001a46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e001      	b.n	8001a46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x20>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a6c:	6013      	str	r3, [r2, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	200001e4 	.word	0x200001e4
 8001a7c:	20000008 	.word	0x20000008

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	200001e4 	.word	0x200001e4

08001a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3360      	adds	r3, #96	; 0x60
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <LL_ADC_SetOffset+0x44>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	03fff000 	.word	0x03fff000

08001b48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3360      	adds	r3, #96	; 0x60
 8001b56:	461a      	mov	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3360      	adds	r3, #96	; 0x60
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b087      	sub	sp, #28
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3360      	adds	r3, #96	; 0x60
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bd4:	bf00      	nop
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3360      	adds	r3, #96	; 0x60
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	615a      	str	r2, [r3, #20]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b087      	sub	sp, #28
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3330      	adds	r3, #48	; 0x30
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	4413      	add	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	211f      	movs	r1, #31
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0e9b      	lsrs	r3, r3, #26
 8001c9a:	f003 011f 	and.w	r1, r3, #31
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3314      	adds	r3, #20
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	0e5b      	lsrs	r3, r3, #25
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0d1b      	lsrs	r3, r3, #20
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2107      	movs	r1, #7
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	401a      	ands	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0d1b      	lsrs	r3, r3, #20
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0318 	and.w	r3, r3, #24
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d34:	40d9      	lsrs	r1, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	400b      	ands	r3, r1
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	0007ffff 	.word	0x0007ffff

08001d58 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 031f 	and.w	r3, r3, #31
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6093      	str	r3, [r2, #8]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dc8:	d101      	bne.n	8001dce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001dec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001df0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <LL_ADC_IsEnabled+0x18>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <LL_ADC_IsEnabled+0x1a>
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e8e:	f043 0204 	orr.w	r2, r3, #4
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d101      	bne.n	8001eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d101      	bne.n	8001ee0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e167      	b.n	80021da <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fb97 	bl	800164c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff3f 	bl	8001db4 <LL_ADC_IsDeepPowerDownEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff25 	bl	8001d90 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff5a 	bl	8001e04 <LL_ADC_IsInternalRegulatorEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff3e 	bl	8001ddc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f60:	4ba0      	ldr	r3, [pc, #640]	; (80021e4 <HAL_ADC_Init+0x2f4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	4aa0      	ldr	r2, [pc, #640]	; (80021e8 <HAL_ADC_Init+0x2f8>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	3301      	adds	r3, #1
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f74:	e002      	b.n	8001f7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f9      	bne.n	8001f76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff3c 	bl	8001e04 <LL_ADC_IsInternalRegulatorEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10d      	bne.n	8001fae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff75 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 8001fb8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 8100 	bne.w	80021c8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 80fc 	bne.w	80021c8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fd8:	f043 0202 	orr.w	r2, r3, #2
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff35 	bl	8001e54 <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d111      	bne.n	8002014 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ff0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ff4:	f7ff ff2e 	bl	8001e54 <LL_ADC_IsEnabled>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	487c      	ldr	r0, [pc, #496]	; (80021ec <HAL_ADC_Init+0x2fc>)
 8001ffc:	f7ff ff2a 	bl	8001e54 <LL_ADC_IsEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	4323      	orrs	r3, r4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4619      	mov	r1, r3
 800200e:	4878      	ldr	r0, [pc, #480]	; (80021f0 <HAL_ADC_Init+0x300>)
 8002010:	f7ff fd42 	bl	8001a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7f5b      	ldrb	r3, [r3, #29]
 8002018:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800201e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002024:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800202a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002032:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800203e:	2b01      	cmp	r3, #1
 8002040:	d106      	bne.n	8002050 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	3b01      	subs	r3, #1
 8002048:	045b      	lsls	r3, r3, #17
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <HAL_ADC_Init+0x304>)
 8002074:	4013      	ands	r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	430b      	orrs	r3, r1
 800207e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff ff14 	bl	8001ec8 <LL_ADC_INJ_IsConversionOngoing>
 80020a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d16d      	bne.n	8002184 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d16a      	bne.n	8002184 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020ca:	f023 0302 	bic.w	r3, r3, #2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d017      	beq.n	8002110 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6911      	ldr	r1, [r2, #16]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	430b      	orrs	r3, r1
 800210a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800210e:	e013      	b.n	8002138 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800211e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800213e:	2b01      	cmp	r3, #1
 8002140:	d118      	bne.n	8002174 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002164:	430a      	orrs	r2, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	611a      	str	r2, [r3, #16]
 8002172:	e007      	b.n	8002184 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10c      	bne.n	80021a6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f023 010f 	bic.w	r1, r3, #15
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30
 80021a4:	e007      	b.n	80021b6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 020f 	bic.w	r2, r2, #15
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80021c6:	e007      	b.n	80021d8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000
 80021e8:	053e2d63 	.word	0x053e2d63
 80021ec:	50000100 	.word	0x50000100
 80021f0:	50000300 	.word	0x50000300
 80021f4:	fff04007 	.word	0xfff04007

080021f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002200:	4859      	ldr	r0, [pc, #356]	; (8002368 <HAL_ADC_Start+0x170>)
 8002202:	f7ff fda9 	bl	8001d58 <LL_ADC_GetMultimode>
 8002206:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fe48 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	f040 809f 	bne.w	8002358 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_ADC_Start+0x30>
 8002224:	2302      	movs	r3, #2
 8002226:	e09a      	b.n	800235e <HAL_ADC_Start+0x166>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fd73 	bl	8002d1c <ADC_Enable>
 8002236:	4603      	mov	r3, r0
 8002238:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800223a:	7dfb      	ldrb	r3, [r7, #23]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f040 8086 	bne.w	800234e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a44      	ldr	r2, [pc, #272]	; (800236c <HAL_ADC_Start+0x174>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d002      	beq.n	8002266 <HAL_ADC_Start+0x6e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	e001      	b.n	800226a <HAL_ADC_Start+0x72>
 8002266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	4293      	cmp	r3, r2
 8002270:	d002      	beq.n	8002278 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d106      	bne.n	80022a0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	f023 0206 	bic.w	r2, r3, #6
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	661a      	str	r2, [r3, #96]	; 0x60
 800229e:	e002      	b.n	80022a6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	221c      	movs	r2, #28
 80022ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2c      	ldr	r2, [pc, #176]	; (800236c <HAL_ADC_Start+0x174>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d002      	beq.n	80022c6 <HAL_ADC_Start+0xce>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	e001      	b.n	80022ca <HAL_ADC_Start+0xd2>
 80022c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d008      	beq.n	80022e4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d002      	beq.n	80022e4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d114      	bne.n	800230e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fdb7 	bl	8001e7a <LL_ADC_REG_StartConversion>
 800230c:	e026      	b.n	800235c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a13      	ldr	r2, [pc, #76]	; (800236c <HAL_ADC_Start+0x174>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d002      	beq.n	800232a <HAL_ADC_Start+0x132>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	e001      	b.n	800232e <HAL_ADC_Start+0x136>
 800232a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800232e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00f      	beq.n	800235c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002344:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	65da      	str	r2, [r3, #92]	; 0x5c
 800234c:	e006      	b.n	800235c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002356:	e001      	b.n	800235c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002358:	2302      	movs	r3, #2
 800235a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800235c:	7dfb      	ldrb	r3, [r7, #23]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	50000300 	.word	0x50000300
 800236c:	50000100 	.word	0x50000100

08002370 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237a:	4867      	ldr	r0, [pc, #412]	; (8002518 <HAL_ADC_PollForConversion+0x1a8>)
 800237c:	f7ff fcec 	bl	8001d58 <LL_ADC_GetMultimode>
 8002380:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b08      	cmp	r3, #8
 8002388:	d102      	bne.n	8002390 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800238a:	2308      	movs	r3, #8
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	e02a      	b.n	80023e6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d002      	beq.n	80023a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d111      	bne.n	80023c6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0a6      	b.n	800250e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023c0:	2304      	movs	r3, #4
 80023c2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023c4:	e00f      	b.n	80023e6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023c6:	4854      	ldr	r0, [pc, #336]	; (8002518 <HAL_ADC_PollForConversion+0x1a8>)
 80023c8:	f7ff fcd4 	bl	8001d74 <LL_ADC_GetMultiDMATransfer>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e095      	b.n	800250e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023e2:	2304      	movs	r3, #4
 80023e4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023e6:	f7ff fb4b 	bl	8001a80 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023ec:	e021      	b.n	8002432 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d01d      	beq.n	8002432 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80023f6:	f7ff fb43 	bl	8001a80 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <HAL_ADC_PollForConversion+0x9c>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d112      	bne.n	8002432 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	f043 0204 	orr.w	r2, r3, #4
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e06d      	b.n	800250e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0d6      	beq.n	80023ee <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fbf3 	bl	8001c3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7f5b      	ldrb	r3, [r3, #29]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d118      	bne.n	8002496 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b08      	cmp	r3, #8
 8002470:	d111      	bne.n	8002496 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a20      	ldr	r2, [pc, #128]	; (800251c <HAL_ADC_PollForConversion+0x1ac>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d002      	beq.n	80024a6 <HAL_ADC_PollForConversion+0x136>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	e001      	b.n	80024aa <HAL_ADC_PollForConversion+0x13a>
 80024a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d008      	beq.n	80024c4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d002      	beq.n	80024c4 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d104      	bne.n	80024ce <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	e00d      	b.n	80024ea <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_ADC_PollForConversion+0x1ac>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d002      	beq.n	80024de <HAL_ADC_PollForConversion+0x16e>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e001      	b.n	80024e2 <HAL_ADC_PollForConversion+0x172>
 80024de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d104      	bne.n	80024fa <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2208      	movs	r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e008      	b.n	800250c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	220c      	movs	r2, #12
 800250a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	50000300 	.word	0x50000300
 800251c:	50000100 	.word	0x50000100

08002520 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0b6      	sub	sp, #216	; 0xd8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x22>
 800255a:	2302      	movs	r3, #2
 800255c:	e3c8      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x7b4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fc99 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 83ad 	bne.w	8002cd2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff fb6c 	bl	8001c62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fc87 	bl	8001ea2 <LL_ADC_REG_IsConversionOngoing>
 8002594:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fc93 	bl	8001ec8 <LL_ADC_INJ_IsConversionOngoing>
 80025a2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 81d9 	bne.w	8002962 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 81d4 	bne.w	8002962 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025c2:	d10f      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2200      	movs	r2, #0
 80025ce:	4619      	mov	r1, r3
 80025d0:	f7ff fb73 	bl	8001cba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fb1a 	bl	8001c16 <LL_ADC_SetSamplingTimeCommonConfig>
 80025e2:	e00e      	b.n	8002602 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f7ff fb62 	bl	8001cba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fb0a 	bl	8001c16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d022      	beq.n	800266a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6919      	ldr	r1, [r3, #16]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002634:	f7ff fa64 	bl	8001b00 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6919      	ldr	r1, [r3, #16]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	461a      	mov	r2, r3
 8002646:	f7ff fab0 	bl	8001baa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x124>
 800265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265e:	e000      	b.n	8002662 <HAL_ADC_ConfigChannel+0x126>
 8002660:	2300      	movs	r3, #0
 8002662:	461a      	mov	r2, r3
 8002664:	f7ff fabc 	bl	8001be0 <LL_ADC_SetOffsetSaturation>
 8002668:	e17b      	b.n	8002962 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fa69 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x15a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fa5e 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	e01e      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x198>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fa53 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80026c4:	2320      	movs	r3, #32
 80026c6:	e004      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80026c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1b0>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0e9b      	lsrs	r3, r3, #26
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	e018      	b.n	800271e <HAL_ADC_ConfigChannel+0x1e2>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e004      	b.n	800271e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800271e:	429a      	cmp	r2, r3
 8002720:	d106      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fa22 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fa06 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_ADC_ConfigChannel+0x220>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2101      	movs	r1, #1
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f9fb 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	f003 021f 	and.w	r2, r3, #31
 800275a:	e01e      	b.n	800279a <HAL_ADC_ConfigChannel+0x25e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f9f0 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800277a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800277e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002782:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e004      	b.n	8002798 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800278e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x276>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	e018      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x2a8>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e004      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80027da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f9bf 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f9a3 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x2e6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2102      	movs	r1, #2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f998 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	e01e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x324>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2102      	movs	r1, #2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f98d 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e004      	b.n	800285e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x33c>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	e016      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x36a>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800288a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800288c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002898:	2320      	movs	r3, #32
 800289a:	e004      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800289c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d106      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2102      	movs	r1, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f95e 	bl	8001b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2103      	movs	r1, #3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f942 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10a      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x3a8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2103      	movs	r1, #3
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f937 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	f003 021f 	and.w	r2, r3, #31
 80028e2:	e017      	b.n	8002914 <HAL_ADC_ConfigChannel+0x3d8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2103      	movs	r1, #3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f92c 	bl	8001b48 <LL_ADC_GetOffsetChannel>
 80028f0:	4603      	mov	r3, r0
 80028f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028fe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e003      	b.n	8002912 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800290a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d105      	bne.n	800292c <HAL_ADC_ConfigChannel+0x3f0>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	e011      	b.n	8002950 <HAL_ADC_ConfigChannel+0x414>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800293a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800293c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800293e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	2103      	movs	r1, #3
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff f909 	bl	8001b74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fa74 	bl	8001e54 <LL_ADC_IsEnabled>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 8140 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	461a      	mov	r2, r3
 8002982:	f7ff f9c5 	bl	8001d10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4a8f      	ldr	r2, [pc, #572]	; (8002bc8 <HAL_ADC_ConfigChannel+0x68c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	f040 8131 	bne.w	8002bf4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10b      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x47e>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0e9b      	lsrs	r3, r3, #26
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 031f 	and.w	r3, r3, #31
 80029ae:	2b09      	cmp	r3, #9
 80029b0:	bf94      	ite	ls
 80029b2:	2301      	movls	r3, #1
 80029b4:	2300      	movhi	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	e019      	b.n	80029ee <HAL_ADC_ConfigChannel+0x4b2>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80029d2:	2320      	movs	r3, #32
 80029d4:	e003      	b.n	80029de <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80029d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d079      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x4d2>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	3301      	adds	r3, #1
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0c:	e015      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x4fe>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a26:	2320      	movs	r3, #32
 8002a28:	e003      	b.n	8002a32 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	069b      	lsls	r3, r3, #26
 8002a36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x51e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	e017      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x54e>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e003      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x574>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0e9b      	lsrs	r3, r3, #26
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	051b      	lsls	r3, r3, #20
 8002aae:	e018      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x5a6>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e003      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f003 021f 	and.w	r2, r3, #31
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	e081      	b.n	8002bea <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d107      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x5c6>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	3301      	adds	r3, #1
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b00:	e015      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x5f2>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e003      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x612>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	e017      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x642>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e003      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	ea42 0103 	orr.w	r1, r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10d      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x66e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	0e9b      	lsrs	r3, r3, #26
 8002b94:	3301      	adds	r3, #1
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3b1e      	subs	r3, #30
 8002ba2:	051b      	lsls	r3, r3, #20
 8002ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	e01e      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x6ac>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	613b      	str	r3, [r7, #16]
  return result;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d104      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e006      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x698>
 8002bc6:	bf00      	nop
 8002bc8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 021f 	and.w	r2, r3, #31
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	3b1e      	subs	r3, #30
 8002be2:	051b      	lsls	r3, r3, #20
 8002be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f7ff f863 	bl	8001cba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d071      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c00:	483e      	ldr	r0, [pc, #248]	; (8002cfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002c02:	f7fe ff6f 	bl	8001ae4 <LL_ADC_GetCommonPathInternalCh>
 8002c06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a3c      	ldr	r2, [pc, #240]	; (8002d00 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_ADC_ConfigChannel+0x6e2>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3a      	ldr	r2, [pc, #232]	; (8002d04 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d127      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c32:	d157      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	482f      	ldr	r0, [pc, #188]	; (8002cfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002c40:	f7fe ff3d 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c44:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	4a30      	ldr	r2, [pc, #192]	; (8002d0c <HAL_ADC_ConfigChannel+0x7d0>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c5e:	e002      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f9      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c6c:	e03a      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_ADC_ConfigChannel+0x7d4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d113      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02a      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c96:	4619      	mov	r1, r3
 8002c98:	4818      	ldr	r0, [pc, #96]	; (8002cfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002c9a:	f7fe ff10 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c9e:	e021      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d11c      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d116      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d011      	beq.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cc8:	4619      	mov	r1, r3
 8002cca:	480c      	ldr	r0, [pc, #48]	; (8002cfc <HAL_ADC_ConfigChannel+0x7c0>)
 8002ccc:	f7fe fef7 	bl	8001abe <LL_ADC_SetCommonPathInternalCh>
 8002cd0:	e008      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	37d8      	adds	r7, #216	; 0xd8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	80080000 	.word	0x80080000
 8002cfc:	50000300 	.word	0x50000300
 8002d00:	c3210000 	.word	0xc3210000
 8002d04:	90c00010 	.word	0x90c00010
 8002d08:	20000000 	.word	0x20000000
 8002d0c:	053e2d63 	.word	0x053e2d63
 8002d10:	c7520000 	.word	0xc7520000
 8002d14:	50000100 	.word	0x50000100
 8002d18:	cb840000 	.word	0xcb840000

08002d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff f891 	bl	8001e54 <LL_ADC_IsEnabled>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d169      	bne.n	8002e0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <ADC_Enable+0xfc>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e055      	b.n	8002e0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f860 	bl	8001e2c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d6c:	482b      	ldr	r0, [pc, #172]	; (8002e1c <ADC_Enable+0x100>)
 8002d6e:	f7fe feb9 	bl	8001ae4 <LL_ADC_GetCommonPathInternalCh>
 8002d72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d7c:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <ADC_Enable+0x104>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <ADC_Enable+0x108>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d96:	e002      	b.n	8002d9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f9      	bne.n	8002d98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002da4:	f7fe fe6c 	bl	8001a80 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002daa:	e028      	b.n	8002dfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f84f 	bl	8001e54 <LL_ADC_IsEnabled>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d104      	bne.n	8002dc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f833 	bl	8001e2c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dc6:	f7fe fe5b 	bl	8001a80 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d914      	bls.n	8002dfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d00d      	beq.n	8002dfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	f043 0210 	orr.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e007      	b.n	8002e0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d1cf      	bne.n	8002dac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	8000003f 	.word	0x8000003f
 8002e1c:	50000300 	.word	0x50000300
 8002e20:	20000000 	.word	0x20000000
 8002e24:	053e2d63 	.word	0x053e2d63

08002e28 <LL_ADC_IsEnabled>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <LL_ADC_IsEnabled+0x18>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <LL_ADC_IsEnabled+0x1a>
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d101      	bne.n	8002e66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b0a1      	sub	sp, #132	; 0x84
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e08b      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eaa:	d102      	bne.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eac:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	e001      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e06a      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ffb9 	bl	8002e4e <LL_ADC_REG_IsConversionOngoing>
 8002edc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ffb3 	bl	8002e4e <LL_ADC_REG_IsConversionOngoing>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d14c      	bne.n	8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d149      	bne.n	8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002ef6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d028      	beq.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f12:	035b      	lsls	r3, r3, #13
 8002f14:	430b      	orrs	r3, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f20:	f7ff ff82 	bl	8002e28 <LL_ADC_IsEnabled>
 8002f24:	4604      	mov	r4, r0
 8002f26:	4823      	ldr	r0, [pc, #140]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f28:	f7ff ff7e 	bl	8002e28 <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4323      	orrs	r3, r4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d133      	bne.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f3c:	f023 030f 	bic.w	r3, r3, #15
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	6811      	ldr	r1, [r2, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f50:	e024      	b.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f5e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f62:	f7ff ff61 	bl	8002e28 <LL_ADC_IsEnabled>
 8002f66:	4604      	mov	r4, r0
 8002f68:	4812      	ldr	r0, [pc, #72]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f6a:	f7ff ff5d 	bl	8002e28 <LL_ADC_IsEnabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4323      	orrs	r3, r4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d112      	bne.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f7e:	f023 030f 	bic.w	r3, r3, #15
 8002f82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f84:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f86:	e009      	b.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f9a:	e000      	b.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fa6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3784      	adds	r7, #132	; 0x84
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	50000100 	.word	0x50000100
 8002fb8:	50000300 	.word	0x50000300

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <__NVIC_EnableIRQ+0x38>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003128:	d301      	bcc.n	800312e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312a:	2301      	movs	r3, #1
 800312c:	e00f      	b.n	800314e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <SysTick_Config+0x40>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003136:	210f      	movs	r1, #15
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f7ff ff8e 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SysTick_Config+0x40>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SysTick_Config+0x40>)
 8003148:	2207      	movs	r2, #7
 800314a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000e010 	.word	0xe000e010

0800315c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff29 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003180:	f7ff ff40 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff90 	bl	80030b0 <NVIC_EncodePriority>
 8003190:	4602      	mov	r2, r0
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff5f 	bl	800305c <__NVIC_SetPriority>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff33 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffa4 	bl	8003118 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e014      	b.n	8003216 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	791b      	ldrb	r3, [r3, #4]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fe fa79 	bl	80016f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e056      	b.n	80032e2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	795b      	ldrb	r3, [r3, #5]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_DAC_Start+0x20>
 800323c:	2302      	movs	r3, #2
 800323e:	e050      	b.n	80032e2 <HAL_DAC_Start+0xc2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2201      	movs	r2, #1
 800325a:	409a      	lsls	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_DAC_Start+0xd0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_DAC_Start+0xd4>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8003276:	e002      	b.n	800327e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3b01      	subs	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f9      	bne.n	8003278 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003294:	2b02      	cmp	r3, #2
 8003296:	d11d      	bne.n	80032d4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	e014      	b.n	80032d4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2102      	movs	r1, #2
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d107      	bne.n	80032d4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0202 	orr.w	r2, r2, #2
 80032d2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000
 80032f4:	053e2d63 	.word	0x053e2d63

080032f8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08a      	sub	sp, #40	; 0x28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_DAC_ConfigChannel+0x1c>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e19e      	b.n	8003656 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	795b      	ldrb	r3, [r3, #5]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_DAC_ConfigChannel+0x2c>
 8003320:	2302      	movs	r3, #2
 8003322:	e198      	b.n	8003656 <HAL_DAC_ConfigChannel+0x35e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2202      	movs	r2, #2
 800332e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b04      	cmp	r3, #4
 8003336:	d17a      	bne.n	800342e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003338:	f7fe fba2 	bl	8001a80 <HAL_GetTick>
 800333c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d13d      	bne.n	80033c0 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003344:	e018      	b.n	8003378 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003346:	f7fe fb9b 	bl	8001a80 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d911      	bls.n	8003378 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f043 0208 	orr.w	r2, r3, #8
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2203      	movs	r2, #3
 8003372:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e16e      	b.n	8003656 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1df      	bne.n	8003346 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
 8003390:	e020      	b.n	80033d4 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003392:	f7fe fb75 	bl	8001a80 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b01      	cmp	r3, #1
 800339e:	d90f      	bls.n	80033c0 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	da0a      	bge.n	80033c0 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f043 0208 	orr.w	r2, r3, #8
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2203      	movs	r2, #3
 80033ba:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e14a      	b.n	8003656 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	dbe3      	blt.n	8003392 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	ea02 0103 	and.w	r1, r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	409a      	lsls	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	21ff      	movs	r1, #255	; 0xff
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	ea02 0103 	and.w	r1, r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	409a      	lsls	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d11d      	bne.n	8003472 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	221f      	movs	r2, #31
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	4013      	ands	r3, r2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	4313      	orrs	r3, r2
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2207      	movs	r2, #7
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348a:	4013      	ands	r3, r2
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d102      	bne.n	800349c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003496:	2300      	movs	r3, #0
 8003498:	623b      	str	r3, [r7, #32]
 800349a:	e00f      	b.n	80034bc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d102      	bne.n	80034aa <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80034a4:	2301      	movs	r3, #1
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	e008      	b.n	80034bc <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80034b2:	2301      	movs	r3, #1
 80034b4:	623b      	str	r3, [r7, #32]
 80034b6:	e001      	b.n	80034bc <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	4013      	ands	r3, r2
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	791b      	ldrb	r3, [r3, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_DAC_ConfigChannel+0x1f8>
 80034ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ee:	e000      	b.n	80034f2 <HAL_DAC_ConfigChannel+0x1fa>
 80034f0:	2300      	movs	r3, #0
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350a:	4013      	ands	r3, r2
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	795b      	ldrb	r3, [r3, #5]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d102      	bne.n	800351c <HAL_DAC_ConfigChannel+0x224>
 8003516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800351a:	e000      	b.n	800351e <HAL_DAC_ConfigChannel+0x226>
 800351c:	2300      	movs	r3, #0
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d114      	bne.n	800355e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003534:	f000 ff96 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8003538:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4a48      	ldr	r2, [pc, #288]	; (8003660 <HAL_DAC_ConfigChannel+0x368>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d904      	bls.n	800354c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
 800354a:	e00f      	b.n	800356c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4a45      	ldr	r2, [pc, #276]	; (8003664 <HAL_DAC_ConfigChannel+0x36c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d90a      	bls.n	800356a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	e006      	b.n	800356c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	4313      	orrs	r3, r2
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	e000      	b.n	800356c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800356a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	4313      	orrs	r3, r2
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	400a      	ands	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035be:	4013      	ands	r3, r2
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	4313      	orrs	r3, r2
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	22c0      	movs	r2, #192	; 0xc0
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	400a      	ands	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	f640 710f 	movw	r1, #3855	; 0xf0f
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	ea02 0103 	and.w	r1, r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	409a      	lsls	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003654:	7ffb      	ldrb	r3, [r7, #31]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	09896800 	.word	0x09896800
 8003664:	04c4b400 	.word	0x04c4b400

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003676:	e15a      	b.n	800392e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2101      	movs	r1, #1
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	4013      	ands	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 814c 	beq.w	8003928 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d005      	beq.n	80036a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d130      	bne.n	800370a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036de:	2201      	movs	r2, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0201 	and.w	r2, r3, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b03      	cmp	r3, #3
 8003714:	d017      	beq.n	8003746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d123      	bne.n	800379a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	08da      	lsrs	r2, r3, #3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3208      	adds	r2, #8
 800375a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	6939      	ldr	r1, [r7, #16]
 8003796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a6 	beq.w	8003928 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037dc:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_GPIO_Init+0x2e4>)
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	4a5a      	ldr	r2, [pc, #360]	; (800394c <HAL_GPIO_Init+0x2e4>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6613      	str	r3, [r2, #96]	; 0x60
 80037e8:	4b58      	ldr	r3, [pc, #352]	; (800394c <HAL_GPIO_Init+0x2e4>)
 80037ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037f4:	4a56      	ldr	r2, [pc, #344]	; (8003950 <HAL_GPIO_Init+0x2e8>)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	3302      	adds	r3, #2
 80037fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	220f      	movs	r2, #15
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4013      	ands	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800381e:	d01f      	beq.n	8003860 <HAL_GPIO_Init+0x1f8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a4c      	ldr	r2, [pc, #304]	; (8003954 <HAL_GPIO_Init+0x2ec>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d019      	beq.n	800385c <HAL_GPIO_Init+0x1f4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <HAL_GPIO_Init+0x2f0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d013      	beq.n	8003858 <HAL_GPIO_Init+0x1f0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a4a      	ldr	r2, [pc, #296]	; (800395c <HAL_GPIO_Init+0x2f4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00d      	beq.n	8003854 <HAL_GPIO_Init+0x1ec>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a49      	ldr	r2, [pc, #292]	; (8003960 <HAL_GPIO_Init+0x2f8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d007      	beq.n	8003850 <HAL_GPIO_Init+0x1e8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_GPIO_Init+0x2fc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_GPIO_Init+0x1e4>
 8003848:	2305      	movs	r3, #5
 800384a:	e00a      	b.n	8003862 <HAL_GPIO_Init+0x1fa>
 800384c:	2306      	movs	r3, #6
 800384e:	e008      	b.n	8003862 <HAL_GPIO_Init+0x1fa>
 8003850:	2304      	movs	r3, #4
 8003852:	e006      	b.n	8003862 <HAL_GPIO_Init+0x1fa>
 8003854:	2303      	movs	r3, #3
 8003856:	e004      	b.n	8003862 <HAL_GPIO_Init+0x1fa>
 8003858:	2302      	movs	r3, #2
 800385a:	e002      	b.n	8003862 <HAL_GPIO_Init+0x1fa>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_GPIO_Init+0x1fa>
 8003860:	2300      	movs	r3, #0
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	f002 0203 	and.w	r2, r2, #3
 8003868:	0092      	lsls	r2, r2, #2
 800386a:	4093      	lsls	r3, r2
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003872:	4937      	ldr	r1, [pc, #220]	; (8003950 <HAL_GPIO_Init+0x2e8>)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003880:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_GPIO_Init+0x300>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	43db      	mvns	r3, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038a4:	4a30      	ldr	r2, [pc, #192]	; (8003968 <HAL_GPIO_Init+0x300>)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038aa:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <HAL_GPIO_Init+0x300>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ce:	4a26      	ldr	r2, [pc, #152]	; (8003968 <HAL_GPIO_Init+0x300>)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038d4:	4b24      	ldr	r3, [pc, #144]	; (8003968 <HAL_GPIO_Init+0x300>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038f8:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <HAL_GPIO_Init+0x300>)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_GPIO_Init+0x300>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	43db      	mvns	r3, r3
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4013      	ands	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003922:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_GPIO_Init+0x300>)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3301      	adds	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f ae9d 	bne.w	8003678 <HAL_GPIO_Init+0x10>
  }
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40021000 	.word	0x40021000
 8003950:	40010000 	.word	0x40010000
 8003954:	48000400 	.word	0x48000400
 8003958:	48000800 	.word	0x48000800
 800395c:	48000c00 	.word	0x48000c00
 8003960:	48001000 	.word	0x48001000
 8003964:	48001400 	.word	0x48001400
 8003968:	40010400 	.word	0x40010400

0800396c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
 8003978:	4613      	mov	r3, r2
 800397a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800397c:	787b      	ldrb	r3, [r7, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003988:	e002      	b.n	8003990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d141      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039aa:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b6:	d131      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b8:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039be:	4a46      	ldr	r2, [pc, #280]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c8:	4b43      	ldr	r3, [pc, #268]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039d0:	4a41      	ldr	r2, [pc, #260]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039d8:	4b40      	ldr	r3, [pc, #256]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2232      	movs	r2, #50	; 0x32
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	4a3f      	ldr	r2, [pc, #252]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	0c9b      	lsrs	r3, r3, #18
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039ee:	e002      	b.n	80039f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039f6:	4b38      	ldr	r3, [pc, #224]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a02:	d102      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1f2      	bne.n	80039f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a0a:	4b33      	ldr	r3, [pc, #204]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	d158      	bne.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e057      	b.n	8003acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a1c:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a22:	4a2d      	ldr	r2, [pc, #180]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003a2c:	e04d      	b.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a34:	d141      	bne.n	8003aba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d131      	bne.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a44:	4b24      	ldr	r3, [pc, #144]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4a:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a54:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2232      	movs	r2, #50	; 0x32
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	0c9b      	lsrs	r3, r3, #18
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7a:	e002      	b.n	8003a82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8e:	d102      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f2      	bne.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa2:	d112      	bne.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e011      	b.n	8003acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ab8:	e007      	b.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ac2:	4a05      	ldr	r2, [pc, #20]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	431bde83 	.word	0x431bde83

08003ae4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af2:	6093      	str	r3, [r2, #8]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40007000 	.word	0x40007000

08003b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e2fe      	b.n	8004114 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d075      	beq.n	8003c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b22:	4b97      	ldr	r3, [pc, #604]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b2c:	4b94      	ldr	r3, [pc, #592]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_OscConfig+0x3e>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_OscConfig+0x44>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d10b      	bne.n	8003b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b48:	4b8d      	ldr	r3, [pc, #564]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d05b      	beq.n	8003c0c <HAL_RCC_OscConfig+0x108>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d157      	bne.n	8003c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e2d9      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b68:	d106      	bne.n	8003b78 <HAL_RCC_OscConfig+0x74>
 8003b6a:	4b85      	ldr	r3, [pc, #532]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a84      	ldr	r2, [pc, #528]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e01d      	b.n	8003bb4 <HAL_RCC_OscConfig+0xb0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x98>
 8003b82:	4b7f      	ldr	r3, [pc, #508]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7e      	ldr	r2, [pc, #504]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b7c      	ldr	r3, [pc, #496]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7b      	ldr	r2, [pc, #492]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0xb0>
 8003b9c:	4b78      	ldr	r3, [pc, #480]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a77      	ldr	r2, [pc, #476]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a74      	ldr	r2, [pc, #464]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fd ff60 	bl	8001a80 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd ff5c 	bl	8001a80 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e29e      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd6:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xc0>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd ff4c 	bl	8001a80 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fd ff48 	bl	8001a80 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e28a      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfe:	4b60      	ldr	r3, [pc, #384]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0xe8>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d075      	beq.n	8003d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c24:	4b56      	ldr	r3, [pc, #344]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_OscConfig+0x136>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_OscConfig+0x13c>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d11f      	bne.n	8003c80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c40:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x154>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e25d      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c58:	4b49      	ldr	r3, [pc, #292]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	061b      	lsls	r3, r3, #24
 8003c66:	4946      	ldr	r1, [pc, #280]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c6c:	4b45      	ldr	r3, [pc, #276]	; (8003d84 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fd feb9 	bl	80019e8 <HAL_InitTick>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d043      	beq.n	8003d04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e249      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d023      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c88:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a3c      	ldr	r2, [pc, #240]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fd fef4 	bl	8001a80 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fd fef0 	bl	8001a80 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e232      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cae:	4b34      	ldr	r3, [pc, #208]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	061b      	lsls	r3, r3, #24
 8003cc8:	492d      	ldr	r1, [pc, #180]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
 8003cce:	e01a      	b.n	8003d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fed0 	bl	8001a80 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fd fecc 	bl	8001a80 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e20e      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf6:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x1e0>
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d041      	beq.n	8003d96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1a:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2a:	f7fd fea9 	bl	8001a80 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d32:	f7fd fea5 	bl	8001a80 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1e7      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d44:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0ef      	beq.n	8003d32 <HAL_RCC_OscConfig+0x22e>
 8003d52:	e020      	b.n	8003d96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5a:	4a09      	ldr	r2, [pc, #36]	; (8003d80 <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fd fe8c 	bl	8001a80 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d6a:	e00d      	b.n	8003d88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6c:	f7fd fe88 	bl	8001a80 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d906      	bls.n	8003d88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1ca      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d88:	4b8c      	ldr	r3, [pc, #560]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1ea      	bne.n	8003d6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 80a6 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da4:	2300      	movs	r3, #0
 8003da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003da8:	4b84      	ldr	r3, [pc, #528]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2b4>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x2b6>
 8003db8:	2300      	movs	r3, #0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbe:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	4a7e      	ldr	r2, [pc, #504]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dca:	4b7c      	ldr	r3, [pc, #496]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dda:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <HAL_RCC_OscConfig+0x4bc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d118      	bne.n	8003e18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003de6:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x4bc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a75      	ldr	r2, [pc, #468]	; (8003fc0 <HAL_RCC_OscConfig+0x4bc>)
 8003dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df2:	f7fd fe45 	bl	8001a80 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7fd fe41 	bl	8001a80 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e183      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0c:	4b6c      	ldr	r3, [pc, #432]	; (8003fc0 <HAL_RCC_OscConfig+0x4bc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d108      	bne.n	8003e32 <HAL_RCC_OscConfig+0x32e>
 8003e20:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e30:	e024      	b.n	8003e7c <HAL_RCC_OscConfig+0x378>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d110      	bne.n	8003e5c <HAL_RCC_OscConfig+0x358>
 8003e3a:	4b60      	ldr	r3, [pc, #384]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e40:	4a5e      	ldr	r2, [pc, #376]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e4a:	4b5c      	ldr	r3, [pc, #368]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	4a5a      	ldr	r2, [pc, #360]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5a:	e00f      	b.n	8003e7c <HAL_RCC_OscConfig+0x378>
 8003e5c:	4b57      	ldr	r3, [pc, #348]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	4a56      	ldr	r2, [pc, #344]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a52      	ldr	r2, [pc, #328]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d016      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fd fdfc 	bl	8001a80 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fdf8 	bl	8001a80 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e138      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea2:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ed      	beq.n	8003e8c <HAL_RCC_OscConfig+0x388>
 8003eb0:	e015      	b.n	8003ede <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fde5 	bl	8001a80 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd fde1 	bl	8001a80 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e121      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed0:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1ed      	bne.n	8003eba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee4:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	4a34      	ldr	r2, [pc, #208]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d03c      	beq.n	8003f76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f04:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd fdb4 	bl	8001a80 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f1c:	f7fd fdb0 	bl	8001a80 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0f2      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f2e:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ef      	beq.n	8003f1c <HAL_RCC_OscConfig+0x418>
 8003f3c:	e01b      	b.n	8003f76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f44:	4a1d      	ldr	r2, [pc, #116]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fd fd97 	bl	8001a80 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f56:	f7fd fd93 	bl	8001a80 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0d5      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f68:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ef      	bne.n	8003f56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80c9 	beq.w	8004112 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	f000 8083 	beq.w	8004094 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d15e      	bne.n	8004054 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_RCC_OscConfig+0x4b8>)
 8003f9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fd6d 	bl	8001a80 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa8:	e00c      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd fd69 	bl	8001a80 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d905      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0ab      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc4:	4b55      	ldr	r3, [pc, #340]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ec      	bne.n	8003faa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd0:	4b52      	ldr	r3, [pc, #328]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	4b52      	ldr	r3, [pc, #328]	; (8004120 <HAL_RCC_OscConfig+0x61c>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6a11      	ldr	r1, [r2, #32]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0112      	lsls	r2, r2, #4
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003fea:	0212      	lsls	r2, r2, #8
 8003fec:	4311      	orrs	r1, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ff2:	0852      	lsrs	r2, r2, #1
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	0552      	lsls	r2, r2, #21
 8003ff8:	4311      	orrs	r1, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ffe:	0852      	lsrs	r2, r2, #1
 8004000:	3a01      	subs	r2, #1
 8004002:	0652      	lsls	r2, r2, #25
 8004004:	4311      	orrs	r1, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800400a:	06d2      	lsls	r2, r2, #27
 800400c:	430a      	orrs	r2, r1
 800400e:	4943      	ldr	r1, [pc, #268]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8004010:	4313      	orrs	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a40      	ldr	r2, [pc, #256]	; (800411c <HAL_RCC_OscConfig+0x618>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004020:	4b3e      	ldr	r3, [pc, #248]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4a3d      	ldr	r2, [pc, #244]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8004026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd fd28 	bl	8001a80 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fd fd24 	bl	8001a80 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e066      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004046:	4b35      	ldr	r3, [pc, #212]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x530>
 8004052:	e05e      	b.n	8004112 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b31      	ldr	r3, [pc, #196]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a30      	ldr	r2, [pc, #192]	; (800411c <HAL_RCC_OscConfig+0x618>)
 800405a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd fd0e 	bl	8001a80 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fd fd0a 	bl	8001a80 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e04c      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_RCC_OscConfig+0x618>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004086:	4b25      	ldr	r3, [pc, #148]	; (800411c <HAL_RCC_OscConfig+0x618>)
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	4924      	ldr	r1, [pc, #144]	; (800411c <HAL_RCC_OscConfig+0x618>)
 800408c:	4b25      	ldr	r3, [pc, #148]	; (8004124 <HAL_RCC_OscConfig+0x620>)
 800408e:	4013      	ands	r3, r2
 8004090:	60cb      	str	r3, [r1, #12]
 8004092:	e03e      	b.n	8004112 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e039      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80040a0:	4b1e      	ldr	r3, [pc, #120]	; (800411c <HAL_RCC_OscConfig+0x618>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f003 0203 	and.w	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d12c      	bne.n	800410e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	3b01      	subs	r3, #1
 80040c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d123      	bne.n	800410e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11b      	bne.n	800410e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d113      	bne.n	800410e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	3b01      	subs	r3, #1
 80040f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d109      	bne.n	800410e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	019f800c 	.word	0x019f800c
 8004124:	feeefffc 	.word	0xfeeefffc

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e11e      	b.n	800437e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b91      	ldr	r3, [pc, #580]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d910      	bls.n	8004170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b8e      	ldr	r3, [pc, #568]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	498c      	ldr	r1, [pc, #560]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b8a      	ldr	r3, [pc, #552]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e106      	b.n	800437e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d073      	beq.n	8004264 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d129      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004184:	4b81      	ldr	r3, [pc, #516]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0f4      	b.n	800437e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004194:	f000 f99e 	bl	80044d4 <RCC_GetSysClockFreqFromPLLSource>
 8004198:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4a7c      	ldr	r2, [pc, #496]	; (8004390 <HAL_RCC_ClockConfig+0x268>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d93f      	bls.n	8004222 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041a2:	4b7a      	ldr	r3, [pc, #488]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d033      	beq.n	8004222 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d12f      	bne.n	8004222 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041c2:	4b72      	ldr	r3, [pc, #456]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ca:	4a70      	ldr	r2, [pc, #448]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80041cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e024      	b.n	8004222 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e0:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0c6      	b.n	800437e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f0:	4b66      	ldr	r3, [pc, #408]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0be      	b.n	800437e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004200:	f000 f8ce 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4a61      	ldr	r2, [pc, #388]	; (8004390 <HAL_RCC_ClockConfig+0x268>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d909      	bls.n	8004222 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800420e:	4b5f      	ldr	r3, [pc, #380]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004216:	4a5d      	ldr	r2, [pc, #372]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004222:	4b5a      	ldr	r3, [pc, #360]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 0203 	bic.w	r2, r3, #3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	4957      	ldr	r1, [pc, #348]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004230:	4313      	orrs	r3, r2
 8004232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004234:	f7fd fc24 	bl	8001a80 <HAL_GetTick>
 8004238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	e00a      	b.n	8004252 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423c:	f7fd fc20 	bl	8001a80 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f241 3288 	movw	r2, #5000	; 0x1388
 800424a:	4293      	cmp	r3, r2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e095      	b.n	800437e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	4b4e      	ldr	r3, [pc, #312]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 020c 	and.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429a      	cmp	r2, r3
 8004262:	d1eb      	bne.n	800423c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d023      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800427c:	4b43      	ldr	r3, [pc, #268]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a42      	ldr	r2, [pc, #264]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004286:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004294:	4b3d      	ldr	r3, [pc, #244]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800429c:	4a3b      	ldr	r2, [pc, #236]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 800429e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a4:	4b39      	ldr	r3, [pc, #228]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4936      	ldr	r1, [pc, #216]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
 80042b6:	e008      	b.n	80042ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d105      	bne.n	80042ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042be:	4b33      	ldr	r3, [pc, #204]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	4a32      	ldr	r2, [pc, #200]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 80042c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ca:	4b2f      	ldr	r3, [pc, #188]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d21d      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 020f 	bic.w	r2, r3, #15
 80042e0:	4929      	ldr	r1, [pc, #164]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042e8:	f7fd fbca 	bl	8001a80 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fd fbc6 	bl	8001a80 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e03b      	b.n	800437e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d1ed      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b1a      	ldr	r3, [pc, #104]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4917      	ldr	r1, [pc, #92]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490f      	ldr	r1, [pc, #60]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004352:	f000 f825 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <HAL_RCC_ClockConfig+0x264>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490c      	ldr	r1, [pc, #48]	; (8004394 <HAL_RCC_ClockConfig+0x26c>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_RCC_ClockConfig+0x270>)
 8004370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_RCC_ClockConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd fb36 	bl	80019e8 <HAL_InitTick>
 800437c:	4603      	mov	r3, r0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40022000 	.word	0x40022000
 800438c:	40021000 	.word	0x40021000
 8004390:	04c4b400 	.word	0x04c4b400
 8004394:	08007714 	.word	0x08007714
 8004398:	20000000 	.word	0x20000000
 800439c:	20000004 	.word	0x20000004

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043a6:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d102      	bne.n	80043b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e047      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043b8:	4b27      	ldr	r3, [pc, #156]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 030c 	and.w	r3, r3, #12
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043c4:	4b26      	ldr	r3, [pc, #152]	; (8004460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e03e      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b0c      	cmp	r3, #12
 80043d4:	d136      	bne.n	8004444 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	3301      	adds	r3, #1
 80043ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d10c      	bne.n	800440e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043fe:	68d2      	ldr	r2, [r2, #12]
 8004400:	0a12      	lsrs	r2, r2, #8
 8004402:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	617b      	str	r3, [r7, #20]
      break;
 800440c:	e00c      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	4a10      	ldr	r2, [pc, #64]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004418:	68d2      	ldr	r2, [r2, #12]
 800441a:	0a12      	lsrs	r2, r2, #8
 800441c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
      break;
 8004426:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	0e5b      	lsrs	r3, r3, #25
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	3301      	adds	r3, #1
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e001      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004448:	693b      	ldr	r3, [r7, #16]
}
 800444a:	4618      	mov	r0, r3
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	00f42400 	.word	0x00f42400
 8004460:	016e3600 	.word	0x016e3600

08004464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4904      	ldr	r1, [pc, #16]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000
 80044a4:	08007724 	.word	0x08007724

080044a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044ac:	f7ff ffda 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0adb      	lsrs	r3, r3, #11
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	08007724 	.word	0x08007724

080044d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044da:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	3301      	adds	r3, #1
 80044f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d10c      	bne.n	8004512 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044f8:	4a17      	ldr	r2, [pc, #92]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	4a14      	ldr	r2, [pc, #80]	; (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004502:	68d2      	ldr	r2, [r2, #12]
 8004504:	0a12      	lsrs	r2, r2, #8
 8004506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	617b      	str	r3, [r7, #20]
    break;
 8004510:	e00c      	b.n	800452c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	4a0e      	ldr	r2, [pc, #56]	; (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800451c:	68d2      	ldr	r2, [r2, #12]
 800451e:	0a12      	lsrs	r2, r2, #8
 8004520:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
    break;
 800452a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800452c:	4b09      	ldr	r3, [pc, #36]	; (8004554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0e5b      	lsrs	r3, r3, #25
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004546:	687b      	ldr	r3, [r7, #4]
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40021000 	.word	0x40021000
 8004558:	016e3600 	.word	0x016e3600
 800455c:	00f42400 	.word	0x00f42400

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004568:	2300      	movs	r3, #0
 800456a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800456c:	2300      	movs	r3, #0
 800456e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 8098 	beq.w	80046ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457e:	2300      	movs	r3, #0
 8004580:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004582:	4b43      	ldr	r3, [pc, #268]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458e:	4b40      	ldr	r3, [pc, #256]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	4a3f      	ldr	r2, [pc, #252]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004598:	6593      	str	r3, [r2, #88]	; 0x58
 800459a:	4b3d      	ldr	r3, [pc, #244]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a6:	2301      	movs	r3, #1
 80045a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045aa:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a39      	ldr	r2, [pc, #228]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045b6:	f7fd fa63 	bl	8001a80 <HAL_GetTick>
 80045ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045bc:	e009      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fd fa5f 	bl	8001a80 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d902      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	74fb      	strb	r3, [r7, #19]
        break;
 80045d0:	e005      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0ef      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045de:	7cfb      	ldrb	r3, [r7, #19]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d159      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045e4:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01e      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d019      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800460c:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800462c:	4a18      	ldr	r2, [pc, #96]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fd fa1f 	bl	8001a80 <HAL_GetTick>
 8004642:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004644:	e00b      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fd fa1b 	bl	8001a80 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d902      	bls.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	74fb      	strb	r3, [r7, #19]
            break;
 800465c:	e006      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0ec      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800466c:	7cfb      	ldrb	r3, [r7, #19]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004672:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	4903      	ldr	r1, [pc, #12]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004688:	e008      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	74bb      	strb	r3, [r7, #18]
 800468e:	e005      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004690:	40021000 	.word	0x40021000
 8004694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800469c:	7c7b      	ldrb	r3, [r7, #17]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d105      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a2:	4ba6      	ldr	r3, [pc, #664]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a6:	4aa5      	ldr	r2, [pc, #660]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ba:	4ba0      	ldr	r3, [pc, #640]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 0203 	bic.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	499c      	ldr	r1, [pc, #624]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046dc:	4b97      	ldr	r3, [pc, #604]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	f023 020c 	bic.w	r2, r3, #12
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4994      	ldr	r1, [pc, #592]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046fe:	4b8f      	ldr	r3, [pc, #572]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	498b      	ldr	r1, [pc, #556]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004720:	4b86      	ldr	r3, [pc, #536]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	4983      	ldr	r1, [pc, #524]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004742:	4b7e      	ldr	r3, [pc, #504]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	497a      	ldr	r1, [pc, #488]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004764:	4b75      	ldr	r3, [pc, #468]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	4972      	ldr	r1, [pc, #456]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004786:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4969      	ldr	r1, [pc, #420]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047a8:	4b64      	ldr	r3, [pc, #400]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4961      	ldr	r1, [pc, #388]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	4958      	ldr	r1, [pc, #352]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ec:	4b53      	ldr	r3, [pc, #332]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	4950      	ldr	r1, [pc, #320]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800480a:	d105      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b4b      	ldr	r3, [pc, #300]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a4a      	ldr	r2, [pc, #296]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004820:	2b00      	cmp	r3, #0
 8004822:	d015      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	4942      	ldr	r1, [pc, #264]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004844:	4b3d      	ldr	r3, [pc, #244]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4a3c      	ldr	r2, [pc, #240]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800484a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800484e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800485c:	4b37      	ldr	r3, [pc, #220]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4934      	ldr	r1, [pc, #208]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b2f      	ldr	r3, [pc, #188]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a2e      	ldr	r2, [pc, #184]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004894:	4b29      	ldr	r3, [pc, #164]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	4926      	ldr	r1, [pc, #152]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b4:	4b21      	ldr	r3, [pc, #132]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a20      	ldr	r2, [pc, #128]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d015      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	4918      	ldr	r1, [pc, #96]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ea:	d105      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a12      	ldr	r2, [pc, #72]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d015      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004904:	4b0d      	ldr	r3, [pc, #52]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	490a      	ldr	r1, [pc, #40]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004922:	d105      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004930:	7cbb      	ldrb	r3, [r7, #18]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000

08004940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e049      	b.n	80049e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fc ff5a 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 fa1a 	bl	8004db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d001      	beq.n	8004a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e042      	b.n	8004a8e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <HAL_TIM_Base_Start+0xac>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d018      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a22:	d013      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <HAL_TIM_Base_Start+0xb0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00e      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a1c      	ldr	r2, [pc, #112]	; (8004aa4 <HAL_TIM_Base_Start+0xb4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d009      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_TIM_Base_Start+0xb8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_TIM_Base_Start+0x5c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a19      	ldr	r2, [pc, #100]	; (8004aac <HAL_TIM_Base_Start+0xbc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d115      	bne.n	8004a78 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <HAL_TIM_Base_Start+0xc0>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b06      	cmp	r3, #6
 8004a5c:	d015      	beq.n	8004a8a <HAL_TIM_Base_Start+0x9a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d011      	beq.n	8004a8a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a76:	e008      	b.n	8004a8a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	e000      	b.n	8004a8c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	00010007 	.word	0x00010007

08004ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d020      	beq.n	8004b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0202 	mvn.w	r2, #2
 8004ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f93b 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f92d 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f93e 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d020      	beq.n	8004b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0204 	mvn.w	r2, #4
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f915 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f907 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f918 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d020      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0208 	mvn.w	r2, #8
 8004b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2204      	movs	r2, #4
 8004b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f8ef 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8e1 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f8f2 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d020      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01b      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0210 	mvn.w	r2, #16
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8c9 	bl	8004d7a <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f8bb 	bl	8004d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8cc 	bl	8004d8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0201 	mvn.w	r2, #1
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f899 	bl	8004d52 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00c      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f95b 	bl	8004f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00c      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d007      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f953 	bl	8004f18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00c      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f886 	bl	8004da2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00c      	beq.n	8004cba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f06f 0220 	mvn.w	r2, #32
 8004cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f91b 	bl	8004ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00c      	beq.n	8004cde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f927 	bl	8004f2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00c      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f91f 	bl	8004f40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00c      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f917 	bl	8004f54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00c      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f90f 	bl	8004f68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a42      	ldr	r2, [pc, #264]	; (8004ed4 <TIM_Base_SetConfig+0x11c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3f      	ldr	r2, [pc, #252]	; (8004ed8 <TIM_Base_SetConfig+0x120>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3e      	ldr	r2, [pc, #248]	; (8004edc <TIM_Base_SetConfig+0x124>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x38>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a3d      	ldr	r2, [pc, #244]	; (8004ee0 <TIM_Base_SetConfig+0x128>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a33      	ldr	r2, [pc, #204]	; (8004ed4 <TIM_Base_SetConfig+0x11c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d01b      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e10:	d017      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a30      	ldr	r2, [pc, #192]	; (8004ed8 <TIM_Base_SetConfig+0x120>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2f      	ldr	r2, [pc, #188]	; (8004edc <TIM_Base_SetConfig+0x124>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00f      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <TIM_Base_SetConfig+0x128>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <TIM_Base_SetConfig+0x12c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <TIM_Base_SetConfig+0x130>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <TIM_Base_SetConfig+0x134>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a16      	ldr	r2, [pc, #88]	; (8004ed4 <TIM_Base_SetConfig+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00f      	beq.n	8004ea0 <TIM_Base_SetConfig+0xe8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <TIM_Base_SetConfig+0x128>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <TIM_Base_SetConfig+0xe8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a16      	ldr	r2, [pc, #88]	; (8004ee4 <TIM_Base_SetConfig+0x12c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d007      	beq.n	8004ea0 <TIM_Base_SetConfig+0xe8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <TIM_Base_SetConfig+0x130>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_Base_SetConfig+0xe8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a14      	ldr	r2, [pc, #80]	; (8004eec <TIM_Base_SetConfig+0x134>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d103      	bne.n	8004ea8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d105      	bne.n	8004ec6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	611a      	str	r2, [r3, #16]
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40014400 	.word	0x40014400
 8004eec:	40014800 	.word	0x40014800

08004ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e042      	b.n	8005014 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fc fbe5 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2224      	movs	r2, #36	; 0x24
 8004faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb82 	bl	80056d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f8b3 	bl	8005138 <UART_SetConfig>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e01b      	b.n	8005014 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fc01 	bl	8005814 <UART_CheckIdleState>
 8005012:	4603      	mov	r3, r0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	; 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	2b20      	cmp	r3, #32
 8005034:	d17b      	bne.n	800512e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_UART_Transmit+0x26>
 800503c:	88fb      	ldrh	r3, [r7, #6]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e074      	b.n	8005130 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2221      	movs	r2, #33	; 0x21
 8005052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005056:	f7fc fd13 	bl	8001a80 <HAL_GetTick>
 800505a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005074:	d108      	bne.n	8005088 <HAL_UART_Transmit+0x6c>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e003      	b.n	8005090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005090:	e030      	b.n	80050f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2180      	movs	r1, #128	; 0x80
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fc63 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e03d      	b.n	8005130 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3302      	adds	r3, #2
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e007      	b.n	80050e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	3301      	adds	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1c8      	bne.n	8005092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2200      	movs	r2, #0
 8005108:	2140      	movs	r1, #64	; 0x40
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fc2c 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d005      	beq.n	8005122 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e006      	b.n	8005130 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3720      	adds	r7, #32
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800513c:	b08c      	sub	sp, #48	; 0x30
 800513e:	af00      	add	r7, sp, #0
 8005140:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	431a      	orrs	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	431a      	orrs	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	4313      	orrs	r3, r2
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4bab      	ldr	r3, [pc, #684]	; (8005414 <UART_SetConfig+0x2dc>)
 8005168:	4013      	ands	r3, r2
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005170:	430b      	orrs	r3, r1
 8005172:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4aa0      	ldr	r2, [pc, #640]	; (8005418 <UART_SetConfig+0x2e0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a0:	4313      	orrs	r3, r2
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	f023 010f 	bic.w	r1, r3, #15
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a91      	ldr	r2, [pc, #580]	; (800541c <UART_SetConfig+0x2e4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d125      	bne.n	8005228 <UART_SetConfig+0xf0>
 80051dc:	4b90      	ldr	r3, [pc, #576]	; (8005420 <UART_SetConfig+0x2e8>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d81a      	bhi.n	8005220 <UART_SetConfig+0xe8>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0xb8>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005201 	.word	0x08005201
 80051f4:	08005211 	.word	0x08005211
 80051f8:	08005209 	.word	0x08005209
 80051fc:	08005219 	.word	0x08005219
 8005200:	2301      	movs	r3, #1
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005206:	e0d6      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005208:	2302      	movs	r3, #2
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520e:	e0d2      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005210:	2304      	movs	r3, #4
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005216:	e0ce      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005218:	2308      	movs	r3, #8
 800521a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521e:	e0ca      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005220:	2310      	movs	r3, #16
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005226:	e0c6      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a7d      	ldr	r2, [pc, #500]	; (8005424 <UART_SetConfig+0x2ec>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d138      	bne.n	80052a4 <UART_SetConfig+0x16c>
 8005232:	4b7b      	ldr	r3, [pc, #492]	; (8005420 <UART_SetConfig+0x2e8>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b0c      	cmp	r3, #12
 800523e:	d82d      	bhi.n	800529c <UART_SetConfig+0x164>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x110>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	0800527d 	.word	0x0800527d
 800524c:	0800529d 	.word	0x0800529d
 8005250:	0800529d 	.word	0x0800529d
 8005254:	0800529d 	.word	0x0800529d
 8005258:	0800528d 	.word	0x0800528d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	0800529d 	.word	0x0800529d
 8005264:	0800529d 	.word	0x0800529d
 8005268:	08005285 	.word	0x08005285
 800526c:	0800529d 	.word	0x0800529d
 8005270:	0800529d 	.word	0x0800529d
 8005274:	0800529d 	.word	0x0800529d
 8005278:	08005295 	.word	0x08005295
 800527c:	2300      	movs	r3, #0
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005282:	e098      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005284:	2302      	movs	r3, #2
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528a:	e094      	b.n	80053b6 <UART_SetConfig+0x27e>
 800528c:	2304      	movs	r3, #4
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005292:	e090      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005294:	2308      	movs	r3, #8
 8005296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529a:	e08c      	b.n	80053b6 <UART_SetConfig+0x27e>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a2:	e088      	b.n	80053b6 <UART_SetConfig+0x27e>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a5f      	ldr	r2, [pc, #380]	; (8005428 <UART_SetConfig+0x2f0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d125      	bne.n	80052fa <UART_SetConfig+0x1c2>
 80052ae:	4b5c      	ldr	r3, [pc, #368]	; (8005420 <UART_SetConfig+0x2e8>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d016      	beq.n	80052ea <UART_SetConfig+0x1b2>
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d818      	bhi.n	80052f2 <UART_SetConfig+0x1ba>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d00a      	beq.n	80052da <UART_SetConfig+0x1a2>
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d814      	bhi.n	80052f2 <UART_SetConfig+0x1ba>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <UART_SetConfig+0x19a>
 80052cc:	2b10      	cmp	r3, #16
 80052ce:	d008      	beq.n	80052e2 <UART_SetConfig+0x1aa>
 80052d0:	e00f      	b.n	80052f2 <UART_SetConfig+0x1ba>
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d8:	e06d      	b.n	80053b6 <UART_SetConfig+0x27e>
 80052da:	2302      	movs	r3, #2
 80052dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e0:	e069      	b.n	80053b6 <UART_SetConfig+0x27e>
 80052e2:	2304      	movs	r3, #4
 80052e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052e8:	e065      	b.n	80053b6 <UART_SetConfig+0x27e>
 80052ea:	2308      	movs	r3, #8
 80052ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f0:	e061      	b.n	80053b6 <UART_SetConfig+0x27e>
 80052f2:	2310      	movs	r3, #16
 80052f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f8:	e05d      	b.n	80053b6 <UART_SetConfig+0x27e>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a4b      	ldr	r2, [pc, #300]	; (800542c <UART_SetConfig+0x2f4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d125      	bne.n	8005350 <UART_SetConfig+0x218>
 8005304:	4b46      	ldr	r3, [pc, #280]	; (8005420 <UART_SetConfig+0x2e8>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800530e:	2bc0      	cmp	r3, #192	; 0xc0
 8005310:	d016      	beq.n	8005340 <UART_SetConfig+0x208>
 8005312:	2bc0      	cmp	r3, #192	; 0xc0
 8005314:	d818      	bhi.n	8005348 <UART_SetConfig+0x210>
 8005316:	2b80      	cmp	r3, #128	; 0x80
 8005318:	d00a      	beq.n	8005330 <UART_SetConfig+0x1f8>
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d814      	bhi.n	8005348 <UART_SetConfig+0x210>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <UART_SetConfig+0x1f0>
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d008      	beq.n	8005338 <UART_SetConfig+0x200>
 8005326:	e00f      	b.n	8005348 <UART_SetConfig+0x210>
 8005328:	2300      	movs	r3, #0
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532e:	e042      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005330:	2302      	movs	r3, #2
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005336:	e03e      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800533e:	e03a      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005346:	e036      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800534e:	e032      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a30      	ldr	r2, [pc, #192]	; (8005418 <UART_SetConfig+0x2e0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d12a      	bne.n	80053b0 <UART_SetConfig+0x278>
 800535a:	4b31      	ldr	r3, [pc, #196]	; (8005420 <UART_SetConfig+0x2e8>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005368:	d01a      	beq.n	80053a0 <UART_SetConfig+0x268>
 800536a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800536e:	d81b      	bhi.n	80053a8 <UART_SetConfig+0x270>
 8005370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005374:	d00c      	beq.n	8005390 <UART_SetConfig+0x258>
 8005376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537a:	d815      	bhi.n	80053a8 <UART_SetConfig+0x270>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <UART_SetConfig+0x250>
 8005380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005384:	d008      	beq.n	8005398 <UART_SetConfig+0x260>
 8005386:	e00f      	b.n	80053a8 <UART_SetConfig+0x270>
 8005388:	2300      	movs	r3, #0
 800538a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538e:	e012      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005390:	2302      	movs	r3, #2
 8005392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005396:	e00e      	b.n	80053b6 <UART_SetConfig+0x27e>
 8005398:	2304      	movs	r3, #4
 800539a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800539e:	e00a      	b.n	80053b6 <UART_SetConfig+0x27e>
 80053a0:	2308      	movs	r3, #8
 80053a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a6:	e006      	b.n	80053b6 <UART_SetConfig+0x27e>
 80053a8:	2310      	movs	r3, #16
 80053aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ae:	e002      	b.n	80053b6 <UART_SetConfig+0x27e>
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a17      	ldr	r2, [pc, #92]	; (8005418 <UART_SetConfig+0x2e0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	f040 80a8 	bne.w	8005512 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d834      	bhi.n	8005434 <UART_SetConfig+0x2fc>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <UART_SetConfig+0x298>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	08005435 	.word	0x08005435
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	08005435 	.word	0x08005435
 80053e0:	08005403 	.word	0x08005403
 80053e4:	08005435 	.word	0x08005435
 80053e8:	08005435 	.word	0x08005435
 80053ec:	08005435 	.word	0x08005435
 80053f0:	0800540b 	.word	0x0800540b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f4:	f7ff f842 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 80053f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053fa:	e021      	b.n	8005440 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <UART_SetConfig+0x2f8>)
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005400:	e01e      	b.n	8005440 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005402:	f7fe ffcd 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005408:	e01a      	b.n	8005440 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005410:	e016      	b.n	8005440 <UART_SetConfig+0x308>
 8005412:	bf00      	nop
 8005414:	cfff69f3 	.word	0xcfff69f3
 8005418:	40008000 	.word	0x40008000
 800541c:	40013800 	.word	0x40013800
 8005420:	40021000 	.word	0x40021000
 8005424:	40004400 	.word	0x40004400
 8005428:	40004800 	.word	0x40004800
 800542c:	40004c00 	.word	0x40004c00
 8005430:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800543e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 812a 	beq.w	800569c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	4a9e      	ldr	r2, [pc, #632]	; (80056c8 <UART_SetConfig+0x590>)
 800544e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005452:	461a      	mov	r2, r3
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	fbb3 f3f2 	udiv	r3, r3, r2
 800545a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	005b      	lsls	r3, r3, #1
 8005464:	4413      	add	r3, r2
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	429a      	cmp	r2, r3
 800546a:	d305      	bcc.n	8005478 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005472:	69ba      	ldr	r2, [r7, #24]
 8005474:	429a      	cmp	r2, r3
 8005476:	d903      	bls.n	8005480 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800547e:	e10d      	b.n	800569c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	2200      	movs	r2, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	4a8e      	ldr	r2, [pc, #568]	; (80056c8 <UART_SetConfig+0x590>)
 800548e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005492:	b29b      	uxth	r3, r3
 8005494:	2200      	movs	r2, #0
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800549e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054a2:	f7fb fc03 	bl	8000cac <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4610      	mov	r0, r2
 80054ac:	4619      	mov	r1, r3
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	020b      	lsls	r3, r1, #8
 80054b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054bc:	0202      	lsls	r2, r0, #8
 80054be:	6979      	ldr	r1, [r7, #20]
 80054c0:	6849      	ldr	r1, [r1, #4]
 80054c2:	0849      	lsrs	r1, r1, #1
 80054c4:	2000      	movs	r0, #0
 80054c6:	460c      	mov	r4, r1
 80054c8:	4605      	mov	r5, r0
 80054ca:	eb12 0804 	adds.w	r8, r2, r4
 80054ce:	eb43 0905 	adc.w	r9, r3, r5
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	469a      	mov	sl, r3
 80054da:	4693      	mov	fp, r2
 80054dc:	4652      	mov	r2, sl
 80054de:	465b      	mov	r3, fp
 80054e0:	4640      	mov	r0, r8
 80054e2:	4649      	mov	r1, r9
 80054e4:	f7fb fbe2 	bl	8000cac <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4613      	mov	r3, r2
 80054ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f6:	d308      	bcc.n	800550a <UART_SetConfig+0x3d2>
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fe:	d204      	bcs.n	800550a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	60da      	str	r2, [r3, #12]
 8005508:	e0c8      	b.n	800569c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005510:	e0c4      	b.n	800569c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551a:	d167      	bne.n	80055ec <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800551c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005520:	2b08      	cmp	r3, #8
 8005522:	d828      	bhi.n	8005576 <UART_SetConfig+0x43e>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <UART_SetConfig+0x3f4>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	08005551 	.word	0x08005551
 8005530:	08005559 	.word	0x08005559
 8005534:	08005561 	.word	0x08005561
 8005538:	08005577 	.word	0x08005577
 800553c:	08005567 	.word	0x08005567
 8005540:	08005577 	.word	0x08005577
 8005544:	08005577 	.word	0x08005577
 8005548:	08005577 	.word	0x08005577
 800554c:	0800556f 	.word	0x0800556f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005550:	f7fe ff94 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005556:	e014      	b.n	8005582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005558:	f7fe ffa6 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 800555c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800555e:	e010      	b.n	8005582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005560:	4b5a      	ldr	r3, [pc, #360]	; (80056cc <UART_SetConfig+0x594>)
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005564:	e00d      	b.n	8005582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005566:	f7fe ff1b 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800556a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800556c:	e009      	b.n	8005582 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005574:	e005      	b.n	8005582 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8089 	beq.w	800569c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	4a4e      	ldr	r2, [pc, #312]	; (80056c8 <UART_SetConfig+0x590>)
 8005590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005594:	461a      	mov	r2, r3
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	fbb3 f3f2 	udiv	r3, r3, r2
 800559c:	005a      	lsls	r2, r3, #1
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	441a      	add	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	d916      	bls.n	80055e4 <UART_SetConfig+0x4ac>
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055bc:	d212      	bcs.n	80055e4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f023 030f 	bic.w	r3, r3, #15
 80055c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	8bfb      	ldrh	r3, [r7, #30]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	8bfa      	ldrh	r2, [r7, #30]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	e05b      	b.n	800569c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055ea:	e057      	b.n	800569c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d828      	bhi.n	8005646 <UART_SetConfig+0x50e>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <UART_SetConfig+0x4c4>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005629 	.word	0x08005629
 8005604:	08005631 	.word	0x08005631
 8005608:	08005647 	.word	0x08005647
 800560c:	08005637 	.word	0x08005637
 8005610:	08005647 	.word	0x08005647
 8005614:	08005647 	.word	0x08005647
 8005618:	08005647 	.word	0x08005647
 800561c:	0800563f 	.word	0x0800563f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005620:	f7fe ff2c 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005626:	e014      	b.n	8005652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7fe ff3e 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800562e:	e010      	b.n	8005652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005630:	4b26      	ldr	r3, [pc, #152]	; (80056cc <UART_SetConfig+0x594>)
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005634:	e00d      	b.n	8005652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005636:	f7fe feb3 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800563a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800563c:	e009      	b.n	8005652 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005642:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005644:	e005      	b.n	8005652 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005650:	bf00      	nop
    }

    if (pclk != 0U)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d021      	beq.n	800569c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	4a1a      	ldr	r2, [pc, #104]	; (80056c8 <UART_SetConfig+0x590>)
 800565e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005662:	461a      	mov	r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	fbb3 f2f2 	udiv	r2, r3, r2
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	441a      	add	r2, r3
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	fbb2 f3f3 	udiv	r3, r2, r3
 800567a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d909      	bls.n	8005696 <UART_SetConfig+0x55e>
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005688:	d205      	bcs.n	8005696 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b29a      	uxth	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	e002      	b.n	800569c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2201      	movs	r2, #1
 80056a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80056b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3730      	adds	r7, #48	; 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c6:	bf00      	nop
 80056c8:	0800772c 	.word	0x0800772c
 80056cc:	00f42400 	.word	0x00f42400

080056d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01a      	beq.n	80057e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ce:	d10a      	bne.n	80057e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	605a      	str	r2, [r3, #4]
  }
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b098      	sub	sp, #96	; 0x60
 8005818:	af02      	add	r7, sp, #8
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005824:	f7fc f92c 	bl	8001a80 <HAL_GetTick>
 8005828:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0308 	and.w	r3, r3, #8
 8005834:	2b08      	cmp	r3, #8
 8005836:	d12f      	bne.n	8005898 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005840:	2200      	movs	r2, #0
 8005842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f88e 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d022      	beq.n	8005898 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005866:	653b      	str	r3, [r7, #80]	; 0x50
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005870:	647b      	str	r3, [r7, #68]	; 0x44
 8005872:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800587e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e6      	bne.n	8005852 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e063      	b.n	8005960 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d149      	bne.n	800593a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ae:	2200      	movs	r2, #0
 80058b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f857 	bl	8005968 <UART_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d03c      	beq.n	800593a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	623b      	str	r3, [r7, #32]
   return(result);
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058de:	633b      	str	r3, [r7, #48]	; 0x30
 80058e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e6      	bne.n	80058c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3308      	adds	r3, #8
 80058f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	60fb      	str	r3, [r7, #12]
   return(result);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3308      	adds	r3, #8
 8005910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005912:	61fa      	str	r2, [r7, #28]
 8005914:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	69b9      	ldr	r1, [r7, #24]
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	617b      	str	r3, [r7, #20]
   return(result);
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e012      	b.n	8005960 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3758      	adds	r7, #88	; 0x58
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005978:	e04f      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005980:	d04b      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005982:	f7fc f87d 	bl	8001a80 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	429a      	cmp	r2, r3
 8005990:	d302      	bcc.n	8005998 <UART_WaitOnFlagUntilTimeout+0x30>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e04e      	b.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d037      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xb2>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d034      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xb2>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d031      	beq.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d110      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2208      	movs	r2, #8
 80059ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f838 	bl	8005a42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2208      	movs	r2, #8
 80059d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e029      	b.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f4:	d111      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 f81e 	bl	8005a42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e00f      	b.n	8005a3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	bf0c      	ite	eq
 8005a2a:	2301      	moveq	r3, #1
 8005a2c:	2300      	movne	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	461a      	mov	r2, r3
 8005a32:	79fb      	ldrb	r3, [r7, #7]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d0a0      	beq.n	800597a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b095      	sub	sp, #84	; 0x54
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a68:	643b      	str	r3, [r7, #64]	; 0x40
 8005a6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e6      	bne.n	8005a4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e3      	bne.n	8005a7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d118      	bne.n	8005aee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f023 0310 	bic.w	r3, r3, #16
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6979      	ldr	r1, [r7, #20]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e6      	bne.n	8005abc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b02:	bf00      	nop
 8005b04:	3754      	adds	r7, #84	; 0x54
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e027      	b.n	8005b74 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	; 0x24
 8005b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e02d      	b.n	8005bf4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2224      	movs	r2, #36	; 0x24
 8005ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f84f 	bl	8005c78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e02d      	b.n	8005c70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2224      	movs	r2, #36	; 0x24
 8005c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f811 	bl	8005c78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d108      	bne.n	8005c9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c98:	e031      	b.n	8005cfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	0e5b      	lsrs	r3, r3, #25
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	0f5b      	lsrs	r3, r3, #29
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	7b3a      	ldrb	r2, [r7, #12]
 8005cc6:	4911      	ldr	r1, [pc, #68]	; (8005d0c <UARTEx_SetNbDataToProcess+0x94>)
 8005cc8:	5c8a      	ldrb	r2, [r1, r2]
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cce:	7b3a      	ldrb	r2, [r7, #12]
 8005cd0:	490f      	ldr	r1, [pc, #60]	; (8005d10 <UARTEx_SetNbDataToProcess+0x98>)
 8005cd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	7b7a      	ldrb	r2, [r7, #13]
 8005ce4:	4909      	ldr	r1, [pc, #36]	; (8005d0c <UARTEx_SetNbDataToProcess+0x94>)
 8005ce6:	5c8a      	ldrb	r2, [r1, r2]
 8005ce8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cec:	7b7a      	ldrb	r2, [r7, #13]
 8005cee:	4908      	ldr	r1, [pc, #32]	; (8005d10 <UARTEx_SetNbDataToProcess+0x98>)
 8005cf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	08007744 	.word	0x08007744
 8005d10:	0800774c 	.word	0x0800774c

08005d14 <malloc>:
 8005d14:	4b02      	ldr	r3, [pc, #8]	; (8005d20 <malloc+0xc>)
 8005d16:	4601      	mov	r1, r0
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	f000 b823 	b.w	8005d64 <_malloc_r>
 8005d1e:	bf00      	nop
 8005d20:	20000058 	.word	0x20000058

08005d24 <sbrk_aligned>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4e0e      	ldr	r6, [pc, #56]	; (8005d60 <sbrk_aligned+0x3c>)
 8005d28:	460c      	mov	r4, r1
 8005d2a:	6831      	ldr	r1, [r6, #0]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	b911      	cbnz	r1, 8005d36 <sbrk_aligned+0x12>
 8005d30:	f000 f8cc 	bl	8005ecc <_sbrk_r>
 8005d34:	6030      	str	r0, [r6, #0]
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 f8c7 	bl	8005ecc <_sbrk_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d00a      	beq.n	8005d58 <sbrk_aligned+0x34>
 8005d42:	1cc4      	adds	r4, r0, #3
 8005d44:	f024 0403 	bic.w	r4, r4, #3
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d007      	beq.n	8005d5c <sbrk_aligned+0x38>
 8005d4c:	1a21      	subs	r1, r4, r0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f8bc 	bl	8005ecc <_sbrk_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d101      	bne.n	8005d5c <sbrk_aligned+0x38>
 8005d58:	f04f 34ff 	mov.w	r4, #4294967295
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	200001ec 	.word	0x200001ec

08005d64 <_malloc_r>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	1ccd      	adds	r5, r1, #3
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	db01      	blt.n	8005d80 <_malloc_r+0x1c>
 8005d7c:	42a9      	cmp	r1, r5
 8005d7e:	d905      	bls.n	8005d8c <_malloc_r+0x28>
 8005d80:	230c      	movs	r3, #12
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	2600      	movs	r6, #0
 8005d86:	4630      	mov	r0, r6
 8005d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e60 <_malloc_r+0xfc>
 8005d90:	f000 f868 	bl	8005e64 <__malloc_lock>
 8005d94:	f8d8 3000 	ldr.w	r3, [r8]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb5c      	cbnz	r4, 8005df4 <_malloc_r+0x90>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc0 	bl	8005d24 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d155      	bne.n	8005e56 <_malloc_r+0xf2>
 8005daa:	f8d8 4000 	ldr.w	r4, [r8]
 8005dae:	4626      	mov	r6, r4
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	d145      	bne.n	8005e40 <_malloc_r+0xdc>
 8005db4:	2c00      	cmp	r4, #0
 8005db6:	d048      	beq.n	8005e4a <_malloc_r+0xe6>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	eb04 0903 	add.w	r9, r4, r3
 8005dc2:	f000 f883 	bl	8005ecc <_sbrk_r>
 8005dc6:	4581      	cmp	r9, r0
 8005dc8:	d13f      	bne.n	8005e4a <_malloc_r+0xe6>
 8005dca:	6821      	ldr	r1, [r4, #0]
 8005dcc:	1a6d      	subs	r5, r5, r1
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff ffa7 	bl	8005d24 <sbrk_aligned>
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d037      	beq.n	8005e4a <_malloc_r+0xe6>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	442b      	add	r3, r5
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	f8d8 3000 	ldr.w	r3, [r8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d038      	beq.n	8005e5a <_malloc_r+0xf6>
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	42a2      	cmp	r2, r4
 8005dec:	d12b      	bne.n	8005e46 <_malloc_r+0xe2>
 8005dee:	2200      	movs	r2, #0
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	e00f      	b.n	8005e14 <_malloc_r+0xb0>
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	1b52      	subs	r2, r2, r5
 8005df8:	d41f      	bmi.n	8005e3a <_malloc_r+0xd6>
 8005dfa:	2a0b      	cmp	r2, #11
 8005dfc:	d917      	bls.n	8005e2e <_malloc_r+0xca>
 8005dfe:	1961      	adds	r1, r4, r5
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	6025      	str	r5, [r4, #0]
 8005e04:	bf18      	it	ne
 8005e06:	6059      	strne	r1, [r3, #4]
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	bf08      	it	eq
 8005e0c:	f8c8 1000 	streq.w	r1, [r8]
 8005e10:	5162      	str	r2, [r4, r5]
 8005e12:	604b      	str	r3, [r1, #4]
 8005e14:	4638      	mov	r0, r7
 8005e16:	f104 060b 	add.w	r6, r4, #11
 8005e1a:	f000 f829 	bl	8005e70 <__malloc_unlock>
 8005e1e:	f026 0607 	bic.w	r6, r6, #7
 8005e22:	1d23      	adds	r3, r4, #4
 8005e24:	1af2      	subs	r2, r6, r3
 8005e26:	d0ae      	beq.n	8005d86 <_malloc_r+0x22>
 8005e28:	1b9b      	subs	r3, r3, r6
 8005e2a:	50a3      	str	r3, [r4, r2]
 8005e2c:	e7ab      	b.n	8005d86 <_malloc_r+0x22>
 8005e2e:	42a3      	cmp	r3, r4
 8005e30:	6862      	ldr	r2, [r4, #4]
 8005e32:	d1dd      	bne.n	8005df0 <_malloc_r+0x8c>
 8005e34:	f8c8 2000 	str.w	r2, [r8]
 8005e38:	e7ec      	b.n	8005e14 <_malloc_r+0xb0>
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	6864      	ldr	r4, [r4, #4]
 8005e3e:	e7ac      	b.n	8005d9a <_malloc_r+0x36>
 8005e40:	4634      	mov	r4, r6
 8005e42:	6876      	ldr	r6, [r6, #4]
 8005e44:	e7b4      	b.n	8005db0 <_malloc_r+0x4c>
 8005e46:	4613      	mov	r3, r2
 8005e48:	e7cc      	b.n	8005de4 <_malloc_r+0x80>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f000 f80e 	bl	8005e70 <__malloc_unlock>
 8005e54:	e797      	b.n	8005d86 <_malloc_r+0x22>
 8005e56:	6025      	str	r5, [r4, #0]
 8005e58:	e7dc      	b.n	8005e14 <_malloc_r+0xb0>
 8005e5a:	605b      	str	r3, [r3, #4]
 8005e5c:	deff      	udf	#255	; 0xff
 8005e5e:	bf00      	nop
 8005e60:	200001e8 	.word	0x200001e8

08005e64 <__malloc_lock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	; (8005e6c <__malloc_lock+0x8>)
 8005e66:	f000 b86b 	b.w	8005f40 <__retarget_lock_acquire_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	2000032c 	.word	0x2000032c

08005e70 <__malloc_unlock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_unlock+0x8>)
 8005e72:	f000 b866 	b.w	8005f42 <__retarget_lock_release_recursive>
 8005e76:	bf00      	nop
 8005e78:	2000032c 	.word	0x2000032c

08005e7c <siprintf>:
 8005e7c:	b40e      	push	{r1, r2, r3}
 8005e7e:	b500      	push	{lr}
 8005e80:	b09c      	sub	sp, #112	; 0x70
 8005e82:	ab1d      	add	r3, sp, #116	; 0x74
 8005e84:	9002      	str	r0, [sp, #8]
 8005e86:	9006      	str	r0, [sp, #24]
 8005e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e8c:	4809      	ldr	r0, [pc, #36]	; (8005eb4 <siprintf+0x38>)
 8005e8e:	9107      	str	r1, [sp, #28]
 8005e90:	9104      	str	r1, [sp, #16]
 8005e92:	4909      	ldr	r1, [pc, #36]	; (8005eb8 <siprintf+0x3c>)
 8005e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e98:	9105      	str	r1, [sp, #20]
 8005e9a:	6800      	ldr	r0, [r0, #0]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	a902      	add	r1, sp, #8
 8005ea0:	f000 f8f6 	bl	8006090 <_svfiprintf_r>
 8005ea4:	9b02      	ldr	r3, [sp, #8]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	b01c      	add	sp, #112	; 0x70
 8005eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eb0:	b003      	add	sp, #12
 8005eb2:	4770      	bx	lr
 8005eb4:	20000058 	.word	0x20000058
 8005eb8:	ffff0208 	.word	0xffff0208

08005ebc <memset>:
 8005ebc:	4402      	add	r2, r0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <_sbrk_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d06      	ldr	r5, [pc, #24]	; (8005ee8 <_sbrk_r+0x1c>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	f7fb fcfc 	bl	80018d4 <_sbrk>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_sbrk_r+0x1a>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_sbrk_r+0x1a>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	20000328 	.word	0x20000328

08005eec <__errno>:
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <__errno+0x8>)
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000058 	.word	0x20000058

08005ef8 <__libc_init_array>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	4d0d      	ldr	r5, [pc, #52]	; (8005f30 <__libc_init_array+0x38>)
 8005efc:	4c0d      	ldr	r4, [pc, #52]	; (8005f34 <__libc_init_array+0x3c>)
 8005efe:	1b64      	subs	r4, r4, r5
 8005f00:	10a4      	asrs	r4, r4, #2
 8005f02:	2600      	movs	r6, #0
 8005f04:	42a6      	cmp	r6, r4
 8005f06:	d109      	bne.n	8005f1c <__libc_init_array+0x24>
 8005f08:	4d0b      	ldr	r5, [pc, #44]	; (8005f38 <__libc_init_array+0x40>)
 8005f0a:	4c0c      	ldr	r4, [pc, #48]	; (8005f3c <__libc_init_array+0x44>)
 8005f0c:	f001 fbf0 	bl	80076f0 <_init>
 8005f10:	1b64      	subs	r4, r4, r5
 8005f12:	10a4      	asrs	r4, r4, #2
 8005f14:	2600      	movs	r6, #0
 8005f16:	42a6      	cmp	r6, r4
 8005f18:	d105      	bne.n	8005f26 <__libc_init_array+0x2e>
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f20:	4798      	blx	r3
 8005f22:	3601      	adds	r6, #1
 8005f24:	e7ee      	b.n	8005f04 <__libc_init_array+0xc>
 8005f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2a:	4798      	blx	r3
 8005f2c:	3601      	adds	r6, #1
 8005f2e:	e7f2      	b.n	8005f16 <__libc_init_array+0x1e>
 8005f30:	08007968 	.word	0x08007968
 8005f34:	08007968 	.word	0x08007968
 8005f38:	08007968 	.word	0x08007968
 8005f3c:	0800796c 	.word	0x0800796c

08005f40 <__retarget_lock_acquire_recursive>:
 8005f40:	4770      	bx	lr

08005f42 <__retarget_lock_release_recursive>:
 8005f42:	4770      	bx	lr

08005f44 <_free_r>:
 8005f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f46:	2900      	cmp	r1, #0
 8005f48:	d044      	beq.n	8005fd4 <_free_r+0x90>
 8005f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4e:	9001      	str	r0, [sp, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f1a1 0404 	sub.w	r4, r1, #4
 8005f56:	bfb8      	it	lt
 8005f58:	18e4      	addlt	r4, r4, r3
 8005f5a:	f7ff ff83 	bl	8005e64 <__malloc_lock>
 8005f5e:	4a1e      	ldr	r2, [pc, #120]	; (8005fd8 <_free_r+0x94>)
 8005f60:	9801      	ldr	r0, [sp, #4]
 8005f62:	6813      	ldr	r3, [r2, #0]
 8005f64:	b933      	cbnz	r3, 8005f74 <_free_r+0x30>
 8005f66:	6063      	str	r3, [r4, #4]
 8005f68:	6014      	str	r4, [r2, #0]
 8005f6a:	b003      	add	sp, #12
 8005f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f70:	f7ff bf7e 	b.w	8005e70 <__malloc_unlock>
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	d908      	bls.n	8005f8a <_free_r+0x46>
 8005f78:	6825      	ldr	r5, [r4, #0]
 8005f7a:	1961      	adds	r1, r4, r5
 8005f7c:	428b      	cmp	r3, r1
 8005f7e:	bf01      	itttt	eq
 8005f80:	6819      	ldreq	r1, [r3, #0]
 8005f82:	685b      	ldreq	r3, [r3, #4]
 8005f84:	1949      	addeq	r1, r1, r5
 8005f86:	6021      	streq	r1, [r4, #0]
 8005f88:	e7ed      	b.n	8005f66 <_free_r+0x22>
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b10b      	cbz	r3, 8005f94 <_free_r+0x50>
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d9fa      	bls.n	8005f8a <_free_r+0x46>
 8005f94:	6811      	ldr	r1, [r2, #0]
 8005f96:	1855      	adds	r5, r2, r1
 8005f98:	42a5      	cmp	r5, r4
 8005f9a:	d10b      	bne.n	8005fb4 <_free_r+0x70>
 8005f9c:	6824      	ldr	r4, [r4, #0]
 8005f9e:	4421      	add	r1, r4
 8005fa0:	1854      	adds	r4, r2, r1
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	6011      	str	r1, [r2, #0]
 8005fa6:	d1e0      	bne.n	8005f6a <_free_r+0x26>
 8005fa8:	681c      	ldr	r4, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	6053      	str	r3, [r2, #4]
 8005fae:	440c      	add	r4, r1
 8005fb0:	6014      	str	r4, [r2, #0]
 8005fb2:	e7da      	b.n	8005f6a <_free_r+0x26>
 8005fb4:	d902      	bls.n	8005fbc <_free_r+0x78>
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	6003      	str	r3, [r0, #0]
 8005fba:	e7d6      	b.n	8005f6a <_free_r+0x26>
 8005fbc:	6825      	ldr	r5, [r4, #0]
 8005fbe:	1961      	adds	r1, r4, r5
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	bf04      	itt	eq
 8005fc4:	6819      	ldreq	r1, [r3, #0]
 8005fc6:	685b      	ldreq	r3, [r3, #4]
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	bf04      	itt	eq
 8005fcc:	1949      	addeq	r1, r1, r5
 8005fce:	6021      	streq	r1, [r4, #0]
 8005fd0:	6054      	str	r4, [r2, #4]
 8005fd2:	e7ca      	b.n	8005f6a <_free_r+0x26>
 8005fd4:	b003      	add	sp, #12
 8005fd6:	bd30      	pop	{r4, r5, pc}
 8005fd8:	200001e8 	.word	0x200001e8

08005fdc <__ssputs_r>:
 8005fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	688e      	ldr	r6, [r1, #8]
 8005fe2:	461f      	mov	r7, r3
 8005fe4:	42be      	cmp	r6, r7
 8005fe6:	680b      	ldr	r3, [r1, #0]
 8005fe8:	4682      	mov	sl, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	4690      	mov	r8, r2
 8005fee:	d82c      	bhi.n	800604a <__ssputs_r+0x6e>
 8005ff0:	898a      	ldrh	r2, [r1, #12]
 8005ff2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ff6:	d026      	beq.n	8006046 <__ssputs_r+0x6a>
 8005ff8:	6965      	ldr	r5, [r4, #20]
 8005ffa:	6909      	ldr	r1, [r1, #16]
 8005ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006000:	eba3 0901 	sub.w	r9, r3, r1
 8006004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006008:	1c7b      	adds	r3, r7, #1
 800600a:	444b      	add	r3, r9
 800600c:	106d      	asrs	r5, r5, #1
 800600e:	429d      	cmp	r5, r3
 8006010:	bf38      	it	cc
 8006012:	461d      	movcc	r5, r3
 8006014:	0553      	lsls	r3, r2, #21
 8006016:	d527      	bpl.n	8006068 <__ssputs_r+0x8c>
 8006018:	4629      	mov	r1, r5
 800601a:	f7ff fea3 	bl	8005d64 <_malloc_r>
 800601e:	4606      	mov	r6, r0
 8006020:	b360      	cbz	r0, 800607c <__ssputs_r+0xa0>
 8006022:	6921      	ldr	r1, [r4, #16]
 8006024:	464a      	mov	r2, r9
 8006026:	f000 fadb 	bl	80065e0 <memcpy>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	81a3      	strh	r3, [r4, #12]
 8006036:	6126      	str	r6, [r4, #16]
 8006038:	6165      	str	r5, [r4, #20]
 800603a:	444e      	add	r6, r9
 800603c:	eba5 0509 	sub.w	r5, r5, r9
 8006040:	6026      	str	r6, [r4, #0]
 8006042:	60a5      	str	r5, [r4, #8]
 8006044:	463e      	mov	r6, r7
 8006046:	42be      	cmp	r6, r7
 8006048:	d900      	bls.n	800604c <__ssputs_r+0x70>
 800604a:	463e      	mov	r6, r7
 800604c:	6820      	ldr	r0, [r4, #0]
 800604e:	4632      	mov	r2, r6
 8006050:	4641      	mov	r1, r8
 8006052:	f000 faab 	bl	80065ac <memmove>
 8006056:	68a3      	ldr	r3, [r4, #8]
 8006058:	1b9b      	subs	r3, r3, r6
 800605a:	60a3      	str	r3, [r4, #8]
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	4433      	add	r3, r6
 8006060:	6023      	str	r3, [r4, #0]
 8006062:	2000      	movs	r0, #0
 8006064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006068:	462a      	mov	r2, r5
 800606a:	f000 fac7 	bl	80065fc <_realloc_r>
 800606e:	4606      	mov	r6, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	d1e0      	bne.n	8006036 <__ssputs_r+0x5a>
 8006074:	6921      	ldr	r1, [r4, #16]
 8006076:	4650      	mov	r0, sl
 8006078:	f7ff ff64 	bl	8005f44 <_free_r>
 800607c:	230c      	movs	r3, #12
 800607e:	f8ca 3000 	str.w	r3, [sl]
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006088:	81a3      	strh	r3, [r4, #12]
 800608a:	f04f 30ff 	mov.w	r0, #4294967295
 800608e:	e7e9      	b.n	8006064 <__ssputs_r+0x88>

08006090 <_svfiprintf_r>:
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	4698      	mov	r8, r3
 8006096:	898b      	ldrh	r3, [r1, #12]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	b09d      	sub	sp, #116	; 0x74
 800609c:	4607      	mov	r7, r0
 800609e:	460d      	mov	r5, r1
 80060a0:	4614      	mov	r4, r2
 80060a2:	d50e      	bpl.n	80060c2 <_svfiprintf_r+0x32>
 80060a4:	690b      	ldr	r3, [r1, #16]
 80060a6:	b963      	cbnz	r3, 80060c2 <_svfiprintf_r+0x32>
 80060a8:	2140      	movs	r1, #64	; 0x40
 80060aa:	f7ff fe5b 	bl	8005d64 <_malloc_r>
 80060ae:	6028      	str	r0, [r5, #0]
 80060b0:	6128      	str	r0, [r5, #16]
 80060b2:	b920      	cbnz	r0, 80060be <_svfiprintf_r+0x2e>
 80060b4:	230c      	movs	r3, #12
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	e0d0      	b.n	8006260 <_svfiprintf_r+0x1d0>
 80060be:	2340      	movs	r3, #64	; 0x40
 80060c0:	616b      	str	r3, [r5, #20]
 80060c2:	2300      	movs	r3, #0
 80060c4:	9309      	str	r3, [sp, #36]	; 0x24
 80060c6:	2320      	movs	r3, #32
 80060c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80060d0:	2330      	movs	r3, #48	; 0x30
 80060d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006278 <_svfiprintf_r+0x1e8>
 80060d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060da:	f04f 0901 	mov.w	r9, #1
 80060de:	4623      	mov	r3, r4
 80060e0:	469a      	mov	sl, r3
 80060e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e6:	b10a      	cbz	r2, 80060ec <_svfiprintf_r+0x5c>
 80060e8:	2a25      	cmp	r2, #37	; 0x25
 80060ea:	d1f9      	bne.n	80060e0 <_svfiprintf_r+0x50>
 80060ec:	ebba 0b04 	subs.w	fp, sl, r4
 80060f0:	d00b      	beq.n	800610a <_svfiprintf_r+0x7a>
 80060f2:	465b      	mov	r3, fp
 80060f4:	4622      	mov	r2, r4
 80060f6:	4629      	mov	r1, r5
 80060f8:	4638      	mov	r0, r7
 80060fa:	f7ff ff6f 	bl	8005fdc <__ssputs_r>
 80060fe:	3001      	adds	r0, #1
 8006100:	f000 80a9 	beq.w	8006256 <_svfiprintf_r+0x1c6>
 8006104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006106:	445a      	add	r2, fp
 8006108:	9209      	str	r2, [sp, #36]	; 0x24
 800610a:	f89a 3000 	ldrb.w	r3, [sl]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80a1 	beq.w	8006256 <_svfiprintf_r+0x1c6>
 8006114:	2300      	movs	r3, #0
 8006116:	f04f 32ff 	mov.w	r2, #4294967295
 800611a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800611e:	f10a 0a01 	add.w	sl, sl, #1
 8006122:	9304      	str	r3, [sp, #16]
 8006124:	9307      	str	r3, [sp, #28]
 8006126:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800612a:	931a      	str	r3, [sp, #104]	; 0x68
 800612c:	4654      	mov	r4, sl
 800612e:	2205      	movs	r2, #5
 8006130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006134:	4850      	ldr	r0, [pc, #320]	; (8006278 <_svfiprintf_r+0x1e8>)
 8006136:	f7fa f87b 	bl	8000230 <memchr>
 800613a:	9a04      	ldr	r2, [sp, #16]
 800613c:	b9d8      	cbnz	r0, 8006176 <_svfiprintf_r+0xe6>
 800613e:	06d0      	lsls	r0, r2, #27
 8006140:	bf44      	itt	mi
 8006142:	2320      	movmi	r3, #32
 8006144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006148:	0711      	lsls	r1, r2, #28
 800614a:	bf44      	itt	mi
 800614c:	232b      	movmi	r3, #43	; 0x2b
 800614e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006152:	f89a 3000 	ldrb.w	r3, [sl]
 8006156:	2b2a      	cmp	r3, #42	; 0x2a
 8006158:	d015      	beq.n	8006186 <_svfiprintf_r+0xf6>
 800615a:	9a07      	ldr	r2, [sp, #28]
 800615c:	4654      	mov	r4, sl
 800615e:	2000      	movs	r0, #0
 8006160:	f04f 0c0a 	mov.w	ip, #10
 8006164:	4621      	mov	r1, r4
 8006166:	f811 3b01 	ldrb.w	r3, [r1], #1
 800616a:	3b30      	subs	r3, #48	; 0x30
 800616c:	2b09      	cmp	r3, #9
 800616e:	d94d      	bls.n	800620c <_svfiprintf_r+0x17c>
 8006170:	b1b0      	cbz	r0, 80061a0 <_svfiprintf_r+0x110>
 8006172:	9207      	str	r2, [sp, #28]
 8006174:	e014      	b.n	80061a0 <_svfiprintf_r+0x110>
 8006176:	eba0 0308 	sub.w	r3, r0, r8
 800617a:	fa09 f303 	lsl.w	r3, r9, r3
 800617e:	4313      	orrs	r3, r2
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	46a2      	mov	sl, r4
 8006184:	e7d2      	b.n	800612c <_svfiprintf_r+0x9c>
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	1d19      	adds	r1, r3, #4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	9103      	str	r1, [sp, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfbb      	ittet	lt
 8006192:	425b      	neglt	r3, r3
 8006194:	f042 0202 	orrlt.w	r2, r2, #2
 8006198:	9307      	strge	r3, [sp, #28]
 800619a:	9307      	strlt	r3, [sp, #28]
 800619c:	bfb8      	it	lt
 800619e:	9204      	strlt	r2, [sp, #16]
 80061a0:	7823      	ldrb	r3, [r4, #0]
 80061a2:	2b2e      	cmp	r3, #46	; 0x2e
 80061a4:	d10c      	bne.n	80061c0 <_svfiprintf_r+0x130>
 80061a6:	7863      	ldrb	r3, [r4, #1]
 80061a8:	2b2a      	cmp	r3, #42	; 0x2a
 80061aa:	d134      	bne.n	8006216 <_svfiprintf_r+0x186>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	1d1a      	adds	r2, r3, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	9203      	str	r2, [sp, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bfb8      	it	lt
 80061b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80061bc:	3402      	adds	r4, #2
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006288 <_svfiprintf_r+0x1f8>
 80061c4:	7821      	ldrb	r1, [r4, #0]
 80061c6:	2203      	movs	r2, #3
 80061c8:	4650      	mov	r0, sl
 80061ca:	f7fa f831 	bl	8000230 <memchr>
 80061ce:	b138      	cbz	r0, 80061e0 <_svfiprintf_r+0x150>
 80061d0:	9b04      	ldr	r3, [sp, #16]
 80061d2:	eba0 000a 	sub.w	r0, r0, sl
 80061d6:	2240      	movs	r2, #64	; 0x40
 80061d8:	4082      	lsls	r2, r0
 80061da:	4313      	orrs	r3, r2
 80061dc:	3401      	adds	r4, #1
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e4:	4825      	ldr	r0, [pc, #148]	; (800627c <_svfiprintf_r+0x1ec>)
 80061e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ea:	2206      	movs	r2, #6
 80061ec:	f7fa f820 	bl	8000230 <memchr>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d038      	beq.n	8006266 <_svfiprintf_r+0x1d6>
 80061f4:	4b22      	ldr	r3, [pc, #136]	; (8006280 <_svfiprintf_r+0x1f0>)
 80061f6:	bb1b      	cbnz	r3, 8006240 <_svfiprintf_r+0x1b0>
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	3307      	adds	r3, #7
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	3308      	adds	r3, #8
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006206:	4433      	add	r3, r6
 8006208:	9309      	str	r3, [sp, #36]	; 0x24
 800620a:	e768      	b.n	80060de <_svfiprintf_r+0x4e>
 800620c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006210:	460c      	mov	r4, r1
 8006212:	2001      	movs	r0, #1
 8006214:	e7a6      	b.n	8006164 <_svfiprintf_r+0xd4>
 8006216:	2300      	movs	r3, #0
 8006218:	3401      	adds	r4, #1
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	4619      	mov	r1, r3
 800621e:	f04f 0c0a 	mov.w	ip, #10
 8006222:	4620      	mov	r0, r4
 8006224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006228:	3a30      	subs	r2, #48	; 0x30
 800622a:	2a09      	cmp	r2, #9
 800622c:	d903      	bls.n	8006236 <_svfiprintf_r+0x1a6>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0c6      	beq.n	80061c0 <_svfiprintf_r+0x130>
 8006232:	9105      	str	r1, [sp, #20]
 8006234:	e7c4      	b.n	80061c0 <_svfiprintf_r+0x130>
 8006236:	fb0c 2101 	mla	r1, ip, r1, r2
 800623a:	4604      	mov	r4, r0
 800623c:	2301      	movs	r3, #1
 800623e:	e7f0      	b.n	8006222 <_svfiprintf_r+0x192>
 8006240:	ab03      	add	r3, sp, #12
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	462a      	mov	r2, r5
 8006246:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <_svfiprintf_r+0x1f4>)
 8006248:	a904      	add	r1, sp, #16
 800624a:	4638      	mov	r0, r7
 800624c:	f3af 8000 	nop.w
 8006250:	1c42      	adds	r2, r0, #1
 8006252:	4606      	mov	r6, r0
 8006254:	d1d6      	bne.n	8006204 <_svfiprintf_r+0x174>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	065b      	lsls	r3, r3, #25
 800625a:	f53f af2d 	bmi.w	80060b8 <_svfiprintf_r+0x28>
 800625e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006260:	b01d      	add	sp, #116	; 0x74
 8006262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006266:	ab03      	add	r3, sp, #12
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	462a      	mov	r2, r5
 800626c:	4b05      	ldr	r3, [pc, #20]	; (8006284 <_svfiprintf_r+0x1f4>)
 800626e:	a904      	add	r1, sp, #16
 8006270:	4638      	mov	r0, r7
 8006272:	f000 f879 	bl	8006368 <_printf_i>
 8006276:	e7eb      	b.n	8006250 <_svfiprintf_r+0x1c0>
 8006278:	08007754 	.word	0x08007754
 800627c:	0800775e 	.word	0x0800775e
 8006280:	00000000 	.word	0x00000000
 8006284:	08005fdd 	.word	0x08005fdd
 8006288:	0800775a 	.word	0x0800775a

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4699      	mov	r9, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800629c:	4293      	cmp	r3, r2
 800629e:	bfb8      	it	lt
 80062a0:	4613      	movlt	r3, r2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a8:	4607      	mov	r7, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc26      	bgt.n	8006322 <_printf_common+0x96>
 80062d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d8:	1e13      	subs	r3, r2, #0
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d42b      	bmi.n	800633c <_printf_common+0xb0>
 80062e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e8:	4649      	mov	r1, r9
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c0      	blx	r8
 80062ee:	3001      	adds	r0, #1
 80062f0:	d01e      	beq.n	8006330 <_printf_common+0xa4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf02      	ittt	eq
 80062fe:	68e5      	ldreq	r5, [r4, #12]
 8006300:	6833      	ldreq	r3, [r6, #0]
 8006302:	1aed      	subeq	r5, r5, r3
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	bf0c      	ite	eq
 8006308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800630c:	2500      	movne	r5, #0
 800630e:	4293      	cmp	r3, r2
 8006310:	bfc4      	itt	gt
 8006312:	1a9b      	subgt	r3, r3, r2
 8006314:	18ed      	addgt	r5, r5, r3
 8006316:	2600      	movs	r6, #0
 8006318:	341a      	adds	r4, #26
 800631a:	42b5      	cmp	r5, r6
 800631c:	d11a      	bne.n	8006354 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e008      	b.n	8006334 <_printf_common+0xa8>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4649      	mov	r1, r9
 8006328:	4638      	mov	r0, r7
 800632a:	47c0      	blx	r8
 800632c:	3001      	adds	r0, #1
 800632e:	d103      	bne.n	8006338 <_printf_common+0xac>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	3501      	adds	r5, #1
 800633a:	e7c6      	b.n	80062ca <_printf_common+0x3e>
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	2030      	movs	r0, #48	; 0x30
 8006342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006346:	4422      	add	r2, r4
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006350:	3302      	adds	r3, #2
 8006352:	e7c7      	b.n	80062e4 <_printf_common+0x58>
 8006354:	2301      	movs	r3, #1
 8006356:	4622      	mov	r2, r4
 8006358:	4649      	mov	r1, r9
 800635a:	4638      	mov	r0, r7
 800635c:	47c0      	blx	r8
 800635e:	3001      	adds	r0, #1
 8006360:	d0e6      	beq.n	8006330 <_printf_common+0xa4>
 8006362:	3601      	adds	r6, #1
 8006364:	e7d9      	b.n	800631a <_printf_common+0x8e>
	...

08006368 <_printf_i>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	7e0f      	ldrb	r7, [r1, #24]
 800636e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006370:	2f78      	cmp	r7, #120	; 0x78
 8006372:	4691      	mov	r9, r2
 8006374:	4680      	mov	r8, r0
 8006376:	460c      	mov	r4, r1
 8006378:	469a      	mov	sl, r3
 800637a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800637e:	d807      	bhi.n	8006390 <_printf_i+0x28>
 8006380:	2f62      	cmp	r7, #98	; 0x62
 8006382:	d80a      	bhi.n	800639a <_printf_i+0x32>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f000 80d4 	beq.w	8006532 <_printf_i+0x1ca>
 800638a:	2f58      	cmp	r7, #88	; 0x58
 800638c:	f000 80c0 	beq.w	8006510 <_printf_i+0x1a8>
 8006390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006398:	e03a      	b.n	8006410 <_printf_i+0xa8>
 800639a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800639e:	2b15      	cmp	r3, #21
 80063a0:	d8f6      	bhi.n	8006390 <_printf_i+0x28>
 80063a2:	a101      	add	r1, pc, #4	; (adr r1, 80063a8 <_printf_i+0x40>)
 80063a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006391 	.word	0x08006391
 80063b4:	08006391 	.word	0x08006391
 80063b8:	08006391 	.word	0x08006391
 80063bc:	08006391 	.word	0x08006391
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006391 	.word	0x08006391
 80063c8:	08006391 	.word	0x08006391
 80063cc:	08006391 	.word	0x08006391
 80063d0:	08006391 	.word	0x08006391
 80063d4:	08006519 	.word	0x08006519
 80063d8:	08006441 	.word	0x08006441
 80063dc:	080064d3 	.word	0x080064d3
 80063e0:	08006391 	.word	0x08006391
 80063e4:	08006391 	.word	0x08006391
 80063e8:	0800653b 	.word	0x0800653b
 80063ec:	08006391 	.word	0x08006391
 80063f0:	08006441 	.word	0x08006441
 80063f4:	08006391 	.word	0x08006391
 80063f8:	08006391 	.word	0x08006391
 80063fc:	080064db 	.word	0x080064db
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	1d1a      	adds	r2, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	602a      	str	r2, [r5, #0]
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e09f      	b.n	8006554 <_printf_i+0x1ec>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	0607      	lsls	r7, r0, #24
 800641a:	f103 0104 	add.w	r1, r3, #4
 800641e:	6029      	str	r1, [r5, #0]
 8006420:	d501      	bpl.n	8006426 <_printf_i+0xbe>
 8006422:	681e      	ldr	r6, [r3, #0]
 8006424:	e003      	b.n	800642e <_printf_i+0xc6>
 8006426:	0646      	lsls	r6, r0, #25
 8006428:	d5fb      	bpl.n	8006422 <_printf_i+0xba>
 800642a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800642e:	2e00      	cmp	r6, #0
 8006430:	da03      	bge.n	800643a <_printf_i+0xd2>
 8006432:	232d      	movs	r3, #45	; 0x2d
 8006434:	4276      	negs	r6, r6
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643a:	485a      	ldr	r0, [pc, #360]	; (80065a4 <_printf_i+0x23c>)
 800643c:	230a      	movs	r3, #10
 800643e:	e012      	b.n	8006466 <_printf_i+0xfe>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	1d19      	adds	r1, r3, #4
 8006446:	6029      	str	r1, [r5, #0]
 8006448:	0605      	lsls	r5, r0, #24
 800644a:	d501      	bpl.n	8006450 <_printf_i+0xe8>
 800644c:	681e      	ldr	r6, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0xee>
 8006450:	0641      	lsls	r1, r0, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0xe4>
 8006454:	881e      	ldrh	r6, [r3, #0]
 8006456:	4853      	ldr	r0, [pc, #332]	; (80065a4 <_printf_i+0x23c>)
 8006458:	2f6f      	cmp	r7, #111	; 0x6f
 800645a:	bf0c      	ite	eq
 800645c:	2308      	moveq	r3, #8
 800645e:	230a      	movne	r3, #10
 8006460:	2100      	movs	r1, #0
 8006462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006466:	6865      	ldr	r5, [r4, #4]
 8006468:	60a5      	str	r5, [r4, #8]
 800646a:	2d00      	cmp	r5, #0
 800646c:	bfa2      	ittt	ge
 800646e:	6821      	ldrge	r1, [r4, #0]
 8006470:	f021 0104 	bicge.w	r1, r1, #4
 8006474:	6021      	strge	r1, [r4, #0]
 8006476:	b90e      	cbnz	r6, 800647c <_printf_i+0x114>
 8006478:	2d00      	cmp	r5, #0
 800647a:	d04b      	beq.n	8006514 <_printf_i+0x1ac>
 800647c:	4615      	mov	r5, r2
 800647e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006482:	fb03 6711 	mls	r7, r3, r1, r6
 8006486:	5dc7      	ldrb	r7, [r0, r7]
 8006488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800648c:	4637      	mov	r7, r6
 800648e:	42bb      	cmp	r3, r7
 8006490:	460e      	mov	r6, r1
 8006492:	d9f4      	bls.n	800647e <_printf_i+0x116>
 8006494:	2b08      	cmp	r3, #8
 8006496:	d10b      	bne.n	80064b0 <_printf_i+0x148>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	07de      	lsls	r6, r3, #31
 800649c:	d508      	bpl.n	80064b0 <_printf_i+0x148>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	6861      	ldr	r1, [r4, #4]
 80064a2:	4299      	cmp	r1, r3
 80064a4:	bfde      	ittt	le
 80064a6:	2330      	movle	r3, #48	; 0x30
 80064a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b0:	1b52      	subs	r2, r2, r5
 80064b2:	6122      	str	r2, [r4, #16]
 80064b4:	f8cd a000 	str.w	sl, [sp]
 80064b8:	464b      	mov	r3, r9
 80064ba:	aa03      	add	r2, sp, #12
 80064bc:	4621      	mov	r1, r4
 80064be:	4640      	mov	r0, r8
 80064c0:	f7ff fee4 	bl	800628c <_printf_common>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d14a      	bne.n	800655e <_printf_i+0x1f6>
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	b004      	add	sp, #16
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	f043 0320 	orr.w	r3, r3, #32
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	4833      	ldr	r0, [pc, #204]	; (80065a8 <_printf_i+0x240>)
 80064dc:	2778      	movs	r7, #120	; 0x78
 80064de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	6829      	ldr	r1, [r5, #0]
 80064e6:	061f      	lsls	r7, r3, #24
 80064e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ec:	d402      	bmi.n	80064f4 <_printf_i+0x18c>
 80064ee:	065f      	lsls	r7, r3, #25
 80064f0:	bf48      	it	mi
 80064f2:	b2b6      	uxthmi	r6, r6
 80064f4:	07df      	lsls	r7, r3, #31
 80064f6:	bf48      	it	mi
 80064f8:	f043 0320 	orrmi.w	r3, r3, #32
 80064fc:	6029      	str	r1, [r5, #0]
 80064fe:	bf48      	it	mi
 8006500:	6023      	strmi	r3, [r4, #0]
 8006502:	b91e      	cbnz	r6, 800650c <_printf_i+0x1a4>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f023 0320 	bic.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	2310      	movs	r3, #16
 800650e:	e7a7      	b.n	8006460 <_printf_i+0xf8>
 8006510:	4824      	ldr	r0, [pc, #144]	; (80065a4 <_printf_i+0x23c>)
 8006512:	e7e4      	b.n	80064de <_printf_i+0x176>
 8006514:	4615      	mov	r5, r2
 8006516:	e7bd      	b.n	8006494 <_printf_i+0x12c>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	6826      	ldr	r6, [r4, #0]
 800651c:	6961      	ldr	r1, [r4, #20]
 800651e:	1d18      	adds	r0, r3, #4
 8006520:	6028      	str	r0, [r5, #0]
 8006522:	0635      	lsls	r5, r6, #24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	d501      	bpl.n	800652c <_printf_i+0x1c4>
 8006528:	6019      	str	r1, [r3, #0]
 800652a:	e002      	b.n	8006532 <_printf_i+0x1ca>
 800652c:	0670      	lsls	r0, r6, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0x1c0>
 8006530:	8019      	strh	r1, [r3, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	4615      	mov	r5, r2
 8006538:	e7bc      	b.n	80064b4 <_printf_i+0x14c>
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	602a      	str	r2, [r5, #0]
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	2100      	movs	r1, #0
 8006546:	4628      	mov	r0, r5
 8006548:	f7f9 fe72 	bl	8000230 <memchr>
 800654c:	b108      	cbz	r0, 8006552 <_printf_i+0x1ea>
 800654e:	1b40      	subs	r0, r0, r5
 8006550:	6060      	str	r0, [r4, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	2300      	movs	r3, #0
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655c:	e7aa      	b.n	80064b4 <_printf_i+0x14c>
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	462a      	mov	r2, r5
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d0ad      	beq.n	80064c8 <_printf_i+0x160>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079b      	lsls	r3, r3, #30
 8006570:	d413      	bmi.n	800659a <_printf_i+0x232>
 8006572:	68e0      	ldr	r0, [r4, #12]
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	4298      	cmp	r0, r3
 8006578:	bfb8      	it	lt
 800657a:	4618      	movlt	r0, r3
 800657c:	e7a6      	b.n	80064cc <_printf_i+0x164>
 800657e:	2301      	movs	r3, #1
 8006580:	4632      	mov	r2, r6
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	47d0      	blx	sl
 8006588:	3001      	adds	r0, #1
 800658a:	d09d      	beq.n	80064c8 <_printf_i+0x160>
 800658c:	3501      	adds	r5, #1
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	9903      	ldr	r1, [sp, #12]
 8006592:	1a5b      	subs	r3, r3, r1
 8006594:	42ab      	cmp	r3, r5
 8006596:	dcf2      	bgt.n	800657e <_printf_i+0x216>
 8006598:	e7eb      	b.n	8006572 <_printf_i+0x20a>
 800659a:	2500      	movs	r5, #0
 800659c:	f104 0619 	add.w	r6, r4, #25
 80065a0:	e7f5      	b.n	800658e <_printf_i+0x226>
 80065a2:	bf00      	nop
 80065a4:	08007765 	.word	0x08007765
 80065a8:	08007776 	.word	0x08007776

080065ac <memmove>:
 80065ac:	4288      	cmp	r0, r1
 80065ae:	b510      	push	{r4, lr}
 80065b0:	eb01 0402 	add.w	r4, r1, r2
 80065b4:	d902      	bls.n	80065bc <memmove+0x10>
 80065b6:	4284      	cmp	r4, r0
 80065b8:	4623      	mov	r3, r4
 80065ba:	d807      	bhi.n	80065cc <memmove+0x20>
 80065bc:	1e43      	subs	r3, r0, #1
 80065be:	42a1      	cmp	r1, r4
 80065c0:	d008      	beq.n	80065d4 <memmove+0x28>
 80065c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ca:	e7f8      	b.n	80065be <memmove+0x12>
 80065cc:	4402      	add	r2, r0
 80065ce:	4601      	mov	r1, r0
 80065d0:	428a      	cmp	r2, r1
 80065d2:	d100      	bne.n	80065d6 <memmove+0x2a>
 80065d4:	bd10      	pop	{r4, pc}
 80065d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065de:	e7f7      	b.n	80065d0 <memmove+0x24>

080065e0 <memcpy>:
 80065e0:	440a      	add	r2, r1
 80065e2:	4291      	cmp	r1, r2
 80065e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065e8:	d100      	bne.n	80065ec <memcpy+0xc>
 80065ea:	4770      	bx	lr
 80065ec:	b510      	push	{r4, lr}
 80065ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f6:	4291      	cmp	r1, r2
 80065f8:	d1f9      	bne.n	80065ee <memcpy+0xe>
 80065fa:	bd10      	pop	{r4, pc}

080065fc <_realloc_r>:
 80065fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006600:	4680      	mov	r8, r0
 8006602:	4614      	mov	r4, r2
 8006604:	460e      	mov	r6, r1
 8006606:	b921      	cbnz	r1, 8006612 <_realloc_r+0x16>
 8006608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800660c:	4611      	mov	r1, r2
 800660e:	f7ff bba9 	b.w	8005d64 <_malloc_r>
 8006612:	b92a      	cbnz	r2, 8006620 <_realloc_r+0x24>
 8006614:	f7ff fc96 	bl	8005f44 <_free_r>
 8006618:	4625      	mov	r5, r4
 800661a:	4628      	mov	r0, r5
 800661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006620:	f000 f81b 	bl	800665a <_malloc_usable_size_r>
 8006624:	4284      	cmp	r4, r0
 8006626:	4607      	mov	r7, r0
 8006628:	d802      	bhi.n	8006630 <_realloc_r+0x34>
 800662a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800662e:	d812      	bhi.n	8006656 <_realloc_r+0x5a>
 8006630:	4621      	mov	r1, r4
 8006632:	4640      	mov	r0, r8
 8006634:	f7ff fb96 	bl	8005d64 <_malloc_r>
 8006638:	4605      	mov	r5, r0
 800663a:	2800      	cmp	r0, #0
 800663c:	d0ed      	beq.n	800661a <_realloc_r+0x1e>
 800663e:	42bc      	cmp	r4, r7
 8006640:	4622      	mov	r2, r4
 8006642:	4631      	mov	r1, r6
 8006644:	bf28      	it	cs
 8006646:	463a      	movcs	r2, r7
 8006648:	f7ff ffca 	bl	80065e0 <memcpy>
 800664c:	4631      	mov	r1, r6
 800664e:	4640      	mov	r0, r8
 8006650:	f7ff fc78 	bl	8005f44 <_free_r>
 8006654:	e7e1      	b.n	800661a <_realloc_r+0x1e>
 8006656:	4635      	mov	r5, r6
 8006658:	e7df      	b.n	800661a <_realloc_r+0x1e>

0800665a <_malloc_usable_size_r>:
 800665a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665e:	1f18      	subs	r0, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	bfbc      	itt	lt
 8006664:	580b      	ldrlt	r3, [r1, r0]
 8006666:	18c0      	addlt	r0, r0, r3
 8006668:	4770      	bx	lr
 800666a:	0000      	movs	r0, r0
 800666c:	0000      	movs	r0, r0
	...

08006670 <sin>:
 8006670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006672:	ec53 2b10 	vmov	r2, r3, d0
 8006676:	4828      	ldr	r0, [pc, #160]	; (8006718 <sin+0xa8>)
 8006678:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800667c:	4281      	cmp	r1, r0
 800667e:	dc07      	bgt.n	8006690 <sin+0x20>
 8006680:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006710 <sin+0xa0>
 8006684:	2000      	movs	r0, #0
 8006686:	b005      	add	sp, #20
 8006688:	f85d eb04 	ldr.w	lr, [sp], #4
 800668c:	f000 b910 	b.w	80068b0 <__kernel_sin>
 8006690:	4822      	ldr	r0, [pc, #136]	; (800671c <sin+0xac>)
 8006692:	4281      	cmp	r1, r0
 8006694:	dd09      	ble.n	80066aa <sin+0x3a>
 8006696:	ee10 0a10 	vmov	r0, s0
 800669a:	4619      	mov	r1, r3
 800669c:	f7f9 fe1c 	bl	80002d8 <__aeabi_dsub>
 80066a0:	ec41 0b10 	vmov	d0, r0, r1
 80066a4:	b005      	add	sp, #20
 80066a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80066aa:	4668      	mov	r0, sp
 80066ac:	f000 f9c0 	bl	8006a30 <__ieee754_rem_pio2>
 80066b0:	f000 0003 	and.w	r0, r0, #3
 80066b4:	2801      	cmp	r0, #1
 80066b6:	d00c      	beq.n	80066d2 <sin+0x62>
 80066b8:	2802      	cmp	r0, #2
 80066ba:	d011      	beq.n	80066e0 <sin+0x70>
 80066bc:	b9f0      	cbnz	r0, 80066fc <sin+0x8c>
 80066be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066c2:	ed9d 0b00 	vldr	d0, [sp]
 80066c6:	2001      	movs	r0, #1
 80066c8:	f000 f8f2 	bl	80068b0 <__kernel_sin>
 80066cc:	ec51 0b10 	vmov	r0, r1, d0
 80066d0:	e7e6      	b.n	80066a0 <sin+0x30>
 80066d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066d6:	ed9d 0b00 	vldr	d0, [sp]
 80066da:	f000 f821 	bl	8006720 <__kernel_cos>
 80066de:	e7f5      	b.n	80066cc <sin+0x5c>
 80066e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80066e4:	ed9d 0b00 	vldr	d0, [sp]
 80066e8:	2001      	movs	r0, #1
 80066ea:	f000 f8e1 	bl	80068b0 <__kernel_sin>
 80066ee:	ec53 2b10 	vmov	r2, r3, d0
 80066f2:	ee10 0a10 	vmov	r0, s0
 80066f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80066fa:	e7d1      	b.n	80066a0 <sin+0x30>
 80066fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006700:	ed9d 0b00 	vldr	d0, [sp]
 8006704:	f000 f80c 	bl	8006720 <__kernel_cos>
 8006708:	e7f1      	b.n	80066ee <sin+0x7e>
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w
	...
 8006718:	3fe921fb 	.word	0x3fe921fb
 800671c:	7fefffff 	.word	0x7fefffff

08006720 <__kernel_cos>:
 8006720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	ec57 6b10 	vmov	r6, r7, d0
 8006728:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800672c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006730:	ed8d 1b00 	vstr	d1, [sp]
 8006734:	da07      	bge.n	8006746 <__kernel_cos+0x26>
 8006736:	ee10 0a10 	vmov	r0, s0
 800673a:	4639      	mov	r1, r7
 800673c:	f7fa fa1e 	bl	8000b7c <__aeabi_d2iz>
 8006740:	2800      	cmp	r0, #0
 8006742:	f000 8088 	beq.w	8006856 <__kernel_cos+0x136>
 8006746:	4632      	mov	r2, r6
 8006748:	463b      	mov	r3, r7
 800674a:	4630      	mov	r0, r6
 800674c:	4639      	mov	r1, r7
 800674e:	f7f9 ff7b 	bl	8000648 <__aeabi_dmul>
 8006752:	4b51      	ldr	r3, [pc, #324]	; (8006898 <__kernel_cos+0x178>)
 8006754:	2200      	movs	r2, #0
 8006756:	4604      	mov	r4, r0
 8006758:	460d      	mov	r5, r1
 800675a:	f7f9 ff75 	bl	8000648 <__aeabi_dmul>
 800675e:	a340      	add	r3, pc, #256	; (adr r3, 8006860 <__kernel_cos+0x140>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	4682      	mov	sl, r0
 8006766:	468b      	mov	fp, r1
 8006768:	4620      	mov	r0, r4
 800676a:	4629      	mov	r1, r5
 800676c:	f7f9 ff6c 	bl	8000648 <__aeabi_dmul>
 8006770:	a33d      	add	r3, pc, #244	; (adr r3, 8006868 <__kernel_cos+0x148>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 fdb1 	bl	80002dc <__adddf3>
 800677a:	4622      	mov	r2, r4
 800677c:	462b      	mov	r3, r5
 800677e:	f7f9 ff63 	bl	8000648 <__aeabi_dmul>
 8006782:	a33b      	add	r3, pc, #236	; (adr r3, 8006870 <__kernel_cos+0x150>)
 8006784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006788:	f7f9 fda6 	bl	80002d8 <__aeabi_dsub>
 800678c:	4622      	mov	r2, r4
 800678e:	462b      	mov	r3, r5
 8006790:	f7f9 ff5a 	bl	8000648 <__aeabi_dmul>
 8006794:	a338      	add	r3, pc, #224	; (adr r3, 8006878 <__kernel_cos+0x158>)
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f7f9 fd9f 	bl	80002dc <__adddf3>
 800679e:	4622      	mov	r2, r4
 80067a0:	462b      	mov	r3, r5
 80067a2:	f7f9 ff51 	bl	8000648 <__aeabi_dmul>
 80067a6:	a336      	add	r3, pc, #216	; (adr r3, 8006880 <__kernel_cos+0x160>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 fd94 	bl	80002d8 <__aeabi_dsub>
 80067b0:	4622      	mov	r2, r4
 80067b2:	462b      	mov	r3, r5
 80067b4:	f7f9 ff48 	bl	8000648 <__aeabi_dmul>
 80067b8:	a333      	add	r3, pc, #204	; (adr r3, 8006888 <__kernel_cos+0x168>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 fd8d 	bl	80002dc <__adddf3>
 80067c2:	4622      	mov	r2, r4
 80067c4:	462b      	mov	r3, r5
 80067c6:	f7f9 ff3f 	bl	8000648 <__aeabi_dmul>
 80067ca:	4622      	mov	r2, r4
 80067cc:	462b      	mov	r3, r5
 80067ce:	f7f9 ff3b 	bl	8000648 <__aeabi_dmul>
 80067d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d6:	4604      	mov	r4, r0
 80067d8:	460d      	mov	r5, r1
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	f7f9 ff33 	bl	8000648 <__aeabi_dmul>
 80067e2:	460b      	mov	r3, r1
 80067e4:	4602      	mov	r2, r0
 80067e6:	4629      	mov	r1, r5
 80067e8:	4620      	mov	r0, r4
 80067ea:	f7f9 fd75 	bl	80002d8 <__aeabi_dsub>
 80067ee:	4b2b      	ldr	r3, [pc, #172]	; (800689c <__kernel_cos+0x17c>)
 80067f0:	4598      	cmp	r8, r3
 80067f2:	4606      	mov	r6, r0
 80067f4:	460f      	mov	r7, r1
 80067f6:	dc10      	bgt.n	800681a <__kernel_cos+0xfa>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4650      	mov	r0, sl
 80067fe:	4659      	mov	r1, fp
 8006800:	f7f9 fd6a 	bl	80002d8 <__aeabi_dsub>
 8006804:	460b      	mov	r3, r1
 8006806:	4926      	ldr	r1, [pc, #152]	; (80068a0 <__kernel_cos+0x180>)
 8006808:	4602      	mov	r2, r0
 800680a:	2000      	movs	r0, #0
 800680c:	f7f9 fd64 	bl	80002d8 <__aeabi_dsub>
 8006810:	ec41 0b10 	vmov	d0, r0, r1
 8006814:	b003      	add	sp, #12
 8006816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681a:	4b22      	ldr	r3, [pc, #136]	; (80068a4 <__kernel_cos+0x184>)
 800681c:	4920      	ldr	r1, [pc, #128]	; (80068a0 <__kernel_cos+0x180>)
 800681e:	4598      	cmp	r8, r3
 8006820:	bfcc      	ite	gt
 8006822:	4d21      	ldrgt	r5, [pc, #132]	; (80068a8 <__kernel_cos+0x188>)
 8006824:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006828:	2400      	movs	r4, #0
 800682a:	4622      	mov	r2, r4
 800682c:	462b      	mov	r3, r5
 800682e:	2000      	movs	r0, #0
 8006830:	f7f9 fd52 	bl	80002d8 <__aeabi_dsub>
 8006834:	4622      	mov	r2, r4
 8006836:	4680      	mov	r8, r0
 8006838:	4689      	mov	r9, r1
 800683a:	462b      	mov	r3, r5
 800683c:	4650      	mov	r0, sl
 800683e:	4659      	mov	r1, fp
 8006840:	f7f9 fd4a 	bl	80002d8 <__aeabi_dsub>
 8006844:	4632      	mov	r2, r6
 8006846:	463b      	mov	r3, r7
 8006848:	f7f9 fd46 	bl	80002d8 <__aeabi_dsub>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4640      	mov	r0, r8
 8006852:	4649      	mov	r1, r9
 8006854:	e7da      	b.n	800680c <__kernel_cos+0xec>
 8006856:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006890 <__kernel_cos+0x170>
 800685a:	e7db      	b.n	8006814 <__kernel_cos+0xf4>
 800685c:	f3af 8000 	nop.w
 8006860:	be8838d4 	.word	0xbe8838d4
 8006864:	bda8fae9 	.word	0xbda8fae9
 8006868:	bdb4b1c4 	.word	0xbdb4b1c4
 800686c:	3e21ee9e 	.word	0x3e21ee9e
 8006870:	809c52ad 	.word	0x809c52ad
 8006874:	3e927e4f 	.word	0x3e927e4f
 8006878:	19cb1590 	.word	0x19cb1590
 800687c:	3efa01a0 	.word	0x3efa01a0
 8006880:	16c15177 	.word	0x16c15177
 8006884:	3f56c16c 	.word	0x3f56c16c
 8006888:	5555554c 	.word	0x5555554c
 800688c:	3fa55555 	.word	0x3fa55555
 8006890:	00000000 	.word	0x00000000
 8006894:	3ff00000 	.word	0x3ff00000
 8006898:	3fe00000 	.word	0x3fe00000
 800689c:	3fd33332 	.word	0x3fd33332
 80068a0:	3ff00000 	.word	0x3ff00000
 80068a4:	3fe90000 	.word	0x3fe90000
 80068a8:	3fd20000 	.word	0x3fd20000
 80068ac:	00000000 	.word	0x00000000

080068b0 <__kernel_sin>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	ed2d 8b04 	vpush	{d8-d9}
 80068b8:	eeb0 8a41 	vmov.f32	s16, s2
 80068bc:	eef0 8a61 	vmov.f32	s17, s3
 80068c0:	ec55 4b10 	vmov	r4, r5, d0
 80068c4:	b083      	sub	sp, #12
 80068c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80068ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80068ce:	9001      	str	r0, [sp, #4]
 80068d0:	da06      	bge.n	80068e0 <__kernel_sin+0x30>
 80068d2:	ee10 0a10 	vmov	r0, s0
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7fa f950 	bl	8000b7c <__aeabi_d2iz>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d051      	beq.n	8006984 <__kernel_sin+0xd4>
 80068e0:	4622      	mov	r2, r4
 80068e2:	462b      	mov	r3, r5
 80068e4:	4620      	mov	r0, r4
 80068e6:	4629      	mov	r1, r5
 80068e8:	f7f9 feae 	bl	8000648 <__aeabi_dmul>
 80068ec:	4682      	mov	sl, r0
 80068ee:	468b      	mov	fp, r1
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4620      	mov	r0, r4
 80068f6:	4629      	mov	r1, r5
 80068f8:	f7f9 fea6 	bl	8000648 <__aeabi_dmul>
 80068fc:	a341      	add	r3, pc, #260	; (adr r3, 8006a04 <__kernel_sin+0x154>)
 80068fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006902:	4680      	mov	r8, r0
 8006904:	4689      	mov	r9, r1
 8006906:	4650      	mov	r0, sl
 8006908:	4659      	mov	r1, fp
 800690a:	f7f9 fe9d 	bl	8000648 <__aeabi_dmul>
 800690e:	a33f      	add	r3, pc, #252	; (adr r3, 8006a0c <__kernel_sin+0x15c>)
 8006910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006914:	f7f9 fce0 	bl	80002d8 <__aeabi_dsub>
 8006918:	4652      	mov	r2, sl
 800691a:	465b      	mov	r3, fp
 800691c:	f7f9 fe94 	bl	8000648 <__aeabi_dmul>
 8006920:	a33c      	add	r3, pc, #240	; (adr r3, 8006a14 <__kernel_sin+0x164>)
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	f7f9 fcd9 	bl	80002dc <__adddf3>
 800692a:	4652      	mov	r2, sl
 800692c:	465b      	mov	r3, fp
 800692e:	f7f9 fe8b 	bl	8000648 <__aeabi_dmul>
 8006932:	a33a      	add	r3, pc, #232	; (adr r3, 8006a1c <__kernel_sin+0x16c>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fcce 	bl	80002d8 <__aeabi_dsub>
 800693c:	4652      	mov	r2, sl
 800693e:	465b      	mov	r3, fp
 8006940:	f7f9 fe82 	bl	8000648 <__aeabi_dmul>
 8006944:	a337      	add	r3, pc, #220	; (adr r3, 8006a24 <__kernel_sin+0x174>)
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f7f9 fcc7 	bl	80002dc <__adddf3>
 800694e:	9b01      	ldr	r3, [sp, #4]
 8006950:	4606      	mov	r6, r0
 8006952:	460f      	mov	r7, r1
 8006954:	b9eb      	cbnz	r3, 8006992 <__kernel_sin+0xe2>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4650      	mov	r0, sl
 800695c:	4659      	mov	r1, fp
 800695e:	f7f9 fe73 	bl	8000648 <__aeabi_dmul>
 8006962:	a325      	add	r3, pc, #148	; (adr r3, 80069f8 <__kernel_sin+0x148>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	f7f9 fcb6 	bl	80002d8 <__aeabi_dsub>
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	f7f9 fe6a 	bl	8000648 <__aeabi_dmul>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4620      	mov	r0, r4
 800697a:	4629      	mov	r1, r5
 800697c:	f7f9 fcae 	bl	80002dc <__adddf3>
 8006980:	4604      	mov	r4, r0
 8006982:	460d      	mov	r5, r1
 8006984:	ec45 4b10 	vmov	d0, r4, r5
 8006988:	b003      	add	sp, #12
 800698a:	ecbd 8b04 	vpop	{d8-d9}
 800698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006992:	4b1b      	ldr	r3, [pc, #108]	; (8006a00 <__kernel_sin+0x150>)
 8006994:	ec51 0b18 	vmov	r0, r1, d8
 8006998:	2200      	movs	r2, #0
 800699a:	f7f9 fe55 	bl	8000648 <__aeabi_dmul>
 800699e:	4632      	mov	r2, r6
 80069a0:	ec41 0b19 	vmov	d9, r0, r1
 80069a4:	463b      	mov	r3, r7
 80069a6:	4640      	mov	r0, r8
 80069a8:	4649      	mov	r1, r9
 80069aa:	f7f9 fe4d 	bl	8000648 <__aeabi_dmul>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	ec51 0b19 	vmov	r0, r1, d9
 80069b6:	f7f9 fc8f 	bl	80002d8 <__aeabi_dsub>
 80069ba:	4652      	mov	r2, sl
 80069bc:	465b      	mov	r3, fp
 80069be:	f7f9 fe43 	bl	8000648 <__aeabi_dmul>
 80069c2:	ec53 2b18 	vmov	r2, r3, d8
 80069c6:	f7f9 fc87 	bl	80002d8 <__aeabi_dsub>
 80069ca:	a30b      	add	r3, pc, #44	; (adr r3, 80069f8 <__kernel_sin+0x148>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	4606      	mov	r6, r0
 80069d2:	460f      	mov	r7, r1
 80069d4:	4640      	mov	r0, r8
 80069d6:	4649      	mov	r1, r9
 80069d8:	f7f9 fe36 	bl	8000648 <__aeabi_dmul>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4630      	mov	r0, r6
 80069e2:	4639      	mov	r1, r7
 80069e4:	f7f9 fc7a 	bl	80002dc <__adddf3>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4620      	mov	r0, r4
 80069ee:	4629      	mov	r1, r5
 80069f0:	f7f9 fc72 	bl	80002d8 <__aeabi_dsub>
 80069f4:	e7c4      	b.n	8006980 <__kernel_sin+0xd0>
 80069f6:	bf00      	nop
 80069f8:	55555549 	.word	0x55555549
 80069fc:	3fc55555 	.word	0x3fc55555
 8006a00:	3fe00000 	.word	0x3fe00000
 8006a04:	5acfd57c 	.word	0x5acfd57c
 8006a08:	3de5d93a 	.word	0x3de5d93a
 8006a0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006a10:	3e5ae5e6 	.word	0x3e5ae5e6
 8006a14:	57b1fe7d 	.word	0x57b1fe7d
 8006a18:	3ec71de3 	.word	0x3ec71de3
 8006a1c:	19c161d5 	.word	0x19c161d5
 8006a20:	3f2a01a0 	.word	0x3f2a01a0
 8006a24:	1110f8a6 	.word	0x1110f8a6
 8006a28:	3f811111 	.word	0x3f811111
 8006a2c:	00000000 	.word	0x00000000

08006a30 <__ieee754_rem_pio2>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	ed2d 8b02 	vpush	{d8}
 8006a38:	ec55 4b10 	vmov	r4, r5, d0
 8006a3c:	4bca      	ldr	r3, [pc, #808]	; (8006d68 <__ieee754_rem_pio2+0x338>)
 8006a3e:	b08b      	sub	sp, #44	; 0x2c
 8006a40:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006a44:	4598      	cmp	r8, r3
 8006a46:	4682      	mov	sl, r0
 8006a48:	9502      	str	r5, [sp, #8]
 8006a4a:	dc08      	bgt.n	8006a5e <__ieee754_rem_pio2+0x2e>
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2300      	movs	r3, #0
 8006a50:	ed80 0b00 	vstr	d0, [r0]
 8006a54:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006a58:	f04f 0b00 	mov.w	fp, #0
 8006a5c:	e028      	b.n	8006ab0 <__ieee754_rem_pio2+0x80>
 8006a5e:	4bc3      	ldr	r3, [pc, #780]	; (8006d6c <__ieee754_rem_pio2+0x33c>)
 8006a60:	4598      	cmp	r8, r3
 8006a62:	dc78      	bgt.n	8006b56 <__ieee754_rem_pio2+0x126>
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	4ec2      	ldr	r6, [pc, #776]	; (8006d70 <__ieee754_rem_pio2+0x340>)
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	ee10 0a10 	vmov	r0, s0
 8006a6e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006d30 <__ieee754_rem_pio2+0x300>)
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	4629      	mov	r1, r5
 8006a76:	dd39      	ble.n	8006aec <__ieee754_rem_pio2+0xbc>
 8006a78:	f7f9 fc2e 	bl	80002d8 <__aeabi_dsub>
 8006a7c:	45b0      	cmp	r8, r6
 8006a7e:	4604      	mov	r4, r0
 8006a80:	460d      	mov	r5, r1
 8006a82:	d01b      	beq.n	8006abc <__ieee754_rem_pio2+0x8c>
 8006a84:	a3ac      	add	r3, pc, #688	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x308>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7f9 fc25 	bl	80002d8 <__aeabi_dsub>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	e9ca 2300 	strd	r2, r3, [sl]
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7f9 fc1d 	bl	80002d8 <__aeabi_dsub>
 8006a9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x308>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fc18 	bl	80002d8 <__aeabi_dsub>
 8006aa8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006aac:	f04f 0b01 	mov.w	fp, #1
 8006ab0:	4658      	mov	r0, fp
 8006ab2:	b00b      	add	sp, #44	; 0x2c
 8006ab4:	ecbd 8b02 	vpop	{d8}
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x310>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fc09 	bl	80002d8 <__aeabi_dsub>
 8006ac6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x318>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	f7f9 fc02 	bl	80002d8 <__aeabi_dsub>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	e9ca 2300 	strd	r2, r3, [sl]
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7f9 fbfa 	bl	80002d8 <__aeabi_dsub>
 8006ae4:	a398      	add	r3, pc, #608	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x318>)
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	e7db      	b.n	8006aa4 <__ieee754_rem_pio2+0x74>
 8006aec:	f7f9 fbf6 	bl	80002dc <__adddf3>
 8006af0:	45b0      	cmp	r8, r6
 8006af2:	4604      	mov	r4, r0
 8006af4:	460d      	mov	r5, r1
 8006af6:	d016      	beq.n	8006b26 <__ieee754_rem_pio2+0xf6>
 8006af8:	a38f      	add	r3, pc, #572	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x308>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fbed 	bl	80002dc <__adddf3>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	e9ca 2300 	strd	r2, r3, [sl]
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7f9 fbe3 	bl	80002d8 <__aeabi_dsub>
 8006b12:	a389      	add	r3, pc, #548	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x308>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fbe0 	bl	80002dc <__adddf3>
 8006b1c:	f04f 3bff 	mov.w	fp, #4294967295
 8006b20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006b24:	e7c4      	b.n	8006ab0 <__ieee754_rem_pio2+0x80>
 8006b26:	a386      	add	r3, pc, #536	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x310>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f7f9 fbd6 	bl	80002dc <__adddf3>
 8006b30:	a385      	add	r3, pc, #532	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x318>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	4604      	mov	r4, r0
 8006b38:	460d      	mov	r5, r1
 8006b3a:	f7f9 fbcf 	bl	80002dc <__adddf3>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	e9ca 2300 	strd	r2, r3, [sl]
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 fbc5 	bl	80002d8 <__aeabi_dsub>
 8006b4e:	a37e      	add	r3, pc, #504	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x318>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	e7e0      	b.n	8006b18 <__ieee754_rem_pio2+0xe8>
 8006b56:	4b87      	ldr	r3, [pc, #540]	; (8006d74 <__ieee754_rem_pio2+0x344>)
 8006b58:	4598      	cmp	r8, r3
 8006b5a:	f300 80d8 	bgt.w	8006d0e <__ieee754_rem_pio2+0x2de>
 8006b5e:	f000 f96d 	bl	8006e3c <fabs>
 8006b62:	ec55 4b10 	vmov	r4, r5, d0
 8006b66:	ee10 0a10 	vmov	r0, s0
 8006b6a:	a379      	add	r3, pc, #484	; (adr r3, 8006d50 <__ieee754_rem_pio2+0x320>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 fd69 	bl	8000648 <__aeabi_dmul>
 8006b76:	4b80      	ldr	r3, [pc, #512]	; (8006d78 <__ieee754_rem_pio2+0x348>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fbaf 	bl	80002dc <__adddf3>
 8006b7e:	f7f9 fffd 	bl	8000b7c <__aeabi_d2iz>
 8006b82:	4683      	mov	fp, r0
 8006b84:	f7f9 fcf6 	bl	8000574 <__aeabi_i2d>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	ec43 2b18 	vmov	d8, r2, r3
 8006b90:	a367      	add	r3, pc, #412	; (adr r3, 8006d30 <__ieee754_rem_pio2+0x300>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fd57 	bl	8000648 <__aeabi_dmul>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f7f9 fb99 	bl	80002d8 <__aeabi_dsub>
 8006ba6:	a364      	add	r3, pc, #400	; (adr r3, 8006d38 <__ieee754_rem_pio2+0x308>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	4606      	mov	r6, r0
 8006bae:	460f      	mov	r7, r1
 8006bb0:	ec51 0b18 	vmov	r0, r1, d8
 8006bb4:	f7f9 fd48 	bl	8000648 <__aeabi_dmul>
 8006bb8:	f1bb 0f1f 	cmp.w	fp, #31
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	460d      	mov	r5, r1
 8006bc0:	dc0d      	bgt.n	8006bde <__ieee754_rem_pio2+0x1ae>
 8006bc2:	4b6e      	ldr	r3, [pc, #440]	; (8006d7c <__ieee754_rem_pio2+0x34c>)
 8006bc4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	4543      	cmp	r3, r8
 8006bce:	d006      	beq.n	8006bde <__ieee754_rem_pio2+0x1ae>
 8006bd0:	4622      	mov	r2, r4
 8006bd2:	462b      	mov	r3, r5
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fb7e 	bl	80002d8 <__aeabi_dsub>
 8006bdc:	e00e      	b.n	8006bfc <__ieee754_rem_pio2+0x1cc>
 8006bde:	462b      	mov	r3, r5
 8006be0:	4622      	mov	r2, r4
 8006be2:	4630      	mov	r0, r6
 8006be4:	4639      	mov	r1, r7
 8006be6:	f7f9 fb77 	bl	80002d8 <__aeabi_dsub>
 8006bea:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006bf4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006bf8:	2b10      	cmp	r3, #16
 8006bfa:	dc02      	bgt.n	8006c02 <__ieee754_rem_pio2+0x1d2>
 8006bfc:	e9ca 0100 	strd	r0, r1, [sl]
 8006c00:	e039      	b.n	8006c76 <__ieee754_rem_pio2+0x246>
 8006c02:	a34f      	add	r3, pc, #316	; (adr r3, 8006d40 <__ieee754_rem_pio2+0x310>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	ec51 0b18 	vmov	r0, r1, d8
 8006c0c:	f7f9 fd1c 	bl	8000648 <__aeabi_dmul>
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 fb5c 	bl	80002d8 <__aeabi_dsub>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4680      	mov	r8, r0
 8006c26:	4689      	mov	r9, r1
 8006c28:	4630      	mov	r0, r6
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	f7f9 fb54 	bl	80002d8 <__aeabi_dsub>
 8006c30:	4622      	mov	r2, r4
 8006c32:	462b      	mov	r3, r5
 8006c34:	f7f9 fb50 	bl	80002d8 <__aeabi_dsub>
 8006c38:	a343      	add	r3, pc, #268	; (adr r3, 8006d48 <__ieee754_rem_pio2+0x318>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	4604      	mov	r4, r0
 8006c40:	460d      	mov	r5, r1
 8006c42:	ec51 0b18 	vmov	r0, r1, d8
 8006c46:	f7f9 fcff 	bl	8000648 <__aeabi_dmul>
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	462b      	mov	r3, r5
 8006c4e:	f7f9 fb43 	bl	80002d8 <__aeabi_dsub>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4604      	mov	r4, r0
 8006c58:	460d      	mov	r5, r1
 8006c5a:	4640      	mov	r0, r8
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	f7f9 fb3b 	bl	80002d8 <__aeabi_dsub>
 8006c62:	9a03      	ldr	r2, [sp, #12]
 8006c64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b31      	cmp	r3, #49	; 0x31
 8006c6c:	dc24      	bgt.n	8006cb8 <__ieee754_rem_pio2+0x288>
 8006c6e:	e9ca 0100 	strd	r0, r1, [sl]
 8006c72:	4646      	mov	r6, r8
 8006c74:	464f      	mov	r7, r9
 8006c76:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 fb29 	bl	80002d8 <__aeabi_dsub>
 8006c86:	462b      	mov	r3, r5
 8006c88:	4622      	mov	r2, r4
 8006c8a:	f7f9 fb25 	bl	80002d8 <__aeabi_dsub>
 8006c8e:	9b02      	ldr	r3, [sp, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c96:	f6bf af0b 	bge.w	8006ab0 <__ieee754_rem_pio2+0x80>
 8006c9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c9e:	f8ca 3004 	str.w	r3, [sl, #4]
 8006ca2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ca6:	f8ca 8000 	str.w	r8, [sl]
 8006caa:	f8ca 0008 	str.w	r0, [sl, #8]
 8006cae:	f8ca 300c 	str.w	r3, [sl, #12]
 8006cb2:	f1cb 0b00 	rsb	fp, fp, #0
 8006cb6:	e6fb      	b.n	8006ab0 <__ieee754_rem_pio2+0x80>
 8006cb8:	a327      	add	r3, pc, #156	; (adr r3, 8006d58 <__ieee754_rem_pio2+0x328>)
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	ec51 0b18 	vmov	r0, r1, d8
 8006cc2:	f7f9 fcc1 	bl	8000648 <__aeabi_dmul>
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fb01 	bl	80002d8 <__aeabi_dsub>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 faf9 	bl	80002d8 <__aeabi_dsub>
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	462b      	mov	r3, r5
 8006cea:	f7f9 faf5 	bl	80002d8 <__aeabi_dsub>
 8006cee:	a31c      	add	r3, pc, #112	; (adr r3, 8006d60 <__ieee754_rem_pio2+0x330>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	ec51 0b18 	vmov	r0, r1, d8
 8006cfc:	f7f9 fca4 	bl	8000648 <__aeabi_dmul>
 8006d00:	4622      	mov	r2, r4
 8006d02:	462b      	mov	r3, r5
 8006d04:	f7f9 fae8 	bl	80002d8 <__aeabi_dsub>
 8006d08:	4604      	mov	r4, r0
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	e760      	b.n	8006bd0 <__ieee754_rem_pio2+0x1a0>
 8006d0e:	4b1c      	ldr	r3, [pc, #112]	; (8006d80 <__ieee754_rem_pio2+0x350>)
 8006d10:	4598      	cmp	r8, r3
 8006d12:	dd37      	ble.n	8006d84 <__ieee754_rem_pio2+0x354>
 8006d14:	ee10 2a10 	vmov	r2, s0
 8006d18:	462b      	mov	r3, r5
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7f9 fadb 	bl	80002d8 <__aeabi_dsub>
 8006d22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d26:	e9ca 0100 	strd	r0, r1, [sl]
 8006d2a:	e695      	b.n	8006a58 <__ieee754_rem_pio2+0x28>
 8006d2c:	f3af 8000 	nop.w
 8006d30:	54400000 	.word	0x54400000
 8006d34:	3ff921fb 	.word	0x3ff921fb
 8006d38:	1a626331 	.word	0x1a626331
 8006d3c:	3dd0b461 	.word	0x3dd0b461
 8006d40:	1a600000 	.word	0x1a600000
 8006d44:	3dd0b461 	.word	0x3dd0b461
 8006d48:	2e037073 	.word	0x2e037073
 8006d4c:	3ba3198a 	.word	0x3ba3198a
 8006d50:	6dc9c883 	.word	0x6dc9c883
 8006d54:	3fe45f30 	.word	0x3fe45f30
 8006d58:	2e000000 	.word	0x2e000000
 8006d5c:	3ba3198a 	.word	0x3ba3198a
 8006d60:	252049c1 	.word	0x252049c1
 8006d64:	397b839a 	.word	0x397b839a
 8006d68:	3fe921fb 	.word	0x3fe921fb
 8006d6c:	4002d97b 	.word	0x4002d97b
 8006d70:	3ff921fb 	.word	0x3ff921fb
 8006d74:	413921fb 	.word	0x413921fb
 8006d78:	3fe00000 	.word	0x3fe00000
 8006d7c:	08007788 	.word	0x08007788
 8006d80:	7fefffff 	.word	0x7fefffff
 8006d84:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006d88:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006d8c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006d90:	4620      	mov	r0, r4
 8006d92:	460d      	mov	r5, r1
 8006d94:	f7f9 fef2 	bl	8000b7c <__aeabi_d2iz>
 8006d98:	f7f9 fbec 	bl	8000574 <__aeabi_i2d>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006da8:	f7f9 fa96 	bl	80002d8 <__aeabi_dsub>
 8006dac:	4b21      	ldr	r3, [pc, #132]	; (8006e34 <__ieee754_rem_pio2+0x404>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	f7f9 fc4a 	bl	8000648 <__aeabi_dmul>
 8006db4:	460d      	mov	r5, r1
 8006db6:	4604      	mov	r4, r0
 8006db8:	f7f9 fee0 	bl	8000b7c <__aeabi_d2iz>
 8006dbc:	f7f9 fbda 	bl	8000574 <__aeabi_i2d>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dcc:	f7f9 fa84 	bl	80002d8 <__aeabi_dsub>
 8006dd0:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <__ieee754_rem_pio2+0x404>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f7f9 fc38 	bl	8000648 <__aeabi_dmul>
 8006dd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ddc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006de0:	2703      	movs	r7, #3
 8006de2:	2400      	movs	r4, #0
 8006de4:	2500      	movs	r5, #0
 8006de6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006dea:	4622      	mov	r2, r4
 8006dec:	462b      	mov	r3, r5
 8006dee:	46b9      	mov	r9, r7
 8006df0:	3f01      	subs	r7, #1
 8006df2:	f7f9 fe91 	bl	8000b18 <__aeabi_dcmpeq>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d1f5      	bne.n	8006de6 <__ieee754_rem_pio2+0x3b6>
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <__ieee754_rem_pio2+0x408>)
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	2302      	movs	r3, #2
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4632      	mov	r2, r6
 8006e04:	464b      	mov	r3, r9
 8006e06:	4651      	mov	r1, sl
 8006e08:	a804      	add	r0, sp, #16
 8006e0a:	f000 f821 	bl	8006e50 <__kernel_rem_pio2>
 8006e0e:	9b02      	ldr	r3, [sp, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	4683      	mov	fp, r0
 8006e14:	f6bf ae4c 	bge.w	8006ab0 <__ieee754_rem_pio2+0x80>
 8006e18:	e9da 2100 	ldrd	r2, r1, [sl]
 8006e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e20:	e9ca 2300 	strd	r2, r3, [sl]
 8006e24:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006e28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e2c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006e30:	e73f      	b.n	8006cb2 <__ieee754_rem_pio2+0x282>
 8006e32:	bf00      	nop
 8006e34:	41700000 	.word	0x41700000
 8006e38:	08007808 	.word	0x08007808

08006e3c <fabs>:
 8006e3c:	ec51 0b10 	vmov	r0, r1, d0
 8006e40:	ee10 2a10 	vmov	r2, s0
 8006e44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e48:	ec43 2b10 	vmov	d0, r2, r3
 8006e4c:	4770      	bx	lr
	...

08006e50 <__kernel_rem_pio2>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	ed2d 8b02 	vpush	{d8}
 8006e58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006e5c:	f112 0f14 	cmn.w	r2, #20
 8006e60:	9306      	str	r3, [sp, #24]
 8006e62:	9104      	str	r1, [sp, #16]
 8006e64:	4bc2      	ldr	r3, [pc, #776]	; (8007170 <__kernel_rem_pio2+0x320>)
 8006e66:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006e68:	9009      	str	r0, [sp, #36]	; 0x24
 8006e6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	9b06      	ldr	r3, [sp, #24]
 8006e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e76:	bfa8      	it	ge
 8006e78:	1ed4      	subge	r4, r2, #3
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	bfb2      	itee	lt
 8006e7e:	2400      	movlt	r4, #0
 8006e80:	2318      	movge	r3, #24
 8006e82:	fb94 f4f3 	sdivge	r4, r4, r3
 8006e86:	f06f 0317 	mvn.w	r3, #23
 8006e8a:	fb04 3303 	mla	r3, r4, r3, r3
 8006e8e:	eb03 0a02 	add.w	sl, r3, r2
 8006e92:	9b00      	ldr	r3, [sp, #0]
 8006e94:	9a05      	ldr	r2, [sp, #20]
 8006e96:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007160 <__kernel_rem_pio2+0x310>
 8006e9a:	eb03 0802 	add.w	r8, r3, r2
 8006e9e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006ea0:	1aa7      	subs	r7, r4, r2
 8006ea2:	ae20      	add	r6, sp, #128	; 0x80
 8006ea4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006ea8:	2500      	movs	r5, #0
 8006eaa:	4545      	cmp	r5, r8
 8006eac:	dd13      	ble.n	8006ed6 <__kernel_rem_pio2+0x86>
 8006eae:	9b06      	ldr	r3, [sp, #24]
 8006eb0:	aa20      	add	r2, sp, #128	; 0x80
 8006eb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006eb6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	9b00      	ldr	r3, [sp, #0]
 8006ec0:	4598      	cmp	r8, r3
 8006ec2:	dc31      	bgt.n	8006f28 <__kernel_rem_pio2+0xd8>
 8006ec4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007160 <__kernel_rem_pio2+0x310>
 8006ec8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ecc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ed0:	462f      	mov	r7, r5
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	e01b      	b.n	8006f0e <__kernel_rem_pio2+0xbe>
 8006ed6:	42ef      	cmn	r7, r5
 8006ed8:	d407      	bmi.n	8006eea <__kernel_rem_pio2+0x9a>
 8006eda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006ede:	f7f9 fb49 	bl	8000574 <__aeabi_i2d>
 8006ee2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006ee6:	3501      	adds	r5, #1
 8006ee8:	e7df      	b.n	8006eaa <__kernel_rem_pio2+0x5a>
 8006eea:	ec51 0b18 	vmov	r0, r1, d8
 8006eee:	e7f8      	b.n	8006ee2 <__kernel_rem_pio2+0x92>
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006ef8:	f7f9 fba6 	bl	8000648 <__aeabi_dmul>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f04:	f7f9 f9ea 	bl	80002dc <__adddf3>
 8006f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	429e      	cmp	r6, r3
 8006f12:	f1a7 0708 	sub.w	r7, r7, #8
 8006f16:	ddeb      	ble.n	8006ef0 <__kernel_rem_pio2+0xa0>
 8006f18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f1c:	f108 0801 	add.w	r8, r8, #1
 8006f20:	ecab 7b02 	vstmia	fp!, {d7}
 8006f24:	3508      	adds	r5, #8
 8006f26:	e7ca      	b.n	8006ebe <__kernel_rem_pio2+0x6e>
 8006f28:	9b00      	ldr	r3, [sp, #0]
 8006f2a:	aa0c      	add	r2, sp, #48	; 0x30
 8006f2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f32:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006f34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006f38:	9c00      	ldr	r4, [sp, #0]
 8006f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f3c:	00e3      	lsls	r3, r4, #3
 8006f3e:	9308      	str	r3, [sp, #32]
 8006f40:	ab98      	add	r3, sp, #608	; 0x260
 8006f42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006f4a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006f4e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006f50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006f54:	46c3      	mov	fp, r8
 8006f56:	46a1      	mov	r9, r4
 8006f58:	f1b9 0f00 	cmp.w	r9, #0
 8006f5c:	f1a5 0508 	sub.w	r5, r5, #8
 8006f60:	dc77      	bgt.n	8007052 <__kernel_rem_pio2+0x202>
 8006f62:	ec47 6b10 	vmov	d0, r6, r7
 8006f66:	4650      	mov	r0, sl
 8006f68:	f000 fac2 	bl	80074f0 <scalbn>
 8006f6c:	ec57 6b10 	vmov	r6, r7, d0
 8006f70:	2200      	movs	r2, #0
 8006f72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006f76:	ee10 0a10 	vmov	r0, s0
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 fb64 	bl	8000648 <__aeabi_dmul>
 8006f80:	ec41 0b10 	vmov	d0, r0, r1
 8006f84:	f000 fb34 	bl	80075f0 <floor>
 8006f88:	4b7a      	ldr	r3, [pc, #488]	; (8007174 <__kernel_rem_pio2+0x324>)
 8006f8a:	ec51 0b10 	vmov	r0, r1, d0
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f7f9 fb5a 	bl	8000648 <__aeabi_dmul>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4630      	mov	r0, r6
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	f7f9 f99c 	bl	80002d8 <__aeabi_dsub>
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	f7f9 fdea 	bl	8000b7c <__aeabi_d2iz>
 8006fa8:	9002      	str	r0, [sp, #8]
 8006faa:	f7f9 fae3 	bl	8000574 <__aeabi_i2d>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	f7f9 f98f 	bl	80002d8 <__aeabi_dsub>
 8006fba:	f1ba 0f00 	cmp.w	sl, #0
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	dd6d      	ble.n	80070a0 <__kernel_rem_pio2+0x250>
 8006fc4:	1e61      	subs	r1, r4, #1
 8006fc6:	ab0c      	add	r3, sp, #48	; 0x30
 8006fc8:	9d02      	ldr	r5, [sp, #8]
 8006fca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fce:	f1ca 0018 	rsb	r0, sl, #24
 8006fd2:	fa43 f200 	asr.w	r2, r3, r0
 8006fd6:	4415      	add	r5, r2
 8006fd8:	4082      	lsls	r2, r0
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	aa0c      	add	r2, sp, #48	; 0x30
 8006fde:	9502      	str	r5, [sp, #8]
 8006fe0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006fe4:	f1ca 0217 	rsb	r2, sl, #23
 8006fe8:	fa43 fb02 	asr.w	fp, r3, r2
 8006fec:	f1bb 0f00 	cmp.w	fp, #0
 8006ff0:	dd65      	ble.n	80070be <__kernel_rem_pio2+0x26e>
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	9302      	str	r3, [sp, #8]
 8006ffa:	4615      	mov	r5, r2
 8006ffc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007000:	4294      	cmp	r4, r2
 8007002:	f300 809f 	bgt.w	8007144 <__kernel_rem_pio2+0x2f4>
 8007006:	f1ba 0f00 	cmp.w	sl, #0
 800700a:	dd07      	ble.n	800701c <__kernel_rem_pio2+0x1cc>
 800700c:	f1ba 0f01 	cmp.w	sl, #1
 8007010:	f000 80c1 	beq.w	8007196 <__kernel_rem_pio2+0x346>
 8007014:	f1ba 0f02 	cmp.w	sl, #2
 8007018:	f000 80c7 	beq.w	80071aa <__kernel_rem_pio2+0x35a>
 800701c:	f1bb 0f02 	cmp.w	fp, #2
 8007020:	d14d      	bne.n	80070be <__kernel_rem_pio2+0x26e>
 8007022:	4632      	mov	r2, r6
 8007024:	463b      	mov	r3, r7
 8007026:	4954      	ldr	r1, [pc, #336]	; (8007178 <__kernel_rem_pio2+0x328>)
 8007028:	2000      	movs	r0, #0
 800702a:	f7f9 f955 	bl	80002d8 <__aeabi_dsub>
 800702e:	4606      	mov	r6, r0
 8007030:	460f      	mov	r7, r1
 8007032:	2d00      	cmp	r5, #0
 8007034:	d043      	beq.n	80070be <__kernel_rem_pio2+0x26e>
 8007036:	4650      	mov	r0, sl
 8007038:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007168 <__kernel_rem_pio2+0x318>
 800703c:	f000 fa58 	bl	80074f0 <scalbn>
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	ec53 2b10 	vmov	r2, r3, d0
 8007048:	f7f9 f946 	bl	80002d8 <__aeabi_dsub>
 800704c:	4606      	mov	r6, r0
 800704e:	460f      	mov	r7, r1
 8007050:	e035      	b.n	80070be <__kernel_rem_pio2+0x26e>
 8007052:	4b4a      	ldr	r3, [pc, #296]	; (800717c <__kernel_rem_pio2+0x32c>)
 8007054:	2200      	movs	r2, #0
 8007056:	4630      	mov	r0, r6
 8007058:	4639      	mov	r1, r7
 800705a:	f7f9 faf5 	bl	8000648 <__aeabi_dmul>
 800705e:	f7f9 fd8d 	bl	8000b7c <__aeabi_d2iz>
 8007062:	f7f9 fa87 	bl	8000574 <__aeabi_i2d>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	ec43 2b18 	vmov	d8, r2, r3
 800706e:	4b44      	ldr	r3, [pc, #272]	; (8007180 <__kernel_rem_pio2+0x330>)
 8007070:	2200      	movs	r2, #0
 8007072:	f7f9 fae9 	bl	8000648 <__aeabi_dmul>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4630      	mov	r0, r6
 800707c:	4639      	mov	r1, r7
 800707e:	f7f9 f92b 	bl	80002d8 <__aeabi_dsub>
 8007082:	f7f9 fd7b 	bl	8000b7c <__aeabi_d2iz>
 8007086:	e9d5 2300 	ldrd	r2, r3, [r5]
 800708a:	f84b 0b04 	str.w	r0, [fp], #4
 800708e:	ec51 0b18 	vmov	r0, r1, d8
 8007092:	f7f9 f923 	bl	80002dc <__adddf3>
 8007096:	f109 39ff 	add.w	r9, r9, #4294967295
 800709a:	4606      	mov	r6, r0
 800709c:	460f      	mov	r7, r1
 800709e:	e75b      	b.n	8006f58 <__kernel_rem_pio2+0x108>
 80070a0:	d106      	bne.n	80070b0 <__kernel_rem_pio2+0x260>
 80070a2:	1e63      	subs	r3, r4, #1
 80070a4:	aa0c      	add	r2, sp, #48	; 0x30
 80070a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070aa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80070ae:	e79d      	b.n	8006fec <__kernel_rem_pio2+0x19c>
 80070b0:	4b34      	ldr	r3, [pc, #208]	; (8007184 <__kernel_rem_pio2+0x334>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	f7f9 fd4e 	bl	8000b54 <__aeabi_dcmpge>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d140      	bne.n	800713e <__kernel_rem_pio2+0x2ee>
 80070bc:	4683      	mov	fp, r0
 80070be:	2200      	movs	r2, #0
 80070c0:	2300      	movs	r3, #0
 80070c2:	4630      	mov	r0, r6
 80070c4:	4639      	mov	r1, r7
 80070c6:	f7f9 fd27 	bl	8000b18 <__aeabi_dcmpeq>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	f000 80c1 	beq.w	8007252 <__kernel_rem_pio2+0x402>
 80070d0:	1e65      	subs	r5, r4, #1
 80070d2:	462b      	mov	r3, r5
 80070d4:	2200      	movs	r2, #0
 80070d6:	9900      	ldr	r1, [sp, #0]
 80070d8:	428b      	cmp	r3, r1
 80070da:	da6d      	bge.n	80071b8 <__kernel_rem_pio2+0x368>
 80070dc:	2a00      	cmp	r2, #0
 80070de:	f000 808a 	beq.w	80071f6 <__kernel_rem_pio2+0x3a6>
 80070e2:	ab0c      	add	r3, sp, #48	; 0x30
 80070e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80070e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 80ae 	beq.w	800724e <__kernel_rem_pio2+0x3fe>
 80070f2:	4650      	mov	r0, sl
 80070f4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007168 <__kernel_rem_pio2+0x318>
 80070f8:	f000 f9fa 	bl	80074f0 <scalbn>
 80070fc:	1c6b      	adds	r3, r5, #1
 80070fe:	00da      	lsls	r2, r3, #3
 8007100:	9205      	str	r2, [sp, #20]
 8007102:	ec57 6b10 	vmov	r6, r7, d0
 8007106:	aa70      	add	r2, sp, #448	; 0x1c0
 8007108:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800717c <__kernel_rem_pio2+0x32c>
 800710c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007110:	462c      	mov	r4, r5
 8007112:	f04f 0800 	mov.w	r8, #0
 8007116:	2c00      	cmp	r4, #0
 8007118:	f280 80d4 	bge.w	80072c4 <__kernel_rem_pio2+0x474>
 800711c:	462c      	mov	r4, r5
 800711e:	2c00      	cmp	r4, #0
 8007120:	f2c0 8102 	blt.w	8007328 <__kernel_rem_pio2+0x4d8>
 8007124:	4b18      	ldr	r3, [pc, #96]	; (8007188 <__kernel_rem_pio2+0x338>)
 8007126:	461e      	mov	r6, r3
 8007128:	ab70      	add	r3, sp, #448	; 0x1c0
 800712a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800712e:	1b2b      	subs	r3, r5, r4
 8007130:	f04f 0900 	mov.w	r9, #0
 8007134:	f04f 0a00 	mov.w	sl, #0
 8007138:	2700      	movs	r7, #0
 800713a:	9306      	str	r3, [sp, #24]
 800713c:	e0e6      	b.n	800730c <__kernel_rem_pio2+0x4bc>
 800713e:	f04f 0b02 	mov.w	fp, #2
 8007142:	e756      	b.n	8006ff2 <__kernel_rem_pio2+0x1a2>
 8007144:	f8d8 3000 	ldr.w	r3, [r8]
 8007148:	bb05      	cbnz	r5, 800718c <__kernel_rem_pio2+0x33c>
 800714a:	b123      	cbz	r3, 8007156 <__kernel_rem_pio2+0x306>
 800714c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007150:	f8c8 3000 	str.w	r3, [r8]
 8007154:	2301      	movs	r3, #1
 8007156:	3201      	adds	r2, #1
 8007158:	f108 0804 	add.w	r8, r8, #4
 800715c:	461d      	mov	r5, r3
 800715e:	e74f      	b.n	8007000 <__kernel_rem_pio2+0x1b0>
	...
 800716c:	3ff00000 	.word	0x3ff00000
 8007170:	08007950 	.word	0x08007950
 8007174:	40200000 	.word	0x40200000
 8007178:	3ff00000 	.word	0x3ff00000
 800717c:	3e700000 	.word	0x3e700000
 8007180:	41700000 	.word	0x41700000
 8007184:	3fe00000 	.word	0x3fe00000
 8007188:	08007910 	.word	0x08007910
 800718c:	1acb      	subs	r3, r1, r3
 800718e:	f8c8 3000 	str.w	r3, [r8]
 8007192:	462b      	mov	r3, r5
 8007194:	e7df      	b.n	8007156 <__kernel_rem_pio2+0x306>
 8007196:	1e62      	subs	r2, r4, #1
 8007198:	ab0c      	add	r3, sp, #48	; 0x30
 800719a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80071a2:	a90c      	add	r1, sp, #48	; 0x30
 80071a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80071a8:	e738      	b.n	800701c <__kernel_rem_pio2+0x1cc>
 80071aa:	1e62      	subs	r2, r4, #1
 80071ac:	ab0c      	add	r3, sp, #48	; 0x30
 80071ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80071b6:	e7f4      	b.n	80071a2 <__kernel_rem_pio2+0x352>
 80071b8:	a90c      	add	r1, sp, #48	; 0x30
 80071ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80071be:	3b01      	subs	r3, #1
 80071c0:	430a      	orrs	r2, r1
 80071c2:	e788      	b.n	80070d6 <__kernel_rem_pio2+0x286>
 80071c4:	3301      	adds	r3, #1
 80071c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80071ca:	2900      	cmp	r1, #0
 80071cc:	d0fa      	beq.n	80071c4 <__kernel_rem_pio2+0x374>
 80071ce:	9a08      	ldr	r2, [sp, #32]
 80071d0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80071d4:	446a      	add	r2, sp
 80071d6:	3a98      	subs	r2, #152	; 0x98
 80071d8:	9208      	str	r2, [sp, #32]
 80071da:	9a06      	ldr	r2, [sp, #24]
 80071dc:	a920      	add	r1, sp, #128	; 0x80
 80071de:	18a2      	adds	r2, r4, r2
 80071e0:	18e3      	adds	r3, r4, r3
 80071e2:	f104 0801 	add.w	r8, r4, #1
 80071e6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80071ea:	9302      	str	r3, [sp, #8]
 80071ec:	9b02      	ldr	r3, [sp, #8]
 80071ee:	4543      	cmp	r3, r8
 80071f0:	da04      	bge.n	80071fc <__kernel_rem_pio2+0x3ac>
 80071f2:	461c      	mov	r4, r3
 80071f4:	e6a2      	b.n	8006f3c <__kernel_rem_pio2+0xec>
 80071f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071f8:	2301      	movs	r3, #1
 80071fa:	e7e4      	b.n	80071c6 <__kernel_rem_pio2+0x376>
 80071fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007202:	f7f9 f9b7 	bl	8000574 <__aeabi_i2d>
 8007206:	e8e5 0102 	strd	r0, r1, [r5], #8
 800720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720c:	46ab      	mov	fp, r5
 800720e:	461c      	mov	r4, r3
 8007210:	f04f 0900 	mov.w	r9, #0
 8007214:	2600      	movs	r6, #0
 8007216:	2700      	movs	r7, #0
 8007218:	9b05      	ldr	r3, [sp, #20]
 800721a:	4599      	cmp	r9, r3
 800721c:	dd06      	ble.n	800722c <__kernel_rem_pio2+0x3dc>
 800721e:	9b08      	ldr	r3, [sp, #32]
 8007220:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007224:	f108 0801 	add.w	r8, r8, #1
 8007228:	9308      	str	r3, [sp, #32]
 800722a:	e7df      	b.n	80071ec <__kernel_rem_pio2+0x39c>
 800722c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007230:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007234:	f7f9 fa08 	bl	8000648 <__aeabi_dmul>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 f84c 	bl	80002dc <__adddf3>
 8007244:	f109 0901 	add.w	r9, r9, #1
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	e7e4      	b.n	8007218 <__kernel_rem_pio2+0x3c8>
 800724e:	3d01      	subs	r5, #1
 8007250:	e747      	b.n	80070e2 <__kernel_rem_pio2+0x292>
 8007252:	ec47 6b10 	vmov	d0, r6, r7
 8007256:	f1ca 0000 	rsb	r0, sl, #0
 800725a:	f000 f949 	bl	80074f0 <scalbn>
 800725e:	ec57 6b10 	vmov	r6, r7, d0
 8007262:	4ba0      	ldr	r3, [pc, #640]	; (80074e4 <__kernel_rem_pio2+0x694>)
 8007264:	ee10 0a10 	vmov	r0, s0
 8007268:	2200      	movs	r2, #0
 800726a:	4639      	mov	r1, r7
 800726c:	f7f9 fc72 	bl	8000b54 <__aeabi_dcmpge>
 8007270:	b1f8      	cbz	r0, 80072b2 <__kernel_rem_pio2+0x462>
 8007272:	4b9d      	ldr	r3, [pc, #628]	; (80074e8 <__kernel_rem_pio2+0x698>)
 8007274:	2200      	movs	r2, #0
 8007276:	4630      	mov	r0, r6
 8007278:	4639      	mov	r1, r7
 800727a:	f7f9 f9e5 	bl	8000648 <__aeabi_dmul>
 800727e:	f7f9 fc7d 	bl	8000b7c <__aeabi_d2iz>
 8007282:	4680      	mov	r8, r0
 8007284:	f7f9 f976 	bl	8000574 <__aeabi_i2d>
 8007288:	4b96      	ldr	r3, [pc, #600]	; (80074e4 <__kernel_rem_pio2+0x694>)
 800728a:	2200      	movs	r2, #0
 800728c:	f7f9 f9dc 	bl	8000648 <__aeabi_dmul>
 8007290:	460b      	mov	r3, r1
 8007292:	4602      	mov	r2, r0
 8007294:	4639      	mov	r1, r7
 8007296:	4630      	mov	r0, r6
 8007298:	f7f9 f81e 	bl	80002d8 <__aeabi_dsub>
 800729c:	f7f9 fc6e 	bl	8000b7c <__aeabi_d2iz>
 80072a0:	1c65      	adds	r5, r4, #1
 80072a2:	ab0c      	add	r3, sp, #48	; 0x30
 80072a4:	f10a 0a18 	add.w	sl, sl, #24
 80072a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80072ac:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80072b0:	e71f      	b.n	80070f2 <__kernel_rem_pio2+0x2a2>
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	f7f9 fc61 	bl	8000b7c <__aeabi_d2iz>
 80072ba:	ab0c      	add	r3, sp, #48	; 0x30
 80072bc:	4625      	mov	r5, r4
 80072be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80072c2:	e716      	b.n	80070f2 <__kernel_rem_pio2+0x2a2>
 80072c4:	ab0c      	add	r3, sp, #48	; 0x30
 80072c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80072ca:	f7f9 f953 	bl	8000574 <__aeabi_i2d>
 80072ce:	4632      	mov	r2, r6
 80072d0:	463b      	mov	r3, r7
 80072d2:	f7f9 f9b9 	bl	8000648 <__aeabi_dmul>
 80072d6:	4642      	mov	r2, r8
 80072d8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80072dc:	464b      	mov	r3, r9
 80072de:	4630      	mov	r0, r6
 80072e0:	4639      	mov	r1, r7
 80072e2:	f7f9 f9b1 	bl	8000648 <__aeabi_dmul>
 80072e6:	3c01      	subs	r4, #1
 80072e8:	4606      	mov	r6, r0
 80072ea:	460f      	mov	r7, r1
 80072ec:	e713      	b.n	8007116 <__kernel_rem_pio2+0x2c6>
 80072ee:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80072f2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80072f6:	f7f9 f9a7 	bl	8000648 <__aeabi_dmul>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4648      	mov	r0, r9
 8007300:	4651      	mov	r1, sl
 8007302:	f7f8 ffeb 	bl	80002dc <__adddf3>
 8007306:	3701      	adds	r7, #1
 8007308:	4681      	mov	r9, r0
 800730a:	468a      	mov	sl, r1
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	429f      	cmp	r7, r3
 8007310:	dc02      	bgt.n	8007318 <__kernel_rem_pio2+0x4c8>
 8007312:	9b06      	ldr	r3, [sp, #24]
 8007314:	429f      	cmp	r7, r3
 8007316:	ddea      	ble.n	80072ee <__kernel_rem_pio2+0x49e>
 8007318:	9a06      	ldr	r2, [sp, #24]
 800731a:	ab48      	add	r3, sp, #288	; 0x120
 800731c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007320:	e9c6 9a00 	strd	r9, sl, [r6]
 8007324:	3c01      	subs	r4, #1
 8007326:	e6fa      	b.n	800711e <__kernel_rem_pio2+0x2ce>
 8007328:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800732a:	2b02      	cmp	r3, #2
 800732c:	dc0b      	bgt.n	8007346 <__kernel_rem_pio2+0x4f6>
 800732e:	2b00      	cmp	r3, #0
 8007330:	dc39      	bgt.n	80073a6 <__kernel_rem_pio2+0x556>
 8007332:	d05d      	beq.n	80073f0 <__kernel_rem_pio2+0x5a0>
 8007334:	9b02      	ldr	r3, [sp, #8]
 8007336:	f003 0007 	and.w	r0, r3, #7
 800733a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800733e:	ecbd 8b02 	vpop	{d8}
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007348:	2b03      	cmp	r3, #3
 800734a:	d1f3      	bne.n	8007334 <__kernel_rem_pio2+0x4e4>
 800734c:	9b05      	ldr	r3, [sp, #20]
 800734e:	9500      	str	r5, [sp, #0]
 8007350:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007354:	eb0d 0403 	add.w	r4, sp, r3
 8007358:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800735c:	46a2      	mov	sl, r4
 800735e:	9b00      	ldr	r3, [sp, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	f1aa 0a08 	sub.w	sl, sl, #8
 8007366:	dc69      	bgt.n	800743c <__kernel_rem_pio2+0x5ec>
 8007368:	46aa      	mov	sl, r5
 800736a:	f1ba 0f01 	cmp.w	sl, #1
 800736e:	f1a4 0408 	sub.w	r4, r4, #8
 8007372:	f300 8083 	bgt.w	800747c <__kernel_rem_pio2+0x62c>
 8007376:	9c05      	ldr	r4, [sp, #20]
 8007378:	ab48      	add	r3, sp, #288	; 0x120
 800737a:	441c      	add	r4, r3
 800737c:	2000      	movs	r0, #0
 800737e:	2100      	movs	r1, #0
 8007380:	2d01      	cmp	r5, #1
 8007382:	f300 809a 	bgt.w	80074ba <__kernel_rem_pio2+0x66a>
 8007386:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800738a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800738e:	f1bb 0f00 	cmp.w	fp, #0
 8007392:	f040 8098 	bne.w	80074c6 <__kernel_rem_pio2+0x676>
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	e9c3 7800 	strd	r7, r8, [r3]
 800739c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80073a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80073a4:	e7c6      	b.n	8007334 <__kernel_rem_pio2+0x4e4>
 80073a6:	9e05      	ldr	r6, [sp, #20]
 80073a8:	ab48      	add	r3, sp, #288	; 0x120
 80073aa:	441e      	add	r6, r3
 80073ac:	462c      	mov	r4, r5
 80073ae:	2000      	movs	r0, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	da33      	bge.n	800741e <__kernel_rem_pio2+0x5ce>
 80073b6:	f1bb 0f00 	cmp.w	fp, #0
 80073ba:	d036      	beq.n	800742a <__kernel_rem_pio2+0x5da>
 80073bc:	4602      	mov	r2, r0
 80073be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073c2:	9c04      	ldr	r4, [sp, #16]
 80073c4:	e9c4 2300 	strd	r2, r3, [r4]
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80073d0:	f7f8 ff82 	bl	80002d8 <__aeabi_dsub>
 80073d4:	ae4a      	add	r6, sp, #296	; 0x128
 80073d6:	2401      	movs	r4, #1
 80073d8:	42a5      	cmp	r5, r4
 80073da:	da29      	bge.n	8007430 <__kernel_rem_pio2+0x5e0>
 80073dc:	f1bb 0f00 	cmp.w	fp, #0
 80073e0:	d002      	beq.n	80073e8 <__kernel_rem_pio2+0x598>
 80073e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073e6:	4619      	mov	r1, r3
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80073ee:	e7a1      	b.n	8007334 <__kernel_rem_pio2+0x4e4>
 80073f0:	9c05      	ldr	r4, [sp, #20]
 80073f2:	ab48      	add	r3, sp, #288	; 0x120
 80073f4:	441c      	add	r4, r3
 80073f6:	2000      	movs	r0, #0
 80073f8:	2100      	movs	r1, #0
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	da09      	bge.n	8007412 <__kernel_rem_pio2+0x5c2>
 80073fe:	f1bb 0f00 	cmp.w	fp, #0
 8007402:	d002      	beq.n	800740a <__kernel_rem_pio2+0x5ba>
 8007404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007408:	4619      	mov	r1, r3
 800740a:	9b04      	ldr	r3, [sp, #16]
 800740c:	e9c3 0100 	strd	r0, r1, [r3]
 8007410:	e790      	b.n	8007334 <__kernel_rem_pio2+0x4e4>
 8007412:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007416:	f7f8 ff61 	bl	80002dc <__adddf3>
 800741a:	3d01      	subs	r5, #1
 800741c:	e7ed      	b.n	80073fa <__kernel_rem_pio2+0x5aa>
 800741e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007422:	f7f8 ff5b 	bl	80002dc <__adddf3>
 8007426:	3c01      	subs	r4, #1
 8007428:	e7c3      	b.n	80073b2 <__kernel_rem_pio2+0x562>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	e7c8      	b.n	80073c2 <__kernel_rem_pio2+0x572>
 8007430:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007434:	f7f8 ff52 	bl	80002dc <__adddf3>
 8007438:	3401      	adds	r4, #1
 800743a:	e7cd      	b.n	80073d8 <__kernel_rem_pio2+0x588>
 800743c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007440:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007444:	9b00      	ldr	r3, [sp, #0]
 8007446:	3b01      	subs	r3, #1
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	4632      	mov	r2, r6
 800744c:	463b      	mov	r3, r7
 800744e:	4640      	mov	r0, r8
 8007450:	4649      	mov	r1, r9
 8007452:	f7f8 ff43 	bl	80002dc <__adddf3>
 8007456:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f8 ff39 	bl	80002d8 <__aeabi_dsub>
 8007466:	4632      	mov	r2, r6
 8007468:	463b      	mov	r3, r7
 800746a:	f7f8 ff37 	bl	80002dc <__adddf3>
 800746e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007472:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007476:	ed8a 7b00 	vstr	d7, [sl]
 800747a:	e770      	b.n	800735e <__kernel_rem_pio2+0x50e>
 800747c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007480:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007484:	4640      	mov	r0, r8
 8007486:	4632      	mov	r2, r6
 8007488:	463b      	mov	r3, r7
 800748a:	4649      	mov	r1, r9
 800748c:	f7f8 ff26 	bl	80002dc <__adddf3>
 8007490:	e9cd 0100 	strd	r0, r1, [sp]
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	4640      	mov	r0, r8
 800749a:	4649      	mov	r1, r9
 800749c:	f7f8 ff1c 	bl	80002d8 <__aeabi_dsub>
 80074a0:	4632      	mov	r2, r6
 80074a2:	463b      	mov	r3, r7
 80074a4:	f7f8 ff1a 	bl	80002dc <__adddf3>
 80074a8:	ed9d 7b00 	vldr	d7, [sp]
 80074ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80074b0:	ed84 7b00 	vstr	d7, [r4]
 80074b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074b8:	e757      	b.n	800736a <__kernel_rem_pio2+0x51a>
 80074ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80074be:	f7f8 ff0d 	bl	80002dc <__adddf3>
 80074c2:	3d01      	subs	r5, #1
 80074c4:	e75c      	b.n	8007380 <__kernel_rem_pio2+0x530>
 80074c6:	9b04      	ldr	r3, [sp, #16]
 80074c8:	9a04      	ldr	r2, [sp, #16]
 80074ca:	601f      	str	r7, [r3, #0]
 80074cc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80074d0:	605c      	str	r4, [r3, #4]
 80074d2:	609d      	str	r5, [r3, #8]
 80074d4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80074d8:	60d3      	str	r3, [r2, #12]
 80074da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074de:	6110      	str	r0, [r2, #16]
 80074e0:	6153      	str	r3, [r2, #20]
 80074e2:	e727      	b.n	8007334 <__kernel_rem_pio2+0x4e4>
 80074e4:	41700000 	.word	0x41700000
 80074e8:	3e700000 	.word	0x3e700000
 80074ec:	00000000 	.word	0x00000000

080074f0 <scalbn>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	ec55 4b10 	vmov	r4, r5, d0
 80074f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80074fa:	4606      	mov	r6, r0
 80074fc:	462b      	mov	r3, r5
 80074fe:	b999      	cbnz	r1, 8007528 <scalbn+0x38>
 8007500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007504:	4323      	orrs	r3, r4
 8007506:	d03f      	beq.n	8007588 <scalbn+0x98>
 8007508:	4b35      	ldr	r3, [pc, #212]	; (80075e0 <scalbn+0xf0>)
 800750a:	4629      	mov	r1, r5
 800750c:	ee10 0a10 	vmov	r0, s0
 8007510:	2200      	movs	r2, #0
 8007512:	f7f9 f899 	bl	8000648 <__aeabi_dmul>
 8007516:	4b33      	ldr	r3, [pc, #204]	; (80075e4 <scalbn+0xf4>)
 8007518:	429e      	cmp	r6, r3
 800751a:	4604      	mov	r4, r0
 800751c:	460d      	mov	r5, r1
 800751e:	da10      	bge.n	8007542 <scalbn+0x52>
 8007520:	a327      	add	r3, pc, #156	; (adr r3, 80075c0 <scalbn+0xd0>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	e01f      	b.n	8007568 <scalbn+0x78>
 8007528:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800752c:	4291      	cmp	r1, r2
 800752e:	d10c      	bne.n	800754a <scalbn+0x5a>
 8007530:	ee10 2a10 	vmov	r2, s0
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f8 fed0 	bl	80002dc <__adddf3>
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	e022      	b.n	8007588 <scalbn+0x98>
 8007542:	460b      	mov	r3, r1
 8007544:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007548:	3936      	subs	r1, #54	; 0x36
 800754a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800754e:	4296      	cmp	r6, r2
 8007550:	dd0d      	ble.n	800756e <scalbn+0x7e>
 8007552:	2d00      	cmp	r5, #0
 8007554:	a11c      	add	r1, pc, #112	; (adr r1, 80075c8 <scalbn+0xd8>)
 8007556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755a:	da02      	bge.n	8007562 <scalbn+0x72>
 800755c:	a11c      	add	r1, pc, #112	; (adr r1, 80075d0 <scalbn+0xe0>)
 800755e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007562:	a319      	add	r3, pc, #100	; (adr r3, 80075c8 <scalbn+0xd8>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f9 f86e 	bl	8000648 <__aeabi_dmul>
 800756c:	e7e6      	b.n	800753c <scalbn+0x4c>
 800756e:	1872      	adds	r2, r6, r1
 8007570:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007574:	428a      	cmp	r2, r1
 8007576:	dcec      	bgt.n	8007552 <scalbn+0x62>
 8007578:	2a00      	cmp	r2, #0
 800757a:	dd08      	ble.n	800758e <scalbn+0x9e>
 800757c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007580:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007584:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007588:	ec45 4b10 	vmov	d0, r4, r5
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007592:	da08      	bge.n	80075a6 <scalbn+0xb6>
 8007594:	2d00      	cmp	r5, #0
 8007596:	a10a      	add	r1, pc, #40	; (adr r1, 80075c0 <scalbn+0xd0>)
 8007598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800759c:	dac0      	bge.n	8007520 <scalbn+0x30>
 800759e:	a10e      	add	r1, pc, #56	; (adr r1, 80075d8 <scalbn+0xe8>)
 80075a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a4:	e7bc      	b.n	8007520 <scalbn+0x30>
 80075a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075aa:	3236      	adds	r2, #54	; 0x36
 80075ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80075b4:	4620      	mov	r0, r4
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <scalbn+0xf8>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	e7d5      	b.n	8007568 <scalbn+0x78>
 80075bc:	f3af 8000 	nop.w
 80075c0:	c2f8f359 	.word	0xc2f8f359
 80075c4:	01a56e1f 	.word	0x01a56e1f
 80075c8:	8800759c 	.word	0x8800759c
 80075cc:	7e37e43c 	.word	0x7e37e43c
 80075d0:	8800759c 	.word	0x8800759c
 80075d4:	fe37e43c 	.word	0xfe37e43c
 80075d8:	c2f8f359 	.word	0xc2f8f359
 80075dc:	81a56e1f 	.word	0x81a56e1f
 80075e0:	43500000 	.word	0x43500000
 80075e4:	ffff3cb0 	.word	0xffff3cb0
 80075e8:	3c900000 	.word	0x3c900000
 80075ec:	00000000 	.word	0x00000000

080075f0 <floor>:
 80075f0:	ec51 0b10 	vmov	r0, r1, d0
 80075f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007600:	2e13      	cmp	r6, #19
 8007602:	ee10 5a10 	vmov	r5, s0
 8007606:	ee10 8a10 	vmov	r8, s0
 800760a:	460c      	mov	r4, r1
 800760c:	dc31      	bgt.n	8007672 <floor+0x82>
 800760e:	2e00      	cmp	r6, #0
 8007610:	da14      	bge.n	800763c <floor+0x4c>
 8007612:	a333      	add	r3, pc, #204	; (adr r3, 80076e0 <floor+0xf0>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	f7f8 fe60 	bl	80002dc <__adddf3>
 800761c:	2200      	movs	r2, #0
 800761e:	2300      	movs	r3, #0
 8007620:	f7f9 faa2 	bl	8000b68 <__aeabi_dcmpgt>
 8007624:	b138      	cbz	r0, 8007636 <floor+0x46>
 8007626:	2c00      	cmp	r4, #0
 8007628:	da53      	bge.n	80076d2 <floor+0xe2>
 800762a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800762e:	4325      	orrs	r5, r4
 8007630:	d052      	beq.n	80076d8 <floor+0xe8>
 8007632:	4c2d      	ldr	r4, [pc, #180]	; (80076e8 <floor+0xf8>)
 8007634:	2500      	movs	r5, #0
 8007636:	4621      	mov	r1, r4
 8007638:	4628      	mov	r0, r5
 800763a:	e024      	b.n	8007686 <floor+0x96>
 800763c:	4f2b      	ldr	r7, [pc, #172]	; (80076ec <floor+0xfc>)
 800763e:	4137      	asrs	r7, r6
 8007640:	ea01 0307 	and.w	r3, r1, r7
 8007644:	4303      	orrs	r3, r0
 8007646:	d01e      	beq.n	8007686 <floor+0x96>
 8007648:	a325      	add	r3, pc, #148	; (adr r3, 80076e0 <floor+0xf0>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f8 fe45 	bl	80002dc <__adddf3>
 8007652:	2200      	movs	r2, #0
 8007654:	2300      	movs	r3, #0
 8007656:	f7f9 fa87 	bl	8000b68 <__aeabi_dcmpgt>
 800765a:	2800      	cmp	r0, #0
 800765c:	d0eb      	beq.n	8007636 <floor+0x46>
 800765e:	2c00      	cmp	r4, #0
 8007660:	bfbe      	ittt	lt
 8007662:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007666:	4133      	asrlt	r3, r6
 8007668:	18e4      	addlt	r4, r4, r3
 800766a:	ea24 0407 	bic.w	r4, r4, r7
 800766e:	2500      	movs	r5, #0
 8007670:	e7e1      	b.n	8007636 <floor+0x46>
 8007672:	2e33      	cmp	r6, #51	; 0x33
 8007674:	dd0b      	ble.n	800768e <floor+0x9e>
 8007676:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800767a:	d104      	bne.n	8007686 <floor+0x96>
 800767c:	ee10 2a10 	vmov	r2, s0
 8007680:	460b      	mov	r3, r1
 8007682:	f7f8 fe2b 	bl	80002dc <__adddf3>
 8007686:	ec41 0b10 	vmov	d0, r0, r1
 800768a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800768e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007692:	f04f 37ff 	mov.w	r7, #4294967295
 8007696:	40df      	lsrs	r7, r3
 8007698:	4238      	tst	r0, r7
 800769a:	d0f4      	beq.n	8007686 <floor+0x96>
 800769c:	a310      	add	r3, pc, #64	; (adr r3, 80076e0 <floor+0xf0>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f7f8 fe1b 	bl	80002dc <__adddf3>
 80076a6:	2200      	movs	r2, #0
 80076a8:	2300      	movs	r3, #0
 80076aa:	f7f9 fa5d 	bl	8000b68 <__aeabi_dcmpgt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d0c1      	beq.n	8007636 <floor+0x46>
 80076b2:	2c00      	cmp	r4, #0
 80076b4:	da0a      	bge.n	80076cc <floor+0xdc>
 80076b6:	2e14      	cmp	r6, #20
 80076b8:	d101      	bne.n	80076be <floor+0xce>
 80076ba:	3401      	adds	r4, #1
 80076bc:	e006      	b.n	80076cc <floor+0xdc>
 80076be:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80076c2:	2301      	movs	r3, #1
 80076c4:	40b3      	lsls	r3, r6
 80076c6:	441d      	add	r5, r3
 80076c8:	45a8      	cmp	r8, r5
 80076ca:	d8f6      	bhi.n	80076ba <floor+0xca>
 80076cc:	ea25 0507 	bic.w	r5, r5, r7
 80076d0:	e7b1      	b.n	8007636 <floor+0x46>
 80076d2:	2500      	movs	r5, #0
 80076d4:	462c      	mov	r4, r5
 80076d6:	e7ae      	b.n	8007636 <floor+0x46>
 80076d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80076dc:	e7ab      	b.n	8007636 <floor+0x46>
 80076de:	bf00      	nop
 80076e0:	8800759c 	.word	0x8800759c
 80076e4:	7e37e43c 	.word	0x7e37e43c
 80076e8:	bff00000 	.word	0xbff00000
 80076ec:	000fffff 	.word	0x000fffff

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
