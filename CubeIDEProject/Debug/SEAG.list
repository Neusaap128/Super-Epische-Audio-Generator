
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f4  080070f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080070f4  080070f4  000170f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070fc  080070fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070fc  080070fc  000170fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000005c  08007160  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08007160  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001da74  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003783  00000000  00000000  0003db43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e8  00000000  00000000  000412c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000143b  00000000  00000000  00042cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e96  00000000  00000000  000440eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa9a  00000000  00000000  00065f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d5b  00000000  00000000  00085a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000745c  00000000  00000000  00168778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016fbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007098 	.word	0x08007098

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08007098 	.word	0x08007098

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]


	ResetCodec(hi2c1);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f83a 	bl	8000d72 <ResetCodec>

	HAL_Delay(25);
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 ff64 	bl	8001bcc <HAL_Delay>

	// ----- Power Management -----

	// R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b111101000);
 8000d04:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8000d08:	2119      	movs	r1, #25
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f83e 	bl	8000d8c <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b101010001);
 8000d10:	f240 1251 	movw	r2, #337	; 0x151
 8000d14:	211a      	movs	r1, #26
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f838 	bl	8000d8c <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000101000);
 8000d1c:	2228      	movs	r2, #40	; 0x28
 8000d1e:	212f      	movs	r1, #47	; 0x2f
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f833 	bl	8000d8c <WriteCodecRegister>


	// -----------

	//Connect Linput1 to inverting input of left input PGA, 0db gain, connecting Left input PGA to input booster
	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000d26:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f82d 	bl	8000d8c <WriteCodecRegister>

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000d32:	f240 1279 	movw	r2, #377	; 0x179
 8000d36:	2102      	movs	r1, #2
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f827 	bl	8000d8c <WriteCodecRegister>

	//un mute left channel
	WriteCodecRegister(hi2c1, 0x00, 0b100010111);
 8000d3e:	f240 1217 	movw	r2, #279	; 0x117
 8000d42:	2100      	movs	r1, #0
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f821 	bl	8000d8c <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 1 << 7);
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f81c 	bl	8000d8c <WriteCodecRegister>

	//Enable LB2LO
	WriteCodecRegister(hi2c1, 0x2D, 0b101010000);
 8000d54:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000d58:	212d      	movs	r1, #45	; 0x2d
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f816 	bl	8000d8c <WriteCodecRegister>


	// Disable master mode codec
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 8000d60:	220a      	movs	r2, #10
 8000d62:	2107      	movs	r1, #7
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f811 	bl	8000d8c <WriteCodecRegister>
	HAL_I2C_Master_Transmit(hi2c1, codecAddr, buf, 1 , HAL_MAX_DELAY);

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 8000d7a:	22ff      	movs	r2, #255	; 0xff
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f804 	bl	8000d8c <WriteCodecRegister>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint16_t reg, uint16_t pData){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	807b      	strh	r3, [r7, #2]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	803b      	strh	r3, [r7, #0]
	uint8_t lowByte  = (uint8_t)(pData & 0xFF);
 8000d9c:	883b      	ldrh	r3, [r7, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	73fb      	strb	r3, [r7, #15]
	uint8_t highByte = (uint8_t)(pData >> 8);
 8000da2:	883b      	ldrh	r3, [r7, #0]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &highByte, 1, HAL_MAX_DELAY);
 8000dac:	2334      	movs	r3, #52	; 0x34
 8000dae:	b299      	uxth	r1, r3
 8000db0:	887a      	ldrh	r2, [r7, #2]
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2301      	movs	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f107 030e 	add.w	r3, r7, #14
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f002 fe11 	bl	80039ec <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 8000dca:	2334      	movs	r3, #52	; 0x34
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd4:	9302      	str	r3, [sp, #8]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	9301      	str	r3, [sp, #4]
 8000dda:	f107 030f 	add.w	r3, r7, #15
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f002 fe02 	bl	80039ec <HAL_I2C_Mem_Write>

}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f006 f855 	bl	8006ea8 <malloc>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <InitDSP+0x2c>)
 8000e04:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000e06:	2340      	movs	r3, #64	; 0x40
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f006 f84c 	bl	8006ea8 <malloc>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <InitDSP+0x30>)
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000078 	.word	0x20000078
 8000e20:	2000007c 	.word	0x2000007c

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 fe5f 	bl	8001aea <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f82a 	bl	8000e84 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e30:	b662      	cpsie	i
}
 8000e32:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e34:	f000 fa84 	bl	8001340 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e38:	f000 fa50 	bl	80012dc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e3c:	f000 f9b2 	bl	80011a4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000e40:	f000 f86c 	bl	8000f1c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e44:	f000 f8e4 	bl	8001010 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000e48:	f000 f9f6 	bl	8001238 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000e4c:	f000 f91a 	bl	8001084 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000e50:	f000 f958 	bl	8001104 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000e54:	f000 f97e 	bl	8001154 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <main+0x54>)
 8000e5a:	f005 f867 	bl	8005f2c <HAL_TIM_Base_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  InitDSP();
 8000e5e:	f7ff ffc7 	bl	8000df0 <InitDSP>

  CodecInit(&hi2c1);
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <main+0x58>)
 8000e64:	f7ff ff44 	bl	8000cf0 <CodecInit>
      //float sinVal = (sin( (float)timerValue/3863*2*M_PI)+1)/2 *3.3;
      //uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      //DAC1->DHR12R1 = dacOutput;
	  HAL_I2S_Transmit(&hi2s2,  0x55, 2, HAL_MAX_DELAY);
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2155      	movs	r1, #85	; 0x55
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <main+0x5c>)
 8000e72:	f003 fab5 	bl	80043e0 <HAL_I2S_Transmit>
 8000e76:	e7f7      	b.n	8000e68 <main+0x44>
 8000e78:	20000320 	.word	0x20000320
 8000e7c:	200001c0 	.word	0x200001c0
 8000e80:	20000214 	.word	0x20000214

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	; 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	2238      	movs	r2, #56	; 0x38
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f006 f8bc 	bl	8007010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f003 fbc4 	bl	8004634 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb6:	2340      	movs	r3, #64	; 0x40
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ec6:	2355      	movs	r3, #85	; 0x55
 8000ec8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 fc5e 	bl	800479c <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ee6:	f000 faa9 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	230f      	movs	r3, #15
 8000eec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2104      	movs	r1, #4
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 ff5c 	bl	8004dc0 <HAL_RCC_ClockConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f0e:	f000 fa95 	bl	800143c <Error_Handler>
  }
}
 8000f12:	bf00      	nop
 8000f14:	3750      	adds	r7, #80	; 0x50
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2220      	movs	r2, #32
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 f86b 	bl	8007010 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f42:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f84:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_ADC1_Init+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_ADC1_Init+0xec>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa8:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_ADC1_Init+0xec>)
 8000faa:	f001 f807 	bl	8001fbc <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000fb4:	f000 fa42 	bl	800143c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_ADC1_Init+0xec>)
 8000fc4:	f001 fd94 	bl	8002af0 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fce:	f000 fa35 	bl	800143c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_ADC1_Init+0xf0>)
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fde:	237f      	movs	r3, #127	; 0x7f
 8000fe0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <MX_ADC1_Init+0xec>)
 8000ff0:	f001 f968 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ffa:	f000 fa1f 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3730      	adds	r7, #48	; 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000080 	.word	0x20000080
 800100c:	04300002 	.word	0x04300002

08001010 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08c      	sub	sp, #48	; 0x30
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2230      	movs	r2, #48	; 0x30
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fff7 	bl	8007010 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_DAC1_Init+0x6c>)
 8001024:	4a16      	ldr	r2, [pc, #88]	; (8001080 <MX_DAC1_Init+0x70>)
 8001026:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001028:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_DAC1_Init+0x6c>)
 800102a:	f001 ff14 	bl	8002e56 <HAL_DAC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001034:	f000 fa02 	bl	800143c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001038:	2302      	movs	r3, #2
 800103a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800103c:	2300      	movs	r3, #0
 800103e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001048:	231e      	movs	r3, #30
 800104a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001054:	2301      	movs	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_DAC1_Init+0x6c>)
 8001064:	f001 ff1a 	bl	8002e9c <HAL_DAC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800106e:	f000 f9e5 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000014c 	.word	0x2000014c
 8001080:	50000800 	.word	0x50000800

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_I2C1_Init+0x74>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <MX_I2C1_Init+0x78>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <MX_I2C1_Init+0x7c>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_I2C1_Init+0x74>)
 800109c:	2201      	movs	r2, #1
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010c0:	f002 fbf8 	bl	80038b4 <HAL_I2C_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ca:	f000 f9b7 	bl	800143c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ce:	2100      	movs	r1, #0
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010d2:	f003 f80d 	bl	80040f0 <HAL_I2CEx_ConfigAnalogFilter>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010dc:	f000 f9ae 	bl	800143c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_I2C1_Init+0x74>)
 80010e4:	f003 f84f 	bl	8004186 <HAL_I2CEx_ConfigDigitalFilter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010ee:	f000 f9a5 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001c0 	.word	0x200001c0
 80010fc:	40005400 	.word	0x40005400
 8001100:	30a0a7fb 	.word	0x30a0a7fb

08001104 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_I2S2_Init+0x48>)
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <MX_I2S2_Init+0x4c>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2S2_Init+0x48>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_I2S2_Init+0x48>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_I2S2_Init+0x48>)
 800111e:	2203      	movs	r2, #3
 8001120:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_I2S2_Init+0x48>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_I2S2_Init+0x48>)
 800112a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800112e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_I2S2_Init+0x48>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2S2_Init+0x48>)
 8001138:	f003 f872 	bl	8004220 <HAL_I2S_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8001142:	f000 f97b 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000214 	.word	0x20000214
 8001150:	40003800 	.word	0x40003800

08001154 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_I2S3_Init+0x48>)
 800115a:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <MX_I2S3_Init+0x4c>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_I2S3_Init+0x48>)
 8001160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001164:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <MX_I2S3_Init+0x48>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_I2S3_Init+0x48>)
 800116e:	2203      	movs	r2, #3
 8001170:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_I2S3_Init+0x48>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_I2S3_Init+0x48>)
 800117a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800117e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_I2S3_Init+0x48>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_I2S3_Init+0x48>)
 8001188:	f003 f84a 	bl	8004220 <HAL_I2S_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2S3_Init+0x42>
  {
    Error_Handler();
 8001192:	f000 f953 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000250 	.word	0x20000250
 80011a0:	40003c00 	.word	0x40003c00

080011a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <MX_LPUART1_UART_Init+0x90>)
 80011ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011e8:	f005 f820 	bl	800622c <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011f2:	f000 f923 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 80011fa:	f005 fd8b 	bl	8006d14 <HAL_UARTEx_SetTxFifoThreshold>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001204:	f000 f91a 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 800120c:	f005 fdc0 	bl	8006d90 <HAL_UARTEx_SetRxFifoThreshold>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001216:	f000 f911 	bl	800143c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_LPUART1_UART_Init+0x8c>)
 800121c:	f005 fd41 	bl	8006ca2 <HAL_UARTEx_DisableFifoMode>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001226:	f000 f909 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000028c 	.word	0x2000028c
 8001234:	40008000 	.word	0x40008000

08001238 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_TIM6_Init+0x98>)
 800124a:	4a22      	ldr	r2, [pc, #136]	; (80012d4 <MX_TIM6_Init+0x9c>)
 800124c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM6_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM6_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM6_Init+0x98>)
 800125c:	f640 7218 	movw	r2, #3864	; 0xf18
 8001260:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM6_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <MX_TIM6_Init+0x98>)
 800126a:	f004 fe07 	bl	8005e7c <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001274:	f000 f8e2 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001278:	2320      	movs	r3, #32
 800127a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <MX_TIM6_Init+0x98>)
 8001286:	f004 ff4f 	bl	8006128 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 f8d4 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_TIM6_Init+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f90f 	bl	80004bc <__aeabi_i2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	a109      	add	r1, pc, #36	; (adr r1, 80012c8 <MX_TIM6_Init+0x90>)
 80012a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012a8:	f7ff fa9c 	bl	80007e4 <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fb7e 	bl	80009b4 <__aeabi_d2uiz>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <MX_TIM6_Init+0x98>)
 80012bc:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	00000000 	.word	0x00000000
 80012cc:	41a443fd 	.word	0x41a443fd
 80012d0:	20000320 	.word	0x20000320
 80012d4:	40001000 	.word	0x40001000
 80012d8:	080070b0 	.word	0x080070b0

080012dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_DMA_Init+0x60>)
 80012e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e6:	4a15      	ldr	r2, [pc, #84]	; (800133c <MX_DMA_Init+0x60>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6493      	str	r3, [r2, #72]	; 0x48
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_DMA_Init+0x60>)
 80012f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_DMA_Init+0x60>)
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <MX_DMA_Init+0x60>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6493      	str	r3, [r2, #72]	; 0x48
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <MX_DMA_Init+0x60>)
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	200b      	movs	r0, #11
 8001318:	f001 fd69 	bl	8002dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800131c:	200b      	movs	r0, #11
 800131e:	f001 fd80 	bl	8002e22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	200c      	movs	r0, #12
 8001328:	f001 fd61 	bl	8002dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800132c:	200c      	movs	r0, #12
 800132e:	f001 fd78 	bl	8002e22 <HAL_NVIC_EnableIRQ>

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <MX_GPIO_Init+0xf0>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a35      	ldr	r2, [pc, #212]	; (8001430 <MX_GPIO_Init+0xf0>)
 800135c:	f043 0304 	orr.w	r3, r3, #4
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b33      	ldr	r3, [pc, #204]	; (8001430 <MX_GPIO_Init+0xf0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <MX_GPIO_Init+0xf0>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <MX_GPIO_Init+0xf0>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <MX_GPIO_Init+0xf0>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <MX_GPIO_Init+0xf0>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a29      	ldr	r2, [pc, #164]	; (8001430 <MX_GPIO_Init+0xf0>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b27      	ldr	r3, [pc, #156]	; (8001430 <MX_GPIO_Init+0xf0>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MX_GPIO_Init+0xf0>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <MX_GPIO_Init+0xf0>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <MX_GPIO_Init+0xf0>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f002 fa60 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2107      	movs	r1, #7
 80013c8:	481a      	ldr	r0, [pc, #104]	; (8001434 <MX_GPIO_Init+0xf4>)
 80013ca:	f002 fa5b 	bl	8003884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_GPIO_Init+0xf8>)
 80013e6:	f002 f8cb 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 80013ea:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f002 f8bb 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegClk_Pin ShiftRegData_Pin ShiftRegEn_Pin */
  GPIO_InitStruct.Pin = ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin;
 800140a:	2307      	movs	r3, #7
 800140c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_GPIO_Init+0xf4>)
 8001422:	f002 f8ad 	bl	8003580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	48000400 	.word	0x48000400
 8001438:	48000800 	.word	0x48000800

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	e7fe      	b.n	8001444 <Error_Handler+0x8>
	...

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_MspInit+0x44>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <HAL_MspInit+0x44>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6613      	str	r3, [r2, #96]	; 0x60
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_MspInit+0x44>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_MspInit+0x44>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_MspInit+0x44>)
 800146c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001470:	6593      	str	r3, [r2, #88]	; 0x58
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_MspInit+0x44>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800147e:	f003 f97d 	bl	800477c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09a      	sub	sp, #104	; 0x68
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	2244      	movs	r2, #68	; 0x44
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f005 fdad 	bl	8007010 <memset>
  if(hadc->Instance==ADC1)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014be:	d160      	bne.n	8001582 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014c6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fe91 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014dc:	f7ff ffae 	bl	800143c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <HAL_ADC_MspInit+0xfc>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	4a29      	ldr	r2, [pc, #164]	; (800158c <HAL_ADC_MspInit+0xfc>)
 80014e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_ADC_MspInit+0xfc>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_ADC_MspInit+0xfc>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	4a23      	ldr	r2, [pc, #140]	; (800158c <HAL_ADC_MspInit+0xfc>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_ADC_MspInit+0xfc>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 8001510:	2301      	movs	r3, #1
 8001512:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f002 f82b 	bl	8003580 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_ADC_MspInit+0x100>)
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_ADC_MspInit+0x104>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_ADC_MspInit+0x100>)
 8001532:	2205      	movs	r2, #5
 8001534:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_ADC_MspInit+0x100>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_ADC_MspInit+0x100>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_ADC_MspInit+0x100>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_ADC_MspInit+0x100>)
 800154a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_ADC_MspInit+0x100>)
 8001552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001556:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_ADC_MspInit+0x100>)
 800155a:	2220      	movs	r2, #32
 800155c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_ADC_MspInit+0x100>)
 8001560:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001564:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001566:	480a      	ldr	r0, [pc, #40]	; (8001590 <HAL_ADC_MspInit+0x100>)
 8001568:	f001 fe50 	bl	800320c <HAL_DMA_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001572:	f7ff ff63 	bl	800143c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a05      	ldr	r2, [pc, #20]	; (8001590 <HAL_ADC_MspInit+0x100>)
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_ADC_MspInit+0x100>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3768      	adds	r7, #104	; 0x68
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	200000ec 	.word	0x200000ec
 8001594:	40020008 	.word	0x40020008

08001598 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a2b      	ldr	r2, [pc, #172]	; (8001664 <HAL_DAC_MspInit+0xcc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d150      	bne.n	800165c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_DAC_MspInit+0xd0>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <HAL_DAC_MspInit+0xd0>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_DAC_MspInit+0xd0>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_DAC_MspInit+0xd0>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a24      	ldr	r2, [pc, #144]	; (8001668 <HAL_DAC_MspInit+0xd0>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_DAC_MspInit+0xd0>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ea:	2310      	movs	r3, #16
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ee:	2303      	movs	r3, #3
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f001 ffbe 	bl	8003580 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001606:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <HAL_DAC_MspInit+0xd8>)
 8001608:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_DAC_MspInit+0xd4>)
 800160c:	2206      	movs	r2, #6
 800160e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001612:	2210      	movs	r2, #16
 8001614:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_DAC_MspInit+0xd4>)
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001628:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_DAC_MspInit+0xd4>)
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001630:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001634:	2220      	movs	r2, #32
 8001636:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_DAC_MspInit+0xd4>)
 800163a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800163e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001640:	480a      	ldr	r0, [pc, #40]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001642:	f001 fde3 	bl	800320c <HAL_DMA_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 800164c:	f7ff fef6 	bl	800143c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_DAC_MspInit+0xd4>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	50000800 	.word	0x50000800
 8001668:	40021000 	.word	0x40021000
 800166c:	20000160 	.word	0x20000160
 8001670:	4002001c 	.word	0x4002001c

08001674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09a      	sub	sp, #104	; 0x68
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2244      	movs	r2, #68	; 0x44
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fcbb 	bl	8007010 <memset>
  if(hi2c->Instance==I2C1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_I2C_MspInit+0xa8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d136      	bne.n	8001712 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fda1 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016bc:	f7ff febe 	bl	800143c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_I2C_MspInit+0xac>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	4a16      	ldr	r2, [pc, #88]	; (8001720 <HAL_I2C_MspInit+0xac>)
 80016c6:	f043 0302 	orr.w	r3, r3, #2
 80016ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_I2C_MspInit+0xac>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016dc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016de:	2312      	movs	r3, #18
 80016e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ea:	2304      	movs	r3, #4
 80016ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016f2:	4619      	mov	r1, r3
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <HAL_I2C_MspInit+0xb0>)
 80016f6:	f001 ff43 	bl	8003580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_I2C_MspInit+0xac>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_I2C_MspInit+0xac>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_I2C_MspInit+0xac>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3768      	adds	r7, #104	; 0x68
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40005400 	.word	0x40005400
 8001720:	40021000 	.word	0x40021000
 8001724:	48000400 	.word	0x48000400

08001728 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b09e      	sub	sp, #120	; 0x78
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0320 	add.w	r3, r7, #32
 8001744:	2244      	movs	r2, #68	; 0x44
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f005 fc61 	bl	8007010 <memset>
  if(hi2s->Instance==SPI2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <HAL_I2S_MspInit+0x160>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d138      	bne.n	80017ca <HAL_I2S_MspInit+0xa2>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001758:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800175c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 800175e:	2300      	movs	r3, #0
 8001760:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	4618      	mov	r0, r3
 8001768:	f003 fd46 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 8001772:	f7ff fe63 	bl	800143c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001776:	4b45      	ldr	r3, [pc, #276]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a44      	ldr	r2, [pc, #272]	; (800188c <HAL_I2S_MspInit+0x164>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6593      	str	r3, [r2, #88]	; 0x58
 8001782:	4b42      	ldr	r3, [pc, #264]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a3e      	ldr	r2, [pc, #248]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_I2S_MspInit+0x164>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80017a6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80017aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017b8:	2305      	movs	r3, #5
 80017ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017c0:	4619      	mov	r1, r3
 80017c2:	4833      	ldr	r0, [pc, #204]	; (8001890 <HAL_I2S_MspInit+0x168>)
 80017c4:	f001 fedc 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017c8:	e05a      	b.n	8001880 <HAL_I2S_MspInit+0x158>
  else if(hi2s->Instance==SPI3)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a31      	ldr	r2, [pc, #196]	; (8001894 <HAL_I2S_MspInit+0x16c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d155      	bne.n	8001880 <HAL_I2S_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80017da:	2300      	movs	r3, #0
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fd08 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2S_MspInit+0xca>
      Error_Handler();
 80017ee:	f7ff fe25 	bl	800143c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_I2S_MspInit+0x164>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_I2S_MspInit+0x164>)
 80017f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_I2S_MspInit+0x164>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_I2S_MspInit+0x164>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800183a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800183e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800184c:	2306      	movs	r3, #6
 800184e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001854:	4619      	mov	r1, r3
 8001856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185a:	f001 fe91 	bl	8003580 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800185e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001862:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001870:	2306      	movs	r3, #6
 8001872:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001874:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001878:	4619      	mov	r1, r3
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <HAL_I2S_MspInit+0x170>)
 800187c:	f001 fe80 	bl	8003580 <HAL_GPIO_Init>
}
 8001880:	bf00      	nop
 8001882:	3778      	adds	r7, #120	; 0x78
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40003800 	.word	0x40003800
 800188c:	40021000 	.word	0x40021000
 8001890:	48000400 	.word	0x48000400
 8001894:	40003c00 	.word	0x40003c00
 8001898:	48000800 	.word	0x48000800

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b09a      	sub	sp, #104	; 0x68
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	2244      	movs	r2, #68	; 0x44
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 fba7 	bl	8007010 <memset>
  if(huart->Instance==LPUART1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1f      	ldr	r2, [pc, #124]	; (8001944 <HAL_UART_MspInit+0xa8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d136      	bne.n	800193a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018cc:	2320      	movs	r3, #32
 80018ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 fc8d 	bl	80051f8 <HAL_RCCEx_PeriphCLKConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018e4:	f7ff fdaa 	bl	800143c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_UART_MspInit+0xac>)
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	4a16      	ldr	r2, [pc, #88]	; (8001948 <HAL_UART_MspInit+0xac>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_UART_MspInit+0xac>)
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_UART_MspInit+0xac>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_UART_MspInit+0xac>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_UART_MspInit+0xac>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001918:	230c      	movs	r3, #12
 800191a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001928:	230c      	movs	r3, #12
 800192a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f001 fe23 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3768      	adds	r7, #104	; 0x68
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40008000 	.word	0x40008000
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_TIM_Base_MspInit+0x38>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10b      	bne.n	8001976 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_TIM_Base_MspInit+0x3c>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_TIM_Base_MspInit+0x3c>)
 8001964:	f043 0310 	orr.w	r3, r3, #16
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_TIM_Base_MspInit+0x3c>)
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f003 0310 	and.w	r3, r3, #16
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40001000 	.word	0x40001000
 8001988:	40021000 	.word	0x40021000

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 f8da 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <DMA1_Channel1_IRQHandler+0x10>)
 80019e6:	f001 fcb9 	bl	800335c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200000ec 	.word	0x200000ec

080019f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA1_Channel2_IRQHandler+0x10>)
 80019fa:	f001 fcaf 	bl	800335c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000160 	.word	0x20000160

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f005 fb02 	bl	8007040 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20008000 	.word	0x20008000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	2000036c 	.word	0x2000036c
 8001a70:	200004c0 	.word	0x200004c0

08001a74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a9a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff ffea 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa2:	490d      	ldr	r1, [pc, #52]	; (8001ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa4:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <LoopForever+0xe>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab8:	4c0a      	ldr	r4, [pc, #40]	; (8001ae4 <LoopForever+0x16>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f005 fac1 	bl	800704c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aca:	f7ff f9ab 	bl	8000e24 <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   r0, =_estack
 8001ad0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001adc:	08007104 	.word	0x08007104
  ldr r2, =_sbss
 8001ae0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ae4:	200004bc 	.word	0x200004bc

08001ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC1_2_IRQHandler>

08001aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f001 f96f 	bl	8002dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f80e 	bl	8001b1c <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
 8001b0a:	e001      	b.n	8001b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0c:	f7ff fc9c 	bl	8001448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b10:	79fb      	ldrb	r3, [r7, #7]

}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_InitTick+0x68>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d022      	beq.n	8001b76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_InitTick+0x6c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_InitTick+0x68>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 f97a 	bl	8002e3e <HAL_SYSTICK_Config>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10f      	bne.n	8001b70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d809      	bhi.n	8001b6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b56:	2200      	movs	r2, #0
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5e:	f001 f946 	bl	8002dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_InitTick+0x70>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	e004      	b.n	8001b7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_IncTick+0x1c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a03      	ldr	r2, [pc, #12]	; (8001bac <HAL_IncTick+0x1c>)
 8001ba0:	6013      	str	r3, [r2, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000370 	.word	0x20000370
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000370 	.word	0x20000370

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d004      	beq.n	8001bf0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_Delay+0x40>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf0:	bf00      	nop
 8001bf2:	f7ff ffdf 	bl	8001bb4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d8f7      	bhi.n	8001bf2 <HAL_Delay+0x26>
  {
  }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000008 	.word	0x20000008

08001c10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	609a      	str	r2, [r3, #8]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3360      	adds	r3, #96	; 0x60
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <LL_ADC_SetOffset+0x44>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	03fff000 	.word	0x03fff000

08001cc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3360      	adds	r3, #96	; 0x60
 8001cce:	461a      	mov	r2, r3
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3360      	adds	r3, #96	; 0x60
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b087      	sub	sp, #28
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d4c:	bf00      	nop
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3360      	adds	r3, #96	; 0x60
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	615a      	str	r2, [r3, #20]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3330      	adds	r3, #48	; 0x30
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	4413      	add	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	211f      	movs	r1, #31
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	f003 011f 	and.w	r1, r3, #31
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 031f 	and.w	r3, r3, #31
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3314      	adds	r3, #20
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	0e5b      	lsrs	r3, r3, #25
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	0d1b      	lsrs	r3, r3, #20
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2107      	movs	r1, #7
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	0d1b      	lsrs	r3, r3, #20
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	431a      	orrs	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e56:	bf00      	nop
 8001e58:	371c      	adds	r7, #28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0318 	and.w	r3, r3, #24
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	0007ffff 	.word	0x0007ffff

08001eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6093      	str	r3, [r2, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <LL_ADC_IsEnabled+0x18>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <LL_ADC_IsEnabled+0x1a>
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d101      	bne.n	8001f86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d101      	bne.n	8001fac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e167      	b.n	80022a6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff fa53 	bl	8001490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff67 	bl	8001ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff4d 	bl	8001eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff82 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff66 	bl	8001ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800202c:	4ba0      	ldr	r3, [pc, #640]	; (80022b0 <HAL_ADC_Init+0x2f4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	4aa0      	ldr	r2, [pc, #640]	; (80022b4 <HAL_ADC_Init+0x2f8>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002040:	e002      	b.n	8002048 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b01      	subs	r3, #1
 8002046:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f9      	bne.n	8002042 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff64 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	f043 0210 	orr.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff75 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 8002084:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 8100 	bne.w	8002294 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 80fc 	bne.w	8002294 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020a4:	f043 0202 	orr.w	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff49 	bl	8001f48 <LL_ADC_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d111      	bne.n	80020e0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020c0:	f7ff ff42 	bl	8001f48 <LL_ADC_IsEnabled>
 80020c4:	4604      	mov	r4, r0
 80020c6:	487c      	ldr	r0, [pc, #496]	; (80022b8 <HAL_ADC_Init+0x2fc>)
 80020c8:	f7ff ff3e 	bl	8001f48 <LL_ADC_IsEnabled>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4323      	orrs	r3, r4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4619      	mov	r1, r3
 80020da:	4878      	ldr	r0, [pc, #480]	; (80022bc <HAL_ADC_Init+0x300>)
 80020dc:	f7ff fd98 	bl	8001c10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7f5b      	ldrb	r3, [r3, #29]
 80020e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800210a:	2b01      	cmp	r3, #1
 800210c:	d106      	bne.n	800211c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	045b      	lsls	r3, r3, #17
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	4b60      	ldr	r3, [pc, #384]	; (80022c0 <HAL_ADC_Init+0x304>)
 8002140:	4013      	ands	r3, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	69b9      	ldr	r1, [r7, #24]
 8002148:	430b      	orrs	r3, r1
 800214a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff14 	bl	8001f94 <LL_ADC_INJ_IsConversionOngoing>
 800216c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d16d      	bne.n	8002250 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d16a      	bne.n	8002250 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800217e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002186:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002196:	f023 0302 	bic.w	r3, r3, #2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	69b9      	ldr	r1, [r7, #24]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d017      	beq.n	80021dc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6911      	ldr	r1, [r2, #16]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80021da:	e013      	b.n	8002204 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80021fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002200:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800220a:	2b01      	cmp	r3, #1
 800220c:	d118      	bne.n	8002240 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002230:	430a      	orrs	r2, r1
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	e007      	b.n	8002250 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d10c      	bne.n	8002272 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f023 010f 	bic.w	r1, r3, #15
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
 8002270:	e007      	b.n	8002282 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 020f 	bic.w	r2, r2, #15
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c
 8002292:	e007      	b.n	80022a4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	f043 0210 	orr.w	r2, r3, #16
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000
 80022b4:	053e2d63 	.word	0x053e2d63
 80022b8:	50000100 	.word	0x50000100
 80022bc:	50000300 	.word	0x50000300
 80022c0:	fff04007 	.word	0xfff04007

080022c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0b6      	sub	sp, #216	; 0xd8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x22>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e3c8      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x7b4>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fe3b 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 83ad 	bne.w	8002a5a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	f7ff fd51 	bl	8001db4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fe29 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 800231c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fe35 	bl	8001f94 <LL_ADC_INJ_IsConversionOngoing>
 800232a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 81d9 	bne.w	80026ea <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 81d4 	bne.w	80026ea <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800234a:	d10f      	bne.n	800236c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2200      	movs	r2, #0
 8002356:	4619      	mov	r1, r3
 8002358:	f7ff fd58 	bl	8001e0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fd12 	bl	8001d8e <LL_ADC_SetSamplingTimeCommonConfig>
 800236a:	e00e      	b.n	800238a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff fd47 	bl	8001e0c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fd02 	bl	8001d8e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	08db      	lsrs	r3, r3, #3
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d022      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6919      	ldr	r1, [r3, #16]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023bc:	f7ff fc5c 	bl	8001c78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6919      	ldr	r1, [r3, #16]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff fca8 	bl	8001d22 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x124>
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	e000      	b.n	80023ea <HAL_ADC_ConfigChannel+0x126>
 80023e8:	2300      	movs	r3, #0
 80023ea:	461a      	mov	r2, r3
 80023ec:	f7ff fcb4 	bl	8001d58 <LL_ADC_SetOffsetSaturation>
 80023f0:	e17b      	b.n	80026ea <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fc61 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10a      	bne.n	800241e <HAL_ADC_ConfigChannel+0x15a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fc56 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	0e9b      	lsrs	r3, r3, #26
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	e01e      	b.n	800245c <HAL_ADC_ConfigChannel+0x198>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fc4b 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800243c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002440:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e004      	b.n	800245a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1b0>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0e9b      	lsrs	r3, r3, #26
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	e018      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1e2>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800248c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002490:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e004      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d106      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fc1a 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fbfe 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x220>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2101      	movs	r1, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fbf3 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	f003 021f 	and.w	r2, r3, #31
 80024e2:	e01e      	b.n	8002522 <HAL_ADC_ConfigChannel+0x25e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fbe8 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002506:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800250a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_ADC_ConfigChannel+0x276>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0e9b      	lsrs	r3, r3, #26
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	e018      	b.n	800256c <HAL_ADC_ConfigChannel+0x2a8>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800254e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800255e:	2320      	movs	r3, #32
 8002560:	e004      	b.n	800256c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002562:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fbb7 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2102      	movs	r1, #2
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb9b 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x2e6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2102      	movs	r1, #2
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fb90 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80025a0:	4603      	mov	r3, r0
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	e01e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x324>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2102      	movs	r1, #2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fb85 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80025dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x33c>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	e016      	b.n	800262e <HAL_ADC_ConfigChannel+0x36a>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002612:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002618:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002620:	2320      	movs	r3, #32
 8002622:	e004      	b.n	800262e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800262e:	429a      	cmp	r2, r3
 8002630:	d106      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	2102      	movs	r1, #2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fb56 	bl	8001cec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2103      	movs	r1, #3
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fb3a 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <HAL_ADC_ConfigChannel+0x3a8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2103      	movs	r1, #3
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fb2f 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 021f 	and.w	r2, r3, #31
 800266a:	e017      	b.n	800269c <HAL_ADC_ConfigChannel+0x3d8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2103      	movs	r1, #3
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fb24 	bl	8001cc0 <LL_ADC_GetOffsetChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002686:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x3f0>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0e9b      	lsrs	r3, r3, #26
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	e011      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x414>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e003      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80026d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2103      	movs	r1, #3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fb01 	bl	8001cec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fc2a 	bl	8001f48 <LL_ADC_IsEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8140 	bne.w	800297c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	461a      	mov	r2, r3
 800270a:	f7ff fbab 	bl	8001e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a8f      	ldr	r2, [pc, #572]	; (8002950 <HAL_ADC_ConfigChannel+0x68c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	f040 8131 	bne.w	800297c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x47e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	3301      	adds	r3, #1
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2b09      	cmp	r3, #9
 8002738:	bf94      	ite	ls
 800273a:	2301      	movls	r3, #1
 800273c:	2300      	movhi	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	e019      	b.n	8002776 <HAL_ADC_ConfigChannel+0x4b2>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002752:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e003      	b.n	8002766 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800275e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2b09      	cmp	r3, #9
 800276e:	bf94      	ite	ls
 8002770:	2301      	movls	r3, #1
 8002772:	2300      	movhi	r3, #0
 8002774:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002776:	2b00      	cmp	r3, #0
 8002778:	d079      	beq.n	800286e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x4d2>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0e9b      	lsrs	r3, r3, #26
 800278c:	3301      	adds	r3, #1
 800278e:	069b      	lsls	r3, r3, #26
 8002790:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002794:	e015      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x4fe>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	069b      	lsls	r3, r3, #26
 80027be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x51e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	3301      	adds	r3, #1
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	e017      	b.n	8002812 <HAL_ADC_ConfigChannel+0x54e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80027f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80027f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e003      	b.n	8002806 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80027fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2101      	movs	r1, #1
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	ea42 0103 	orr.w	r1, r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10a      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x574>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	0e9b      	lsrs	r3, r3, #26
 8002828:	3301      	adds	r3, #1
 800282a:	f003 021f 	and.w	r2, r3, #31
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	051b      	lsls	r3, r3, #20
 8002836:	e018      	b.n	800286a <HAL_ADC_ConfigChannel+0x5a6>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3301      	adds	r3, #1
 800285e:	f003 021f 	and.w	r2, r3, #31
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800286a:	430b      	orrs	r3, r1
 800286c:	e081      	b.n	8002972 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <HAL_ADC_ConfigChannel+0x5c6>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0e9b      	lsrs	r3, r3, #26
 8002880:	3301      	adds	r3, #1
 8002882:	069b      	lsls	r3, r3, #26
 8002884:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002888:	e015      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x5f2>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80028a2:	2320      	movs	r3, #32
 80028a4:	e003      	b.n	80028ae <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	069b      	lsls	r3, r3, #26
 80028b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x612>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	e017      	b.n	8002906 <HAL_ADC_ConfigChannel+0x642>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	61fb      	str	r3, [r7, #28]
  return result;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	ea42 0103 	orr.w	r1, r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x66e>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	3301      	adds	r3, #1
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	3b1e      	subs	r3, #30
 800292a:	051b      	lsls	r3, r3, #20
 800292c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002930:	e01e      	b.n	8002970 <HAL_ADC_ConfigChannel+0x6ac>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	613b      	str	r3, [r7, #16]
  return result;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e006      	b.n	800295c <HAL_ADC_ConfigChannel+0x698>
 800294e:	bf00      	nop
 8002950:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 021f 	and.w	r2, r3, #31
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	3b1e      	subs	r3, #30
 800296a:	051b      	lsls	r3, r3, #20
 800296c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002970:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002976:	4619      	mov	r1, r3
 8002978:	f7ff fa48 	bl	8001e0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_ADC_ConfigChannel+0x7bc>)
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d071      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002988:	483e      	ldr	r0, [pc, #248]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 800298a:	f7ff f967 	bl	8001c5c <LL_ADC_GetCommonPathInternalCh>
 800298e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_ADC_ConfigChannel+0x7c4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x6e2>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <HAL_ADC_ConfigChannel+0x7c8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d127      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d121      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ba:	d157      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c4:	4619      	mov	r1, r3
 80029c6:	482f      	ldr	r0, [pc, #188]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 80029c8:	f7ff f935 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_ADC_ConfigChannel+0x7cc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <HAL_ADC_ConfigChannel+0x7d0>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	099b      	lsrs	r3, r3, #6
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029e6:	e002      	b.n	80029ee <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f4:	e03a      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_ADC_ConfigChannel+0x7d4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d113      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d02a      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4818      	ldr	r0, [pc, #96]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a22:	f7ff f908 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a26:	e021      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d11c      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d011      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a50:	4619      	mov	r1, r3
 8002a52:	480c      	ldr	r0, [pc, #48]	; (8002a84 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a54:	f7ff f8ef 	bl	8001c36 <LL_ADC_SetCommonPathInternalCh>
 8002a58:	e008      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a74:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	37d8      	adds	r7, #216	; 0xd8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	80080000 	.word	0x80080000
 8002a84:	50000300 	.word	0x50000300
 8002a88:	c3210000 	.word	0xc3210000
 8002a8c:	90c00010 	.word	0x90c00010
 8002a90:	20000000 	.word	0x20000000
 8002a94:	053e2d63 	.word	0x053e2d63
 8002a98:	c7520000 	.word	0xc7520000
 8002a9c:	50000100 	.word	0x50000100
 8002aa0:	cb840000 	.word	0xcb840000

08002aa4 <LL_ADC_IsEnabled>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_IsEnabled+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_IsEnabled+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_REG_IsConversionOngoing>:
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d101      	bne.n	8002ae2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b0a1      	sub	sp, #132	; 0x84
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e08b      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b16:	2300      	movs	r3, #0
 8002b18:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b26:	d102      	bne.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b28:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	e001      	b.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e06a      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ffb9 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002b58:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ffb3 	bl	8002aca <LL_ADC_REG_IsConversionOngoing>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d14c      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d149      	bne.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b72:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d028      	beq.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b8e:	035b      	lsls	r3, r3, #13
 8002b90:	430b      	orrs	r3, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b96:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b9c:	f7ff ff82 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	4823      	ldr	r0, [pc, #140]	; (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ba4:	f7ff ff7e 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4323      	orrs	r3, r4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d133      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bb8:	f023 030f 	bic.w	r3, r3, #15
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	6811      	ldr	r1, [r2, #0]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bca:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bcc:	e024      	b.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bda:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bde:	f7ff ff61 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002be2:	4604      	mov	r4, r0
 8002be4:	4812      	ldr	r0, [pc, #72]	; (8002c30 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002be6:	f7ff ff5d 	bl	8002aa4 <LL_ADC_IsEnabled>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4323      	orrs	r3, r4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d112      	bne.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bfa:	f023 030f 	bic.w	r3, r3, #15
 8002bfe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c02:	e009      	b.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c16:	e000      	b.n	8002c1a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3784      	adds	r7, #132	; 0x84
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd90      	pop	{r4, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	50000100 	.word	0x50000100
 8002c34:	50000300 	.word	0x50000300

08002c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6a:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	60d3      	str	r3, [r2, #12]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <__NVIC_GetPriorityGrouping+0x18>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0307 	and.w	r3, r3, #7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db0b      	blt.n	8002cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4907      	ldr	r1, [pc, #28]	; (8002cd4 <__NVIC_EnableIRQ+0x38>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da4:	d301      	bcc.n	8002daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00f      	b.n	8002dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002daa:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <SysTick_Config+0x40>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db2:	210f      	movs	r1, #15
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	f7ff ff8e 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <SysTick_Config+0x40>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <SysTick_Config+0x40>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	e000e010 	.word	0xe000e010

08002dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff29 	bl	8002c38 <__NVIC_SetPriorityGrouping>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff40 	bl	8002c80 <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff90 	bl	8002d2c <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff5f 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff33 	bl	8002c9c <__NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ffa4 	bl	8002d94 <SysTick_Config>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e014      	b.n	8002e92 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	791b      	ldrb	r3, [r3, #4]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7fe fb8d 	bl	8001598 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_DAC_ConfigChannel+0x1c>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e19e      	b.n	80031fa <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	795b      	ldrb	r3, [r3, #5]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_DAC_ConfigChannel+0x2c>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e198      	b.n	80031fa <HAL_DAC_ConfigChannel+0x35e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d17a      	bne.n	8002fd2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002edc:	f7fe fe6a 	bl	8001bb4 <HAL_GetTick>
 8002ee0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d13d      	bne.n	8002f64 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ee8:	e018      	b.n	8002f1c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eea:	f7fe fe63 	bl	8001bb4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d911      	bls.n	8002f1c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f043 0208 	orr.w	r2, r3, #8
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2203      	movs	r2, #3
 8002f16:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e16e      	b.n	80031fa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1df      	bne.n	8002eea <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40
 8002f34:	e020      	b.n	8002f78 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f36:	f7fe fe3d 	bl	8001bb4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d90f      	bls.n	8002f64 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da0a      	bge.n	8002f64 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f043 0208 	orr.w	r2, r3, #8
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e14a      	b.n	80031fa <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dbe3      	blt.n	8002f36 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	ea02 0103 	and.w	r1, r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	409a      	lsls	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	21ff      	movs	r1, #255	; 0xff
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	ea02 0103 	and.w	r1, r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d11d      	bne.n	8003016 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	4313      	orrs	r3, r2
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2207      	movs	r2, #7
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	4013      	ands	r3, r2
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	e00f      	b.n	8003060 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d102      	bne.n	800304e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003048:	2301      	movs	r3, #1
 800304a:	623b      	str	r3, [r7, #32]
 800304c:	e008      	b.n	8003060 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003056:	2301      	movs	r3, #1
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	e001      	b.n	8003060 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	4013      	ands	r3, r2
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	791b      	ldrb	r3, [r3, #4]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_DAC_ConfigChannel+0x1f8>
 800308e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003092:	e000      	b.n	8003096 <HAL_DAC_ConfigChannel+0x1fa>
 8003094:	2300      	movs	r3, #0
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	4013      	ands	r3, r2
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	795b      	ldrb	r3, [r3, #5]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d102      	bne.n	80030c0 <HAL_DAC_ConfigChannel+0x224>
 80030ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030be:	e000      	b.n	80030c2 <HAL_DAC_ConfigChannel+0x226>
 80030c0:	2300      	movs	r3, #0
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d114      	bne.n	8003102 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80030d8:	f002 f810 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 80030dc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4a48      	ldr	r2, [pc, #288]	; (8003204 <HAL_DAC_ConfigChannel+0x368>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d904      	bls.n	80030f0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	e00f      	b.n	8003110 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4a45      	ldr	r2, [pc, #276]	; (8003208 <HAL_DAC_ConfigChannel+0x36c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d90a      	bls.n	800310e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	e006      	b.n	8003110 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	4313      	orrs	r3, r2
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	e000      	b.n	8003110 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800310e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	4313      	orrs	r3, r2
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	400a      	ands	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	f640 72fe 	movw	r2, #4094	; 0xffe
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4013      	ands	r3, r2
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317a:	4313      	orrs	r3, r2
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	22c0      	movs	r2, #192	; 0xc0
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43da      	mvns	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	400a      	ands	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	f640 710f 	movw	r1, #3855	; 0xf0f
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	ea02 0103 	and.w	r1, r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80031f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3728      	adds	r7, #40	; 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	09896800 	.word	0x09896800
 8003208:	04c4b400 	.word	0x04c4b400

0800320c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e08d      	b.n	800333a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_DMA_Init+0x138>)
 8003226:	429a      	cmp	r2, r3
 8003228:	d80f      	bhi.n	800324a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	4b45      	ldr	r3, [pc, #276]	; (8003348 <HAL_DMA_Init+0x13c>)
 8003232:	4413      	add	r3, r2
 8003234:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_DMA_Init+0x140>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	009a      	lsls	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a42      	ldr	r2, [pc, #264]	; (8003350 <HAL_DMA_Init+0x144>)
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
 8003248:	e00e      	b.n	8003268 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_DMA_Init+0x148>)
 8003252:	4413      	add	r3, r2
 8003254:	4a3d      	ldr	r2, [pc, #244]	; (800334c <HAL_DMA_Init+0x140>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	009a      	lsls	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a3c      	ldr	r2, [pc, #240]	; (8003358 <HAL_DMA_Init+0x14c>)
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8fe 	bl	80034bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c8:	d102      	bne.n	80032d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_DMA_Init+0x104>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d80c      	bhi.n	8003310 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f91e 	bl	8003538 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	e008      	b.n	8003322 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40020407 	.word	0x40020407
 8003348:	bffdfff8 	.word	0xbffdfff8
 800334c:	cccccccd 	.word	0xcccccccd
 8003350:	40020000 	.word	0x40020000
 8003354:	bffdfbf8 	.word	0xbffdfbf8
 8003358:	40020400 	.word	0x40020400

0800335c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d026      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x7a>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b00      	cmp	r3, #0
 8003390:	d021      	beq.n	80033d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d107      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0204 	bic.w	r2, r2, #4
 80033ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2104      	movs	r1, #4
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d071      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033d4:	e06c      	b.n	80034b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2202      	movs	r2, #2
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02e      	beq.n	8003448 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d029      	beq.n	8003448 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 020a 	bic.w	r2, r2, #10
 8003410:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f003 021f 	and.w	r2, r3, #31
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2102      	movs	r1, #2
 8003428:	fa01 f202 	lsl.w	r2, r1, r2
 800342c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d038      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003446:	e033      	b.n	80034b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2208      	movs	r2, #8
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02a      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d025      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 020e 	bic.w	r2, r2, #14
 8003474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f003 021f 	and.w	r2, r3, #31
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2101      	movs	r1, #1
 8003484:	fa01 f202 	lsl.w	r2, r1, r2
 8003488:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
}
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b16      	ldr	r3, [pc, #88]	; (8003524 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d802      	bhi.n	80034d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	e001      	b.n	80034da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3b08      	subs	r3, #8
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	009a      	lsls	r2, r3, #2
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003506:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2201      	movs	r2, #1
 8003510:	409a      	lsls	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40020407 	.word	0x40020407
 8003528:	40020800 	.word	0x40020800
 800352c:	40020820 	.word	0x40020820
 8003530:	cccccccd 	.word	0xcccccccd
 8003534:	40020880 	.word	0x40020880

08003538 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a08      	ldr	r2, [pc, #32]	; (800357c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800355a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	3b01      	subs	r3, #1
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	2201      	movs	r2, #1
 8003566:	409a      	lsls	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	1000823f 	.word	0x1000823f
 800357c:	40020940 	.word	0x40020940

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800358e:	e15a      	b.n	8003846 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	4013      	ands	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 814c 	beq.w	8003840 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d005      	beq.n	80035c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d130      	bne.n	8003622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035f6:	2201      	movs	r2, #1
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f003 0201 	and.w	r2, r3, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b03      	cmp	r3, #3
 800362c:	d017      	beq.n	800365e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	2203      	movs	r2, #3
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d123      	bne.n	80036b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	220f      	movs	r2, #15
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	08da      	lsrs	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3208      	adds	r2, #8
 80036ac:	6939      	ldr	r1, [r7, #16]
 80036ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0203 	and.w	r2, r3, #3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80a6 	beq.w	8003840 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f4:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <HAL_GPIO_Init+0x2e4>)
 80036f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f8:	4a5a      	ldr	r2, [pc, #360]	; (8003864 <HAL_GPIO_Init+0x2e4>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6613      	str	r3, [r2, #96]	; 0x60
 8003700:	4b58      	ldr	r3, [pc, #352]	; (8003864 <HAL_GPIO_Init+0x2e4>)
 8003702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800370c:	4a56      	ldr	r2, [pc, #344]	; (8003868 <HAL_GPIO_Init+0x2e8>)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	089b      	lsrs	r3, r3, #2
 8003712:	3302      	adds	r3, #2
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	220f      	movs	r2, #15
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003736:	d01f      	beq.n	8003778 <HAL_GPIO_Init+0x1f8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a4c      	ldr	r2, [pc, #304]	; (800386c <HAL_GPIO_Init+0x2ec>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d019      	beq.n	8003774 <HAL_GPIO_Init+0x1f4>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a4b      	ldr	r2, [pc, #300]	; (8003870 <HAL_GPIO_Init+0x2f0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d013      	beq.n	8003770 <HAL_GPIO_Init+0x1f0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a4a      	ldr	r2, [pc, #296]	; (8003874 <HAL_GPIO_Init+0x2f4>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00d      	beq.n	800376c <HAL_GPIO_Init+0x1ec>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a49      	ldr	r2, [pc, #292]	; (8003878 <HAL_GPIO_Init+0x2f8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <HAL_GPIO_Init+0x1e8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a48      	ldr	r2, [pc, #288]	; (800387c <HAL_GPIO_Init+0x2fc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_GPIO_Init+0x1e4>
 8003760:	2305      	movs	r3, #5
 8003762:	e00a      	b.n	800377a <HAL_GPIO_Init+0x1fa>
 8003764:	2306      	movs	r3, #6
 8003766:	e008      	b.n	800377a <HAL_GPIO_Init+0x1fa>
 8003768:	2304      	movs	r3, #4
 800376a:	e006      	b.n	800377a <HAL_GPIO_Init+0x1fa>
 800376c:	2303      	movs	r3, #3
 800376e:	e004      	b.n	800377a <HAL_GPIO_Init+0x1fa>
 8003770:	2302      	movs	r3, #2
 8003772:	e002      	b.n	800377a <HAL_GPIO_Init+0x1fa>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_GPIO_Init+0x1fa>
 8003778:	2300      	movs	r3, #0
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	f002 0203 	and.w	r2, r2, #3
 8003780:	0092      	lsls	r2, r2, #2
 8003782:	4093      	lsls	r3, r2
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378a:	4937      	ldr	r1, [pc, #220]	; (8003868 <HAL_GPIO_Init+0x2e8>)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003798:	4b39      	ldr	r3, [pc, #228]	; (8003880 <HAL_GPIO_Init+0x300>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037bc:	4a30      	ldr	r2, [pc, #192]	; (8003880 <HAL_GPIO_Init+0x300>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037c2:	4b2f      	ldr	r3, [pc, #188]	; (8003880 <HAL_GPIO_Init+0x300>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037e6:	4a26      	ldr	r2, [pc, #152]	; (8003880 <HAL_GPIO_Init+0x300>)
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_GPIO_Init+0x300>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4013      	ands	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003810:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_GPIO_Init+0x300>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <HAL_GPIO_Init+0x300>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800383a:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HAL_GPIO_Init+0x300>)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	f47f ae9d 	bne.w	8003590 <HAL_GPIO_Init+0x10>
  }
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40021000 	.word	0x40021000
 8003868:	40010000 	.word	0x40010000
 800386c:	48000400 	.word	0x48000400
 8003870:	48000800 	.word	0x48000800
 8003874:	48000c00 	.word	0x48000c00
 8003878:	48001000 	.word	0x48001000
 800387c:	48001400 	.word	0x48001400
 8003880:	40010400 	.word	0x40010400

08003884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	807b      	strh	r3, [r7, #2]
 8003890:	4613      	mov	r3, r2
 8003892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e08d      	b.n	80039e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd feca 	bl	8001674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	; 0x24
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003904:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003914:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e006      	b.n	800393c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800393a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d108      	bne.n	8003956 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	e007      	b.n	8003966 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003964:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003978:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003988:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69d9      	ldr	r1, [r3, #28]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1a      	ldr	r2, [r3, #32]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	4608      	mov	r0, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	461a      	mov	r2, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	817b      	strh	r3, [r7, #10]
 80039fe:	460b      	mov	r3, r1
 8003a00:	813b      	strh	r3, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f040 80f9 	bne.w	8003c06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_I2C_Mem_Write+0x34>
 8003a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d105      	bne.n	8003a2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0ed      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Mem_Write+0x4e>
 8003a36:	2302      	movs	r3, #2
 8003a38:	e0e6      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a42:	f7fe f8b7 	bl	8001bb4 <HAL_GetTick>
 8003a46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2319      	movs	r3, #25
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f955 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0d1      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2221      	movs	r2, #33	; 0x21
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a3a      	ldr	r2, [r7, #32]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a8c:	88f8      	ldrh	r0, [r7, #6]
 8003a8e:	893a      	ldrh	r2, [r7, #8]
 8003a90:	8979      	ldrh	r1, [r7, #10]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f8b9 	bl	8003c14 <I2C_RequestMemoryWrite>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0a9      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2bff      	cmp	r3, #255	; 0xff
 8003abc:	d90e      	bls.n	8003adc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fad9 	bl	800408c <I2C_TransferConfig>
 8003ada:	e00f      	b.n	8003afc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	8979      	ldrh	r1, [r7, #10]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fac8 	bl	800408c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f958 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e07b      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d034      	beq.n	8003bb4 <HAL_I2C_Mem_Write+0x1c8>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d130      	bne.n	8003bb4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f8d1 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e04d      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2bff      	cmp	r3, #255	; 0xff
 8003b74:	d90e      	bls.n	8003b94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	22ff      	movs	r2, #255	; 0xff
 8003b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	8979      	ldrh	r1, [r7, #10]
 8003b84:	2300      	movs	r3, #0
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fa7d 	bl	800408c <I2C_TransferConfig>
 8003b92:	e00f      	b.n	8003bb4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	8979      	ldrh	r1, [r7, #10]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fa6c 	bl	800408c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d19e      	bne.n	8003afc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f93e 	bl	8003e44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e01a      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_I2C_Mem_Write+0x224>)
 8003be6:	400b      	ands	r3, r1
 8003be8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e000      	b.n	8003c08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
  }
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fe00e800 	.word	0xfe00e800

08003c14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <I2C_RequestMemoryWrite+0xa4>)
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fa25 	bl	800408c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f8b5 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e02c      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d105      	bne.n	8003c68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5c:	893b      	ldrh	r3, [r7, #8]
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	629a      	str	r2, [r3, #40]	; 0x28
 8003c66:	e015      	b.n	8003c94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c68:	893b      	ldrh	r3, [r7, #8]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f89b 	bl	8003db6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e012      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f830 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	80002000 	.word	0x80002000

08003cbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d103      	bne.n	8003cda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d007      	beq.n	8003cf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	619a      	str	r2, [r3, #24]
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d14:	e03b      	b.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f8d6 	bl	8003ecc <I2C_IsErrorOccurred>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e041      	b.n	8003dae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d02d      	beq.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fd ff3f 	bl	8001bb4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d122      	bne.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4013      	ands	r3, r2
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d113      	bne.n	8003d8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e00f      	b.n	8003dae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2301      	moveq	r3, #1
 8003da0:	2300      	movne	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0b4      	beq.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dc2:	e033      	b.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f87f 	bl	8003ecc <I2C_IsErrorOccurred>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e031      	b.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d025      	beq.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de0:	f7fd fee8 	bl	8001bb4 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11a      	bne.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d013      	beq.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d1c4      	bne.n	8003dc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e50:	e02f      	b.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f838 	bl	8003ecc <I2C_IsErrorOccurred>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e02d      	b.n	8003ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e66:	f7fd fea5 	bl	8001bb4 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d302      	bcc.n	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11a      	bne.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d013      	beq.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e007      	b.n	8003ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d1c8      	bne.n	8003e52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	; 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d068      	beq.n	8003fca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2210      	movs	r2, #16
 8003efe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f00:	e049      	b.n	8003f96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d045      	beq.n	8003f96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fd fe53 	bl	8001bb4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_IsErrorOccurred+0x54>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13a      	bne.n	8003f96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f42:	d121      	bne.n	8003f88 <I2C_IsErrorOccurred+0xbc>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f4a:	d01d      	beq.n	8003f88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d01a      	beq.n	8003f88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f62:	f7fd fe27 	bl	8001bb4 <HAL_GetTick>
 8003f66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f68:	e00e      	b.n	8003f88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f6a:	f7fd fe23 	bl	8001bb4 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b19      	cmp	r3, #25
 8003f76:	d907      	bls.n	8003f88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	f043 0320 	orr.w	r3, r3, #32
 8003f7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f86:	e006      	b.n	8003f96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d1e9      	bne.n	8003f6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d003      	beq.n	8003fac <I2C_IsErrorOccurred+0xe0>
 8003fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0aa      	beq.n	8003f02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	f043 0304 	orr.w	r3, r3, #4
 8003fc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00b      	beq.n	8003ff4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f043 0308 	orr.w	r3, r3, #8
 8004004:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800400e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004030:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01c      	beq.n	800407a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff fe3b 	bl	8003cbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <I2C_IsErrorOccurred+0x1bc>)
 8004052:	400b      	ands	r3, r1
 8004054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800407a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800407e:	4618      	mov	r0, r3
 8004080:	3728      	adds	r7, #40	; 0x28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	fe00e800 	.word	0xfe00e800

0800408c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	460b      	mov	r3, r1
 8004098:	817b      	strh	r3, [r7, #10]
 800409a:	4613      	mov	r3, r2
 800409c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a4:	7a7b      	ldrb	r3, [r7, #9]
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	0d5b      	lsrs	r3, r3, #21
 80040c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <I2C_TransferConfig+0x60>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	43db      	mvns	r3, r3
 80040d0:	ea02 0103 	and.w	r1, r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040de:	bf00      	nop
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	03ff63ff 	.word	0x03ff63ff

080040f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b20      	cmp	r3, #32
 8004104:	d138      	bne.n	8004178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004110:	2302      	movs	r3, #2
 8004112:	e032      	b.n	800417a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	; 0x24
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	e000      	b.n	800417a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004178:	2302      	movs	r3, #2
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b20      	cmp	r3, #32
 800419a:	d139      	bne.n	8004210 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e033      	b.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2224      	movs	r2, #36	; 0x24
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e0d0      	b.n	80043d4 <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd fa6e 	bl	8001728 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004262:	f023 030f 	bic.w	r3, r3, #15
 8004266:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2202      	movs	r2, #2
 800426e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d061      	beq.n	800433c <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004280:	2310      	movs	r3, #16
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e001      	b.n	800428a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004286:	2320      	movs	r3, #32
 8004288:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b20      	cmp	r3, #32
 8004290:	d802      	bhi.n	8004298 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004298:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800429c:	f001 f99c 	bl	80055d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80042a0:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042aa:	d125      	bne.n	80042f8 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d010      	beq.n	80042d6 <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	3305      	adds	r3, #5
 80042d2:	613b      	str	r3, [r7, #16]
 80042d4:	e01f      	b.n	8004316 <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	461a      	mov	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	3305      	adds	r3, #5
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	e00e      	b.n	8004316 <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004312:	3305      	adds	r3, #5
 8004314:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	4a30      	ldr	r2, [pc, #192]	; (80043dc <HAL_I2S_Init+0x1bc>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	08db      	lsrs	r3, r3, #3
 8004320:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	085b      	lsrs	r3, r3, #1
 8004332:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e003      	b.n	8004344 <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800433c:	2302      	movs	r3, #2
 800433e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d902      	bls.n	8004350 <HAL_I2S_Init+0x130>
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2bff      	cmp	r3, #255	; 0xff
 800434e:	d907      	bls.n	8004360 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	f043 0210 	orr.w	r2, r3, #16
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e039      	b.n	80043d4 <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	ea42 0103 	orr.w	r1, r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	430a      	orrs	r2, r1
 8004372:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800437e:	f023 030f 	bic.w	r3, r3, #15
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6851      	ldr	r1, [r2, #4]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6892      	ldr	r2, [r2, #8]
 800438a:	4311      	orrs	r1, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68d2      	ldr	r2, [r2, #12]
 8004390:	4311      	orrs	r1, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6992      	ldr	r2, [r2, #24]
 8004396:	430a      	orrs	r2, r1
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d003      	beq.n	80043b4 <HAL_I2S_Init+0x194>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2bb0      	cmp	r3, #176	; 0xb0
 80043b2:	d107      	bne.n	80043c4 <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	cccccccd 	.word	0xcccccccd

080043e0 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	4613      	mov	r3, r2
 80043ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_I2S_Transmit+0x1c>
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0dc      	b.n	80045ba <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_I2S_Transmit+0x30>
 800440c:	2302      	movs	r3, #2
 800440e:	e0d4      	b.n	80045ba <HAL_I2S_Transmit+0x1da>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d005      	beq.n	8004430 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
 800442e:	e0c4      	b.n	80045ba <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2203      	movs	r2, #3
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d002      	beq.n	800445c <HAL_I2S_Transmit+0x7c>
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b05      	cmp	r3, #5
 800445a:	d10a      	bne.n	8004472 <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	845a      	strh	r2, [r3, #34]	; 0x22
 8004470:	e005      	b.n	800447e <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d007      	beq.n	80044a6 <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044a4:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	2102      	movs	r1, #2
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f888 	bl	80045c2 <I2S_WaitFlagStateUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d04e      	beq.n	8004556 <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    __HAL_UNLOCK(hi2s);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e070      	b.n	80045ba <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	881a      	ldrh	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	1c9a      	adds	r2, r3, #2
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2201      	movs	r2, #1
 8004500:	2102      	movs	r1, #2
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f85d 	bl	80045c2 <I2S_WaitFlagStateUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00f      	beq.n	800452e <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e045      	b.n	80045ba <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d10c      	bne.n	8004556 <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	f043 0204 	orr.w	r2, r3, #4
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1bb      	bne.n	80044d8 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004574:	d118      	bne.n	80045a8 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f820 	bl	80045c2 <I2S_WaitFlagStateUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00f      	beq.n	80045a8 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e008      	b.n	80045ba <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hi2s);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80045d2:	f7fd faef 	bl	8001bb4 <HAL_GetTick>
 80045d6:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80045d8:	e018      	b.n	800460c <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d014      	beq.n	800460c <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80045e2:	f7fd fae7 	bl	8001bb4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d902      	bls.n	80045f8 <I2S_WaitFlagStateUntilTimeout+0x36>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e00f      	b.n	800462c <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	429a      	cmp	r2, r3
 8004628:	d1d7      	bne.n	80045da <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d141      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004642:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d131      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004650:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	4a46      	ldr	r2, [pc, #280]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800465c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004668:	4a41      	ldr	r2, [pc, #260]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800466e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2232      	movs	r2, #50	; 0x32
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	4a3f      	ldr	r2, [pc, #252]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0c9b      	lsrs	r3, r3, #18
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004686:	e002      	b.n	800468e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	4b38      	ldr	r3, [pc, #224]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469a:	d102      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f2      	bne.n	8004688 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a2:	4b33      	ldr	r3, [pc, #204]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d158      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e057      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046c4:	e04d      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d141      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ce:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d131      	bne.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f4:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2232      	movs	r2, #50	; 0x32
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	0c9b      	lsrs	r3, r3, #18
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004712:	e002      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d102      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f2      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d112      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e011      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004746:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004750:	e007      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800475a:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004760:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40007000 	.word	0x40007000
 8004774:	20000000 	.word	0x20000000
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800478a:	6093      	str	r3, [r2, #8]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e2fe      	b.n	8004dac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d075      	beq.n	80048a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ba:	4b97      	ldr	r3, [pc, #604]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c4:	4b94      	ldr	r3, [pc, #592]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	2b0c      	cmp	r3, #12
 80047d2:	d102      	bne.n	80047da <HAL_RCC_OscConfig+0x3e>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d002      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4b8d      	ldr	r3, [pc, #564]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e2d9      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x74>
 8004802:	4b85      	ldr	r3, [pc, #532]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a84      	ldr	r2, [pc, #528]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7e      	ldr	r2, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b7c      	ldr	r3, [pc, #496]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a7b      	ldr	r2, [pc, #492]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004834:	4b78      	ldr	r3, [pc, #480]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a77      	ldr	r2, [pc, #476]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b75      	ldr	r3, [pc, #468]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a74      	ldr	r2, [pc, #464]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd f9ae 	bl	8001bb4 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485c:	f7fd f9aa 	bl	8001bb4 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	; 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e29e      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800486e:	4b6a      	ldr	r3, [pc, #424]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0xc0>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fd f99a 	bl	8001bb4 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7fd f996 	bl	8001bb4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e28a      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004896:	4b60      	ldr	r3, [pc, #384]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0xe8>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d075      	beq.n	800499e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048bc:	4b56      	ldr	r3, [pc, #344]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_OscConfig+0x136>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d002      	beq.n	80048d8 <HAL_RCC_OscConfig+0x13c>
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11f      	bne.n	8004918 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d8:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x154>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e25d      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f0:	4b49      	ldr	r3, [pc, #292]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	4946      	ldr	r1, [pc, #280]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004904:	4b45      	ldr	r3, [pc, #276]	; (8004a1c <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd f907 	bl	8001b1c <HAL_InitTick>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d043      	beq.n	800499c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e249      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d023      	beq.n	8004968 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004920:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3c      	ldr	r2, [pc, #240]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd f942 	bl	8001bb4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004934:	f7fd f93e 	bl	8001bb4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e232      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004946:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004952:	4b31      	ldr	r3, [pc, #196]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	492d      	ldr	r1, [pc, #180]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
 8004966:	e01a      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2a      	ldr	r2, [pc, #168]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 800496e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd f91e 	bl	8001bb4 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497c:	f7fd f91a 	bl	8001bb4 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e20e      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x1e0>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d041      	beq.n	8004a2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01c      	beq.n	80049ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b2:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b8:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fd f8f7 	bl	8001bb4 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ca:	f7fd f8f3 	bl	8001bb4 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e1e7      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0ef      	beq.n	80049ca <HAL_RCC_OscConfig+0x22e>
 80049ea:	e020      	b.n	8004a2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fd f8da 	bl	8001bb4 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a02:	e00d      	b.n	8004a20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fd f8d6 	bl	8001bb4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d906      	bls.n	8004a20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e1ca      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a20:	4b8c      	ldr	r3, [pc, #560]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ea      	bne.n	8004a04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80a6 	beq.w	8004b88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a40:	4b84      	ldr	r3, [pc, #528]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2b4>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a56:	4b7f      	ldr	r3, [pc, #508]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	4a7e      	ldr	r2, [pc, #504]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
 8004a62:	4b7c      	ldr	r3, [pc, #496]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a72:	4b79      	ldr	r3, [pc, #484]	; (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d118      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a7e:	4b76      	ldr	r3, [pc, #472]	; (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a75      	ldr	r2, [pc, #468]	; (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8a:	f7fd f893 	bl	8001bb4 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a92:	f7fd f88f 	bl	8001bb4 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e183      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa4:	4b6c      	ldr	r3, [pc, #432]	; (8004c58 <HAL_RCC_OscConfig+0x4bc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d108      	bne.n	8004aca <HAL_RCC_OscConfig+0x32e>
 8004ab8:	4b66      	ldr	r3, [pc, #408]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ac8:	e024      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d110      	bne.n	8004af4 <HAL_RCC_OscConfig+0x358>
 8004ad2:	4b60      	ldr	r3, [pc, #384]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	4a5e      	ldr	r2, [pc, #376]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ae2:	4b5c      	ldr	r3, [pc, #368]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	4a5a      	ldr	r2, [pc, #360]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004af2:	e00f      	b.n	8004b14 <HAL_RCC_OscConfig+0x378>
 8004af4:	4b57      	ldr	r3, [pc, #348]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	4a56      	ldr	r2, [pc, #344]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	4a52      	ldr	r2, [pc, #328]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d016      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd f84a 	bl	8001bb4 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fd f846 	bl	8001bb4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e138      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3a:	4b46      	ldr	r3, [pc, #280]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0ed      	beq.n	8004b24 <HAL_RCC_OscConfig+0x388>
 8004b48:	e015      	b.n	8004b76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4a:	f7fd f833 	bl	8001bb4 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fd f82f 	bl	8001bb4 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e121      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b68:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1ed      	bne.n	8004b52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b35      	ldr	r3, [pc, #212]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	4a34      	ldr	r2, [pc, #208]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d03c      	beq.n	8004c0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01c      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba2:	4a2c      	ldr	r2, [pc, #176]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd f802 	bl	8001bb4 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb4:	f7fc fffe 	bl	8001bb4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0f2      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bc6:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ef      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x418>
 8004bd4:	e01b      	b.n	8004c0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bd6:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be6:	f7fc ffe5 	bl	8001bb4 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bee:	f7fc ffe1 	bl	8001bb4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0d5      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ef      	bne.n	8004bee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80c9 	beq.w	8004daa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c18:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	f000 8083 	beq.w	8004d2c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d15e      	bne.n	8004cec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fc ffbb 	bl	8001bb4 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c40:	e00c      	b.n	8004c5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c42:	f7fc ffb7 	bl	8001bb4 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d905      	bls.n	8004c5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e0ab      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5c:	4b55      	ldr	r3, [pc, #340]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ec      	bne.n	8004c42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c68:	4b52      	ldr	r3, [pc, #328]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	4b52      	ldr	r3, [pc, #328]	; (8004db8 <HAL_RCC_OscConfig+0x61c>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6a11      	ldr	r1, [r2, #32]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c78:	3a01      	subs	r2, #1
 8004c7a:	0112      	lsls	r2, r2, #4
 8004c7c:	4311      	orrs	r1, r2
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c82:	0212      	lsls	r2, r2, #8
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c8a:	0852      	lsrs	r2, r2, #1
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0552      	lsls	r2, r2, #21
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c96:	0852      	lsrs	r2, r2, #1
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	0652      	lsls	r2, r2, #25
 8004c9c:	4311      	orrs	r1, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ca2:	06d2      	lsls	r2, r2, #27
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	4943      	ldr	r1, [pc, #268]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cac:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a40      	ldr	r2, [pc, #256]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cb8:	4b3e      	ldr	r3, [pc, #248]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fc ff76 	bl	8001bb4 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fc ff72 	bl	8001bb4 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e066      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cde:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x530>
 8004cea:	e05e      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cec:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004cf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fc ff5c 	bl	8001bb4 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fc ff58 	bl	8001bb4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e04c      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	4924      	ldr	r1, [pc, #144]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <HAL_RCC_OscConfig+0x620>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	60cb      	str	r3, [r1, #12]
 8004d2a:	e03e      	b.n	8004daa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e039      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d38:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <HAL_RCC_OscConfig+0x618>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0203 	and.w	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d12c      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	3b01      	subs	r3, #1
 8004d58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d123      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11b      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d113      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d109      	bne.n	8004da6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	085b      	lsrs	r3, r3, #1
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3720      	adds	r7, #32
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000
 8004db8:	019f800c 	.word	0x019f800c
 8004dbc:	feeefffc 	.word	0xfeeefffc

08004dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e11e      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b91      	ldr	r3, [pc, #580]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d910      	bls.n	8004e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b8e      	ldr	r3, [pc, #568]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	498c      	ldr	r1, [pc, #560]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df6:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d001      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e106      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d073      	beq.n	8004efc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d129      	bne.n	8004e70 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e1c:	4b81      	ldr	r3, [pc, #516]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0f4      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e2c:	f000 f99e 	bl	800516c <RCC_GetSysClockFreqFromPLLSource>
 8004e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4a7c      	ldr	r2, [pc, #496]	; (8005028 <HAL_RCC_ClockConfig+0x268>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d93f      	bls.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e3a:	4b7a      	ldr	r3, [pc, #488]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d033      	beq.n	8004eba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12f      	bne.n	8004eba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e5a:	4b72      	ldr	r3, [pc, #456]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e62:	4a70      	ldr	r2, [pc, #448]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e6a:	2380      	movs	r3, #128	; 0x80
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e024      	b.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e78:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0c6      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e88:	4b66      	ldr	r3, [pc, #408]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0be      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e98:	f000 f8ce 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4a61      	ldr	r2, [pc, #388]	; (8005028 <HAL_RCC_ClockConfig+0x268>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d909      	bls.n	8004eba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ea6:	4b5f      	ldr	r3, [pc, #380]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eae:	4a5d      	ldr	r2, [pc, #372]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004eb6:	2380      	movs	r3, #128	; 0x80
 8004eb8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eba:	4b5a      	ldr	r3, [pc, #360]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4957      	ldr	r1, [pc, #348]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ecc:	f7fc fe72 	bl	8001bb4 <HAL_GetTick>
 8004ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed2:	e00a      	b.n	8004eea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed4:	f7fc fe6e 	bl	8001bb4 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e095      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	4b4e      	ldr	r3, [pc, #312]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 020c 	and.w	r2, r3, #12
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d1eb      	bne.n	8004ed4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d023      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f14:	4b43      	ldr	r3, [pc, #268]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a42      	ldr	r2, [pc, #264]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f1e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f2c:	4b3d      	ldr	r3, [pc, #244]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f34:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b39      	ldr	r3, [pc, #228]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4936      	ldr	r1, [pc, #216]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2b80      	cmp	r3, #128	; 0x80
 8004f54:	d105      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f56:	4b33      	ldr	r3, [pc, #204]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4a32      	ldr	r2, [pc, #200]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f60:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f62:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d21d      	bcs.n	8004fac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f70:	4b2b      	ldr	r3, [pc, #172]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 020f 	bic.w	r2, r3, #15
 8004f78:	4929      	ldr	r1, [pc, #164]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f80:	f7fc fe18 	bl	8001bb4 <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	e00a      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f88:	f7fc fe14 	bl	8001bb4 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e03b      	b.n	8005016 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_RCC_ClockConfig+0x260>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1ed      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4917      	ldr	r1, [pc, #92]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	490f      	ldr	r1, [pc, #60]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fea:	f000 f825 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <HAL_RCC_ClockConfig+0x264>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	490c      	ldr	r1, [pc, #48]	; (800502c <HAL_RCC_ClockConfig+0x26c>)
 8004ffc:	5ccb      	ldrb	r3, [r1, r3]
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	fa22 f303 	lsr.w	r3, r2, r3
 8005006:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <HAL_RCC_ClockConfig+0x270>)
 8005008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCC_ClockConfig+0x274>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fc fd84 	bl	8001b1c <HAL_InitTick>
 8005014:	4603      	mov	r3, r0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40022000 	.word	0x40022000
 8005024:	40021000 	.word	0x40021000
 8005028:	04c4b400 	.word	0x04c4b400
 800502c:	080070b4 	.word	0x080070b4
 8005030:	20000000 	.word	0x20000000
 8005034:	20000004 	.word	0x20000004

08005038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	b087      	sub	sp, #28
 800503c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800503e:	4b2c      	ldr	r3, [pc, #176]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 030c 	and.w	r3, r3, #12
 8005046:	2b04      	cmp	r3, #4
 8005048:	d102      	bne.n	8005050 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800504a:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800504c:	613b      	str	r3, [r7, #16]
 800504e:	e047      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d102      	bne.n	8005062 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800505c:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	e03e      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005062:	4b23      	ldr	r3, [pc, #140]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d136      	bne.n	80050dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800506e:	4b20      	ldr	r3, [pc, #128]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3301      	adds	r3, #1
 8005084:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d10c      	bne.n	80050a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800508c:	4a1a      	ldr	r2, [pc, #104]	; (80050f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005096:	68d2      	ldr	r2, [r2, #12]
 8005098:	0a12      	lsrs	r2, r2, #8
 800509a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	617b      	str	r3, [r7, #20]
      break;
 80050a4:	e00c      	b.n	80050c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050a6:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ae:	4a10      	ldr	r2, [pc, #64]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	0a12      	lsrs	r2, r2, #8
 80050b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
      break;
 80050be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0e5b      	lsrs	r3, r3, #25
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	3301      	adds	r3, #1
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	e001      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050e0:	693b      	ldr	r3, [r7, #16]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	00f42400 	.word	0x00f42400
 80050f8:	016e3600 	.word	0x016e3600

080050fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <HAL_RCC_GetHCLKFreq+0x14>)
 8005102:	681b      	ldr	r3, [r3, #0]
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000000 	.word	0x20000000

08005114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005118:	f7ff fff0 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4904      	ldr	r1, [pc, #16]	; (800513c <HAL_RCC_GetPCLK1Freq+0x28>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40021000 	.word	0x40021000
 800513c:	080070c4 	.word	0x080070c4

08005140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005144:	f7ff ffda 	bl	80050fc <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b06      	ldr	r3, [pc, #24]	; (8005164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0adb      	lsrs	r3, r3, #11
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4904      	ldr	r1, [pc, #16]	; (8005168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40021000 	.word	0x40021000
 8005168:	080070c4 	.word	0x080070c4

0800516c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005172:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800517c:	4b1b      	ldr	r3, [pc, #108]	; (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b03      	cmp	r3, #3
 800518e:	d10c      	bne.n	80051aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519a:	68d2      	ldr	r2, [r2, #12]
 800519c:	0a12      	lsrs	r2, r2, #8
 800519e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]
    break;
 80051a8:	e00c      	b.n	80051c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	0a12      	lsrs	r2, r2, #8
 80051b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051bc:	fb02 f303 	mul.w	r3, r2, r3
 80051c0:	617b      	str	r3, [r7, #20]
    break;
 80051c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	0e5b      	lsrs	r3, r3, #25
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	3301      	adds	r3, #1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051de:	687b      	ldr	r3, [r7, #4]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40021000 	.word	0x40021000
 80051f0:	016e3600 	.word	0x016e3600
 80051f4:	00f42400 	.word	0x00f42400

080051f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005200:	2300      	movs	r3, #0
 8005202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005204:	2300      	movs	r3, #0
 8005206:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8098 	beq.w	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005216:	2300      	movs	r3, #0
 8005218:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800521a:	4b43      	ldr	r3, [pc, #268]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005226:	4b40      	ldr	r3, [pc, #256]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522a:	4a3f      	ldr	r2, [pc, #252]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	6593      	str	r3, [r2, #88]	; 0x58
 8005232:	4b3d      	ldr	r3, [pc, #244]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523e:	2301      	movs	r3, #1
 8005240:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005242:	4b3a      	ldr	r3, [pc, #232]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a39      	ldr	r2, [pc, #228]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800524e:	f7fc fcb1 	bl	8001bb4 <HAL_GetTick>
 8005252:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005254:	e009      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005256:	f7fc fcad 	bl	8001bb4 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d902      	bls.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	74fb      	strb	r3, [r7, #19]
        break;
 8005268:	e005      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d159      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800527c:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01e      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d019      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005298:	4b23      	ldr	r3, [pc, #140]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052a4:	4b20      	ldr	r3, [pc, #128]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b4:	4b1c      	ldr	r3, [pc, #112]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ba:	4a1b      	ldr	r2, [pc, #108]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052c4:	4a18      	ldr	r2, [pc, #96]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d016      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d6:	f7fc fc6d 	bl	8001bb4 <HAL_GetTick>
 80052da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052dc:	e00b      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fc fc69 	bl	8001bb4 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d902      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	74fb      	strb	r3, [r7, #19]
            break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ec      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005304:	7cfb      	ldrb	r3, [r7, #19]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800530a:	4b07      	ldr	r3, [pc, #28]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	4903      	ldr	r1, [pc, #12]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	74bb      	strb	r3, [r7, #18]
 8005326:	e005      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005328:	40021000 	.word	0x40021000
 800532c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005334:	7c7b      	ldrb	r3, [r7, #17]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4ba6      	ldr	r3, [pc, #664]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	4aa5      	ldr	r2, [pc, #660]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005352:	4ba0      	ldr	r3, [pc, #640]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f023 0203 	bic.w	r2, r3, #3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	499c      	ldr	r1, [pc, #624]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005374:	4b97      	ldr	r3, [pc, #604]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f023 020c 	bic.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	4994      	ldr	r1, [pc, #592]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005396:	4b8f      	ldr	r3, [pc, #572]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	498b      	ldr	r1, [pc, #556]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053b8:	4b86      	ldr	r3, [pc, #536]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	4983      	ldr	r1, [pc, #524]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053da:	4b7e      	ldr	r3, [pc, #504]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	497a      	ldr	r1, [pc, #488]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053fc:	4b75      	ldr	r3, [pc, #468]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	4972      	ldr	r1, [pc, #456]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800541e:	4b6d      	ldr	r3, [pc, #436]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	4969      	ldr	r1, [pc, #420]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005440:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4961      	ldr	r1, [pc, #388]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005462:	4b5c      	ldr	r3, [pc, #368]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	4958      	ldr	r1, [pc, #352]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005480:	2b00      	cmp	r3, #0
 8005482:	d015      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005484:	4b53      	ldr	r3, [pc, #332]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	4950      	ldr	r1, [pc, #320]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a2:	d105      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a4:	4b4b      	ldr	r3, [pc, #300]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a4a      	ldr	r2, [pc, #296]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d015      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054bc:	4b45      	ldr	r3, [pc, #276]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	4942      	ldr	r1, [pc, #264]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054da:	d105      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	4934      	ldr	r1, [pc, #208]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a2e      	ldr	r2, [pc, #184]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800552c:	4b29      	ldr	r3, [pc, #164]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553a:	4926      	ldr	r1, [pc, #152]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554a:	d105      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800554c:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005556:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	4918      	ldr	r1, [pc, #96]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005584:	4b13      	ldr	r3, [pc, #76]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	4a12      	ldr	r2, [pc, #72]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	490a      	ldr	r1, [pc, #40]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ba:	d105      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80055c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000

080055d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055ea:	d136      	bne.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80055ec:	4bac      	ldr	r3, [pc, #688]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f6:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80055f8:	4ba9      	ldr	r3, [pc, #676]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b02      	cmp	r3, #2
 8005604:	d108      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560c:	d104      	bne.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800560e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	f000 bc2a 	b.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005618:	4ba1      	ldr	r3, [pc, #644]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800561a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b02      	cmp	r3, #2
 8005624:	d108      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d104      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 800562e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	f000 bc1a 	b.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005638:	4b99      	ldr	r3, [pc, #612]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005644:	f040 8412 	bne.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800564e:	f040 840d 	bne.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    {
      frequency = HSE_VALUE / 32U;
 8005652:	4b94      	ldr	r3, [pc, #592]	; (80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	f000 bc09 	b.w	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 800565a:	4b91      	ldr	r3, [pc, #580]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d10c      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005666:	4b8e      	ldr	r3, [pc, #568]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005672:	d102      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8005674:	4b8c      	ldr	r3, [pc, #560]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	e017      	b.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e014      	b.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8005680:	4b87      	ldr	r3, [pc, #540]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	2b03      	cmp	r3, #3
 800568a:	d10c      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800568c:	4b84      	ldr	r3, [pc, #528]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005698:	d102      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 800569a:	4b84      	ldr	r3, [pc, #528]	; (80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	e001      	b.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80056aa:	4b7d      	ldr	r3, [pc, #500]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	3301      	adds	r3, #1
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c4:	f000 8378 	beq.w	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ce:	f200 83ae 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056d8:	f000 8337 	beq.w	8005d4a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e2:	f200 83a4 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ec:	f000 82ff 	beq.w	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f6:	f200 839a 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	f000 82c0 	beq.w	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	f200 8390 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005714:	f000 8272 	beq.w	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571e:	f200 8386 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005728:	f000 8224 	beq.w	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005732:	f200 837c 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	f000 81da 	beq.w	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005746:	f200 8372 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005750:	f000 81ab 	beq.w	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575a:	f200 8368 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	f000 817d 	beq.w	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b80      	cmp	r3, #128	; 0x80
 800576a:	f200 8360 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b20      	cmp	r3, #32
 8005772:	d84b      	bhi.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8359 	beq.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3b01      	subs	r3, #1
 8005780:	2b1f      	cmp	r3, #31
 8005782:	f200 8354 	bhi.w	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	08005817 	.word	0x08005817
 8005790:	08005879 	.word	0x08005879
 8005794:	08005e2f 	.word	0x08005e2f
 8005798:	080058eb 	.word	0x080058eb
 800579c:	08005e2f 	.word	0x08005e2f
 80057a0:	08005e2f 	.word	0x08005e2f
 80057a4:	08005e2f 	.word	0x08005e2f
 80057a8:	0800594d 	.word	0x0800594d
 80057ac:	08005e2f 	.word	0x08005e2f
 80057b0:	08005e2f 	.word	0x08005e2f
 80057b4:	08005e2f 	.word	0x08005e2f
 80057b8:	08005e2f 	.word	0x08005e2f
 80057bc:	08005e2f 	.word	0x08005e2f
 80057c0:	08005e2f 	.word	0x08005e2f
 80057c4:	08005e2f 	.word	0x08005e2f
 80057c8:	08005e2f 	.word	0x08005e2f
 80057cc:	08005e2f 	.word	0x08005e2f
 80057d0:	08005e2f 	.word	0x08005e2f
 80057d4:	08005e2f 	.word	0x08005e2f
 80057d8:	08005e2f 	.word	0x08005e2f
 80057dc:	08005e2f 	.word	0x08005e2f
 80057e0:	08005e2f 	.word	0x08005e2f
 80057e4:	08005e2f 	.word	0x08005e2f
 80057e8:	08005e2f 	.word	0x08005e2f
 80057ec:	08005e2f 	.word	0x08005e2f
 80057f0:	08005e2f 	.word	0x08005e2f
 80057f4:	08005e2f 	.word	0x08005e2f
 80057f8:	08005e2f 	.word	0x08005e2f
 80057fc:	08005e2f 	.word	0x08005e2f
 8005800:	08005e2f 	.word	0x08005e2f
 8005804:	08005e2f 	.word	0x08005e2f
 8005808:	080059af 	.word	0x080059af
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	f000 8101 	beq.w	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
      break;

#endif /* QUADSPI */

    default:
      break;
 8005814:	e30b      	b.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005816:	4b22      	ldr	r3, [pc, #136]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005828:	f7ff fc8a 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 800582c:	61f8      	str	r0, [r7, #28]
      break;
 800582e:	e300      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d103      	bne.n	800583e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        frequency = HAL_RCC_GetSysClockFreq();
 8005836:	f7ff fbff 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 800583a:	61f8      	str	r0, [r7, #28]
      break;
 800583c:	e2f9      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 800583e:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584a:	d105      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d102      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HSI_VALUE;
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005854:	61fb      	str	r3, [r7, #28]
      break;
 8005856:	e2ec      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005858:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b02      	cmp	r3, #2
 8005864:	f040 82e5 	bne.w	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2b03      	cmp	r3, #3
 800586c:	f040 82e1 	bne.w	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        frequency = LSE_VALUE;
 8005870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005874:	61fb      	str	r3, [r7, #28]
      break;
 8005876:	e2dc      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005878:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetPCLK1Freq();
 800588a:	f7ff fc43 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 800588e:	61f8      	str	r0, [r7, #28]
      break;
 8005890:	e2d1      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b04      	cmp	r3, #4
 8005896:	d10b      	bne.n	80058b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8005898:	f7ff fbce 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 800589c:	61f8      	str	r0, [r7, #28]
      break;
 800589e:	e2ca      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80058a0:	40021000 	.word	0x40021000
 80058a4:	000b71b0 	.word	0x000b71b0
 80058a8:	00f42400 	.word	0x00f42400
 80058ac:	016e3600 	.word	0x016e3600
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80058b0:	4b9e      	ldr	r3, [pc, #632]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d105      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d102      	bne.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HSI_VALUE;
 80058c4:	4b9a      	ldr	r3, [pc, #616]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80058c6:	61fb      	str	r3, [r7, #28]
      break;
 80058c8:	e2b5      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80058ca:	4b98      	ldr	r3, [pc, #608]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	f040 82ae 	bne.w	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	f040 82aa 	bne.w	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        frequency = LSE_VALUE;
 80058e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e6:	61fb      	str	r3, [r7, #28]
      break;
 80058e8:	e2a5      	b.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80058ea:	4b90      	ldr	r3, [pc, #576]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058f4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d103      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        frequency = HAL_RCC_GetPCLK1Freq();
 80058fc:	f7ff fc0a 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005900:	61f8      	str	r0, [r7, #28]
      break;
 8005902:	e29a      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b10      	cmp	r3, #16
 8005908:	d103      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
        frequency = HAL_RCC_GetSysClockFreq();
 800590a:	f7ff fb95 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 800590e:	61f8      	str	r0, [r7, #28]
      break;
 8005910:	e293      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005912:	4b86      	ldr	r3, [pc, #536]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800591e:	d105      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b20      	cmp	r3, #32
 8005924:	d102      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
        frequency = HSI_VALUE;
 8005926:	4b82      	ldr	r3, [pc, #520]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005928:	61fb      	str	r3, [r7, #28]
      break;
 800592a:	e286      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800592c:	4b7f      	ldr	r3, [pc, #508]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b02      	cmp	r3, #2
 8005938:	f040 827f 	bne.w	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b30      	cmp	r3, #48	; 0x30
 8005940:	f040 827b 	bne.w	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
        frequency = LSE_VALUE;
 8005944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005948:	61fb      	str	r3, [r7, #28]
      break;
 800594a:	e276      	b.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800594c:	4b77      	ldr	r3, [pc, #476]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005956:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d103      	bne.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = HAL_RCC_GetPCLK1Freq();
 800595e:	f7ff fbd9 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005962:	61f8      	str	r0, [r7, #28]
      break;
 8005964:	e26b      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d103      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
        frequency = HAL_RCC_GetSysClockFreq();
 800596c:	f7ff fb64 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005970:	61f8      	str	r0, [r7, #28]
      break;
 8005972:	e264      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005974:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d105      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d102      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
        frequency = HSI_VALUE;
 8005988:	4b69      	ldr	r3, [pc, #420]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800598a:	61fb      	str	r3, [r7, #28]
      break;
 800598c:	e257      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800598e:	4b67      	ldr	r3, [pc, #412]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	f040 8250 	bne.w	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2bc0      	cmp	r3, #192	; 0xc0
 80059a2:	f040 824c 	bne.w	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        frequency = LSE_VALUE;
 80059a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059aa:	61fb      	str	r3, [r7, #28]
      break;
 80059ac:	e247      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059ae:	4b5f      	ldr	r3, [pc, #380]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059b8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
        frequency = HAL_RCC_GetPCLK1Freq();
 80059c0:	f7ff fba8 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 80059c4:	61f8      	str	r0, [r7, #28]
      break;
 80059c6:	e23c      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ce:	d103      	bne.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
        frequency = HAL_RCC_GetSysClockFreq();
 80059d0:	f7ff fb32 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 80059d4:	61f8      	str	r0, [r7, #28]
      break;
 80059d6:	e234      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80059d8:	4b54      	ldr	r3, [pc, #336]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e4:	d106      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d102      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        frequency = HSI_VALUE;
 80059ee:	4b50      	ldr	r3, [pc, #320]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80059f0:	61fb      	str	r3, [r7, #28]
      break;
 80059f2:	e226      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80059f4:	4b4d      	ldr	r3, [pc, #308]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	f040 821f 	bne.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a0a:	f040 821a 	bne.w	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        frequency = LSE_VALUE;
 8005a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a12:	61fb      	str	r3, [r7, #28]
      break;
 8005a14:	e215      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005a16:	4b45      	ldr	r3, [pc, #276]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005a20:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005a28:	f7ff fb74 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005a2c:	61f8      	str	r0, [r7, #28]
      break;
 8005a2e:	e20a      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a36:	d103      	bne.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        frequency = HAL_RCC_GetSysClockFreq();
 8005a38:	f7ff fafe 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005a3c:	61f8      	str	r0, [r7, #28]
      break;
 8005a3e:	e202      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005a40:	4b3a      	ldr	r3, [pc, #232]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a4c:	f040 81fb 	bne.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a56:	f040 81f6 	bne.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
        frequency = HSI_VALUE;
 8005a5a:	4b35      	ldr	r3, [pc, #212]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005a5c:	61fb      	str	r3, [r7, #28]
      break;
 8005a5e:	e1f2      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005a60:	4b32      	ldr	r3, [pc, #200]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a6a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005a72:	f7ff fb4f 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005a76:	61f8      	str	r0, [r7, #28]
      break;
 8005a78:	e1e7      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a80:	d103      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        frequency = HAL_RCC_GetSysClockFreq();
 8005a82:	f7ff fad9 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005a86:	61f8      	str	r0, [r7, #28]
      break;
 8005a88:	e1df      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005a8a:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a96:	f040 81d8 	bne.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aa0:	f040 81d3 	bne.w	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
        frequency = HSI_VALUE;
 8005aa4:	4b22      	ldr	r3, [pc, #136]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005aa6:	61fb      	str	r3, [r7, #28]
      break;
 8005aa8:	e1cf      	b.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005aaa:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ab4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d103      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005abc:	f7ff fb2a 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005ac0:	61f8      	str	r0, [r7, #28]
      break;
 8005ac2:	e1c4      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aca:	d103      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetSysClockFreq();
 8005acc:	f7ff fab4 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005ad0:	61f8      	str	r0, [r7, #28]
      break;
 8005ad2:	e1bc      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005ad4:	4b15      	ldr	r3, [pc, #84]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae0:	f040 81b5 	bne.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aea:	f040 81b0 	bne.w	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
        frequency = HSI_VALUE;
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8005af0:	61fb      	str	r3, [r7, #28]
      break;
 8005af2:	e1ac      	b.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005afe:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x536>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005b06:	f7ff fb05 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005b0a:	61f8      	str	r0, [r7, #28]
      break;
 8005b0c:	e1a1      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8005b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d10b      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b22:	d107      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
        frequency = LSI_VALUE;
 8005b24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	e022      	b.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005b34:	4b9b      	ldr	r3, [pc, #620]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b40:	d106      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b48:	d102      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
        frequency = HSI_VALUE;
 8005b4a:	4b97      	ldr	r3, [pc, #604]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8005b4c:	61fb      	str	r3, [r7, #28]
 8005b4e:	e010      	b.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8005b50:	4b94      	ldr	r3, [pc, #592]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	f040 8179 	bne.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b66:	f040 8174 	bne.w	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        frequency = LSE_VALUE;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6e:	61fb      	str	r3, [r7, #28]
      break;
 8005b70:	e16f      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 8005b72:	e16e      	b.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005b74:	4b8b      	ldr	r3, [pc, #556]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b7e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
        frequency = HAL_RCC_GetSysClockFreq();
 8005b86:	f7ff fa57 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005b8a:	61f8      	str	r0, [r7, #28]
      break;
 8005b8c:	e163      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b94:	d11b      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8005b96:	4b83      	ldr	r3, [pc, #524]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8159 	beq.w	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ba4:	4b7f      	ldr	r3, [pc, #508]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	0a1b      	lsrs	r3, r3, #8
 8005baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bae:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	fb03 f202 	mul.w	r2, r3, r2
 8005bb8:	4b7a      	ldr	r3, [pc, #488]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	0d5b      	lsrs	r3, r3, #21
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	61fb      	str	r3, [r7, #28]
      break;
 8005bcc:	e143      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bd4:	d102      	bne.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005bd6:	4b75      	ldr	r3, [pc, #468]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8005bd8:	61fb      	str	r3, [r7, #28]
      break;
 8005bda:	e13c      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8005bdc:	4b71      	ldr	r3, [pc, #452]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be8:	f040 8135 	bne.w	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bf2:	f040 8130 	bne.w	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        frequency = HSI_VALUE;
 8005bf6:	4b6c      	ldr	r3, [pc, #432]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8005bf8:	61fb      	str	r3, [r7, #28]
      break;
 8005bfa:	e12c      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005bfc:	4b69      	ldr	r3, [pc, #420]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005c06:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
        frequency = HAL_RCC_GetSysClockFreq();
 8005c0e:	f7ff fa13 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005c12:	61f8      	str	r0, [r7, #28]
      break;
 8005c14:	e121      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1c:	d11b      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8005c1e:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8117 	beq.w	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005c2c:	4b5d      	ldr	r3, [pc, #372]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c36:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	fb03 f202 	mul.w	r2, r3, r2
 8005c40:	4b58      	ldr	r3, [pc, #352]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	0d5b      	lsrs	r3, r3, #21
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c52:	61fb      	str	r3, [r7, #28]
      break;
 8005c54:	e101      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c5c:	d102      	bne.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c5e:	4b53      	ldr	r3, [pc, #332]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8005c60:	61fb      	str	r3, [r7, #28]
      break;
 8005c62:	e0fa      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8005c64:	4b4f      	ldr	r3, [pc, #316]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	f040 80f3 	bne.w	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c7a:	f040 80ee 	bne.w	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        frequency = HSI_VALUE;
 8005c7e:	4b4a      	ldr	r3, [pc, #296]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8005c80:	61fb      	str	r3, [r7, #28]
      break;
 8005c82:	e0ea      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005c84:	4b47      	ldr	r3, [pc, #284]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005c8e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c96:	d103      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005c98:	f7ff fa3c 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 8005c9c:	61f8      	str	r0, [r7, #28]
      break;
 8005c9e:	e0de      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = HSE_VALUE;
 8005ca6:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>)
 8005ca8:	61fb      	str	r3, [r7, #28]
      break;
 8005caa:	e0d8      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cb2:	f040 80d4 	bne.w	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8005cb6:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 80cd 	beq.w	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005cc4:	4b37      	ldr	r3, [pc, #220]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cce:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	fb03 f202 	mul.w	r2, r3, r2
 8005cd8:	4b32      	ldr	r3, [pc, #200]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	0d5b      	lsrs	r3, r3, #21
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	61fb      	str	r3, [r7, #28]
      break;
 8005cec:	e0b7      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005cee:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005cf8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d00:	d114      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005d02:	4b28      	ldr	r3, [pc, #160]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	0a1b      	lsrs	r3, r3, #8
 8005d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0c:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	fb03 f202 	mul.w	r2, r3, r2
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	0d5b      	lsrs	r3, r3, #21
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	3301      	adds	r3, #1
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	61fb      	str	r3, [r7, #28]
      break;
 8005d2a:	e09a      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	f040 8093 	bne.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f040 808f 	bne.w	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
        frequency = HSI48_VALUE;
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8005d46:	61fb      	str	r3, [r7, #28]
      break;
 8005d48:	e08b      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005d54:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5c:	d114      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005d5e:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d68:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	fb03 f202 	mul.w	r2, r3, r2
 8005d72:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	0d5b      	lsrs	r3, r3, #21
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d84:	61fb      	str	r3, [r7, #28]
      break;
 8005d86:	e06e      	b.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8005d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d167      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d164      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
        frequency = HSI48_VALUE;
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8005d9e:	61fb      	str	r3, [r7, #28]
      break;
 8005da0:	e061      	b.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8005da2:	bf00      	nop
 8005da4:	40021000 	.word	0x40021000
 8005da8:	00f42400 	.word	0x00f42400
 8005dac:	00bb8000 	.word	0x00bb8000
 8005db0:	016e3600 	.word	0x016e3600
 8005db4:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8005db8:	4b2f      	ldr	r3, [pc, #188]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dc2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dca:	d128      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8005dcc:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d048      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005dd8:	4b27      	ldr	r3, [pc, #156]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	0a1b      	lsrs	r3, r3, #8
 8005dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de2:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005de4:	4b24      	ldr	r3, [pc, #144]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	0edb      	lsrs	r3, r3, #27
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005df6:	4b20      	ldr	r3, [pc, #128]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
              pllp = 17U;
 8005e02:	2311      	movs	r3, #17
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e001      	b.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
              pllp = 7U;
 8005e08:	2307      	movs	r3, #7
 8005e0a:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	fb03 f202 	mul.w	r2, r3, r2
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	61fb      	str	r3, [r7, #28]
      break;
 8005e1c:	e025      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e24:	d121      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        frequency = HAL_RCC_GetSysClockFreq();
 8005e26:	f7ff f907 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
      break;
 8005e2c:	e01d      	b.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      break;
 8005e2e:	bf00      	nop
 8005e30:	e01c      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e32:	bf00      	nop
 8005e34:	e01a      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e36:	bf00      	nop
 8005e38:	e018      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e3a:	bf00      	nop
 8005e3c:	e016      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e3e:	bf00      	nop
 8005e40:	e014      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e42:	bf00      	nop
 8005e44:	e012      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e46:	bf00      	nop
 8005e48:	e010      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e00e      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e00c      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e52:	bf00      	nop
 8005e54:	e00a      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e56:	bf00      	nop
 8005e58:	e008      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e5a:	bf00      	nop
 8005e5c:	e006      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e004      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e62:	bf00      	nop
 8005e64:	e002      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8005e6a:	bf00      	nop
    }
  }

  return(frequency);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40021000 	.word	0x40021000

08005e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e049      	b.n	8005f22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fb fd52 	bl	800194c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 f898 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d001      	beq.n	8005f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e042      	b.n	8005fca <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <HAL_TIM_Base_Start+0xac>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d018      	beq.n	8005f88 <HAL_TIM_Base_Start+0x5c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d013      	beq.n	8005f88 <HAL_TIM_Base_Start+0x5c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1d      	ldr	r2, [pc, #116]	; (8005fdc <HAL_TIM_Base_Start+0xb0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00e      	beq.n	8005f88 <HAL_TIM_Base_Start+0x5c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1c      	ldr	r2, [pc, #112]	; (8005fe0 <HAL_TIM_Base_Start+0xb4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d009      	beq.n	8005f88 <HAL_TIM_Base_Start+0x5c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <HAL_TIM_Base_Start+0xb8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_TIM_Base_Start+0x5c>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <HAL_TIM_Base_Start+0xbc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d115      	bne.n	8005fb4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689a      	ldr	r2, [r3, #8]
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <HAL_TIM_Base_Start+0xc0>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b06      	cmp	r3, #6
 8005f98:	d015      	beq.n	8005fc6 <HAL_TIM_Base_Start+0x9a>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa0:	d011      	beq.n	8005fc6 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0201 	orr.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb2:	e008      	b.n	8005fc6 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	e000      	b.n	8005fc8 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40013400 	.word	0x40013400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	00010007 	.word	0x00010007

08005ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a42      	ldr	r2, [pc, #264]	; (800610c <TIM_Base_SetConfig+0x11c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00f      	beq.n	8006028 <TIM_Base_SetConfig+0x38>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d00b      	beq.n	8006028 <TIM_Base_SetConfig+0x38>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3f      	ldr	r2, [pc, #252]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_Base_SetConfig+0x38>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3e      	ldr	r2, [pc, #248]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_Base_SetConfig+0x38>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3d      	ldr	r2, [pc, #244]	; (8006118 <TIM_Base_SetConfig+0x128>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d108      	bne.n	800603a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a33      	ldr	r2, [pc, #204]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01b      	beq.n	800607a <TIM_Base_SetConfig+0x8a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006048:	d017      	beq.n	800607a <TIM_Base_SetConfig+0x8a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a30      	ldr	r2, [pc, #192]	; (8006110 <TIM_Base_SetConfig+0x120>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <TIM_Base_SetConfig+0x8a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2f      	ldr	r2, [pc, #188]	; (8006114 <TIM_Base_SetConfig+0x124>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00f      	beq.n	800607a <TIM_Base_SetConfig+0x8a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2e      	ldr	r2, [pc, #184]	; (8006118 <TIM_Base_SetConfig+0x128>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00b      	beq.n	800607a <TIM_Base_SetConfig+0x8a>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2d      	ldr	r2, [pc, #180]	; (800611c <TIM_Base_SetConfig+0x12c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <TIM_Base_SetConfig+0x8a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <TIM_Base_SetConfig+0x130>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_Base_SetConfig+0x8a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a2b      	ldr	r2, [pc, #172]	; (8006124 <TIM_Base_SetConfig+0x134>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d108      	bne.n	800608c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a16      	ldr	r2, [pc, #88]	; (800610c <TIM_Base_SetConfig+0x11c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00f      	beq.n	80060d8 <TIM_Base_SetConfig+0xe8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <TIM_Base_SetConfig+0x128>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00b      	beq.n	80060d8 <TIM_Base_SetConfig+0xe8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a16      	ldr	r2, [pc, #88]	; (800611c <TIM_Base_SetConfig+0x12c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d007      	beq.n	80060d8 <TIM_Base_SetConfig+0xe8>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a15      	ldr	r2, [pc, #84]	; (8006120 <TIM_Base_SetConfig+0x130>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_Base_SetConfig+0xe8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a14      	ldr	r2, [pc, #80]	; (8006124 <TIM_Base_SetConfig+0x134>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d103      	bne.n	80060e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	611a      	str	r2, [r3, #16]
  }
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40013400 	.word	0x40013400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800

08006128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800613c:	2302      	movs	r3, #2
 800613e:	e065      	b.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d004      	beq.n	8006174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2b      	ldr	r2, [pc, #172]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d108      	bne.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800617a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800618c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006190:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b6:	d013      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a18      	ldr	r2, [pc, #96]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a17      	ldr	r2, [pc, #92]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a12      	ldr	r2, [pc, #72]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a13      	ldr	r2, [pc, #76]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10c      	bne.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40013400 	.word	0x40013400
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800
 8006228:	40014000 	.word	0x40014000

0800622c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e042      	b.n	80062c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fb fb23 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2224      	movs	r2, #36	; 0x24
 800625a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 faf4 	bl	8006864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f825 	bl	80062cc <UART_SetConfig>
 8006282:	4603      	mov	r3, r0
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e01b      	b.n	80062c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800629a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fb73 	bl	80069a8 <UART_CheckIdleState>
 80062c2:	4603      	mov	r3, r0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062d0:	b08c      	sub	sp, #48	; 0x30
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4bab      	ldr	r3, [pc, #684]	; (80065a8 <UART_SetConfig+0x2dc>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006304:	430b      	orrs	r3, r1
 8006306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4aa0      	ldr	r2, [pc, #640]	; (80065ac <UART_SetConfig+0x2e0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006334:	4313      	orrs	r3, r2
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006342:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634c:	430b      	orrs	r3, r1
 800634e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	f023 010f 	bic.w	r1, r3, #15
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a91      	ldr	r2, [pc, #580]	; (80065b0 <UART_SetConfig+0x2e4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d125      	bne.n	80063bc <UART_SetConfig+0xf0>
 8006370:	4b90      	ldr	r3, [pc, #576]	; (80065b4 <UART_SetConfig+0x2e8>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d81a      	bhi.n	80063b4 <UART_SetConfig+0xe8>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0xb8>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	08006395 	.word	0x08006395
 8006388:	080063a5 	.word	0x080063a5
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063ad 	.word	0x080063ad
 8006394:	2301      	movs	r3, #1
 8006396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639a:	e0d6      	b.n	800654a <UART_SetConfig+0x27e>
 800639c:	2302      	movs	r3, #2
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a2:	e0d2      	b.n	800654a <UART_SetConfig+0x27e>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063aa:	e0ce      	b.n	800654a <UART_SetConfig+0x27e>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b2:	e0ca      	b.n	800654a <UART_SetConfig+0x27e>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ba:	e0c6      	b.n	800654a <UART_SetConfig+0x27e>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7d      	ldr	r2, [pc, #500]	; (80065b8 <UART_SetConfig+0x2ec>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d138      	bne.n	8006438 <UART_SetConfig+0x16c>
 80063c6:	4b7b      	ldr	r3, [pc, #492]	; (80065b4 <UART_SetConfig+0x2e8>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b0c      	cmp	r3, #12
 80063d2:	d82d      	bhi.n	8006430 <UART_SetConfig+0x164>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <UART_SetConfig+0x110>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006411 	.word	0x08006411
 80063e0:	08006431 	.word	0x08006431
 80063e4:	08006431 	.word	0x08006431
 80063e8:	08006431 	.word	0x08006431
 80063ec:	08006421 	.word	0x08006421
 80063f0:	08006431 	.word	0x08006431
 80063f4:	08006431 	.word	0x08006431
 80063f8:	08006431 	.word	0x08006431
 80063fc:	08006419 	.word	0x08006419
 8006400:	08006431 	.word	0x08006431
 8006404:	08006431 	.word	0x08006431
 8006408:	08006431 	.word	0x08006431
 800640c:	08006429 	.word	0x08006429
 8006410:	2300      	movs	r3, #0
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006416:	e098      	b.n	800654a <UART_SetConfig+0x27e>
 8006418:	2302      	movs	r3, #2
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641e:	e094      	b.n	800654a <UART_SetConfig+0x27e>
 8006420:	2304      	movs	r3, #4
 8006422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006426:	e090      	b.n	800654a <UART_SetConfig+0x27e>
 8006428:	2308      	movs	r3, #8
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642e:	e08c      	b.n	800654a <UART_SetConfig+0x27e>
 8006430:	2310      	movs	r3, #16
 8006432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006436:	e088      	b.n	800654a <UART_SetConfig+0x27e>
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a5f      	ldr	r2, [pc, #380]	; (80065bc <UART_SetConfig+0x2f0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d125      	bne.n	800648e <UART_SetConfig+0x1c2>
 8006442:	4b5c      	ldr	r3, [pc, #368]	; (80065b4 <UART_SetConfig+0x2e8>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800644c:	2b30      	cmp	r3, #48	; 0x30
 800644e:	d016      	beq.n	800647e <UART_SetConfig+0x1b2>
 8006450:	2b30      	cmp	r3, #48	; 0x30
 8006452:	d818      	bhi.n	8006486 <UART_SetConfig+0x1ba>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d00a      	beq.n	800646e <UART_SetConfig+0x1a2>
 8006458:	2b20      	cmp	r3, #32
 800645a:	d814      	bhi.n	8006486 <UART_SetConfig+0x1ba>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <UART_SetConfig+0x19a>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d008      	beq.n	8006476 <UART_SetConfig+0x1aa>
 8006464:	e00f      	b.n	8006486 <UART_SetConfig+0x1ba>
 8006466:	2300      	movs	r3, #0
 8006468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646c:	e06d      	b.n	800654a <UART_SetConfig+0x27e>
 800646e:	2302      	movs	r3, #2
 8006470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006474:	e069      	b.n	800654a <UART_SetConfig+0x27e>
 8006476:	2304      	movs	r3, #4
 8006478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800647c:	e065      	b.n	800654a <UART_SetConfig+0x27e>
 800647e:	2308      	movs	r3, #8
 8006480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006484:	e061      	b.n	800654a <UART_SetConfig+0x27e>
 8006486:	2310      	movs	r3, #16
 8006488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648c:	e05d      	b.n	800654a <UART_SetConfig+0x27e>
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4b      	ldr	r2, [pc, #300]	; (80065c0 <UART_SetConfig+0x2f4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d125      	bne.n	80064e4 <UART_SetConfig+0x218>
 8006498:	4b46      	ldr	r3, [pc, #280]	; (80065b4 <UART_SetConfig+0x2e8>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064a2:	2bc0      	cmp	r3, #192	; 0xc0
 80064a4:	d016      	beq.n	80064d4 <UART_SetConfig+0x208>
 80064a6:	2bc0      	cmp	r3, #192	; 0xc0
 80064a8:	d818      	bhi.n	80064dc <UART_SetConfig+0x210>
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d00a      	beq.n	80064c4 <UART_SetConfig+0x1f8>
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d814      	bhi.n	80064dc <UART_SetConfig+0x210>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <UART_SetConfig+0x1f0>
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d008      	beq.n	80064cc <UART_SetConfig+0x200>
 80064ba:	e00f      	b.n	80064dc <UART_SetConfig+0x210>
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c2:	e042      	b.n	800654a <UART_SetConfig+0x27e>
 80064c4:	2302      	movs	r3, #2
 80064c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ca:	e03e      	b.n	800654a <UART_SetConfig+0x27e>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d2:	e03a      	b.n	800654a <UART_SetConfig+0x27e>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064da:	e036      	b.n	800654a <UART_SetConfig+0x27e>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e2:	e032      	b.n	800654a <UART_SetConfig+0x27e>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a30      	ldr	r2, [pc, #192]	; (80065ac <UART_SetConfig+0x2e0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d12a      	bne.n	8006544 <UART_SetConfig+0x278>
 80064ee:	4b31      	ldr	r3, [pc, #196]	; (80065b4 <UART_SetConfig+0x2e8>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064fc:	d01a      	beq.n	8006534 <UART_SetConfig+0x268>
 80064fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006502:	d81b      	bhi.n	800653c <UART_SetConfig+0x270>
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006508:	d00c      	beq.n	8006524 <UART_SetConfig+0x258>
 800650a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650e:	d815      	bhi.n	800653c <UART_SetConfig+0x270>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <UART_SetConfig+0x250>
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d008      	beq.n	800652c <UART_SetConfig+0x260>
 800651a:	e00f      	b.n	800653c <UART_SetConfig+0x270>
 800651c:	2300      	movs	r3, #0
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e012      	b.n	800654a <UART_SetConfig+0x27e>
 8006524:	2302      	movs	r3, #2
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652a:	e00e      	b.n	800654a <UART_SetConfig+0x27e>
 800652c:	2304      	movs	r3, #4
 800652e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006532:	e00a      	b.n	800654a <UART_SetConfig+0x27e>
 8006534:	2308      	movs	r3, #8
 8006536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653a:	e006      	b.n	800654a <UART_SetConfig+0x27e>
 800653c:	2310      	movs	r3, #16
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006542:	e002      	b.n	800654a <UART_SetConfig+0x27e>
 8006544:	2310      	movs	r3, #16
 8006546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a17      	ldr	r2, [pc, #92]	; (80065ac <UART_SetConfig+0x2e0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	f040 80a8 	bne.w	80066a6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006556:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800655a:	2b08      	cmp	r3, #8
 800655c:	d834      	bhi.n	80065c8 <UART_SetConfig+0x2fc>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x298>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006589 	.word	0x08006589
 8006568:	080065c9 	.word	0x080065c9
 800656c:	08006591 	.word	0x08006591
 8006570:	080065c9 	.word	0x080065c9
 8006574:	08006597 	.word	0x08006597
 8006578:	080065c9 	.word	0x080065c9
 800657c:	080065c9 	.word	0x080065c9
 8006580:	080065c9 	.word	0x080065c9
 8006584:	0800659f 	.word	0x0800659f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe fdc4 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800658e:	e021      	b.n	80065d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <UART_SetConfig+0x2f8>)
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006594:	e01e      	b.n	80065d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006596:	f7fe fd4f 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 800659a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800659c:	e01a      	b.n	80065d4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065a4:	e016      	b.n	80065d4 <UART_SetConfig+0x308>
 80065a6:	bf00      	nop
 80065a8:	cfff69f3 	.word	0xcfff69f3
 80065ac:	40008000 	.word	0x40008000
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40004400 	.word	0x40004400
 80065bc:	40004800 	.word	0x40004800
 80065c0:	40004c00 	.word	0x40004c00
 80065c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 812a 	beq.w	8006830 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	4a9e      	ldr	r2, [pc, #632]	; (800685c <UART_SetConfig+0x590>)
 80065e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e6:	461a      	mov	r2, r3
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	4413      	add	r3, r2
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d305      	bcc.n	800660c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	429a      	cmp	r2, r3
 800660a:	d903      	bls.n	8006614 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006612:	e10d      	b.n	8006830 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	2200      	movs	r2, #0
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	60fa      	str	r2, [r7, #12]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	4a8e      	ldr	r2, [pc, #568]	; (800685c <UART_SetConfig+0x590>)
 8006622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006626:	b29b      	uxth	r3, r3
 8006628:	2200      	movs	r2, #0
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006636:	f7fa f9dd 	bl	80009f4 <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4610      	mov	r0, r2
 8006640:	4619      	mov	r1, r3
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	020b      	lsls	r3, r1, #8
 800664c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006650:	0202      	lsls	r2, r0, #8
 8006652:	6979      	ldr	r1, [r7, #20]
 8006654:	6849      	ldr	r1, [r1, #4]
 8006656:	0849      	lsrs	r1, r1, #1
 8006658:	2000      	movs	r0, #0
 800665a:	460c      	mov	r4, r1
 800665c:	4605      	mov	r5, r0
 800665e:	eb12 0804 	adds.w	r8, r2, r4
 8006662:	eb43 0905 	adc.w	r9, r3, r5
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	469a      	mov	sl, r3
 800666e:	4693      	mov	fp, r2
 8006670:	4652      	mov	r2, sl
 8006672:	465b      	mov	r3, fp
 8006674:	4640      	mov	r0, r8
 8006676:	4649      	mov	r1, r9
 8006678:	f7fa f9bc 	bl	80009f4 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800668a:	d308      	bcc.n	800669e <UART_SetConfig+0x3d2>
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006692:	d204      	bcs.n	800669e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	e0c8      	b.n	8006830 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066a4:	e0c4      	b.n	8006830 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ae:	d167      	bne.n	8006780 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80066b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d828      	bhi.n	800670a <UART_SetConfig+0x43e>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0x3f4>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066f5 	.word	0x080066f5
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	0800670b 	.word	0x0800670b
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
 80066e0:	08006703 	.word	0x08006703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e4:	f7fe fd16 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 80066e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066ea:	e014      	b.n	8006716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ec:	f7fe fd28 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 80066f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066f2:	e010      	b.n	8006716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f4:	4b5a      	ldr	r3, [pc, #360]	; (8006860 <UART_SetConfig+0x594>)
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066f8:	e00d      	b.n	8006716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fa:	f7fe fc9d 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006700:	e009      	b.n	8006716 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006708:	e005      	b.n	8006716 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 8089 	beq.w	8006830 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	4a4e      	ldr	r2, [pc, #312]	; (800685c <UART_SetConfig+0x590>)
 8006724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006728:	461a      	mov	r2, r3
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006730:	005a      	lsls	r2, r3, #1
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	441a      	add	r2, r3
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006742:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	2b0f      	cmp	r3, #15
 8006748:	d916      	bls.n	8006778 <UART_SetConfig+0x4ac>
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006750:	d212      	bcs.n	8006778 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f023 030f 	bic.w	r3, r3, #15
 800675a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	085b      	lsrs	r3, r3, #1
 8006760:	b29b      	uxth	r3, r3
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	b29a      	uxth	r2, r3
 8006768:	8bfb      	ldrh	r3, [r7, #30]
 800676a:	4313      	orrs	r3, r2
 800676c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	8bfa      	ldrh	r2, [r7, #30]
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	e05b      	b.n	8006830 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800677e:	e057      	b.n	8006830 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006780:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006784:	2b08      	cmp	r3, #8
 8006786:	d828      	bhi.n	80067da <UART_SetConfig+0x50e>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0x4c4>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	080067db 	.word	0x080067db
 80067a0:	080067cb 	.word	0x080067cb
 80067a4:	080067db 	.word	0x080067db
 80067a8:	080067db 	.word	0x080067db
 80067ac:	080067db 	.word	0x080067db
 80067b0:	080067d3 	.word	0x080067d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fe fcae 	bl	8005114 <HAL_RCC_GetPCLK1Freq>
 80067b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067ba:	e014      	b.n	80067e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067bc:	f7fe fcc0 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 80067c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067c2:	e010      	b.n	80067e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c4:	4b26      	ldr	r3, [pc, #152]	; (8006860 <UART_SetConfig+0x594>)
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067c8:	e00d      	b.n	80067e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ca:	f7fe fc35 	bl	8005038 <HAL_RCC_GetSysClockFreq>
 80067ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067d0:	e009      	b.n	80067e6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067d8:	e005      	b.n	80067e6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067e4:	bf00      	nop
    }

    if (pclk != 0U)
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d021      	beq.n	8006830 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	4a1a      	ldr	r2, [pc, #104]	; (800685c <UART_SetConfig+0x590>)
 80067f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f6:	461a      	mov	r2, r3
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	441a      	add	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	fbb2 f3f3 	udiv	r3, r2, r3
 800680e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d909      	bls.n	800682a <UART_SetConfig+0x55e>
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d205      	bcs.n	800682a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	b29a      	uxth	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60da      	str	r2, [r3, #12]
 8006828:	e002      	b.n	8006830 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2201      	movs	r2, #1
 8006834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2201      	movs	r2, #1
 800683c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2200      	movs	r2, #0
 8006844:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2200      	movs	r2, #0
 800684a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800684c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006850:	4618      	mov	r0, r3
 8006852:	3730      	adds	r7, #48	; 0x30
 8006854:	46bd      	mov	sp, r7
 8006856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800685a:	bf00      	nop
 800685c:	080070cc 	.word	0x080070cc
 8006860:	00f42400 	.word	0x00f42400

08006864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01a      	beq.n	800697a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006962:	d10a      	bne.n	800697a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b098      	sub	sp, #96	; 0x60
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b8:	f7fb f8fc 	bl	8001bb4 <HAL_GetTick>
 80069bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d12f      	bne.n	8006a2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069d4:	2200      	movs	r2, #0
 80069d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f88e 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d022      	beq.n	8006a2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	647b      	str	r3, [r7, #68]	; 0x44
 8006a06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e063      	b.n	8006af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d149      	bne.n	8006ace <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a42:	2200      	movs	r2, #0
 8006a44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f857 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03c      	beq.n	8006ace <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	623b      	str	r3, [r7, #32]
   return(result);
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
 8006a74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa6:	61fa      	str	r2, [r7, #28]
 8006aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	69b9      	ldr	r1, [r7, #24]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e012      	b.n	8006af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3758      	adds	r7, #88	; 0x58
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0c:	e04f      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b14:	d04b      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b16:	f7fb f84d 	bl	8001bb4 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d302      	bcc.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e04e      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d037      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d034      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d031      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d110      	bne.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f838 	bl	8006bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2208      	movs	r2, #8
 8006b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e029      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b88:	d111      	bne.n	8006bae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f81e 	bl	8006bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e00f      	b.n	8006bce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d0a0      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b095      	sub	sp, #84	; 0x54
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8006bfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3308      	adds	r3, #8
 8006c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c26:	f023 0301 	bic.w	r3, r3, #1
 8006c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e3      	bne.n	8006c10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d118      	bne.n	8006c82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f023 0310 	bic.w	r3, r3, #16
 8006c64:	647b      	str	r3, [r7, #68]	; 0x44
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6979      	ldr	r1, [r7, #20]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e6      	bne.n	8006c50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c96:	bf00      	nop
 8006c98:	3754      	adds	r7, #84	; 0x54
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b085      	sub	sp, #20
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e027      	b.n	8006d08 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2224      	movs	r2, #36	; 0x24
 8006cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0201 	bic.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ce6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e02d      	b.n	8006d88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2224      	movs	r2, #36	; 0x24
 8006d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f84f 	bl	8006e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e02d      	b.n	8006e04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2224      	movs	r2, #36	; 0x24
 8006db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0201 	bic.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f811 	bl	8006e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d108      	bne.n	8006e2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e2c:	e031      	b.n	8006e92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e2e:	2308      	movs	r3, #8
 8006e30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e32:	2308      	movs	r3, #8
 8006e34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	0e5b      	lsrs	r3, r3, #25
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	0f5b      	lsrs	r3, r3, #29
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	7b3a      	ldrb	r2, [r7, #12]
 8006e5a:	4911      	ldr	r1, [pc, #68]	; (8006ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8006e5c:	5c8a      	ldrb	r2, [r1, r2]
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e62:	7b3a      	ldrb	r2, [r7, #12]
 8006e64:	490f      	ldr	r1, [pc, #60]	; (8006ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8006e66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	7b7a      	ldrb	r2, [r7, #13]
 8006e78:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8006e7a:	5c8a      	ldrb	r2, [r1, r2]
 8006e7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e80:	7b7a      	ldrb	r2, [r7, #13]
 8006e82:	4908      	ldr	r1, [pc, #32]	; (8006ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8006e84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	080070e4 	.word	0x080070e4
 8006ea4:	080070ec 	.word	0x080070ec

08006ea8 <malloc>:
 8006ea8:	4b02      	ldr	r3, [pc, #8]	; (8006eb4 <malloc+0xc>)
 8006eaa:	4601      	mov	r1, r0
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	f000 b823 	b.w	8006ef8 <_malloc_r>
 8006eb2:	bf00      	nop
 8006eb4:	20000058 	.word	0x20000058

08006eb8 <sbrk_aligned>:
 8006eb8:	b570      	push	{r4, r5, r6, lr}
 8006eba:	4e0e      	ldr	r6, [pc, #56]	; (8006ef4 <sbrk_aligned+0x3c>)
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	6831      	ldr	r1, [r6, #0]
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	b911      	cbnz	r1, 8006eca <sbrk_aligned+0x12>
 8006ec4:	f000 f8ac 	bl	8007020 <_sbrk_r>
 8006ec8:	6030      	str	r0, [r6, #0]
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f000 f8a7 	bl	8007020 <_sbrk_r>
 8006ed2:	1c43      	adds	r3, r0, #1
 8006ed4:	d00a      	beq.n	8006eec <sbrk_aligned+0x34>
 8006ed6:	1cc4      	adds	r4, r0, #3
 8006ed8:	f024 0403 	bic.w	r4, r4, #3
 8006edc:	42a0      	cmp	r0, r4
 8006ede:	d007      	beq.n	8006ef0 <sbrk_aligned+0x38>
 8006ee0:	1a21      	subs	r1, r4, r0
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f89c 	bl	8007020 <_sbrk_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d101      	bne.n	8006ef0 <sbrk_aligned+0x38>
 8006eec:	f04f 34ff 	mov.w	r4, #4294967295
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	20000378 	.word	0x20000378

08006ef8 <_malloc_r>:
 8006ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006efc:	1ccd      	adds	r5, r1, #3
 8006efe:	f025 0503 	bic.w	r5, r5, #3
 8006f02:	3508      	adds	r5, #8
 8006f04:	2d0c      	cmp	r5, #12
 8006f06:	bf38      	it	cc
 8006f08:	250c      	movcc	r5, #12
 8006f0a:	2d00      	cmp	r5, #0
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	db01      	blt.n	8006f14 <_malloc_r+0x1c>
 8006f10:	42a9      	cmp	r1, r5
 8006f12:	d905      	bls.n	8006f20 <_malloc_r+0x28>
 8006f14:	230c      	movs	r3, #12
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	2600      	movs	r6, #0
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ff4 <_malloc_r+0xfc>
 8006f24:	f000 f868 	bl	8006ff8 <__malloc_lock>
 8006f28:	f8d8 3000 	ldr.w	r3, [r8]
 8006f2c:	461c      	mov	r4, r3
 8006f2e:	bb5c      	cbnz	r4, 8006f88 <_malloc_r+0x90>
 8006f30:	4629      	mov	r1, r5
 8006f32:	4638      	mov	r0, r7
 8006f34:	f7ff ffc0 	bl	8006eb8 <sbrk_aligned>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	d155      	bne.n	8006fea <_malloc_r+0xf2>
 8006f3e:	f8d8 4000 	ldr.w	r4, [r8]
 8006f42:	4626      	mov	r6, r4
 8006f44:	2e00      	cmp	r6, #0
 8006f46:	d145      	bne.n	8006fd4 <_malloc_r+0xdc>
 8006f48:	2c00      	cmp	r4, #0
 8006f4a:	d048      	beq.n	8006fde <_malloc_r+0xe6>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4638      	mov	r0, r7
 8006f52:	eb04 0903 	add.w	r9, r4, r3
 8006f56:	f000 f863 	bl	8007020 <_sbrk_r>
 8006f5a:	4581      	cmp	r9, r0
 8006f5c:	d13f      	bne.n	8006fde <_malloc_r+0xe6>
 8006f5e:	6821      	ldr	r1, [r4, #0]
 8006f60:	1a6d      	subs	r5, r5, r1
 8006f62:	4629      	mov	r1, r5
 8006f64:	4638      	mov	r0, r7
 8006f66:	f7ff ffa7 	bl	8006eb8 <sbrk_aligned>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d037      	beq.n	8006fde <_malloc_r+0xe6>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	442b      	add	r3, r5
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	f8d8 3000 	ldr.w	r3, [r8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d038      	beq.n	8006fee <_malloc_r+0xf6>
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	42a2      	cmp	r2, r4
 8006f80:	d12b      	bne.n	8006fda <_malloc_r+0xe2>
 8006f82:	2200      	movs	r2, #0
 8006f84:	605a      	str	r2, [r3, #4]
 8006f86:	e00f      	b.n	8006fa8 <_malloc_r+0xb0>
 8006f88:	6822      	ldr	r2, [r4, #0]
 8006f8a:	1b52      	subs	r2, r2, r5
 8006f8c:	d41f      	bmi.n	8006fce <_malloc_r+0xd6>
 8006f8e:	2a0b      	cmp	r2, #11
 8006f90:	d917      	bls.n	8006fc2 <_malloc_r+0xca>
 8006f92:	1961      	adds	r1, r4, r5
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	6025      	str	r5, [r4, #0]
 8006f98:	bf18      	it	ne
 8006f9a:	6059      	strne	r1, [r3, #4]
 8006f9c:	6863      	ldr	r3, [r4, #4]
 8006f9e:	bf08      	it	eq
 8006fa0:	f8c8 1000 	streq.w	r1, [r8]
 8006fa4:	5162      	str	r2, [r4, r5]
 8006fa6:	604b      	str	r3, [r1, #4]
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f104 060b 	add.w	r6, r4, #11
 8006fae:	f000 f829 	bl	8007004 <__malloc_unlock>
 8006fb2:	f026 0607 	bic.w	r6, r6, #7
 8006fb6:	1d23      	adds	r3, r4, #4
 8006fb8:	1af2      	subs	r2, r6, r3
 8006fba:	d0ae      	beq.n	8006f1a <_malloc_r+0x22>
 8006fbc:	1b9b      	subs	r3, r3, r6
 8006fbe:	50a3      	str	r3, [r4, r2]
 8006fc0:	e7ab      	b.n	8006f1a <_malloc_r+0x22>
 8006fc2:	42a3      	cmp	r3, r4
 8006fc4:	6862      	ldr	r2, [r4, #4]
 8006fc6:	d1dd      	bne.n	8006f84 <_malloc_r+0x8c>
 8006fc8:	f8c8 2000 	str.w	r2, [r8]
 8006fcc:	e7ec      	b.n	8006fa8 <_malloc_r+0xb0>
 8006fce:	4623      	mov	r3, r4
 8006fd0:	6864      	ldr	r4, [r4, #4]
 8006fd2:	e7ac      	b.n	8006f2e <_malloc_r+0x36>
 8006fd4:	4634      	mov	r4, r6
 8006fd6:	6876      	ldr	r6, [r6, #4]
 8006fd8:	e7b4      	b.n	8006f44 <_malloc_r+0x4c>
 8006fda:	4613      	mov	r3, r2
 8006fdc:	e7cc      	b.n	8006f78 <_malloc_r+0x80>
 8006fde:	230c      	movs	r3, #12
 8006fe0:	603b      	str	r3, [r7, #0]
 8006fe2:	4638      	mov	r0, r7
 8006fe4:	f000 f80e 	bl	8007004 <__malloc_unlock>
 8006fe8:	e797      	b.n	8006f1a <_malloc_r+0x22>
 8006fea:	6025      	str	r5, [r4, #0]
 8006fec:	e7dc      	b.n	8006fa8 <_malloc_r+0xb0>
 8006fee:	605b      	str	r3, [r3, #4]
 8006ff0:	deff      	udf	#255	; 0xff
 8006ff2:	bf00      	nop
 8006ff4:	20000374 	.word	0x20000374

08006ff8 <__malloc_lock>:
 8006ff8:	4801      	ldr	r0, [pc, #4]	; (8007000 <__malloc_lock+0x8>)
 8006ffa:	f000 b84b 	b.w	8007094 <__retarget_lock_acquire_recursive>
 8006ffe:	bf00      	nop
 8007000:	200004b8 	.word	0x200004b8

08007004 <__malloc_unlock>:
 8007004:	4801      	ldr	r0, [pc, #4]	; (800700c <__malloc_unlock+0x8>)
 8007006:	f000 b846 	b.w	8007096 <__retarget_lock_release_recursive>
 800700a:	bf00      	nop
 800700c:	200004b8 	.word	0x200004b8

08007010 <memset>:
 8007010:	4402      	add	r2, r0
 8007012:	4603      	mov	r3, r0
 8007014:	4293      	cmp	r3, r2
 8007016:	d100      	bne.n	800701a <memset+0xa>
 8007018:	4770      	bx	lr
 800701a:	f803 1b01 	strb.w	r1, [r3], #1
 800701e:	e7f9      	b.n	8007014 <memset+0x4>

08007020 <_sbrk_r>:
 8007020:	b538      	push	{r3, r4, r5, lr}
 8007022:	4d06      	ldr	r5, [pc, #24]	; (800703c <_sbrk_r+0x1c>)
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	4608      	mov	r0, r1
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	f7fa fcec 	bl	8001a08 <_sbrk>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_sbrk_r+0x1a>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_sbrk_r+0x1a>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	200004b4 	.word	0x200004b4

08007040 <__errno>:
 8007040:	4b01      	ldr	r3, [pc, #4]	; (8007048 <__errno+0x8>)
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000058 	.word	0x20000058

0800704c <__libc_init_array>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4d0d      	ldr	r5, [pc, #52]	; (8007084 <__libc_init_array+0x38>)
 8007050:	4c0d      	ldr	r4, [pc, #52]	; (8007088 <__libc_init_array+0x3c>)
 8007052:	1b64      	subs	r4, r4, r5
 8007054:	10a4      	asrs	r4, r4, #2
 8007056:	2600      	movs	r6, #0
 8007058:	42a6      	cmp	r6, r4
 800705a:	d109      	bne.n	8007070 <__libc_init_array+0x24>
 800705c:	4d0b      	ldr	r5, [pc, #44]	; (800708c <__libc_init_array+0x40>)
 800705e:	4c0c      	ldr	r4, [pc, #48]	; (8007090 <__libc_init_array+0x44>)
 8007060:	f000 f81a 	bl	8007098 <_init>
 8007064:	1b64      	subs	r4, r4, r5
 8007066:	10a4      	asrs	r4, r4, #2
 8007068:	2600      	movs	r6, #0
 800706a:	42a6      	cmp	r6, r4
 800706c:	d105      	bne.n	800707a <__libc_init_array+0x2e>
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	f855 3b04 	ldr.w	r3, [r5], #4
 8007074:	4798      	blx	r3
 8007076:	3601      	adds	r6, #1
 8007078:	e7ee      	b.n	8007058 <__libc_init_array+0xc>
 800707a:	f855 3b04 	ldr.w	r3, [r5], #4
 800707e:	4798      	blx	r3
 8007080:	3601      	adds	r6, #1
 8007082:	e7f2      	b.n	800706a <__libc_init_array+0x1e>
 8007084:	080070fc 	.word	0x080070fc
 8007088:	080070fc 	.word	0x080070fc
 800708c:	080070fc 	.word	0x080070fc
 8007090:	08007100 	.word	0x08007100

08007094 <__retarget_lock_acquire_recursive>:
 8007094:	4770      	bx	lr

08007096 <__retarget_lock_release_recursive>:
 8007096:	4770      	bx	lr

08007098 <_init>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr

080070a4 <_fini>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr
