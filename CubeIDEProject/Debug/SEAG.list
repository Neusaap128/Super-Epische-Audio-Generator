
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a94  08007a94  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000060  08007afc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  08007afc  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e843  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039fe  00000000  00000000  0003e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa8  00000000  00000000  00042318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ce  00000000  00000000  00043dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022094  00000000  00000000  0004528e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000208b4  00000000  00000000  00067322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2f28  00000000  00000000  00087bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077a4  00000000  00000000  0016ab00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001722a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007a30 	.word	0x08007a30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08007a30 	.word	0x08007a30

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

	ResetCodec(hi2c1);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f827 	bl	8000d4c <ResetCodec>

	HAL_Delay(25);
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 ffc2 	bl	8001c88 <HAL_Delay>

	//un mute left channel
	WriteCodecRegister(hi2c1, 0x00, 0b100010111);
 8000d04:	f240 1217 	movw	r2, #279	; 0x117
 8000d08:	2100      	movs	r1, #0
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f82b 	bl	8000d66 <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 1 << 7);
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	2101      	movs	r1, #1
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f826 	bl	8000d66 <WriteCodecRegister>


	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000d1a:	f240 1279 	movw	r2, #377	; 0x179
 8000d1e:	2102      	movs	r1, #2
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f820 	bl	8000d66 <WriteCodecRegister>

	// power management R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b011101000);
 8000d26:	22e8      	movs	r2, #232	; 0xe8
 8000d28:	2119      	movs	r1, #25
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f81b 	bl	8000d66 <WriteCodecRegister>

	// enable left input PGA
	WriteCodecRegister(hi2c1, 0x2F, 0b000100000);
 8000d30:	2220      	movs	r2, #32
 8000d32:	212f      	movs	r1, #47	; 0x2f
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f816 	bl	8000d66 <WriteCodecRegister>

	// Disable master mode codec
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 8000d3a:	220a      	movs	r2, #10
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f811 	bl	8000d66 <WriteCodecRegister>

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/


}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	210f      	movs	r1, #15
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f804 	bl	8000d66 <WriteCodecRegister>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint16_t reg, uint16_t pData){
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b088      	sub	sp, #32
 8000d6a:	af04      	add	r7, sp, #16
 8000d6c:	6078      	str	r0, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	uint8_t lowByte = (uint8_t)(pData & 0xFF);
 8000d76:	883b      	ldrh	r3, [r7, #0]
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	73fb      	strb	r3, [r7, #15]
	uint8_t highByte= (uint8_t)(pData >> 8);
 8000d7c:	883b      	ldrh	r3, [r7, #0]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &highByte, 1, HAL_MAX_DELAY);
 8000d86:	2334      	movs	r3, #52	; 0x34
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	9302      	str	r3, [sp, #8]
 8000d92:	2301      	movs	r3, #1
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	f107 030e 	add.w	r3, r7, #14
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f003 faf0 	bl	8004384 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 8000da4:	2334      	movs	r3, #52	; 0x34
 8000da6:	b299      	uxth	r1, r3
 8000da8:	887a      	ldrh	r2, [r7, #2]
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	2301      	movs	r3, #1
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	f107 030f 	add.w	r3, r7, #15
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f003 fae1 	bl	8004384 <HAL_I2C_Mem_Write>

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 fd33 	bl	8007840 <malloc>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <InitDSP+0x2c>)
 8000de0:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000de2:	2340      	movs	r3, #64	; 0x40
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 fd2a 	bl	8007840 <malloc>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <InitDSP+0x30>)
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000007c 	.word	0x2000007c
 8000dfc:	20000080 	.word	0x20000080

08000e00 <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const uint16_t* input, uint16_t* output, size_t bufferLength) {
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e00c      	b.n	8000e2c <processBuffer+0x2c>
        output[i] = input[i];
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	441a      	add	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	68b9      	ldr	r1, [r7, #8]
 8000e20:	440b      	add	r3, r1
 8000e22:	8812      	ldrh	r2, [r2, #0]
 8000e24:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferLength; i++) {
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8ee      	bhi.n	8000e12 <processBuffer+0x12>
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000e34:	bf00      	nop
 8000e36:	bf00      	nop
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <HAL_ADC_ConvHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000e50:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000e54:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000e56:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	490b      	ldr	r1, [pc, #44]	; (8000e88 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000e5e:	f7ff ffcf 	bl	8000e00 <processBuffer>

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f003 f9d5 	bl	8004218 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]

}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000570 	.word	0x20000570
 8000e80:	20000370 	.word	0x20000370
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000470 	.word	0x20000470
 8000e8c:	20000574 	.word	0x20000574

08000e90 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <HAL_ADC_ConvCpltCallback+0x3c>)
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x40>)
 8000e9c:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_ADC_ConvCpltCallback+0x44>)
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000ea2:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)(adcBuf+AUDIO_BUFFER_SIZE/2), (uint16_t*)(dacBuf+AUDIO_BUFFER_SIZE/2), AUDIO_BUFFER_SIZE/2);
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_ADC_ConvCpltCallback+0x40>)
 8000ea6:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <HAL_ADC_ConvCpltCallback+0x48>)
 8000ea8:	2240      	movs	r2, #64	; 0x40
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ffa8 	bl	8000e00 <processBuffer>
	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f003 f9ae 	bl	8004218 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000570 	.word	0x20000570
 8000ed0:	200003f0 	.word	0x200003f0
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	200004f0 	.word	0x200004f0
 8000edc:	20000574 	.word	0x20000574

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fe5e 	bl	8001ba6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f83f 	bl	8000f6c <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000eee:	b662      	cpsie	i
}
 8000ef0:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef2:	f000 fa99 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef6:	f000 fa65 	bl	80013c4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000efa:	f000 f9c7 	bl	800128c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000efe:	f000 f881 	bl	8001004 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f02:	f000 f8f9 	bl	80010f8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000f06:	f000 fa0b 	bl	8001320 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000f0a:	f000 f92f 	bl	800116c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000f0e:	f000 f96d 	bl	80011ec <MX_I2S2_Init>
  MX_I2S3_Init();
 8000f12:	f000 f993 	bl	800123c <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <main+0x70>)
 8000f18:	f005 fcd4 	bl	80068c4 <HAL_TIM_Base_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  InitDSP();
 8000f1c:	f7ff ff56 	bl	8000dcc <InitDSP>

  CodecInit(&hi2c1);
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <main+0x74>)
 8000f22:	f7ff fee5 	bl	8000cf0 <CodecInit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, AUDIO_BUFFER_SIZE);
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	490b      	ldr	r1, [pc, #44]	; (8000f58 <main+0x78>)
 8000f2a:	480c      	ldr	r0, [pc, #48]	; (8000f5c <main+0x7c>)
 8000f2c:	f001 fa70 	bl	8002410 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacBuf, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000f30:	2300      	movs	r3, #0
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <main+0x80>)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	480a      	ldr	r0, [pc, #40]	; (8000f64 <main+0x84>)
 8000f3c:	f002 fa2c 	bl	8003398 <HAL_DAC_Start_DMA>
      //float sinVal = (sin( (float)timerValue/3863*2*M_PI)+1)/2 *3.3;
      //uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      //DAC1->DHR12R1 = dacOutput;
	  HAL_I2S_Transmit(&hi2s2,  0x55, 2, HAL_MAX_DELAY);
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	2202      	movs	r2, #2
 8000f46:	2155      	movs	r1, #85	; 0x55
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <main+0x88>)
 8000f4a:	f003 ff15 	bl	8004d78 <HAL_I2S_Transmit>
 8000f4e:	e7f7      	b.n	8000f40 <main+0x60>
 8000f50:	20000324 	.word	0x20000324
 8000f54:	200001c4 	.word	0x200001c4
 8000f58:	20000370 	.word	0x20000370
 8000f5c:	20000084 	.word	0x20000084
 8000f60:	20000470 	.word	0x20000470
 8000f64:	20000150 	.word	0x20000150
 8000f68:	20000218 	.word	0x20000218

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0318 	add.w	r3, r7, #24
 8000f76:	2238      	movs	r2, #56	; 0x38
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 fd14 	bl	80079a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f004 f81c 	bl	8004fcc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000faa:	2304      	movs	r3, #4
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fae:	2355      	movs	r3, #85	; 0x55
 8000fb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 f8b6 	bl	8005134 <HAL_RCC_OscConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fce:	f000 fa93 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 fbb4 	bl	8005758 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ff6:	f000 fa7f 	bl	80014f8 <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3750      	adds	r7, #80	; 0x50
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f006 fcc3 	bl	80079a8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001022:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001024:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001028:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <MX_ADC1_Init+0xec>)
 800102c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001030:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <MX_ADC1_Init+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001044:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <MX_ADC1_Init+0xec>)
 800104c:	2204      	movs	r2, #4
 800104e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001052:	2200      	movs	r2, #0
 8001054:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001058:	2201      	movs	r2, #1
 800105a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_ADC1_Init+0xec>)
 800105e:	2201      	movs	r2, #1
 8001060:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_ADC1_Init+0xec>)
 800106c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001074:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001078:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0xec>)
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <MX_ADC1_Init+0xec>)
 8001092:	f001 f839 	bl	8002108 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800109c:	f000 fa2c 	bl	80014f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <MX_ADC1_Init+0xec>)
 80010ac:	f001 ff9e 	bl	8002fec <HAL_ADCEx_MultiModeConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010b6:	f000 fa1f 	bl	80014f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_ADC1_Init+0xf0>)
 80010bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010be:	2306      	movs	r3, #6
 80010c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c6:	237f      	movs	r3, #127	; 0x7f
 80010c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ca:	2304      	movs	r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_ADC1_Init+0xec>)
 80010d8:	f001 fa58 	bl	800258c <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010e2:	f000 fa09 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000084 	.word	0x20000084
 80010f4:	04300002 	.word	0x04300002

080010f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2230      	movs	r2, #48	; 0x30
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fc4f 	bl	80079a8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_DAC1_Init+0x6c>)
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <MX_DAC1_Init+0x70>)
 800110e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001110:	4814      	ldr	r0, [pc, #80]	; (8001164 <MX_DAC1_Init+0x6c>)
 8001112:	f002 f91e 	bl	8003352 <HAL_DAC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800111c:	f000 f9ec 	bl	80014f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001120:	2302      	movs	r3, #2
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001130:	231e      	movs	r3, #30
 8001132:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_DAC1_Init+0x6c>)
 800114c:	f002 fa16 	bl	800357c <HAL_DAC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001156:	f000 f9cf 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3730      	adds	r7, #48	; 0x30
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000150 	.word	0x20000150
 8001168:	50000800 	.word	0x50000800

0800116c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <MX_I2C1_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <MX_I2C1_Init+0x7c>)
 800117a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001184:	2201      	movs	r2, #1
 8001186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011a8:	f003 f850 	bl	800424c <HAL_I2C_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b2:	f000 f9a1 	bl	80014f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011ba:	f003 fc65 	bl	8004a88 <HAL_I2CEx_ConfigAnalogFilter>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c4:	f000 f998 	bl	80014f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011cc:	f003 fca7 	bl	8004b1e <HAL_I2CEx_ConfigDigitalFilter>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 f98f 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200001c4 	.word	0x200001c4
 80011e4:	40005400 	.word	0x40005400
 80011e8:	30a0a7fb 	.word	0x30a0a7fb

080011ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_I2S2_Init+0x48>)
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <MX_I2S2_Init+0x4c>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2S2_Init+0x48>)
 80011f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_I2S2_Init+0x48>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_I2S2_Init+0x48>)
 8001206:	2203      	movs	r2, #3
 8001208:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2S2_Init+0x48>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_I2S2_Init+0x48>)
 8001212:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001216:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2S2_Init+0x48>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_I2S2_Init+0x48>)
 8001220:	f003 fcca 	bl	8004bb8 <HAL_I2S_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800122a:	f000 f965 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000218 	.word	0x20000218
 8001238:	40003800 	.word	0x40003800

0800123c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <MX_I2S3_Init+0x48>)
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <MX_I2S3_Init+0x4c>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_RX;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2S3_Init+0x48>)
 8001248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <MX_I2S3_Init+0x48>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_I2S3_Init+0x48>)
 8001256:	2203      	movs	r2, #3
 8001258:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2S3_Init+0x48>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_I2S3_Init+0x48>)
 8001262:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001266:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2S3_Init+0x48>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_I2S3_Init+0x48>)
 8001270:	f003 fca2 	bl	8004bb8 <HAL_I2S_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2S3_Init+0x42>
  {
    Error_Handler();
 800127a:	f000 f93d 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000254 	.word	0x20000254
 8001288:	40003c00 	.word	0x40003c00

0800128c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 8001292:	4a22      	ldr	r2, [pc, #136]	; (800131c <MX_LPUART1_UART_Init+0x90>)
 8001294:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012ce:	4812      	ldr	r0, [pc, #72]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012d0:	f005 fc78 	bl	8006bc4 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012da:	f000 f90d 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012e2:	f006 f9e3 	bl	80076ac <HAL_UARTEx_SetTxFifoThreshold>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012ec:	f000 f904 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 80012f4:	f006 fa18 	bl	8007728 <HAL_UARTEx_SetRxFifoThreshold>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012fe:	f000 f8fb 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_LPUART1_UART_Init+0x8c>)
 8001304:	f006 f999 	bl	800763a <HAL_UARTEx_DisableFifoMode>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800130e:	f000 f8f3 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000290 	.word	0x20000290
 800131c:	40008000 	.word	0x40008000

08001320 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_TIM6_Init+0x98>)
 8001332:	4a22      	ldr	r2, [pc, #136]	; (80013bc <MX_TIM6_Init+0x9c>)
 8001334:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_TIM6_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_TIM6_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM6_Init+0x98>)
 8001344:	f640 7218 	movw	r2, #3864	; 0xf18
 8001348:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM6_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <MX_TIM6_Init+0x98>)
 8001352:	f005 fa5f 	bl	8006814 <HAL_TIM_Base_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800135c:	f000 f8cc 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001360:	2320      	movs	r3, #32
 8001362:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <MX_TIM6_Init+0x98>)
 800136e:	f005 fba7 	bl	8006ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001378:	f000 f8be 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_TIM6_Init+0xa0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f89b 	bl	80004bc <__aeabi_i2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	a109      	add	r1, pc, #36	; (adr r1, 80013b0 <MX_TIM6_Init+0x90>)
 800138c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001390:	f7ff fa28 	bl	80007e4 <__aeabi_ddiv>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fb0a 	bl	80009b4 <__aeabi_d2uiz>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <MX_TIM6_Init+0x98>)
 80013a4:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	00000000 	.word	0x00000000
 80013b4:	41a443fd 	.word	0x41a443fd
 80013b8:	20000324 	.word	0x20000324
 80013bc:	40001000 	.word	0x40001000
 80013c0:	08007a48 	.word	0x08007a48

080013c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_DMA_Init+0x60>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <MX_DMA_Init+0x60>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6493      	str	r3, [r2, #72]	; 0x48
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_DMA_Init+0x60>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_DMA_Init+0x60>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <MX_DMA_Init+0x60>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6493      	str	r3, [r2, #72]	; 0x48
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MX_DMA_Init+0x60>)
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	200b      	movs	r0, #11
 8001400:	f001 ff73 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001404:	200b      	movs	r0, #11
 8001406:	f001 ff8a 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	200c      	movs	r0, #12
 8001410:	f001 ff6b 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001414:	200c      	movs	r0, #12
 8001416:	f001 ff82 	bl	800331e <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <MX_GPIO_Init+0xc8>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a25      	ldr	r2, [pc, #148]	; (80014f0 <MX_GPIO_Init+0xc8>)
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_GPIO_Init+0xc8>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <MX_GPIO_Init+0xc8>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <MX_GPIO_Init+0xc8>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f002 fe9e 	bl	80041e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_GPIO_Init+0xcc>)
 80014c4:	f002 fd0e 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 80014c8:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f002 fcfe 	bl	8003ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e8:	bf00      	nop
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	48000800 	.word	0x48000800

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_MspInit+0x44>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6613      	str	r3, [r2, #96]	; 0x60
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <HAL_MspInit+0x44>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800153a:	f003 fdeb 	bl	8005114 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b09a      	sub	sp, #104	; 0x68
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2244      	movs	r2, #68	; 0x44
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f006 fa1b 	bl	80079a8 <memset>
  if(hadc->Instance==ADC1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800157a:	d160      	bne.n	800163e <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800157c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001580:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001582:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f004 faff 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001598:	f7ff ffae 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_ADC_MspInit+0xfc>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	4a29      	ldr	r2, [pc, #164]	; (8001648 <HAL_ADC_MspInit+0xfc>)
 80015a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_ADC_MspInit+0xfc>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <HAL_ADC_MspInit+0xfc>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_ADC_MspInit+0xfc>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <HAL_ADC_MspInit+0xfc>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 80015cc:	2301      	movs	r3, #1
 80015ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f002 fc7f 	bl	8003ee4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_ADC_MspInit+0x100>)
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_ADC_MspInit+0x104>)
 80015ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015ec:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_ADC_MspInit+0x100>)
 80015ee:	2205      	movs	r2, #5
 80015f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_ADC_MspInit+0x100>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_ADC_MspInit+0x100>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_ADC_MspInit+0x100>)
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_ADC_MspInit+0x100>)
 8001606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_ADC_MspInit+0x100>)
 800160e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001612:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_ADC_MspInit+0x100>)
 8001616:	2220      	movs	r2, #32
 8001618:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_ADC_MspInit+0x100>)
 800161c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001620:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001622:	480a      	ldr	r0, [pc, #40]	; (800164c <HAL_ADC_MspInit+0x100>)
 8001624:	f002 f9ec 	bl	8003a00 <HAL_DMA_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800162e:	f7ff ff63 	bl	80014f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a05      	ldr	r2, [pc, #20]	; (800164c <HAL_ADC_MspInit+0x100>)
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_ADC_MspInit+0x100>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800163e:	bf00      	nop
 8001640:	3768      	adds	r7, #104	; 0x68
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	200000f0 	.word	0x200000f0
 8001650:	40020008 	.word	0x40020008

08001654 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2b      	ldr	r2, [pc, #172]	; (8001720 <HAL_DAC_MspInit+0xcc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d150      	bne.n	8001718 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_DAC_MspInit+0xd0>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <HAL_DAC_MspInit+0xd0>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <HAL_DAC_MspInit+0xd0>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_DAC_MspInit+0xd0>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_DAC_MspInit+0xd0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_DAC_MspInit+0xd0>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016a6:	2310      	movs	r3, #16
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016aa:	2303      	movs	r3, #3
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f002 fc12 	bl	8003ee4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <HAL_DAC_MspInit+0xd8>)
 80016c4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016c8:	2206      	movs	r2, #6
 80016ca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016ce:	2210      	movs	r2, #16
 80016d0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016ec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016f0:	2220      	movs	r2, #32
 80016f2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016f6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80016fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 80016fe:	f002 f97f 	bl	8003a00 <HAL_DMA_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001708:	f7ff fef6 	bl	80014f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <HAL_DAC_MspInit+0xd4>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	; 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	50000800 	.word	0x50000800
 8001724:	40021000 	.word	0x40021000
 8001728:	20000164 	.word	0x20000164
 800172c:	4002001c 	.word	0x4002001c

08001730 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b09a      	sub	sp, #104	; 0x68
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2244      	movs	r2, #68	; 0x44
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f006 f929 	bl	80079a8 <memset>
  if(hi2c->Instance==I2C1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <HAL_I2C_MspInit+0xa8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d136      	bne.n	80017ce <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001760:	2340      	movs	r3, #64	; 0x40
 8001762:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fa0f 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001778:	f7ff febe 	bl	80014f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_I2C_MspInit+0xac>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_I2C_MspInit+0xac>)
 8001782:	f043 0302 	orr.w	r3, r3, #2
 8001786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_I2C_MspInit+0xac>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001794:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001798:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a6:	2304      	movs	r3, #4
 80017a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ae:	4619      	mov	r1, r3
 80017b0:	480b      	ldr	r0, [pc, #44]	; (80017e0 <HAL_I2C_MspInit+0xb0>)
 80017b2:	f002 fb97 	bl	8003ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_I2C_MspInit+0xac>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_I2C_MspInit+0xac>)
 80017bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c0:	6593      	str	r3, [r2, #88]	; 0x58
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_I2C_MspInit+0xac>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3768      	adds	r7, #104	; 0x68
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400

080017e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09e      	sub	sp, #120	; 0x78
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	2244      	movs	r2, #68	; 0x44
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f006 f8cf 	bl	80079a8 <memset>
  if(hi2s->Instance==SPI2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a4d      	ldr	r2, [pc, #308]	; (8001944 <HAL_I2S_MspInit+0x160>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d138      	bne.n	8001886 <HAL_I2S_MspInit+0xa2>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001814:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001818:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 800181a:	2300      	movs	r3, #0
 800181c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	4618      	mov	r0, r3
 8001824:	f004 f9b4 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 800182e:	f7ff fe63 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001832:	4b45      	ldr	r3, [pc, #276]	; (8001948 <HAL_I2S_MspInit+0x164>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	4a44      	ldr	r2, [pc, #272]	; (8001948 <HAL_I2S_MspInit+0x164>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6593      	str	r3, [r2, #88]	; 0x58
 800183e:	4b42      	ldr	r3, [pc, #264]	; (8001948 <HAL_I2S_MspInit+0x164>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	4b3f      	ldr	r3, [pc, #252]	; (8001948 <HAL_I2S_MspInit+0x164>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a3e      	ldr	r2, [pc, #248]	; (8001948 <HAL_I2S_MspInit+0x164>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_I2S_MspInit+0x164>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001862:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001866:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001874:	2305      	movs	r3, #5
 8001876:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800187c:	4619      	mov	r1, r3
 800187e:	4833      	ldr	r0, [pc, #204]	; (800194c <HAL_I2S_MspInit+0x168>)
 8001880:	f002 fb30 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001884:	e05a      	b.n	800193c <HAL_I2S_MspInit+0x158>
  else if(hi2s->Instance==SPI3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a31      	ldr	r2, [pc, #196]	; (8001950 <HAL_I2S_MspInit+0x16c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d155      	bne.n	800193c <HAL_I2S_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001894:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001896:	2300      	movs	r3, #0
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 f976 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2S_MspInit+0xca>
      Error_Handler();
 80018aa:	f7ff fe25 	bl	80014f8 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a25      	ldr	r2, [pc, #148]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_I2S_MspInit+0x164>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001908:	2306      	movs	r3, #6
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f002 fae5 	bl	8003ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800191a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800191e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800192c:	2306      	movs	r3, #6
 800192e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001930:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001934:	4619      	mov	r1, r3
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_I2S_MspInit+0x170>)
 8001938:	f002 fad4 	bl	8003ee4 <HAL_GPIO_Init>
}
 800193c:	bf00      	nop
 800193e:	3778      	adds	r7, #120	; 0x78
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40003800 	.word	0x40003800
 8001948:	40021000 	.word	0x40021000
 800194c:	48000400 	.word	0x48000400
 8001950:	40003c00 	.word	0x40003c00
 8001954:	48000800 	.word	0x48000800

08001958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b09a      	sub	sp, #104	; 0x68
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	2244      	movs	r2, #68	; 0x44
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f006 f815 	bl	80079a8 <memset>
  if(huart->Instance==LPUART1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_UART_MspInit+0xa8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d136      	bne.n	80019f6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001988:	2320      	movs	r3, #32
 800198a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4618      	mov	r0, r3
 8001996:	f004 f8fb 	bl	8005b90 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019a0:	f7ff fdaa 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_UART_MspInit+0xac>)
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <HAL_UART_MspInit+0xac>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_UART_MspInit+0xac>)
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_UART_MspInit+0xac>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <HAL_UART_MspInit+0xac>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_UART_MspInit+0xac>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80019d4:	230c      	movs	r3, #12
 80019d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80019e4:	230c      	movs	r3, #12
 80019e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f002 fa77 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3768      	adds	r7, #104	; 0x68
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40008000 	.word	0x40008000
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_TIM_Base_MspInit+0x38>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10b      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_TIM_Base_MspInit+0x3c>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <HAL_TIM_Base_MspInit+0x3c>)
 8001a20:	f043 0310 	orr.w	r3, r3, #16
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_TIM_Base_MspInit+0x3c>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40001000 	.word	0x40001000
 8001a44:	40021000 	.word	0x40021000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 f8da 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <DMA1_Channel1_IRQHandler+0x10>)
 8001aa2:	f002 f8d0 	bl	8003c46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000f0 	.word	0x200000f0

08001ab0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Channel2_IRQHandler+0x10>)
 8001ab6:	f002 f8c6 	bl	8003c46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000164 	.word	0x20000164

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f005 ff70 	bl	80079d8 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20008000 	.word	0x20008000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000578 	.word	0x20000578
 8001b2c:	200006c8 	.word	0x200006c8

08001b30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b58:	f7ff ffea 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	; (8001b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <LoopForever+0xe>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	; (8001ba0 <LoopForever+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f005 ff2f 	bl	80079e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7ff f9ab 	bl	8000ee0 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   r0, =_estack
 8001b8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b98:	08007a9c 	.word	0x08007a9c
  ldr r2, =_sbss
 8001b9c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ba0:	200006c8 	.word	0x200006c8

08001ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_2_IRQHandler>

08001ba6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f001 fb8f 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f80e 	bl	8001bd8 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	71fb      	strb	r3, [r7, #7]
 8001bc6:	e001      	b.n	8001bcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bc8:	f7ff fc9c 	bl	8001504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bcc:	79fb      	ldrb	r3, [r7, #7]

}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_InitTick+0x68>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d022      	beq.n	8001c32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_InitTick+0x6c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_InitTick+0x68>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fb9a 	bl	800333a <HAL_SYSTICK_Config>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10f      	bne.n	8001c2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	d809      	bhi.n	8001c26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c12:	2200      	movs	r2, #0
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1a:	f001 fb66 	bl	80032ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_InitTick+0x70>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e007      	b.n	8001c36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e004      	b.n	8001c36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	e001      	b.n	8001c36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000004 	.word	0x20000004
 8001c48:	20000008 	.word	0x20000008

08001c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_IncTick+0x1c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_IncTick+0x20>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_IncTick+0x1c>)
 8001c5c:	6013      	str	r3, [r2, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	2000057c 	.word	0x2000057c
 8001c6c:	2000000c 	.word	0x2000000c

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000057c 	.word	0x2000057c

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d004      	beq.n	8001cac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_Delay+0x40>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cac:	bf00      	nop
 8001cae:	f7ff ffdf 	bl	8001c70 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d8f7      	bhi.n	8001cae <HAL_Delay+0x26>
  {
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000000c 	.word	0x2000000c

08001ccc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3360      	adds	r3, #96	; 0x60
 8001d46:	461a      	mov	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <LL_ADC_SetOffset+0x44>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d6c:	bf00      	nop
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	03fff000 	.word	0x03fff000

08001d7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3360      	adds	r3, #96	; 0x60
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3360      	adds	r3, #96	; 0x60
 8001db8:	461a      	mov	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dd2:	bf00      	nop
 8001dd4:	371c      	adds	r7, #28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b087      	sub	sp, #28
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3360      	adds	r3, #96	; 0x60
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001e08:	bf00      	nop
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3360      	adds	r3, #96	; 0x60
 8001e24:	461a      	mov	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	615a      	str	r2, [r3, #20]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b087      	sub	sp, #28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3330      	adds	r3, #48	; 0x30
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	4413      	add	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	211f      	movs	r1, #31
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0e9b      	lsrs	r3, r3, #26
 8001ece:	f003 011f 	and.w	r1, r3, #31
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ee2:	bf00      	nop
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b087      	sub	sp, #28
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3314      	adds	r3, #20
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	0e5b      	lsrs	r3, r3, #25
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	4413      	add	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	0d1b      	lsrs	r3, r3, #20
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2107      	movs	r1, #7
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	401a      	ands	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	0d1b      	lsrs	r3, r3, #20
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	431a      	orrs	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	401a      	ands	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0318 	and.w	r3, r3, #24
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f68:	40d9      	lsrs	r1, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	400b      	ands	r3, r1
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	0007ffff 	.word	0x0007ffff

08001f8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 031f 	and.w	r3, r3, #31
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6093      	str	r3, [r2, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe0:	d101      	bne.n	8001fe6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002004:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002008:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002030:	d101      	bne.n	8002036 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a6:	f043 0204 	orr.w	r2, r3, #4
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d101      	bne.n	80020d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d101      	bne.n	80020f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e167      	b.n	80023f2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fa0b 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff3f 	bl	8001fcc <LL_ADC_IsDeepPowerDownEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff25 	bl	8001fa8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff5a 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff3e 	bl	8001ff4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002178:	4ba0      	ldr	r3, [pc, #640]	; (80023fc <HAL_ADC_Init+0x2f4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	4aa0      	ldr	r2, [pc, #640]	; (8002400 <HAL_ADC_Init+0x2f8>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800218c:	e002      	b.n	8002194 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3b01      	subs	r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ff3c 	bl	800201c <LL_ADC_IsInternalRegulatorEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	f043 0210 	orr.w	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff75 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 80021d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8100 	bne.w	80023e0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80fc 	bne.w	80023e0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021f0:	f043 0202 	orr.w	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff35 	bl	800206c <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d111      	bne.n	800222c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002208:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800220c:	f7ff ff2e 	bl	800206c <LL_ADC_IsEnabled>
 8002210:	4604      	mov	r4, r0
 8002212:	487c      	ldr	r0, [pc, #496]	; (8002404 <HAL_ADC_Init+0x2fc>)
 8002214:	f7ff ff2a 	bl	800206c <LL_ADC_IsEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	4323      	orrs	r3, r4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d105      	bne.n	800222c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4619      	mov	r1, r3
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <HAL_ADC_Init+0x300>)
 8002228:	f7ff fd50 	bl	8001ccc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7f5b      	ldrb	r3, [r3, #29]
 8002230:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002236:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800223c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002242:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800224a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002256:	2b01      	cmp	r3, #1
 8002258:	d106      	bne.n	8002268 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	045b      	lsls	r3, r3, #17
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	4b60      	ldr	r3, [pc, #384]	; (800240c <HAL_ADC_Init+0x304>)
 800228c:	4013      	ands	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	430b      	orrs	r3, r1
 8002296:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff14 	bl	80020e0 <LL_ADC_INJ_IsConversionOngoing>
 80022b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d16d      	bne.n	800239c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d16a      	bne.n	800239c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022e2:	f023 0302 	bic.w	r3, r3, #2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002306:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002310:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6911      	ldr	r1, [r2, #16]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	430b      	orrs	r3, r1
 8002322:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002326:	e013      	b.n	8002350 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002336:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002356:	2b01      	cmp	r3, #1
 8002358:	d118      	bne.n	800238c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800237c:	430a      	orrs	r2, r1
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e007      	b.n	800239c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10c      	bne.n	80023be <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f023 010f 	bic.w	r1, r3, #15
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
 80023bc:	e007      	b.n	80023ce <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020f 	bic.w	r2, r2, #15
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80023de:	e007      	b.n	80023f0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000004 	.word	0x20000004
 8002400:	053e2d63 	.word	0x053e2d63
 8002404:	50000100 	.word	0x50000100
 8002408:	50000300 	.word	0x50000300
 800240c:	fff04007 	.word	0xfff04007

08002410 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800241c:	4851      	ldr	r0, [pc, #324]	; (8002564 <HAL_ADC_Start_DMA+0x154>)
 800241e:	f7ff fdb5 	bl	8001f8c <LL_ADC_GetMultimode>
 8002422:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe46 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 808f 	bne.w	8002554 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_ADC_Start_DMA+0x34>
 8002440:	2302      	movs	r3, #2
 8002442:	e08a      	b.n	800255a <HAL_ADC_Start_DMA+0x14a>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d002      	beq.n	800245e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b09      	cmp	r3, #9
 800245c:	d173      	bne.n	8002546 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fc84 	bl	8002d6c <ADC_Enable>
 8002464:	4603      	mov	r3, r0
 8002466:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d166      	bne.n	800253c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_ADC_Start_DMA+0x158>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d002      	beq.n	8002492 <HAL_ADC_Start_DMA+0x82>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e001      	b.n	8002496 <HAL_ADC_Start_DMA+0x86>
 8002492:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4293      	cmp	r3, r2
 800249c:	d002      	beq.n	80024a4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	f023 0206 	bic.w	r2, r3, #6
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	661a      	str	r2, [r3, #96]	; 0x60
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	4a25      	ldr	r2, [pc, #148]	; (800256c <HAL_ADC_Start_DMA+0x15c>)
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_ADC_Start_DMA+0x160>)
 80024de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	4a23      	ldr	r2, [pc, #140]	; (8002574 <HAL_ADC_Start_DMA+0x164>)
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	221c      	movs	r2, #28
 80024ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0210 	orr.w	r2, r2, #16
 8002506:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3340      	adds	r3, #64	; 0x40
 8002522:	4619      	mov	r1, r3
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f001 fb12 	bl	8003b50 <HAL_DMA_Start_IT>
 800252c:	4603      	mov	r3, r0
 800252e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fdac 	bl	8002092 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800253a:	e00d      	b.n	8002558 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002544:	e008      	b.n	8002558 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002552:	e001      	b.n	8002558 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002554:	2302      	movs	r3, #2
 8002556:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002558:	7dfb      	ldrb	r3, [r7, #23]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	50000300 	.word	0x50000300
 8002568:	50000100 	.word	0x50000100
 800256c:	08002e79 	.word	0x08002e79
 8002570:	08002f51 	.word	0x08002f51
 8002574:	08002f6d 	.word	0x08002f6d

08002578 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b0b6      	sub	sp, #216	; 0xd8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x22>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e3c8      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x7b4>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fd7d 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f040 83ad 	bne.w	8002d22 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f7ff fc5e 	bl	8001e96 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fd6b 	bl	80020ba <LL_ADC_REG_IsConversionOngoing>
 80025e4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fd77 	bl	80020e0 <LL_ADC_INJ_IsConversionOngoing>
 80025f2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 81d9 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 81d4 	bne.w	80029b2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002612:	d10f      	bne.n	8002634 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	4619      	mov	r1, r3
 8002620:	f7ff fc65 	bl	8001eee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fc0c 	bl	8001e4a <LL_ADC_SetSamplingTimeCommonConfig>
 8002632:	e00e      	b.n	8002652 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6819      	ldr	r1, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff fc54 	bl	8001eee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fbfc 	bl	8001e4a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d022      	beq.n	80026ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6919      	ldr	r1, [r3, #16]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002684:	f7ff fb56 	bl	8001d34 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6919      	ldr	r1, [r3, #16]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	461a      	mov	r2, r3
 8002696:	f7ff fba2 	bl	8001dde <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x124>
 80026aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ae:	e000      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x126>
 80026b0:	2300      	movs	r3, #0
 80026b2:	461a      	mov	r2, r3
 80026b4:	f7ff fbae 	bl	8001e14 <LL_ADC_SetOffsetSaturation>
 80026b8:	e17b      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fb5b 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x15a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fb50 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	e01e      	b.n	8002724 <HAL_ADC_ConfigChannel+0x198>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fb45 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002704:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002708:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800270c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002714:	2320      	movs	r3, #32
 8002716:	e004      	b.n	8002722 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_ADC_ConfigChannel+0x1b0>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0e9b      	lsrs	r3, r3, #26
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	e018      	b.n	800276e <HAL_ADC_ConfigChannel+0x1e2>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e004      	b.n	800276e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800276e:	429a      	cmp	r2, r3
 8002770:	d106      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fb14 	bl	8001da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff faf8 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x220>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff faed 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	f003 021f 	and.w	r2, r3, #31
 80027aa:	e01e      	b.n	80027ea <HAL_ADC_ConfigChannel+0x25e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fae2 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e004      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80027de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x276>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	0e9b      	lsrs	r3, r3, #26
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	e018      	b.n	8002834 <HAL_ADC_ConfigChannel+0x2a8>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002816:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800281a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800281e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002826:	2320      	movs	r3, #32
 8002828:	e004      	b.n	8002834 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800282a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fab1 	bl	8001da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2102      	movs	r1, #2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fa95 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x2e6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fa8a 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	0e9b      	lsrs	r3, r3, #26
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	e01e      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x324>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fa7f 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002894:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e004      	b.n	80028ae <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80028a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x33c>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	e016      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x36a>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80028ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2102      	movs	r1, #2
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fa50 	bl	8001da8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2103      	movs	r1, #3
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fa34 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x3a8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2103      	movs	r1, #3
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fa29 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	e017      	b.n	8002964 <HAL_ADC_ConfigChannel+0x3d8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2103      	movs	r1, #3
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fa1e 	bl	8001d7c <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800294c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800294e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e003      	b.n	8002962 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800295a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_ConfigChannel+0x3f0>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	e011      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x414>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800298a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800298c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800298e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2103      	movs	r1, #3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f9fb 	bl	8001da8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fb58 	bl	800206c <LL_ADC_IsEnabled>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8140 	bne.w	8002c44 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7ff fab7 	bl	8001f44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a8f      	ldr	r2, [pc, #572]	; (8002c18 <HAL_ADC_ConfigChannel+0x68c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	f040 8131 	bne.w	8002c44 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x47e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	bf94      	ite	ls
 8002a02:	2301      	movls	r3, #1
 8002a04:	2300      	movhi	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	e019      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x4b2>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002a22:	2320      	movs	r3, #32
 8002a24:	e003      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	bf94      	ite	ls
 8002a38:	2301      	movls	r3, #1
 8002a3a:	2300      	movhi	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d079      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x4d2>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	3301      	adds	r3, #1
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5c:	e015      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x4fe>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e003      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	069b      	lsls	r3, r3, #26
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x51e>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0e9b      	lsrs	r3, r3, #26
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa8:	e017      	b.n	8002ada <HAL_ADC_ConfigChannel+0x54e>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e003      	b.n	8002ace <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	ea42 0103 	orr.w	r1, r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x574>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 021f 	and.w	r2, r3, #31
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	051b      	lsls	r3, r3, #20
 8002afe:	e018      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x5a6>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e003      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3301      	adds	r3, #1
 8002b26:	f003 021f 	and.w	r2, r3, #31
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b32:	430b      	orrs	r3, r1
 8002b34:	e081      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x5c6>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	3301      	adds	r3, #1
 8002b4a:	069b      	lsls	r3, r3, #26
 8002b4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b50:	e015      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x5f2>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	e003      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x612>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	e017      	b.n	8002bce <HAL_ADC_ConfigChannel+0x642>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	61fb      	str	r3, [r7, #28]
  return result;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	2101      	movs	r1, #1
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	ea42 0103 	orr.w	r1, r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x66e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	3301      	adds	r3, #1
 8002be6:	f003 021f 	and.w	r2, r3, #31
 8002bea:	4613      	mov	r3, r2
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b1e      	subs	r3, #30
 8002bf2:	051b      	lsls	r3, r3, #20
 8002bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bf8:	e01e      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x6ac>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	613b      	str	r3, [r7, #16]
  return result;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e006      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x698>
 8002c16:	bf00      	nop
 8002c18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 021f 	and.w	r2, r3, #31
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	3b1e      	subs	r3, #30
 8002c32:	051b      	lsls	r3, r3, #20
 8002c34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c38:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7ff f955 	bl	8001eee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d071      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c50:	483e      	ldr	r0, [pc, #248]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c52:	f7ff f861 	bl	8001d18 <LL_ADC_GetCommonPathInternalCh>
 8002c56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x6e2>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <HAL_ADC_ConfigChannel+0x7c8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d127      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d121      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c82:	d157      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	482f      	ldr	r0, [pc, #188]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c90:	f7ff f82f 	bl	8001cf2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	4a30      	ldr	r2, [pc, #192]	; (8002d5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cae:	e002      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f9      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cbc:	e03a      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_ADC_ConfigChannel+0x7d4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d113      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d02a      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4818      	ldr	r0, [pc, #96]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002cea:	f7ff f802 	bl	8001cf2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cee:	e021      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d11c      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d116      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a16      	ldr	r2, [pc, #88]	; (8002d64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d011      	beq.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480c      	ldr	r0, [pc, #48]	; (8002d4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d1c:	f7fe ffe9 	bl	8001cf2 <LL_ADC_SetCommonPathInternalCh>
 8002d20:	e008      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	37d8      	adds	r7, #216	; 0xd8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	80080000 	.word	0x80080000
 8002d4c:	50000300 	.word	0x50000300
 8002d50:	c3210000 	.word	0xc3210000
 8002d54:	90c00010 	.word	0x90c00010
 8002d58:	20000004 	.word	0x20000004
 8002d5c:	053e2d63 	.word	0x053e2d63
 8002d60:	c7520000 	.word	0xc7520000
 8002d64:	50000100 	.word	0x50000100
 8002d68:	cb840000 	.word	0xcb840000

08002d6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f975 	bl	800206c <LL_ADC_IsEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d169      	bne.n	8002e5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <ADC_Enable+0xfc>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	f043 0210 	orr.w	r2, r3, #16
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e055      	b.n	8002e5e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f944 	bl	8002044 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dbc:	482b      	ldr	r0, [pc, #172]	; (8002e6c <ADC_Enable+0x100>)
 8002dbe:	f7fe ffab 	bl	8001d18 <LL_ADC_GetCommonPathInternalCh>
 8002dc2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <ADC_Enable+0x104>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <ADC_Enable+0x108>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002de6:	e002      	b.n	8002dee <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f9      	bne.n	8002de8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002df4:	f7fe ff3c 	bl	8001c70 <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dfa:	e028      	b.n	8002e4e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff f933 	bl	800206c <LL_ADC_IsEnabled>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff f917 	bl	8002044 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e16:	f7fe ff2b 	bl	8001c70 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d914      	bls.n	8002e4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d00d      	beq.n	8002e4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e007      	b.n	8002e5e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d1cf      	bne.n	8002dfc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	8000003f 	.word	0x8000003f
 8002e6c:	50000300 	.word	0x50000300
 8002e70:	20000004 	.word	0x20000004
 8002e74:	053e2d63 	.word	0x053e2d63

08002e78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d14b      	bne.n	8002f2a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d021      	beq.n	8002ef0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe ffdd 	bl	8001e70 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d032      	beq.n	8002f22 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d12b      	bne.n	8002f22 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11f      	bne.n	8002f22 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eee:	e018      	b.n	8002f22 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d111      	bne.n	8002f22 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7fd ffb4 	bl	8000e90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f28:	e00e      	b.n	8002f48 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff fb1e 	bl	8002578 <HAL_ADC_ErrorCallback>
}
 8002f3c:	e004      	b.n	8002f48 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7fd ff70 	bl	8000e44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7ff faf0 	bl	8002578 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <LL_ADC_IsEnabled>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_IsEnabled+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_IsEnabled+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d101      	bne.n	8002fde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b0a1      	sub	sp, #132	; 0x84
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003006:	2302      	movs	r3, #2
 8003008:	e08b      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003012:	2300      	movs	r3, #0
 8003014:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003016:	2300      	movs	r3, #0
 8003018:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003022:	d102      	bne.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003024:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	e001      	b.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e06a      	b.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffb9 	bl	8002fc6 <LL_ADC_REG_IsConversionOngoing>
 8003054:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ffb3 	bl	8002fc6 <LL_ADC_REG_IsConversionOngoing>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d14c      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003068:	2b00      	cmp	r3, #0
 800306a:	d149      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800306c:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800306e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d028      	beq.n	80030ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800308a:	035b      	lsls	r3, r3, #13
 800308c:	430b      	orrs	r3, r1
 800308e:	431a      	orrs	r2, r3
 8003090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003092:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003094:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003098:	f7ff ff82 	bl	8002fa0 <LL_ADC_IsEnabled>
 800309c:	4604      	mov	r4, r0
 800309e:	4823      	ldr	r0, [pc, #140]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030a0:	f7ff ff7e 	bl	8002fa0 <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4323      	orrs	r3, r4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d133      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030b4:	f023 030f 	bic.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	6811      	ldr	r1, [r2, #0]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	6892      	ldr	r2, [r2, #8]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030c8:	e024      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030da:	f7ff ff61 	bl	8002fa0 <LL_ADC_IsEnabled>
 80030de:	4604      	mov	r4, r0
 80030e0:	4812      	ldr	r0, [pc, #72]	; (800312c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030e2:	f7ff ff5d 	bl	8002fa0 <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4323      	orrs	r3, r4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d112      	bne.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030f6:	f023 030f 	bic.w	r3, r3, #15
 80030fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030fe:	e009      	b.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003112:	e000      	b.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003114:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800311e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003122:	4618      	mov	r0, r3
 8003124:	3784      	adds	r7, #132	; 0x84
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	50000100 	.word	0x50000100
 8003130:	50000300 	.word	0x50000300

08003134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800315c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0b      	blt.n	80031c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <__NVIC_EnableIRQ+0x38>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2001      	movs	r0, #1
 80031ba:	fa00 f202 	lsl.w	r2, r0, r2
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
         );
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a0:	d301      	bcc.n	80032a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00f      	b.n	80032c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <SysTick_Config+0x40>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ae:	210f      	movs	r1, #15
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f7ff ff8e 	bl	80031d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <SysTick_Config+0x40>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SysTick_Config+0x40>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff29 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032f8:	f7ff ff40 	bl	800317c <__NVIC_GetPriorityGrouping>
 80032fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff90 	bl	8003228 <NVIC_EncodePriority>
 8003308:	4602      	mov	r2, r0
 800330a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff5f 	bl	80031d4 <__NVIC_SetPriority>
}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff33 	bl	8003198 <__NVIC_EnableIRQ>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ffa4 	bl	8003290 <SysTick_Config>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e014      	b.n	800338e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	791b      	ldrb	r3, [r3, #4]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fe f96d 	bl	8001654 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0b2      	b.n	8003516 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	795b      	ldrb	r3, [r3, #5]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_DAC_Start_DMA+0x24>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0ac      	b.n	8003516 <HAL_DAC_Start_DMA+0x17e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2202      	movs	r2, #2
 80033c6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d129      	bne.n	8003422 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4a53      	ldr	r2, [pc, #332]	; (8003520 <HAL_DAC_Start_DMA+0x188>)
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4a52      	ldr	r2, [pc, #328]	; (8003524 <HAL_DAC_Start_DMA+0x18c>)
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4a51      	ldr	r2, [pc, #324]	; (8003528 <HAL_DAC_Start_DMA+0x190>)
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_DAC_Start_DMA+0x6c>
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d005      	beq.n	800340e <HAL_DAC_Start_DMA+0x76>
 8003402:	e009      	b.n	8003418 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3308      	adds	r3, #8
 800340a:	61bb      	str	r3, [r7, #24]
        break;
 800340c:	e033      	b.n	8003476 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	61bb      	str	r3, [r7, #24]
        break;
 8003416:	e02e      	b.n	8003476 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3310      	adds	r3, #16
 800341e:	61bb      	str	r3, [r7, #24]
        break;
 8003420:	e029      	b.n	8003476 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	4a41      	ldr	r2, [pc, #260]	; (800352c <HAL_DAC_Start_DMA+0x194>)
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a40      	ldr	r2, [pc, #256]	; (8003530 <HAL_DAC_Start_DMA+0x198>)
 8003430:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4a3f      	ldr	r2, [pc, #252]	; (8003534 <HAL_DAC_Start_DMA+0x19c>)
 8003438:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003448:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_DAC_Start_DMA+0xc0>
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	2b04      	cmp	r3, #4
 8003454:	d005      	beq.n	8003462 <HAL_DAC_Start_DMA+0xca>
 8003456:	e009      	b.n	800346c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	61bb      	str	r3, [r7, #24]
        break;
 8003460:	e009      	b.n	8003476 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3318      	adds	r3, #24
 8003468:	61bb      	str	r3, [r7, #24]
        break;
 800346a:	e004      	b.n	8003476 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	331c      	adds	r3, #28
 8003472:	61bb      	str	r3, [r7, #24]
        break;
 8003474:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800348a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6898      	ldr	r0, [r3, #8]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	f000 fb5b 	bl	8003b50 <HAL_DMA_Start_IT>
 800349a:	4603      	mov	r3, r0
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e010      	b.n	80034c2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68d8      	ldr	r0, [r3, #12]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	f000 fb49 	bl	8003b50 <HAL_DMA_Start_IT>
 80034be:	4603      	mov	r3, r0
 80034c0:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80034c8:	7ffb      	ldrb	r3, [r7, #31]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11c      	bne.n	8003508 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2201      	movs	r2, #1
 80034dc:	409a      	lsls	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <HAL_DAC_Start_DMA+0x1a0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	099b      	lsrs	r3, r3, #6
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_DAC_Start_DMA+0x1a4>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	3301      	adds	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80034f8:	e002      	b.n	8003500 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f9      	bne.n	80034fa <HAL_DAC_Start_DMA+0x162>
 8003506:	e005      	b.n	8003514 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f043 0204 	orr.w	r2, r3, #4
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003514:	7ffb      	ldrb	r3, [r7, #31]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	080038ed 	.word	0x080038ed
 8003524:	0800390f 	.word	0x0800390f
 8003528:	0800392b 	.word	0x0800392b
 800352c:	08003995 	.word	0x08003995
 8003530:	080039b7 	.word	0x080039b7
 8003534:	080039d3 	.word	0x080039d3
 8003538:	20000004 	.word	0x20000004
 800353c:	053e2d63 	.word	0x053e2d63

08003540 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_DAC_ConfigChannel+0x1c>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e19e      	b.n	80038da <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	795b      	ldrb	r3, [r3, #5]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_DAC_ConfigChannel+0x2c>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e198      	b.n	80038da <HAL_DAC_ConfigChannel+0x35e>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2202      	movs	r2, #2
 80035b2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d17a      	bne.n	80036b2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80035bc:	f7fe fb58 	bl	8001c70 <HAL_GetTick>
 80035c0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d13d      	bne.n	8003644 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035c8:	e018      	b.n	80035fc <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035ca:	f7fe fb51 	bl	8001c70 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d911      	bls.n	80035fc <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f043 0208 	orr.w	r2, r3, #8
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2203      	movs	r2, #3
 80035f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e16e      	b.n	80038da <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1df      	bne.n	80035ca <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
 8003614:	e020      	b.n	8003658 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003616:	f7fe fb2b 	bl	8001c70 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d90f      	bls.n	8003644 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	2b00      	cmp	r3, #0
 800362c:	da0a      	bge.n	8003644 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f043 0208 	orr.w	r2, r3, #8
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2203      	movs	r2, #3
 800363e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e14a      	b.n	80038da <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	dbe3      	blt.n	8003616 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	ea02 0103 	and.w	r1, r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	409a      	lsls	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	21ff      	movs	r1, #255	; 0xff
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	ea02 0103 	and.w	r1, r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	409a      	lsls	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d11d      	bne.n	80036f6 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	221f      	movs	r2, #31
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d2:	4013      	ands	r3, r2
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ea:	4313      	orrs	r3, r2
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2207      	movs	r2, #7
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370e:	4013      	ands	r3, r2
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d102      	bne.n	8003720 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
 800371e:	e00f      	b.n	8003740 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d102      	bne.n	800372e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003728:	2301      	movs	r3, #1
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	e008      	b.n	8003740 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003736:	2301      	movs	r3, #1
 8003738:	623b      	str	r3, [r7, #32]
 800373a:	e001      	b.n	8003740 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800373c:	2300      	movs	r3, #0
 800373e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	6a3a      	ldr	r2, [r7, #32]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003762:	4013      	ands	r3, r2
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	791b      	ldrb	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_DAC_ConfigChannel+0x1f8>
 800376e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003772:	e000      	b.n	8003776 <HAL_DAC_ConfigChannel+0x1fa>
 8003774:	2300      	movs	r3, #0
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	4013      	ands	r3, r2
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	795b      	ldrb	r3, [r3, #5]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d102      	bne.n	80037a0 <HAL_DAC_ConfigChannel+0x224>
 800379a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800379e:	e000      	b.n	80037a2 <HAL_DAC_ConfigChannel+0x226>
 80037a0:	2300      	movs	r3, #0
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d114      	bne.n	80037e2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80037b8:	f002 f96c 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 80037bc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4a48      	ldr	r2, [pc, #288]	; (80038e4 <HAL_DAC_ConfigChannel+0x368>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d904      	bls.n	80037d0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
 80037ce:	e00f      	b.n	80037f0 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <HAL_DAC_ConfigChannel+0x36c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d90a      	bls.n	80037ee <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
 80037e0:	e006      	b.n	80037f0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	4313      	orrs	r3, r2
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
 80037ec:	e000      	b.n	80037f0 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80037ee:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	4313      	orrs	r3, r2
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	400a      	ands	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	f640 72fe 	movw	r2, #4094	; 0xffe
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003842:	4013      	ands	r3, r2
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	4313      	orrs	r3, r2
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003864:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6819      	ldr	r1, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	22c0      	movs	r2, #192	; 0xc0
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43da      	mvns	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	400a      	ands	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	f640 710f 	movw	r1, #3855	; 0xf0f
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	ea02 0103 	and.w	r1, r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	409a      	lsls	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3728      	adds	r7, #40	; 0x28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	09896800 	.word	0x09896800
 80038e8:	04c4b400 	.word	0x04c4b400

080038ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff fe20 	bl	8003540 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	711a      	strb	r2, [r3, #4]
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fe19 	bl	8003554 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b084      	sub	sp, #16
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f043 0204 	orr.w	r2, r3, #4
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff fe0f 	bl	8003568 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2201      	movs	r2, #1
 800394e:	711a      	strb	r2, [r3, #4]
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff ffd8 	bl	8003958 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	711a      	strb	r2, [r3, #4]
}
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff ffd1 	bl	800396c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7ff ffc7 	bl	8003980 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	711a      	strb	r2, [r3, #4]
}
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e08d      	b.n	8003b2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_DMA_Init+0x138>)
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d80f      	bhi.n	8003a3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b45      	ldr	r3, [pc, #276]	; (8003b3c <HAL_DMA_Init+0x13c>)
 8003a26:	4413      	add	r3, r2
 8003a28:	4a45      	ldr	r2, [pc, #276]	; (8003b40 <HAL_DMA_Init+0x140>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	009a      	lsls	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <HAL_DMA_Init+0x144>)
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8003a3c:	e00e      	b.n	8003a5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b40      	ldr	r3, [pc, #256]	; (8003b48 <HAL_DMA_Init+0x148>)
 8003a46:	4413      	add	r3, r2
 8003a48:	4a3d      	ldr	r2, [pc, #244]	; (8003b40 <HAL_DMA_Init+0x140>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	009a      	lsls	r2, r3, #2
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <HAL_DMA_Init+0x14c>)
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9b6 	bl	8003e20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003abc:	d102      	bne.n	8003ac4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ad8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_DMA_Init+0x104>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d80c      	bhi.n	8003b04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9d6 	bl	8003e9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e008      	b.n	8003b16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40020407 	.word	0x40020407
 8003b3c:	bffdfff8 	.word	0xbffdfff8
 8003b40:	cccccccd 	.word	0xcccccccd
 8003b44:	40020000 	.word	0x40020000
 8003b48:	bffdfbf8 	.word	0xbffdfbf8
 8003b4c:	40020400 	.word	0x40020400

08003b50 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_DMA_Start_IT+0x20>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e066      	b.n	8003c3e <HAL_DMA_Start_IT+0xee>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d155      	bne.n	8003c30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f8fb 	bl	8003da4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 020e 	orr.w	r2, r2, #14
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e00f      	b.n	8003be8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0204 	bic.w	r2, r2, #4
 8003bd6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 020a 	orr.w	r2, r2, #10
 8003be6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e005      	b.n	8003c3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	2204      	movs	r2, #4
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d026      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x7a>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d021      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d107      	bne.n	8003c9a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0204 	bic.w	r2, r2, #4
 8003c98:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f003 021f 	and.w	r2, r3, #31
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d071      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cbe:	e06c      	b.n	8003d9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	f003 031f 	and.w	r3, r3, #31
 8003cc8:	2202      	movs	r2, #2
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d02e      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d029      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 020a 	bic.w	r2, r2, #10
 8003cfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	2102      	movs	r1, #2
 8003d12:	fa01 f202 	lsl.w	r2, r1, r2
 8003d16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d038      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d30:	e033      	b.n	8003d9a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d02a      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d025      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 020e 	bic.w	r2, r2, #14
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d9a:	bf00      	nop
 8003d9c:	bf00      	nop
}
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d004      	beq.n	8003dce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8003de0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d108      	bne.n	8003e04 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e02:	e007      	b.n	8003e14 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	60da      	str	r2, [r3, #12]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d802      	bhi.n	8003e3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e001      	b.n	8003e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e3c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	3b08      	subs	r3, #8
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	091b      	lsrs	r3, r3, #4
 8003e52:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	409a      	lsls	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40020407 	.word	0x40020407
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	40020820 	.word	0x40020820
 8003e94:	cccccccd 	.word	0xcccccccd
 8003e98:	40020880 	.word	0x40020880

08003e9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ebe:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2201      	movs	r2, #1
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	1000823f 	.word	0x1000823f
 8003ee0:	40020940 	.word	0x40020940

08003ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ef2:	e15a      	b.n	80041aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 814c 	beq.w	80041a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d005      	beq.n	8003f24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d130      	bne.n	8003f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	2203      	movs	r2, #3
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 0201 	and.w	r2, r3, #1
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d017      	beq.n	8003fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d123      	bne.n	8004016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	08da      	lsrs	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3208      	adds	r2, #8
 8004010:	6939      	ldr	r1, [r7, #16]
 8004012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0203 	and.w	r2, r3, #3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 80a6 	beq.w	80041a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004058:	4b5b      	ldr	r3, [pc, #364]	; (80041c8 <HAL_GPIO_Init+0x2e4>)
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	4a5a      	ldr	r2, [pc, #360]	; (80041c8 <HAL_GPIO_Init+0x2e4>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6613      	str	r3, [r2, #96]	; 0x60
 8004064:	4b58      	ldr	r3, [pc, #352]	; (80041c8 <HAL_GPIO_Init+0x2e4>)
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004070:	4a56      	ldr	r2, [pc, #344]	; (80041cc <HAL_GPIO_Init+0x2e8>)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	3302      	adds	r3, #2
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	220f      	movs	r2, #15
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	43db      	mvns	r3, r3
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4013      	ands	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800409a:	d01f      	beq.n	80040dc <HAL_GPIO_Init+0x1f8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a4c      	ldr	r2, [pc, #304]	; (80041d0 <HAL_GPIO_Init+0x2ec>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d019      	beq.n	80040d8 <HAL_GPIO_Init+0x1f4>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a4b      	ldr	r2, [pc, #300]	; (80041d4 <HAL_GPIO_Init+0x2f0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <HAL_GPIO_Init+0x1f0>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a4a      	ldr	r2, [pc, #296]	; (80041d8 <HAL_GPIO_Init+0x2f4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00d      	beq.n	80040d0 <HAL_GPIO_Init+0x1ec>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a49      	ldr	r2, [pc, #292]	; (80041dc <HAL_GPIO_Init+0x2f8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d007      	beq.n	80040cc <HAL_GPIO_Init+0x1e8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a48      	ldr	r2, [pc, #288]	; (80041e0 <HAL_GPIO_Init+0x2fc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_GPIO_Init+0x1e4>
 80040c4:	2305      	movs	r3, #5
 80040c6:	e00a      	b.n	80040de <HAL_GPIO_Init+0x1fa>
 80040c8:	2306      	movs	r3, #6
 80040ca:	e008      	b.n	80040de <HAL_GPIO_Init+0x1fa>
 80040cc:	2304      	movs	r3, #4
 80040ce:	e006      	b.n	80040de <HAL_GPIO_Init+0x1fa>
 80040d0:	2303      	movs	r3, #3
 80040d2:	e004      	b.n	80040de <HAL_GPIO_Init+0x1fa>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e002      	b.n	80040de <HAL_GPIO_Init+0x1fa>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_GPIO_Init+0x1fa>
 80040dc:	2300      	movs	r3, #0
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	f002 0203 	and.w	r2, r2, #3
 80040e4:	0092      	lsls	r2, r2, #2
 80040e6:	4093      	lsls	r3, r2
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ee:	4937      	ldr	r1, [pc, #220]	; (80041cc <HAL_GPIO_Init+0x2e8>)
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <HAL_GPIO_Init+0x300>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	43db      	mvns	r3, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004120:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <HAL_GPIO_Init+0x300>)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004126:	4b2f      	ldr	r3, [pc, #188]	; (80041e4 <HAL_GPIO_Init+0x300>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800414a:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <HAL_GPIO_Init+0x300>)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004150:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_GPIO_Init+0x300>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004174:	4a1b      	ldr	r2, [pc, #108]	; (80041e4 <HAL_GPIO_Init+0x300>)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_GPIO_Init+0x300>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800419e:	4a11      	ldr	r2, [pc, #68]	; (80041e4 <HAL_GPIO_Init+0x300>)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3301      	adds	r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f47f ae9d 	bne.w	8003ef4 <HAL_GPIO_Init+0x10>
  }
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40010000 	.word	0x40010000
 80041d0:	48000400 	.word	0x48000400
 80041d4:	48000800 	.word	0x48000800
 80041d8:	48000c00 	.word	0x48000c00
 80041dc:	48001000 	.word	0x48001000
 80041e0:	48001400 	.word	0x48001400
 80041e4:	40010400 	.word	0x40010400

080041e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
 80041f4:	4613      	mov	r3, r2
 80041f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041f8:	787b      	ldrb	r3, [r7, #1]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004204:	e002      	b.n	800420c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004206:	887a      	ldrh	r2, [r7, #2]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	041a      	lsls	r2, r3, #16
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43d9      	mvns	r1, r3
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	400b      	ands	r3, r1
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	619a      	str	r2, [r3, #24]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e08d      	b.n	800437a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd fa5c 	bl	8001730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800429c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042c2:	609a      	str	r2, [r3, #8]
 80042c4:	e006      	b.n	80042d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d108      	bne.n	80042ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ea:	605a      	str	r2, [r3, #4]
 80042ec:	e007      	b.n	80042fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	4608      	mov	r0, r1
 800438e:	4611      	mov	r1, r2
 8004390:	461a      	mov	r2, r3
 8004392:	4603      	mov	r3, r0
 8004394:	817b      	strh	r3, [r7, #10]
 8004396:	460b      	mov	r3, r1
 8004398:	813b      	strh	r3, [r7, #8]
 800439a:	4613      	mov	r3, r2
 800439c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	f040 80f9 	bne.w	800459e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_I2C_Mem_Write+0x34>
 80043b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e0ed      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_Mem_Write+0x4e>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0e6      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043da:	f7fd fc49 	bl	8001c70 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2319      	movs	r3, #25
 80043e6:	2201      	movs	r2, #1
 80043e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f955 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0d1      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2221      	movs	r2, #33	; 0x21
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004424:	88f8      	ldrh	r0, [r7, #6]
 8004426:	893a      	ldrh	r2, [r7, #8]
 8004428:	8979      	ldrh	r1, [r7, #10]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4603      	mov	r3, r0
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f8b9 	bl	80045ac <I2C_RequestMemoryWrite>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0a9      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2bff      	cmp	r3, #255	; 0xff
 8004454:	d90e      	bls.n	8004474 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	b2da      	uxtb	r2, r3
 8004462:	8979      	ldrh	r1, [r7, #10]
 8004464:	2300      	movs	r3, #0
 8004466:	9300      	str	r3, [sp, #0]
 8004468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fad9 	bl	8004a24 <I2C_TransferConfig>
 8004472:	e00f      	b.n	8004494 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29a      	uxth	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004482:	b2da      	uxtb	r2, r3
 8004484:	8979      	ldrh	r1, [r7, #10]
 8004486:	2300      	movs	r3, #0
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fac8 	bl	8004a24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f958 	bl	800474e <I2C_WaitOnTXISFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e07b      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d034      	beq.n	800454c <HAL_I2C_Mem_Write+0x1c8>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d130      	bne.n	800454c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	2200      	movs	r2, #0
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f8d1 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e04d      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2bff      	cmp	r3, #255	; 0xff
 800450c:	d90e      	bls.n	800452c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	22ff      	movs	r2, #255	; 0xff
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	8979      	ldrh	r1, [r7, #10]
 800451c:	2300      	movs	r3, #0
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fa7d 	bl	8004a24 <I2C_TransferConfig>
 800452a:	e00f      	b.n	800454c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453a:	b2da      	uxtb	r2, r3
 800453c:	8979      	ldrh	r1, [r7, #10]
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fa6c 	bl	8004a24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d19e      	bne.n	8004494 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f93e 	bl	80047dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e01a      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2220      	movs	r2, #32
 8004570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6859      	ldr	r1, [r3, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <HAL_I2C_Mem_Write+0x224>)
 800457e:	400b      	ands	r3, r1
 8004580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e000      	b.n	80045a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	fe00e800 	.word	0xfe00e800

080045ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	460b      	mov	r3, r1
 80045c0:	813b      	strh	r3, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	8979      	ldrh	r1, [r7, #10]
 80045cc:	4b20      	ldr	r3, [pc, #128]	; (8004650 <I2C_RequestMemoryWrite+0xa4>)
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fa25 	bl	8004a24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f8b5 	bl	800474e <I2C_WaitOnTXISFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e02c      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045f4:	893b      	ldrh	r3, [r7, #8]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	629a      	str	r2, [r3, #40]	; 0x28
 80045fe:	e015      	b.n	800462c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004600:	893b      	ldrh	r3, [r7, #8]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	b29b      	uxth	r3, r3
 8004606:	b2da      	uxtb	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	69b9      	ldr	r1, [r7, #24]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f89b 	bl	800474e <I2C_WaitOnTXISFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e012      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004622:	893b      	ldrh	r3, [r7, #8]
 8004624:	b2da      	uxtb	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2200      	movs	r2, #0
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f830 	bl	800469c <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	80002000 	.word	0x80002000

08004654 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d103      	bne.n	8004672 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2200      	movs	r2, #0
 8004670:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d007      	beq.n	8004690 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699a      	ldr	r2, [r3, #24]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	619a      	str	r2, [r3, #24]
  }
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ac:	e03b      	b.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8d6 	bl	8004864 <I2C_IsErrorOccurred>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e041      	b.n	8004746 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d02d      	beq.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fd fad1 	bl	8001c70 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d122      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d113      	bne.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f043 0220 	orr.w	r2, r3, #32
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e00f      	b.n	8004746 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4013      	ands	r3, r2
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	bf0c      	ite	eq
 8004736:	2301      	moveq	r3, #1
 8004738:	2300      	movne	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	429a      	cmp	r2, r3
 8004742:	d0b4      	beq.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800475a:	e033      	b.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f87f 	bl	8004864 <I2C_IsErrorOccurred>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e031      	b.n	80047d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d025      	beq.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fd fa7a 	bl	8001c70 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11a      	bne.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d013      	beq.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e007      	b.n	80047d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d1c4      	bne.n	800475c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e8:	e02f      	b.n	800484a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f838 	bl	8004864 <I2C_IsErrorOccurred>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e02d      	b.n	800485a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fd fa37 	bl	8001c70 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11a      	bne.n	800484a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b20      	cmp	r3, #32
 8004820:	d013      	beq.n	800484a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e007      	b.n	800485a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b20      	cmp	r3, #32
 8004856:	d1c8      	bne.n	80047ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	d068      	beq.n	8004962 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2210      	movs	r2, #16
 8004896:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004898:	e049      	b.n	800492e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d045      	beq.n	800492e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048a2:	f7fd f9e5 	bl	8001c70 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d302      	bcc.n	80048b8 <I2C_IsErrorOccurred+0x54>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d13a      	bne.n	800492e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048da:	d121      	bne.n	8004920 <I2C_IsErrorOccurred+0xbc>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e2:	d01d      	beq.n	8004920 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048e4:	7cfb      	ldrb	r3, [r7, #19]
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d01a      	beq.n	8004920 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048fa:	f7fd f9b9 	bl	8001c70 <HAL_GetTick>
 80048fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004900:	e00e      	b.n	8004920 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004902:	f7fd f9b5 	bl	8001c70 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b19      	cmp	r3, #25
 800490e:	d907      	bls.n	8004920 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f043 0320 	orr.w	r3, r3, #32
 8004916:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800491e:	e006      	b.n	800492e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b20      	cmp	r3, #32
 800492c:	d1e9      	bne.n	8004902 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b20      	cmp	r3, #32
 800493a:	d003      	beq.n	8004944 <I2C_IsErrorOccurred+0xe0>
 800493c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0aa      	beq.n	800489a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004948:	2b00      	cmp	r3, #0
 800494a:	d103      	bne.n	8004954 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2220      	movs	r2, #32
 8004952:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004984:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f043 0308 	orr.w	r3, r3, #8
 800499c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	f043 0302 	orr.w	r3, r3, #2
 80049be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01c      	beq.n	8004a12 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff fe3b 	bl	8004654 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <I2C_IsErrorOccurred+0x1bc>)
 80049ea:	400b      	ands	r3, r1
 80049ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3728      	adds	r7, #40	; 0x28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	fe00e800 	.word	0xfe00e800

08004a24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	817b      	strh	r3, [r7, #10]
 8004a32:	4613      	mov	r3, r2
 8004a34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a36:	897b      	ldrh	r3, [r7, #10]
 8004a38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a3c:	7a7b      	ldrb	r3, [r7, #9]
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	0d5b      	lsrs	r3, r3, #21
 8004a5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a62:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <I2C_TransferConfig+0x60>)
 8004a64:	430b      	orrs	r3, r1
 8004a66:	43db      	mvns	r3, r3
 8004a68:	ea02 0103 	and.w	r1, r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a76:	bf00      	nop
 8004a78:	371c      	adds	r7, #28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	03ff63ff 	.word	0x03ff63ff

08004a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d138      	bne.n	8004b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e032      	b.n	8004b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d139      	bne.n	8004ba8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e033      	b.n	8004baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2224      	movs	r2, #36	; 0x24
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e000      	b.n	8004baa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b088      	sub	sp, #32
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e0d0      	b.n	8004d6c <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fc fe00 	bl	80017e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bfa:	f023 030f 	bic.w	r3, r3, #15
 8004bfe:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2202      	movs	r2, #2
 8004c06:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d061      	beq.n	8004cd4 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c18:	2310      	movs	r3, #16
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e001      	b.n	8004c22 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c1e:	2320      	movs	r3, #32
 8004c20:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d802      	bhi.n	8004c30 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c34:	f001 f99c 	bl	8005f70 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c38:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c42:	d125      	bne.n	8004c90 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d010      	beq.n	8004c6e <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	461a      	mov	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	3305      	adds	r3, #5
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e01f      	b.n	8004cae <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	461a      	mov	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	3305      	adds	r3, #5
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	e00e      	b.n	8004cae <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	3305      	adds	r3, #5
 8004cac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4a30      	ldr	r2, [pc, #192]	; (8004d74 <HAL_I2S_Init+0x1bc>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	08db      	lsrs	r3, r3, #3
 8004cb8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e003      	b.n	8004cdc <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d902      	bls.n	8004ce8 <HAL_I2S_Init+0x130>
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2bff      	cmp	r3, #255	; 0xff
 8004ce6:	d907      	bls.n	8004cf8 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	f043 0210 	orr.w	r2, r3, #16
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e039      	b.n	8004d6c <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	ea42 0103 	orr.w	r1, r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d16:	f023 030f 	bic.w	r3, r3, #15
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6851      	ldr	r1, [r2, #4]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6892      	ldr	r2, [r2, #8]
 8004d22:	4311      	orrs	r1, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68d2      	ldr	r2, [r2, #12]
 8004d28:	4311      	orrs	r1, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6992      	ldr	r2, [r2, #24]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b30      	cmp	r3, #48	; 0x30
 8004d42:	d003      	beq.n	8004d4c <HAL_I2S_Init+0x194>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2bb0      	cmp	r3, #176	; 0xb0
 8004d4a:	d107      	bne.n	8004d5c <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d5a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	cccccccd 	.word	0xcccccccd

08004d78 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_I2S_Transmit+0x1c>
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0dc      	b.n	8004f52 <HAL_I2S_Transmit+0x1da>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_I2S_Transmit+0x30>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e0d4      	b.n	8004f52 <HAL_I2S_Transmit+0x1da>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d005      	beq.n	8004dc8 <HAL_I2S_Transmit+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e0c4      	b.n	8004f52 <HAL_I2S_Transmit+0x1da>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2203      	movs	r2, #3
 8004dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d002      	beq.n	8004df4 <HAL_I2S_Transmit+0x7c>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b05      	cmp	r3, #5
 8004df2:	d10a      	bne.n	8004e0a <HAL_I2S_Transmit+0x92>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	845a      	strh	r2, [r3, #34]	; 0x22
 8004e08:	e005      	b.n	8004e16 <HAL_I2S_Transmit+0x9e>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2c:	d007      	beq.n	8004e3e <HAL_I2S_Transmit+0xc6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e3c:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	2102      	movs	r1, #2
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f000 f888 	bl	8004f5a <I2S_WaitFlagStateUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d04e      	beq.n	8004eee <HAL_I2S_Transmit+0x176>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	f043 0201 	orr.w	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    __HAL_UNLOCK(hi2s);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e070      	b.n	8004f52 <HAL_I2S_Transmit+0x1da>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	881a      	ldrh	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2201      	movs	r2, #1
 8004e98:	2102      	movs	r1, #2
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f85d 	bl	8004f5a <I2S_WaitFlagStateUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00f      	beq.n	8004ec6 <HAL_I2S_Transmit+0x14e>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e045      	b.n	8004f52 <HAL_I2S_Transmit+0x1da>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d10c      	bne.n	8004eee <HAL_I2S_Transmit+0x176>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	f043 0204 	orr.w	r2, r3, #4
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1bb      	bne.n	8004e70 <HAL_I2S_Transmit+0xf8>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_I2S_Transmit+0x196>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0c:	d118      	bne.n	8004f40 <HAL_I2S_Transmit+0x1c8>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f820 	bl	8004f5a <I2S_WaitFlagStateUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00f      	beq.n	8004f40 <HAL_I2S_Transmit+0x1c8>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	f043 0201 	orr.w	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_UNLOCK(hi2s);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e008      	b.n	8004f52 <HAL_I2S_Transmit+0x1da>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  __HAL_UNLOCK(hi2s);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	60f8      	str	r0, [r7, #12]
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f6a:	f7fc fe81 	bl	8001c70 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004f70:	e018      	b.n	8004fa4 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d014      	beq.n	8004fa4 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004f7a:	f7fc fe79 	bl	8001c70 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d902      	bls.n	8004f90 <I2S_WaitFlagStateUntilTimeout+0x36>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e00f      	b.n	8004fc4 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d1d7      	bne.n	8004f72 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d141      	bne.n	800505e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fda:	4b4b      	ldr	r3, [pc, #300]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d131      	bne.n	800504c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fe8:	4b47      	ldr	r3, [pc, #284]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fee:	4a46      	ldr	r2, [pc, #280]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005000:	4a41      	ldr	r2, [pc, #260]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005008:	4b40      	ldr	r3, [pc, #256]	; (800510c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2232      	movs	r2, #50	; 0x32
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	4a3f      	ldr	r2, [pc, #252]	; (8005110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	0c9b      	lsrs	r3, r3, #18
 800501a:	3301      	adds	r3, #1
 800501c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800501e:	e002      	b.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005026:	4b38      	ldr	r3, [pc, #224]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005032:	d102      	bne.n	800503a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f2      	bne.n	8005020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800503a:	4b33      	ldr	r3, [pc, #204]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005046:	d158      	bne.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e057      	b.n	80050fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800504c:	4b2e      	ldr	r3, [pc, #184]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005052:	4a2d      	ldr	r2, [pc, #180]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800505c:	e04d      	b.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005064:	d141      	bne.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005066:	4b28      	ldr	r3, [pc, #160]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800506e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005072:	d131      	bne.n	80050d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800507a:	4a23      	ldr	r2, [pc, #140]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005084:	4b20      	ldr	r3, [pc, #128]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005094:	4b1d      	ldr	r3, [pc, #116]	; (800510c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2232      	movs	r2, #50	; 0x32
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	0c9b      	lsrs	r3, r3, #18
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050aa:	e002      	b.n	80050b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050be:	d102      	bne.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f2      	bne.n	80050ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d2:	d112      	bne.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e011      	b.n	80050fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050e8:	e007      	b.n	80050fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40007000 	.word	0x40007000
 800510c:	20000004 	.word	0x20000004
 8005110:	431bde83 	.word	0x431bde83

08005114 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800511e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005122:	6093      	str	r3, [r2, #8]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40007000 	.word	0x40007000

08005134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e2fe      	b.n	8005744 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d075      	beq.n	800523e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005152:	4b97      	ldr	r3, [pc, #604]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800515c:	4b94      	ldr	r3, [pc, #592]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d102      	bne.n	8005172 <HAL_RCC_OscConfig+0x3e>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d002      	beq.n	8005178 <HAL_RCC_OscConfig+0x44>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d10b      	bne.n	8005190 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	4b8d      	ldr	r3, [pc, #564]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05b      	beq.n	800523c <HAL_RCC_OscConfig+0x108>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d157      	bne.n	800523c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e2d9      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005198:	d106      	bne.n	80051a8 <HAL_RCC_OscConfig+0x74>
 800519a:	4b85      	ldr	r3, [pc, #532]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a84      	ldr	r2, [pc, #528]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e01d      	b.n	80051e4 <HAL_RCC_OscConfig+0xb0>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x98>
 80051b2:	4b7f      	ldr	r3, [pc, #508]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7e      	ldr	r2, [pc, #504]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	4b7c      	ldr	r3, [pc, #496]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a7b      	ldr	r2, [pc, #492]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_OscConfig+0xb0>
 80051cc:	4b78      	ldr	r3, [pc, #480]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a77      	ldr	r2, [pc, #476]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	4b75      	ldr	r3, [pc, #468]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a74      	ldr	r2, [pc, #464]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80051de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d013      	beq.n	8005214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fc fd40 	bl	8001c70 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f4:	f7fc fd3c 	bl	8001c70 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b64      	cmp	r3, #100	; 0x64
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e29e      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005206:	4b6a      	ldr	r3, [pc, #424]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0xc0>
 8005212:	e014      	b.n	800523e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fc fd2c 	bl	8001c70 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800521c:	f7fc fd28 	bl	8001c70 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	; 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e28a      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800522e:	4b60      	ldr	r3, [pc, #384]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0xe8>
 800523a:	e000      	b.n	800523e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800523c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d075      	beq.n	8005336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800524a:	4b59      	ldr	r3, [pc, #356]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005254:	4b56      	ldr	r3, [pc, #344]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b0c      	cmp	r3, #12
 8005262:	d102      	bne.n	800526a <HAL_RCC_OscConfig+0x136>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d002      	beq.n	8005270 <HAL_RCC_OscConfig+0x13c>
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b04      	cmp	r3, #4
 800526e:	d11f      	bne.n	80052b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005270:	4b4f      	ldr	r3, [pc, #316]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_OscConfig+0x154>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e25d      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005288:	4b49      	ldr	r3, [pc, #292]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	4946      	ldr	r1, [pc, #280]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800529c:	4b45      	ldr	r3, [pc, #276]	; (80053b4 <HAL_RCC_OscConfig+0x280>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fc fc99 	bl	8001bd8 <HAL_InitTick>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d043      	beq.n	8005334 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e249      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d023      	beq.n	8005300 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052b8:	4b3d      	ldr	r3, [pc, #244]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a3c      	ldr	r2, [pc, #240]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80052be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fc fcd4 	bl	8001c70 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052cc:	f7fc fcd0 	bl	8001c70 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e232      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052de:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ea:	4b31      	ldr	r3, [pc, #196]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	061b      	lsls	r3, r3, #24
 80052f8:	492d      	ldr	r1, [pc, #180]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	604b      	str	r3, [r1, #4]
 80052fe:	e01a      	b.n	8005336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005300:	4b2b      	ldr	r3, [pc, #172]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fc fcb0 	bl	8001c70 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005314:	f7fc fcac 	bl	8001c70 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e20e      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005326:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x1e0>
 8005332:	e000      	b.n	8005336 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d041      	beq.n	80053c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01c      	beq.n	8005384 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800534a:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 800534c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005350:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535a:	f7fc fc89 	bl	8001c70 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005362:	f7fc fc85 	bl	8001c70 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e1e7      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0ef      	beq.n	8005362 <HAL_RCC_OscConfig+0x22e>
 8005382:	e020      	b.n	80053c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <HAL_RCC_OscConfig+0x27c>)
 800538c:	f023 0301 	bic.w	r3, r3, #1
 8005390:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fc fc6c 	bl	8001c70 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800539a:	e00d      	b.n	80053b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800539c:	f7fc fc68 	bl	8001c70 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d906      	bls.n	80053b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e1ca      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053b8:	4b8c      	ldr	r3, [pc, #560]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80053ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ea      	bne.n	800539c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80a6 	beq.w	8005520 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053d4:	2300      	movs	r3, #0
 80053d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053d8:	4b84      	ldr	r3, [pc, #528]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_RCC_OscConfig+0x2b4>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x2b6>
 80053e8:	2300      	movs	r3, #0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ee:	4b7f      	ldr	r3, [pc, #508]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	4a7e      	ldr	r2, [pc, #504]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80053f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f8:	6593      	str	r3, [r2, #88]	; 0x58
 80053fa:	4b7c      	ldr	r3, [pc, #496]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005406:	2301      	movs	r3, #1
 8005408:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800540a:	4b79      	ldr	r3, [pc, #484]	; (80055f0 <HAL_RCC_OscConfig+0x4bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d118      	bne.n	8005448 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005416:	4b76      	ldr	r3, [pc, #472]	; (80055f0 <HAL_RCC_OscConfig+0x4bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a75      	ldr	r2, [pc, #468]	; (80055f0 <HAL_RCC_OscConfig+0x4bc>)
 800541c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005422:	f7fc fc25 	bl	8001c70 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542a:	f7fc fc21 	bl	8001c70 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e183      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800543c:	4b6c      	ldr	r3, [pc, #432]	; (80055f0 <HAL_RCC_OscConfig+0x4bc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d108      	bne.n	8005462 <HAL_RCC_OscConfig+0x32e>
 8005450:	4b66      	ldr	r3, [pc, #408]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	4a65      	ldr	r2, [pc, #404]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005460:	e024      	b.n	80054ac <HAL_RCC_OscConfig+0x378>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b05      	cmp	r3, #5
 8005468:	d110      	bne.n	800548c <HAL_RCC_OscConfig+0x358>
 800546a:	4b60      	ldr	r3, [pc, #384]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	4a5e      	ldr	r2, [pc, #376]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005472:	f043 0304 	orr.w	r3, r3, #4
 8005476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800547a:	4b5c      	ldr	r3, [pc, #368]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	4a5a      	ldr	r2, [pc, #360]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800548a:	e00f      	b.n	80054ac <HAL_RCC_OscConfig+0x378>
 800548c:	4b57      	ldr	r3, [pc, #348]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	4a56      	ldr	r2, [pc, #344]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005494:	f023 0301 	bic.w	r3, r3, #1
 8005498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	4a52      	ldr	r2, [pc, #328]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80054a4:	f023 0304 	bic.w	r3, r3, #4
 80054a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d016      	beq.n	80054e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7fc fbdc 	bl	8001c70 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ba:	e00a      	b.n	80054d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054bc:	f7fc fbd8 	bl	8001c70 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e138      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d2:	4b46      	ldr	r3, [pc, #280]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ed      	beq.n	80054bc <HAL_RCC_OscConfig+0x388>
 80054e0:	e015      	b.n	800550e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e2:	f7fc fbc5 	bl	8001c70 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054e8:	e00a      	b.n	8005500 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fc fbc1 	bl	8001c70 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e121      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005500:	4b3a      	ldr	r3, [pc, #232]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1ed      	bne.n	80054ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800550e:	7ffb      	ldrb	r3, [r7, #31]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d105      	bne.n	8005520 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005514:	4b35      	ldr	r3, [pc, #212]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	4a34      	ldr	r2, [pc, #208]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 800551a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800551e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d03c      	beq.n	80055a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01c      	beq.n	800556e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800553a:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fc fb94 	bl	8001c70 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800554c:	f7fc fb90 	bl	8001c70 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0f2      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800555e:	4b23      	ldr	r3, [pc, #140]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0ef      	beq.n	800554c <HAL_RCC_OscConfig+0x418>
 800556c:	e01b      	b.n	80055a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800556e:	4b1f      	ldr	r3, [pc, #124]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005570:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005574:	4a1d      	ldr	r2, [pc, #116]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fc fb77 	bl	8001c70 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005586:	f7fc fb73 	bl	8001c70 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e0d5      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 800559a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1ef      	bne.n	8005586 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 80c9 	beq.w	8005742 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b0c      	cmp	r3, #12
 80055ba:	f000 8083 	beq.w	80056c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d15e      	bne.n	8005684 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a08      	ldr	r2, [pc, #32]	; (80055ec <HAL_RCC_OscConfig+0x4b8>)
 80055cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fc fb4d 	bl	8001c70 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d8:	e00c      	b.n	80055f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055da:	f7fc fb49 	bl	8001c70 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d905      	bls.n	80055f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e0ab      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f4:	4b55      	ldr	r3, [pc, #340]	; (800574c <HAL_RCC_OscConfig+0x618>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ec      	bne.n	80055da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005600:	4b52      	ldr	r3, [pc, #328]	; (800574c <HAL_RCC_OscConfig+0x618>)
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	4b52      	ldr	r3, [pc, #328]	; (8005750 <HAL_RCC_OscConfig+0x61c>)
 8005606:	4013      	ands	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6a11      	ldr	r1, [r2, #32]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005610:	3a01      	subs	r2, #1
 8005612:	0112      	lsls	r2, r2, #4
 8005614:	4311      	orrs	r1, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800561a:	0212      	lsls	r2, r2, #8
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005622:	0852      	lsrs	r2, r2, #1
 8005624:	3a01      	subs	r2, #1
 8005626:	0552      	lsls	r2, r2, #21
 8005628:	4311      	orrs	r1, r2
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800562e:	0852      	lsrs	r2, r2, #1
 8005630:	3a01      	subs	r2, #1
 8005632:	0652      	lsls	r2, r2, #25
 8005634:	4311      	orrs	r1, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800563a:	06d2      	lsls	r2, r2, #27
 800563c:	430a      	orrs	r2, r1
 800563e:	4943      	ldr	r1, [pc, #268]	; (800574c <HAL_RCC_OscConfig+0x618>)
 8005640:	4313      	orrs	r3, r2
 8005642:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005644:	4b41      	ldr	r3, [pc, #260]	; (800574c <HAL_RCC_OscConfig+0x618>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a40      	ldr	r2, [pc, #256]	; (800574c <HAL_RCC_OscConfig+0x618>)
 800564a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800564e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005650:	4b3e      	ldr	r3, [pc, #248]	; (800574c <HAL_RCC_OscConfig+0x618>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4a3d      	ldr	r2, [pc, #244]	; (800574c <HAL_RCC_OscConfig+0x618>)
 8005656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800565a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fc fb08 	bl	8001c70 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005664:	f7fc fb04 	bl	8001c70 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e066      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005676:	4b35      	ldr	r3, [pc, #212]	; (800574c <HAL_RCC_OscConfig+0x618>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x530>
 8005682:	e05e      	b.n	8005742 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005684:	4b31      	ldr	r3, [pc, #196]	; (800574c <HAL_RCC_OscConfig+0x618>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a30      	ldr	r2, [pc, #192]	; (800574c <HAL_RCC_OscConfig+0x618>)
 800568a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800568e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fc faee 	bl	8001c70 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7fc faea 	bl	8001c70 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e04c      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056aa:	4b28      	ldr	r3, [pc, #160]	; (800574c <HAL_RCC_OscConfig+0x618>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056b6:	4b25      	ldr	r3, [pc, #148]	; (800574c <HAL_RCC_OscConfig+0x618>)
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	4924      	ldr	r1, [pc, #144]	; (800574c <HAL_RCC_OscConfig+0x618>)
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <HAL_RCC_OscConfig+0x620>)
 80056be:	4013      	ands	r3, r2
 80056c0:	60cb      	str	r3, [r1, #12]
 80056c2:	e03e      	b.n	8005742 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e039      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056d0:	4b1e      	ldr	r3, [pc, #120]	; (800574c <HAL_RCC_OscConfig+0x618>)
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0203 	and.w	r2, r3, #3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d12c      	bne.n	800573e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	3b01      	subs	r3, #1
 80056f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d123      	bne.n	800573e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d11b      	bne.n	800573e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d113      	bne.n	800573e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	3b01      	subs	r3, #1
 8005724:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005726:	429a      	cmp	r2, r3
 8005728:	d109      	bne.n	800573e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	3b01      	subs	r3, #1
 8005738:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573a:	429a      	cmp	r2, r3
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000
 8005750:	019f800c 	.word	0x019f800c
 8005754:	feeefffc 	.word	0xfeeefffc

08005758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e11e      	b.n	80059ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005770:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d910      	bls.n	80057a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800577e:	4b8e      	ldr	r3, [pc, #568]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f023 020f 	bic.w	r2, r3, #15
 8005786:	498c      	ldr	r1, [pc, #560]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	4b8a      	ldr	r3, [pc, #552]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e106      	b.n	80059ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d073      	beq.n	8005894 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d129      	bne.n	8005808 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b4:	4b81      	ldr	r3, [pc, #516]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0f4      	b.n	80059ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057c4:	f000 f99e 	bl	8005b04 <RCC_GetSysClockFreqFromPLLSource>
 80057c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4a7c      	ldr	r2, [pc, #496]	; (80059c0 <HAL_RCC_ClockConfig+0x268>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d93f      	bls.n	8005852 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057d2:	4b7a      	ldr	r3, [pc, #488]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d033      	beq.n	8005852 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d12f      	bne.n	8005852 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057f2:	4b72      	ldr	r3, [pc, #456]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fa:	4a70      	ldr	r2, [pc, #448]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005802:	2380      	movs	r3, #128	; 0x80
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e024      	b.n	8005852 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d107      	bne.n	8005820 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005810:	4b6a      	ldr	r3, [pc, #424]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d109      	bne.n	8005830 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0c6      	b.n	80059ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005820:	4b66      	ldr	r3, [pc, #408]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0be      	b.n	80059ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005830:	f000 f8ce 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8005834:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4a61      	ldr	r2, [pc, #388]	; (80059c0 <HAL_RCC_ClockConfig+0x268>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d909      	bls.n	8005852 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800583e:	4b5f      	ldr	r3, [pc, #380]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005846:	4a5d      	ldr	r2, [pc, #372]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800584c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005852:	4b5a      	ldr	r3, [pc, #360]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f023 0203 	bic.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4957      	ldr	r1, [pc, #348]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005864:	f7fc fa04 	bl	8001c70 <HAL_GetTick>
 8005868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	e00a      	b.n	8005882 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586c:	f7fc fa00 	bl	8001c70 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f241 3288 	movw	r2, #5000	; 0x1388
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e095      	b.n	80059ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005882:	4b4e      	ldr	r3, [pc, #312]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 020c 	and.w	r2, r3, #12
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	429a      	cmp	r2, r3
 8005892:	d1eb      	bne.n	800586c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d023      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ac:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	4a42      	ldr	r2, [pc, #264]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058c4:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058cc:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4936      	ldr	r1, [pc, #216]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
 80058e6:	e008      	b.n	80058fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d105      	bne.n	80058fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058ee:	4b33      	ldr	r3, [pc, #204]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	4a32      	ldr	r2, [pc, #200]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 80058f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058fa:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	d21d      	bcs.n	8005944 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005908:	4b2b      	ldr	r3, [pc, #172]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f023 020f 	bic.w	r2, r3, #15
 8005910:	4929      	ldr	r1, [pc, #164]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	4313      	orrs	r3, r2
 8005916:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005918:	f7fc f9aa 	bl	8001c70 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	e00a      	b.n	8005936 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005920:	f7fc f9a6 	bl	8001c70 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e03b      	b.n	80059ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_RCC_ClockConfig+0x260>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d1ed      	bne.n	8005920 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005950:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4917      	ldr	r1, [pc, #92]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	490f      	ldr	r1, [pc, #60]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 800597e:	4313      	orrs	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005982:	f000 f825 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8005986:	4602      	mov	r2, r0
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCC_ClockConfig+0x264>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	490c      	ldr	r1, [pc, #48]	; (80059c4 <HAL_RCC_ClockConfig+0x26c>)
 8005994:	5ccb      	ldrb	r3, [r1, r3]
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <HAL_RCC_ClockConfig+0x270>)
 80059a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059a2:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <HAL_RCC_ClockConfig+0x274>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc f916 	bl	8001bd8 <HAL_InitTick>
 80059ac:	4603      	mov	r3, r0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40022000 	.word	0x40022000
 80059bc:	40021000 	.word	0x40021000
 80059c0:	04c4b400 	.word	0x04c4b400
 80059c4:	08007a4c 	.word	0x08007a4c
 80059c8:	20000004 	.word	0x20000004
 80059cc:	20000008 	.word	0x20000008

080059d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059d6:	4b2c      	ldr	r3, [pc, #176]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d102      	bne.n	80059e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059e2:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059e4:	613b      	str	r3, [r7, #16]
 80059e6:	e047      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059e8:	4b27      	ldr	r3, [pc, #156]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 030c 	and.w	r3, r3, #12
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d102      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059f4:	4b26      	ldr	r3, [pc, #152]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	e03e      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059fa:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	2b0c      	cmp	r3, #12
 8005a04:	d136      	bne.n	8005a74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a10:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d10c      	bne.n	8005a3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a24:	4a1a      	ldr	r2, [pc, #104]	; (8005a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a2e:	68d2      	ldr	r2, [r2, #12]
 8005a30:	0a12      	lsrs	r2, r2, #8
 8005a32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
      break;
 8005a3c:	e00c      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3e:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	4a10      	ldr	r2, [pc, #64]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a48:	68d2      	ldr	r2, [r2, #12]
 8005a4a:	0a12      	lsrs	r2, r2, #8
 8005a4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
      break;
 8005a56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	0e5b      	lsrs	r3, r3, #25
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	3301      	adds	r3, #1
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	e001      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a78:	693b      	ldr	r3, [r7, #16]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	00f42400 	.word	0x00f42400
 8005a90:	016e3600 	.word	0x016e3600

08005a94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a98:	4b03      	ldr	r3, [pc, #12]	; (8005aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	20000004 	.word	0x20000004

08005aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ab0:	f7ff fff0 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	4904      	ldr	r1, [pc, #16]	; (8005ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ac2:	5ccb      	ldrb	r3, [r1, r3]
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	08007a5c 	.word	0x08007a5c

08005ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005adc:	f7ff ffda 	bl	8005a94 <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	0adb      	lsrs	r3, r3, #11
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4904      	ldr	r1, [pc, #16]	; (8005b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40021000 	.word	0x40021000
 8005b00:	08007a5c 	.word	0x08007a5c

08005b04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b0a:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d10c      	bne.n	8005b42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b32:	68d2      	ldr	r2, [r2, #12]
 8005b34:	0a12      	lsrs	r2, r2, #8
 8005b36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	617b      	str	r3, [r7, #20]
    break;
 8005b40:	e00c      	b.n	8005b5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4a:	4a0e      	ldr	r2, [pc, #56]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b4c:	68d2      	ldr	r2, [r2, #12]
 8005b4e:	0a12      	lsrs	r2, r2, #8
 8005b50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b54:	fb02 f303 	mul.w	r3, r2, r3
 8005b58:	617b      	str	r3, [r7, #20]
    break;
 8005b5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	0e5b      	lsrs	r3, r3, #25
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	3301      	adds	r3, #1
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b76:	687b      	ldr	r3, [r7, #4]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40021000 	.word	0x40021000
 8005b88:	016e3600 	.word	0x016e3600
 8005b8c:	00f42400 	.word	0x00f42400

08005b90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b98:	2300      	movs	r3, #0
 8005b9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8098 	beq.w	8005cde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb2:	4b43      	ldr	r3, [pc, #268]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bbe:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc2:	4a3f      	ldr	r2, [pc, #252]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005bca:	4b3d      	ldr	r3, [pc, #244]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	60bb      	str	r3, [r7, #8]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bda:	4b3a      	ldr	r3, [pc, #232]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a39      	ldr	r2, [pc, #228]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be6:	f7fc f843 	bl	8001c70 <HAL_GetTick>
 8005bea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bec:	e009      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bee:	f7fc f83f 	bl	8001c70 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d902      	bls.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	74fb      	strb	r3, [r7, #19]
        break;
 8005c00:	e005      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c02:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ef      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c0e:	7cfb      	ldrb	r3, [r7, #19]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d159      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c14:	4b2a      	ldr	r3, [pc, #168]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01e      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d019      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c30:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c3c:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	4a1f      	ldr	r2, [pc, #124]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c4c:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c5c:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6e:	f7fb ffff 	bl	8001c70 <HAL_GetTick>
 8005c72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c74:	e00b      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7fb fffb 	bl	8001c70 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d902      	bls.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c8c:	e006      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0ec      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c9c:	7cfb      	ldrb	r3, [r7, #19]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cb8:	e008      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	74bb      	strb	r3, [r7, #18]
 8005cbe:	e005      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc8:	7cfb      	ldrb	r3, [r7, #19]
 8005cca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ccc:	7c7b      	ldrb	r3, [r7, #17]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d105      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd2:	4ba6      	ldr	r3, [pc, #664]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd6:	4aa5      	ldr	r2, [pc, #660]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cea:	4ba0      	ldr	r3, [pc, #640]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f023 0203 	bic.w	r2, r3, #3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	499c      	ldr	r1, [pc, #624]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d0c:	4b97      	ldr	r3, [pc, #604]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f023 020c 	bic.w	r2, r3, #12
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	4994      	ldr	r1, [pc, #592]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00a      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d2e:	4b8f      	ldr	r3, [pc, #572]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	498b      	ldr	r1, [pc, #556]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d50:	4b86      	ldr	r3, [pc, #536]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	4983      	ldr	r1, [pc, #524]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d72:	4b7e      	ldr	r3, [pc, #504]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	497a      	ldr	r1, [pc, #488]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d94:	4b75      	ldr	r3, [pc, #468]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4972      	ldr	r1, [pc, #456]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005db6:	4b6d      	ldr	r3, [pc, #436]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	4969      	ldr	r1, [pc, #420]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dd8:	4b64      	ldr	r3, [pc, #400]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	4961      	ldr	r1, [pc, #388]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dfa:	4b5c      	ldr	r3, [pc, #368]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	4958      	ldr	r1, [pc, #352]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d015      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e1c:	4b53      	ldr	r3, [pc, #332]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	4950      	ldr	r1, [pc, #320]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e3c:	4b4b      	ldr	r3, [pc, #300]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	4a4a      	ldr	r2, [pc, #296]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d015      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e54:	4b45      	ldr	r3, [pc, #276]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4942      	ldr	r1, [pc, #264]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e72:	d105      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e74:	4b3d      	ldr	r3, [pc, #244]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e8c:	4b37      	ldr	r3, [pc, #220]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	4934      	ldr	r1, [pc, #208]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eac:	4b2f      	ldr	r3, [pc, #188]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4a2e      	ldr	r2, [pc, #184]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d015      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ec4:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	4926      	ldr	r1, [pc, #152]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ee4:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d015      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005efc:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	4918      	ldr	r1, [pc, #96]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f1a:	d105      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1c:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	490a      	ldr	r1, [pc, #40]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f52:	d105      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f60:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40021000 	.word	0x40021000

08005f70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f82:	d136      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f84:	4bac      	ldr	r3, [pc, #688]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005f90:	4ba9      	ldr	r3, [pc, #676]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d108      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa4:	d104      	bne.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	f000 bc2a 	b.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005fb0:	4ba1      	ldr	r3, [pc, #644]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d108      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc4:	d104      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8005fc6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	f000 bc1a 	b.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005fd0:	4b99      	ldr	r3, [pc, #612]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fdc:	f040 8412 	bne.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fe6:	f040 840d 	bne.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    {
      frequency = HSE_VALUE / 32U;
 8005fea:	4b94      	ldr	r3, [pc, #592]	; (800623c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	f000 bc09 	b.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8005ff2:	4b91      	ldr	r3, [pc, #580]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d10c      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ffe:	4b8e      	ldr	r3, [pc, #568]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600a:	d102      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 800600c:	4b8c      	ldr	r3, [pc, #560]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e017      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]
 8006016:	e014      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8006018:	4b87      	ldr	r3, [pc, #540]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b03      	cmp	r3, #3
 8006022:	d10c      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006024:	4b84      	ldr	r3, [pc, #528]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006030:	d102      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8006032:	4b84      	ldr	r3, [pc, #528]	; (8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e004      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	e001      	b.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006042:	4b7d      	ldr	r3, [pc, #500]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	091b      	lsrs	r3, r3, #4
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	3301      	adds	r3, #1
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605c:	f000 8378 	beq.w	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006066:	f200 83ae 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006070:	f000 8337 	beq.w	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800607a:	f200 83a4 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006084:	f000 82ff 	beq.w	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800608e:	f200 839a 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006098:	f000 82c0 	beq.w	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a2:	f200 8390 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	f000 8272 	beq.w	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b6:	f200 8386 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c0:	f000 8224 	beq.w	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ca:	f200 837c 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d4:	f000 81da 	beq.w	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060de:	f200 8372 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e8:	f000 81ab 	beq.w	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f2:	f200 8368 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b80      	cmp	r3, #128	; 0x80
 80060fa:	f000 817d 	beq.w	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b80      	cmp	r3, #128	; 0x80
 8006102:	f200 8360 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b20      	cmp	r3, #32
 800610a:	d84b      	bhi.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8359 	beq.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3b01      	subs	r3, #1
 8006118:	2b1f      	cmp	r3, #31
 800611a:	f200 8354 	bhi.w	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	080061af 	.word	0x080061af
 8006128:	08006211 	.word	0x08006211
 800612c:	080067c7 	.word	0x080067c7
 8006130:	08006283 	.word	0x08006283
 8006134:	080067c7 	.word	0x080067c7
 8006138:	080067c7 	.word	0x080067c7
 800613c:	080067c7 	.word	0x080067c7
 8006140:	080062e5 	.word	0x080062e5
 8006144:	080067c7 	.word	0x080067c7
 8006148:	080067c7 	.word	0x080067c7
 800614c:	080067c7 	.word	0x080067c7
 8006150:	080067c7 	.word	0x080067c7
 8006154:	080067c7 	.word	0x080067c7
 8006158:	080067c7 	.word	0x080067c7
 800615c:	080067c7 	.word	0x080067c7
 8006160:	080067c7 	.word	0x080067c7
 8006164:	080067c7 	.word	0x080067c7
 8006168:	080067c7 	.word	0x080067c7
 800616c:	080067c7 	.word	0x080067c7
 8006170:	080067c7 	.word	0x080067c7
 8006174:	080067c7 	.word	0x080067c7
 8006178:	080067c7 	.word	0x080067c7
 800617c:	080067c7 	.word	0x080067c7
 8006180:	080067c7 	.word	0x080067c7
 8006184:	080067c7 	.word	0x080067c7
 8006188:	080067c7 	.word	0x080067c7
 800618c:	080067c7 	.word	0x080067c7
 8006190:	080067c7 	.word	0x080067c7
 8006194:	080067c7 	.word	0x080067c7
 8006198:	080067c7 	.word	0x080067c7
 800619c:	080067c7 	.word	0x080067c7
 80061a0:	08006347 	.word	0x08006347
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	f000 8101 	beq.w	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
      break;

#endif /* QUADSPI */

    default:
      break;
 80061ac:	e30b      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061ae:	4b22      	ldr	r3, [pc, #136]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80061b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        frequency = HAL_RCC_GetPCLK2Freq();
 80061c0:	f7ff fc8a 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 80061c4:	61f8      	str	r0, [r7, #28]
      break;
 80061c6:	e300      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d103      	bne.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        frequency = HAL_RCC_GetSysClockFreq();
 80061ce:	f7ff fbff 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80061d2:	61f8      	str	r0, [r7, #28]
      break;
 80061d4:	e2f9      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e2:	d105      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d102      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HSI_VALUE;
 80061ea:	4b15      	ldr	r3, [pc, #84]	; (8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80061ec:	61fb      	str	r3, [r7, #28]
      break;
 80061ee:	e2ec      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061f0:	4b11      	ldr	r3, [pc, #68]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	f040 82e5 	bne.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b03      	cmp	r3, #3
 8006204:	f040 82e1 	bne.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        frequency = LSE_VALUE;
 8006208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620c:	61fb      	str	r3, [r7, #28]
      break;
 800620e:	e2dc      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006210:	4b09      	ldr	r3, [pc, #36]	; (8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006216:	f003 030c 	and.w	r3, r3, #12
 800621a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006222:	f7ff fc43 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8006226:	61f8      	str	r0, [r7, #28]
      break;
 8006228:	e2d1      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b04      	cmp	r3, #4
 800622e:	d10b      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8006230:	f7ff fbce 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8006234:	61f8      	str	r0, [r7, #28]
      break;
 8006236:	e2ca      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006238:	40021000 	.word	0x40021000
 800623c:	000b71b0 	.word	0x000b71b0
 8006240:	00f42400 	.word	0x00f42400
 8006244:	016e3600 	.word	0x016e3600
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006248:	4b9e      	ldr	r3, [pc, #632]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006254:	d105      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b08      	cmp	r3, #8
 800625a:	d102      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HSI_VALUE;
 800625c:	4b9a      	ldr	r3, [pc, #616]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800625e:	61fb      	str	r3, [r7, #28]
      break;
 8006260:	e2b5      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006262:	4b98      	ldr	r3, [pc, #608]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	f040 82ae 	bne.w	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	f040 82aa 	bne.w	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        frequency = LSE_VALUE;
 800627a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800627e:	61fb      	str	r3, [r7, #28]
      break;
 8006280:	e2a5      	b.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006282:	4b90      	ldr	r3, [pc, #576]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006288:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800628c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d103      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006294:	f7ff fc0a 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8006298:	61f8      	str	r0, [r7, #28]
      break;
 800629a:	e29a      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d103      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
        frequency = HAL_RCC_GetSysClockFreq();
 80062a2:	f7ff fb95 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80062a6:	61f8      	str	r0, [r7, #28]
      break;
 80062a8:	e293      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062aa:	4b86      	ldr	r3, [pc, #536]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b6:	d105      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d102      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
        frequency = HSI_VALUE;
 80062be:	4b82      	ldr	r3, [pc, #520]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80062c0:	61fb      	str	r3, [r7, #28]
      break;
 80062c2:	e286      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80062c4:	4b7f      	ldr	r3, [pc, #508]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	f040 827f 	bne.w	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	2b30      	cmp	r3, #48	; 0x30
 80062d8:	f040 827b 	bne.w	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
        frequency = LSE_VALUE;
 80062dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e0:	61fb      	str	r3, [r7, #28]
      break;
 80062e2:	e276      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80062e4:	4b77      	ldr	r3, [pc, #476]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ee:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80062f6:	f7ff fbd9 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 80062fa:	61f8      	str	r0, [r7, #28]
      break;
 80062fc:	e26b      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d103      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
        frequency = HAL_RCC_GetSysClockFreq();
 8006304:	f7ff fb64 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8006308:	61f8      	str	r0, [r7, #28]
      break;
 800630a:	e264      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800630c:	4b6d      	ldr	r3, [pc, #436]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006318:	d105      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b80      	cmp	r3, #128	; 0x80
 800631e:	d102      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
        frequency = HSI_VALUE;
 8006320:	4b69      	ldr	r3, [pc, #420]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006322:	61fb      	str	r3, [r7, #28]
      break;
 8006324:	e257      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006326:	4b67      	ldr	r3, [pc, #412]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	f040 8250 	bne.w	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2bc0      	cmp	r3, #192	; 0xc0
 800633a:	f040 824c 	bne.w	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        frequency = LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	61fb      	str	r3, [r7, #28]
      break;
 8006344:	e247      	b.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006346:	4b5f      	ldr	r3, [pc, #380]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006350:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d103      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006358:	f7ff fba8 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 800635c:	61f8      	str	r0, [r7, #28]
      break;
 800635e:	e23c      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006366:	d103      	bne.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
        frequency = HAL_RCC_GetSysClockFreq();
 8006368:	f7ff fb32 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800636c:	61f8      	str	r0, [r7, #28]
      break;
 800636e:	e234      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006370:	4b54      	ldr	r3, [pc, #336]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637c:	d106      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006384:	d102      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        frequency = HSI_VALUE;
 8006386:	4b50      	ldr	r3, [pc, #320]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006388:	61fb      	str	r3, [r7, #28]
      break;
 800638a:	e226      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800638c:	4b4d      	ldr	r3, [pc, #308]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	f040 821f 	bne.w	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a2:	f040 821a 	bne.w	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        frequency = LSE_VALUE;
 80063a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063aa:	61fb      	str	r3, [r7, #28]
      break;
 80063ac:	e215      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80063ae:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063b8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d103      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7ff fb74 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 80063c4:	61f8      	str	r0, [r7, #28]
      break;
 80063c6:	e20a      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d103      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        frequency = HAL_RCC_GetSysClockFreq();
 80063d0:	f7ff fafe 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80063d4:	61f8      	str	r0, [r7, #28]
      break;
 80063d6:	e202      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80063d8:	4b3a      	ldr	r3, [pc, #232]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e4:	f040 81fb 	bne.w	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ee:	f040 81f6 	bne.w	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
        frequency = HSI_VALUE;
 80063f2:	4b35      	ldr	r3, [pc, #212]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80063f4:	61fb      	str	r3, [r7, #28]
      break;
 80063f6:	e1f2      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80063f8:	4b32      	ldr	r3, [pc, #200]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006402:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d103      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
        frequency = HAL_RCC_GetPCLK1Freq();
 800640a:	f7ff fb4f 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 800640e:	61f8      	str	r0, [r7, #28]
      break;
 8006410:	e1e7      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006418:	d103      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        frequency = HAL_RCC_GetSysClockFreq();
 800641a:	f7ff fad9 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800641e:	61f8      	str	r0, [r7, #28]
      break;
 8006420:	e1df      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006422:	4b28      	ldr	r3, [pc, #160]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642e:	f040 81d8 	bne.w	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	f040 81d3 	bne.w	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
        frequency = HSI_VALUE;
 800643c:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800643e:	61fb      	str	r3, [r7, #28]
      break;
 8006440:	e1cf      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006442:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800644c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006454:	f7ff fb2a 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8006458:	61f8      	str	r0, [r7, #28]
      break;
 800645a:	e1c4      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006462:	d103      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetSysClockFreq();
 8006464:	f7ff fab4 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8006468:	61f8      	str	r0, [r7, #28]
      break;
 800646a:	e1bc      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800646c:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006478:	f040 81b5 	bne.w	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006482:	f040 81b0 	bne.w	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
        frequency = HSI_VALUE;
 8006486:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006488:	61fb      	str	r3, [r7, #28]
      break;
 800648a:	e1ac      	b.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800648c:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006496:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x536>
        frequency = HAL_RCC_GetPCLK1Freq();
 800649e:	f7ff fb05 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 80064a2:	61f8      	str	r0, [r7, #28]
      break;
 80064a4:	e1a1      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80064a6:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80064a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d10b      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ba:	d107      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
        frequency = LSI_VALUE;
 80064bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064c0:	61fb      	str	r3, [r7, #28]
 80064c2:	e022      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80064c4:	40021000 	.word	0x40021000
 80064c8:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80064cc:	4b9b      	ldr	r3, [pc, #620]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d8:	d106      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064e0:	d102      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
        frequency = HSI_VALUE;
 80064e2:	4b97      	ldr	r3, [pc, #604]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	e010      	b.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80064e8:	4b94      	ldr	r3, [pc, #592]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	f040 8179 	bne.w	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80064fe:	f040 8174 	bne.w	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        frequency = LSE_VALUE;
 8006502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006506:	61fb      	str	r3, [r7, #28]
      break;
 8006508:	e16f      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 800650a:	e16e      	b.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800650c:	4b8b      	ldr	r3, [pc, #556]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006516:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
        frequency = HAL_RCC_GetSysClockFreq();
 800651e:	f7ff fa57 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8006522:	61f8      	str	r0, [r7, #28]
      break;
 8006524:	e163      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800652c:	d11b      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800652e:	4b83      	ldr	r3, [pc, #524]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 8159 	beq.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800653c:	4b7f      	ldr	r3, [pc, #508]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	0a1b      	lsrs	r3, r3, #8
 8006542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006546:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	fb03 f202 	mul.w	r2, r3, r2
 8006550:	4b7a      	ldr	r3, [pc, #488]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	0d5b      	lsrs	r3, r3, #21
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	3301      	adds	r3, #1
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	61fb      	str	r3, [r7, #28]
      break;
 8006564:	e143      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800656c:	d102      	bne.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        frequency = EXTERNAL_CLOCK_VALUE;
 800656e:	4b75      	ldr	r3, [pc, #468]	; (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8006570:	61fb      	str	r3, [r7, #28]
      break;
 8006572:	e13c      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8006574:	4b71      	ldr	r3, [pc, #452]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006580:	f040 8135 	bne.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800658a:	f040 8130 	bne.w	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        frequency = HSI_VALUE;
 800658e:	4b6c      	ldr	r3, [pc, #432]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8006590:	61fb      	str	r3, [r7, #28]
      break;
 8006592:	e12c      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006594:	4b69      	ldr	r3, [pc, #420]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800659e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
        frequency = HAL_RCC_GetSysClockFreq();
 80065a6:	f7ff fa13 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80065aa:	61f8      	str	r0, [r7, #28]
      break;
 80065ac:	e121      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d11b      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80065b6:	4b61      	ldr	r3, [pc, #388]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8117 	beq.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065c4:	4b5d      	ldr	r3, [pc, #372]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	0a1b      	lsrs	r3, r3, #8
 80065ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ce:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	fb03 f202 	mul.w	r2, r3, r2
 80065d8:	4b58      	ldr	r3, [pc, #352]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	0d5b      	lsrs	r3, r3, #21
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	3301      	adds	r3, #1
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	61fb      	str	r3, [r7, #28]
      break;
 80065ec:	e101      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f4:	d102      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = EXTERNAL_CLOCK_VALUE;
 80065f6:	4b53      	ldr	r3, [pc, #332]	; (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 80065f8:	61fb      	str	r3, [r7, #28]
      break;
 80065fa:	e0fa      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 80065fc:	4b4f      	ldr	r3, [pc, #316]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006608:	f040 80f3 	bne.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006612:	f040 80ee 	bne.w	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        frequency = HSI_VALUE;
 8006616:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8006618:	61fb      	str	r3, [r7, #28]
      break;
 800661a:	e0ea      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800661c:	4b47      	ldr	r3, [pc, #284]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006626:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800662e:	d103      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8006630:	f7ff fa3c 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8006634:	61f8      	str	r0, [r7, #28]
      break;
 8006636:	e0de      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = HSE_VALUE;
 800663e:	4b42      	ldr	r3, [pc, #264]	; (8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>)
 8006640:	61fb      	str	r3, [r7, #28]
      break;
 8006642:	e0d8      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800664a:	f040 80d4 	bne.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800664e:	4b3b      	ldr	r3, [pc, #236]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80cd 	beq.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800665c:	4b37      	ldr	r3, [pc, #220]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006666:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	fb03 f202 	mul.w	r2, r3, r2
 8006670:	4b32      	ldr	r3, [pc, #200]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	0d5b      	lsrs	r3, r3, #21
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	3301      	adds	r3, #1
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	61fb      	str	r3, [r7, #28]
      break;
 8006684:	e0b7      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006686:	4b2d      	ldr	r3, [pc, #180]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006690:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006698:	d114      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800669a:	4b28      	ldr	r3, [pc, #160]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a4:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	fb03 f202 	mul.w	r2, r3, r2
 80066ae:	4b23      	ldr	r3, [pc, #140]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	0d5b      	lsrs	r3, r3, #21
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	3301      	adds	r3, #1
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	61fb      	str	r3, [r7, #28]
      break;
 80066c2:	e09a      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	f040 8093 	bne.w	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f040 808f 	bne.w	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
        frequency = HSI48_VALUE;
 80066dc:	4b1b      	ldr	r3, [pc, #108]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 80066de:	61fb      	str	r3, [r7, #28]
      break;
 80066e0:	e08b      	b.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80066e2:	4b16      	ldr	r3, [pc, #88]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80066ec:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f4:	d114      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006700:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	fb03 f202 	mul.w	r2, r3, r2
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	0d5b      	lsrs	r3, r3, #21
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	3301      	adds	r3, #1
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	fbb2 f3f3 	udiv	r3, r2, r3
 800671c:	61fb      	str	r3, [r7, #28]
      break;
 800671e:	e06e      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d167      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d164      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
        frequency = HSI48_VALUE;
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8006736:	61fb      	str	r3, [r7, #28]
      break;
 8006738:	e061      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000
 8006740:	00f42400 	.word	0x00f42400
 8006744:	00bb8000 	.word	0x00bb8000
 8006748:	016e3600 	.word	0x016e3600
 800674c:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8006750:	4b2f      	ldr	r3, [pc, #188]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800675a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006762:	d128      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8006764:	4b2a      	ldr	r3, [pc, #168]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d048      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006770:	4b27      	ldr	r3, [pc, #156]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	0a1b      	lsrs	r3, r3, #8
 8006776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677a:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800677c:	4b24      	ldr	r3, [pc, #144]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	0edb      	lsrs	r3, r3, #27
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800678e:	4b20      	ldr	r3, [pc, #128]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
              pllp = 17U;
 800679a:	2311      	movs	r3, #17
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	e001      	b.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
              pllp = 7U;
 80067a0:	2307      	movs	r3, #7
 80067a2:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	fb03 f202 	mul.w	r2, r3, r2
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b2:	61fb      	str	r3, [r7, #28]
      break;
 80067b4:	e025      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067bc:	d121      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        frequency = HAL_RCC_GetSysClockFreq();
 80067be:	f7ff f907 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 80067c2:	61f8      	str	r0, [r7, #28]
      break;
 80067c4:	e01d      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      break;
 80067c6:	bf00      	nop
 80067c8:	e01c      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067ca:	bf00      	nop
 80067cc:	e01a      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067ce:	bf00      	nop
 80067d0:	e018      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067d2:	bf00      	nop
 80067d4:	e016      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067d6:	bf00      	nop
 80067d8:	e014      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067da:	bf00      	nop
 80067dc:	e012      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067de:	bf00      	nop
 80067e0:	e010      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067e2:	bf00      	nop
 80067e4:	e00e      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067e6:	bf00      	nop
 80067e8:	e00c      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067ea:	bf00      	nop
 80067ec:	e00a      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067ee:	bf00      	nop
 80067f0:	e008      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067f2:	bf00      	nop
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067f6:	bf00      	nop
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8006802:	bf00      	nop
    }
  }

  return(frequency);
 8006804:	69fb      	ldr	r3, [r7, #28]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40021000 	.word	0x40021000

08006814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e049      	b.n	80068ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb f8e4 	bl	8001a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f000 f898 	bl	8006988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d001      	beq.n	80068dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e042      	b.n	8006962 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a21      	ldr	r2, [pc, #132]	; (8006970 <HAL_TIM_Base_Start+0xac>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d018      	beq.n	8006920 <HAL_TIM_Base_Start+0x5c>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f6:	d013      	beq.n	8006920 <HAL_TIM_Base_Start+0x5c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <HAL_TIM_Base_Start+0xb0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00e      	beq.n	8006920 <HAL_TIM_Base_Start+0x5c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1c      	ldr	r2, [pc, #112]	; (8006978 <HAL_TIM_Base_Start+0xb4>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d009      	beq.n	8006920 <HAL_TIM_Base_Start+0x5c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1a      	ldr	r2, [pc, #104]	; (800697c <HAL_TIM_Base_Start+0xb8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d004      	beq.n	8006920 <HAL_TIM_Base_Start+0x5c>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_TIM_Base_Start+0xbc>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d115      	bne.n	800694c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	4b17      	ldr	r3, [pc, #92]	; (8006984 <HAL_TIM_Base_Start+0xc0>)
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b06      	cmp	r3, #6
 8006930:	d015      	beq.n	800695e <HAL_TIM_Base_Start+0x9a>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006938:	d011      	beq.n	800695e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694a:	e008      	b.n	800695e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e000      	b.n	8006960 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800695e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40013400 	.word	0x40013400
 8006980:	40014000 	.word	0x40014000
 8006984:	00010007 	.word	0x00010007

08006988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a42      	ldr	r2, [pc, #264]	; (8006aa4 <TIM_Base_SetConfig+0x11c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00f      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a6:	d00b      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a3f      	ldr	r2, [pc, #252]	; (8006aa8 <TIM_Base_SetConfig+0x120>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3e      	ldr	r2, [pc, #248]	; (8006aac <TIM_Base_SetConfig+0x124>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0x38>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a3d      	ldr	r2, [pc, #244]	; (8006ab0 <TIM_Base_SetConfig+0x128>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d108      	bne.n	80069d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a33      	ldr	r2, [pc, #204]	; (8006aa4 <TIM_Base_SetConfig+0x11c>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01b      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d017      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a30      	ldr	r2, [pc, #192]	; (8006aa8 <TIM_Base_SetConfig+0x120>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2f      	ldr	r2, [pc, #188]	; (8006aac <TIM_Base_SetConfig+0x124>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00f      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2e      	ldr	r2, [pc, #184]	; (8006ab0 <TIM_Base_SetConfig+0x128>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2d      	ldr	r2, [pc, #180]	; (8006ab4 <TIM_Base_SetConfig+0x12c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2c      	ldr	r2, [pc, #176]	; (8006ab8 <TIM_Base_SetConfig+0x130>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_Base_SetConfig+0x8a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <TIM_Base_SetConfig+0x134>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d108      	bne.n	8006a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a16      	ldr	r2, [pc, #88]	; (8006aa4 <TIM_Base_SetConfig+0x11c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_Base_SetConfig+0xe8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <TIM_Base_SetConfig+0x128>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_Base_SetConfig+0xe8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a16      	ldr	r2, [pc, #88]	; (8006ab4 <TIM_Base_SetConfig+0x12c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_Base_SetConfig+0xe8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <TIM_Base_SetConfig+0x130>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0xe8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a14      	ldr	r2, [pc, #80]	; (8006abc <TIM_Base_SetConfig+0x134>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d103      	bne.n	8006a78 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d105      	bne.n	8006a96 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f023 0201 	bic.w	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	611a      	str	r2, [r3, #16]
  }
}
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40000400 	.word	0x40000400
 8006aac:	40000800 	.word	0x40000800
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e065      	b.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2c      	ldr	r2, [pc, #176]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2b      	ldr	r2, [pc, #172]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d108      	bne.n	8006b1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d018      	beq.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4e:	d013      	beq.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a18      	ldr	r2, [pc, #96]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00e      	beq.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d009      	beq.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a12      	ldr	r2, [pc, #72]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d10c      	bne.n	8006b92 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40013400 	.word	0x40013400
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40014000 	.word	0x40014000

08006bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e042      	b.n	8006c5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d106      	bne.n	8006bee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7fa feb5 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2224      	movs	r2, #36	; 0x24
 8006bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0201 	bic.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 faf4 	bl	80071fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f825 	bl	8006c64 <UART_SetConfig>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e01b      	b.n	8006c5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fb73 	bl	8007340 <UART_CheckIdleState>
 8006c5a:	4603      	mov	r3, r0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c68:	b08c      	sub	sp, #48	; 0x30
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4bab      	ldr	r3, [pc, #684]	; (8006f40 <UART_SetConfig+0x2dc>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	6812      	ldr	r2, [r2, #0]
 8006c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4aa0      	ldr	r2, [pc, #640]	; (8006f44 <UART_SetConfig+0x2e0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d004      	beq.n	8006cd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006cda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	f023 010f 	bic.w	r1, r3, #15
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a91      	ldr	r2, [pc, #580]	; (8006f48 <UART_SetConfig+0x2e4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d125      	bne.n	8006d54 <UART_SetConfig+0xf0>
 8006d08:	4b90      	ldr	r3, [pc, #576]	; (8006f4c <UART_SetConfig+0x2e8>)
 8006d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d81a      	bhi.n	8006d4c <UART_SetConfig+0xe8>
 8006d16:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <UART_SetConfig+0xb8>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d2d 	.word	0x08006d2d
 8006d20:	08006d3d 	.word	0x08006d3d
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d45 	.word	0x08006d45
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d32:	e0d6      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006d34:	2302      	movs	r3, #2
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e0d2      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e0ce      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006d44:	2308      	movs	r3, #8
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4a:	e0ca      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d52:	e0c6      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a7d      	ldr	r2, [pc, #500]	; (8006f50 <UART_SetConfig+0x2ec>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d138      	bne.n	8006dd0 <UART_SetConfig+0x16c>
 8006d5e:	4b7b      	ldr	r3, [pc, #492]	; (8006f4c <UART_SetConfig+0x2e8>)
 8006d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d64:	f003 030c 	and.w	r3, r3, #12
 8006d68:	2b0c      	cmp	r3, #12
 8006d6a:	d82d      	bhi.n	8006dc8 <UART_SetConfig+0x164>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <UART_SetConfig+0x110>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006da9 	.word	0x08006da9
 8006d78:	08006dc9 	.word	0x08006dc9
 8006d7c:	08006dc9 	.word	0x08006dc9
 8006d80:	08006dc9 	.word	0x08006dc9
 8006d84:	08006db9 	.word	0x08006db9
 8006d88:	08006dc9 	.word	0x08006dc9
 8006d8c:	08006dc9 	.word	0x08006dc9
 8006d90:	08006dc9 	.word	0x08006dc9
 8006d94:	08006db1 	.word	0x08006db1
 8006d98:	08006dc9 	.word	0x08006dc9
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dc1 	.word	0x08006dc1
 8006da8:	2300      	movs	r3, #0
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dae:	e098      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e094      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	e090      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc6:	e08c      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dce:	e088      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a5f      	ldr	r2, [pc, #380]	; (8006f54 <UART_SetConfig+0x2f0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d125      	bne.n	8006e26 <UART_SetConfig+0x1c2>
 8006dda:	4b5c      	ldr	r3, [pc, #368]	; (8006f4c <UART_SetConfig+0x2e8>)
 8006ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d016      	beq.n	8006e16 <UART_SetConfig+0x1b2>
 8006de8:	2b30      	cmp	r3, #48	; 0x30
 8006dea:	d818      	bhi.n	8006e1e <UART_SetConfig+0x1ba>
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d00a      	beq.n	8006e06 <UART_SetConfig+0x1a2>
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d814      	bhi.n	8006e1e <UART_SetConfig+0x1ba>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <UART_SetConfig+0x19a>
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d008      	beq.n	8006e0e <UART_SetConfig+0x1aa>
 8006dfc:	e00f      	b.n	8006e1e <UART_SetConfig+0x1ba>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e04:	e06d      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e06:	2302      	movs	r3, #2
 8006e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0c:	e069      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e0e:	2304      	movs	r3, #4
 8006e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e14:	e065      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e16:	2308      	movs	r3, #8
 8006e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e1c:	e061      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e1e:	2310      	movs	r3, #16
 8006e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e24:	e05d      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a4b      	ldr	r2, [pc, #300]	; (8006f58 <UART_SetConfig+0x2f4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d125      	bne.n	8006e7c <UART_SetConfig+0x218>
 8006e30:	4b46      	ldr	r3, [pc, #280]	; (8006f4c <UART_SetConfig+0x2e8>)
 8006e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8006e3c:	d016      	beq.n	8006e6c <UART_SetConfig+0x208>
 8006e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e40:	d818      	bhi.n	8006e74 <UART_SetConfig+0x210>
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d00a      	beq.n	8006e5c <UART_SetConfig+0x1f8>
 8006e46:	2b80      	cmp	r3, #128	; 0x80
 8006e48:	d814      	bhi.n	8006e74 <UART_SetConfig+0x210>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <UART_SetConfig+0x1f0>
 8006e4e:	2b40      	cmp	r3, #64	; 0x40
 8006e50:	d008      	beq.n	8006e64 <UART_SetConfig+0x200>
 8006e52:	e00f      	b.n	8006e74 <UART_SetConfig+0x210>
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e042      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e03e      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e64:	2304      	movs	r3, #4
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e03a      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e6c:	2308      	movs	r3, #8
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e036      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e74:	2310      	movs	r3, #16
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7a:	e032      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a30      	ldr	r2, [pc, #192]	; (8006f44 <UART_SetConfig+0x2e0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d12a      	bne.n	8006edc <UART_SetConfig+0x278>
 8006e86:	4b31      	ldr	r3, [pc, #196]	; (8006f4c <UART_SetConfig+0x2e8>)
 8006e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e94:	d01a      	beq.n	8006ecc <UART_SetConfig+0x268>
 8006e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e9a:	d81b      	bhi.n	8006ed4 <UART_SetConfig+0x270>
 8006e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea0:	d00c      	beq.n	8006ebc <UART_SetConfig+0x258>
 8006ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea6:	d815      	bhi.n	8006ed4 <UART_SetConfig+0x270>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <UART_SetConfig+0x250>
 8006eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb0:	d008      	beq.n	8006ec4 <UART_SetConfig+0x260>
 8006eb2:	e00f      	b.n	8006ed4 <UART_SetConfig+0x270>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eba:	e012      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec2:	e00e      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006ec4:	2304      	movs	r3, #4
 8006ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eca:	e00a      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006ecc:	2308      	movs	r3, #8
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ed2:	e006      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eda:	e002      	b.n	8006ee2 <UART_SetConfig+0x27e>
 8006edc:	2310      	movs	r3, #16
 8006ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a17      	ldr	r2, [pc, #92]	; (8006f44 <UART_SetConfig+0x2e0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	f040 80a8 	bne.w	800703e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d834      	bhi.n	8006f60 <UART_SetConfig+0x2fc>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x298>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f21 	.word	0x08006f21
 8006f00:	08006f61 	.word	0x08006f61
 8006f04:	08006f29 	.word	0x08006f29
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f2f 	.word	0x08006f2f
 8006f10:	08006f61 	.word	0x08006f61
 8006f14:	08006f61 	.word	0x08006f61
 8006f18:	08006f61 	.word	0x08006f61
 8006f1c:	08006f37 	.word	0x08006f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f20:	f7fe fdc4 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8006f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f26:	e021      	b.n	8006f6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <UART_SetConfig+0x2f8>)
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f2c:	e01e      	b.n	8006f6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2e:	f7fe fd4f 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f34:	e01a      	b.n	8006f6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f3c:	e016      	b.n	8006f6c <UART_SetConfig+0x308>
 8006f3e:	bf00      	nop
 8006f40:	cfff69f3 	.word	0xcfff69f3
 8006f44:	40008000 	.word	0x40008000
 8006f48:	40013800 	.word	0x40013800
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	40004400 	.word	0x40004400
 8006f54:	40004800 	.word	0x40004800
 8006f58:	40004c00 	.word	0x40004c00
 8006f5c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 812a 	beq.w	80071c8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	4a9e      	ldr	r2, [pc, #632]	; (80071f4 <UART_SetConfig+0x590>)
 8006f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f86:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	4413      	add	r3, r2
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d305      	bcc.n	8006fa4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d903      	bls.n	8006fac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006faa:	e10d      	b.n	80071c8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	2200      	movs	r2, #0
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	60fa      	str	r2, [r7, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	4a8e      	ldr	r2, [pc, #568]	; (80071f4 <UART_SetConfig+0x590>)
 8006fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fce:	f7f9 fd11 	bl	80009f4 <__aeabi_uldivmod>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	020b      	lsls	r3, r1, #8
 8006fe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fe8:	0202      	lsls	r2, r0, #8
 8006fea:	6979      	ldr	r1, [r7, #20]
 8006fec:	6849      	ldr	r1, [r1, #4]
 8006fee:	0849      	lsrs	r1, r1, #1
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	eb12 0804 	adds.w	r8, r2, r4
 8006ffa:	eb43 0905 	adc.w	r9, r3, r5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	469a      	mov	sl, r3
 8007006:	4693      	mov	fp, r2
 8007008:	4652      	mov	r2, sl
 800700a:	465b      	mov	r3, fp
 800700c:	4640      	mov	r0, r8
 800700e:	4649      	mov	r1, r9
 8007010:	f7f9 fcf0 	bl	80009f4 <__aeabi_uldivmod>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4613      	mov	r3, r2
 800701a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007022:	d308      	bcc.n	8007036 <UART_SetConfig+0x3d2>
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800702a:	d204      	bcs.n	8007036 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6a3a      	ldr	r2, [r7, #32]
 8007032:	60da      	str	r2, [r3, #12]
 8007034:	e0c8      	b.n	80071c8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800703c:	e0c4      	b.n	80071c8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007046:	d167      	bne.n	8007118 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800704c:	2b08      	cmp	r3, #8
 800704e:	d828      	bhi.n	80070a2 <UART_SetConfig+0x43e>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x3f4>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	0800707d 	.word	0x0800707d
 800705c:	08007085 	.word	0x08007085
 8007060:	0800708d 	.word	0x0800708d
 8007064:	080070a3 	.word	0x080070a3
 8007068:	08007093 	.word	0x08007093
 800706c:	080070a3 	.word	0x080070a3
 8007070:	080070a3 	.word	0x080070a3
 8007074:	080070a3 	.word	0x080070a3
 8007078:	0800709b 	.word	0x0800709b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fe fd16 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007080:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007082:	e014      	b.n	80070ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007084:	f7fe fd28 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 8007088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708a:	e010      	b.n	80070ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800708c:	4b5a      	ldr	r3, [pc, #360]	; (80071f8 <UART_SetConfig+0x594>)
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007090:	e00d      	b.n	80070ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007092:	f7fe fc9d 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007098:	e009      	b.n	80070ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070a0:	e005      	b.n	80070ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8089 	beq.w	80071c8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ba:	4a4e      	ldr	r2, [pc, #312]	; (80071f4 <UART_SetConfig+0x590>)
 80070bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c0:	461a      	mov	r2, r3
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c8:	005a      	lsls	r2, r3, #1
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	441a      	add	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	2b0f      	cmp	r3, #15
 80070e0:	d916      	bls.n	8007110 <UART_SetConfig+0x4ac>
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d212      	bcs.n	8007110 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f023 030f 	bic.w	r3, r3, #15
 80070f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	b29a      	uxth	r2, r3
 8007100:	8bfb      	ldrh	r3, [r7, #30]
 8007102:	4313      	orrs	r3, r2
 8007104:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	8bfa      	ldrh	r2, [r7, #30]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	e05b      	b.n	80071c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007116:	e057      	b.n	80071c8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007118:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800711c:	2b08      	cmp	r3, #8
 800711e:	d828      	bhi.n	8007172 <UART_SetConfig+0x50e>
 8007120:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <UART_SetConfig+0x4c4>)
 8007122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007126:	bf00      	nop
 8007128:	0800714d 	.word	0x0800714d
 800712c:	08007155 	.word	0x08007155
 8007130:	0800715d 	.word	0x0800715d
 8007134:	08007173 	.word	0x08007173
 8007138:	08007163 	.word	0x08007163
 800713c:	08007173 	.word	0x08007173
 8007140:	08007173 	.word	0x08007173
 8007144:	08007173 	.word	0x08007173
 8007148:	0800716b 	.word	0x0800716b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fe fcae 	bl	8005aac <HAL_RCC_GetPCLK1Freq>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007152:	e014      	b.n	800717e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007154:	f7fe fcc0 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800715a:	e010      	b.n	800717e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800715c:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <UART_SetConfig+0x594>)
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007160:	e00d      	b.n	800717e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007162:	f7fe fc35 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8007166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007168:	e009      	b.n	800717e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007170:	e005      	b.n	800717e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800717c:	bf00      	nop
    }

    if (pclk != 0U)
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	2b00      	cmp	r3, #0
 8007182:	d021      	beq.n	80071c8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	4a1a      	ldr	r2, [pc, #104]	; (80071f4 <UART_SetConfig+0x590>)
 800718a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800718e:	461a      	mov	r2, r3
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	fbb3 f2f2 	udiv	r2, r3, r2
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	441a      	add	r2, r3
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d909      	bls.n	80071c2 <UART_SetConfig+0x55e>
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b4:	d205      	bcs.n	80071c2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60da      	str	r2, [r3, #12]
 80071c0:	e002      	b.n	80071c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80071e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3730      	adds	r7, #48	; 0x30
 80071ec:	46bd      	mov	sp, r7
 80071ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f2:	bf00      	nop
 80071f4:	08007a64 	.word	0x08007a64
 80071f8:	00f42400 	.word	0x00f42400

080071fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01a      	beq.n	8007312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d10a      	bne.n	8007312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b098      	sub	sp, #96	; 0x60
 8007344:	af02      	add	r7, sp, #8
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007350:	f7fa fc8e 	bl	8001c70 <HAL_GetTick>
 8007354:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d12f      	bne.n	80073c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f88e 	bl	8007494 <UART_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d022      	beq.n	80073c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800738c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007392:	653b      	str	r3, [r7, #80]	; 0x50
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800739c:	647b      	str	r3, [r7, #68]	; 0x44
 800739e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e063      	b.n	800748c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d149      	bne.n	8007466 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073da:	2200      	movs	r2, #0
 80073dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f857 	bl	8007494 <UART_WaitOnFlagUntilTimeout>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d03c      	beq.n	8007466 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	623b      	str	r3, [r7, #32]
   return(result);
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740a:	633b      	str	r3, [r7, #48]	; 0x30
 800740c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e6      	bne.n	80073ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3308      	adds	r3, #8
 8007424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	60fb      	str	r3, [r7, #12]
   return(result);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	64bb      	str	r3, [r7, #72]	; 0x48
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3308      	adds	r3, #8
 800743c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800743e:	61fa      	str	r2, [r7, #28]
 8007440:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	69b9      	ldr	r1, [r7, #24]
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	617b      	str	r3, [r7, #20]
   return(result);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e012      	b.n	800748c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3758      	adds	r7, #88	; 0x58
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a4:	e04f      	b.n	8007546 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d04b      	beq.n	8007546 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ae:	f7fa fbdf 	bl	8001c70 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d302      	bcc.n	80074c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e04e      	b.n	8007566 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d037      	beq.n	8007546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b80      	cmp	r3, #128	; 0x80
 80074da:	d034      	beq.n	8007546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d031      	beq.n	8007546 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d110      	bne.n	8007512 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2208      	movs	r2, #8
 80074f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f838 	bl	800756e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2208      	movs	r2, #8
 8007502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e029      	b.n	8007566 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800751c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007520:	d111      	bne.n	8007546 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800752a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f81e 	bl	800756e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e00f      	b.n	8007566 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4013      	ands	r3, r2
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	bf0c      	ite	eq
 8007556:	2301      	moveq	r3, #1
 8007558:	2300      	movne	r3, #0
 800755a:	b2db      	uxtb	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	429a      	cmp	r2, r3
 8007562:	d0a0      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800756e:	b480      	push	{r7}
 8007570:	b095      	sub	sp, #84	; 0x54
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800758a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007594:	643b      	str	r3, [r7, #64]	; 0x40
 8007596:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800759a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e6      	bne.n	8007576 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075be:	f023 0301 	bic.w	r3, r3, #1
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e3      	bne.n	80075a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d118      	bne.n	800761a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f023 0310 	bic.w	r3, r3, #16
 80075fc:	647b      	str	r3, [r7, #68]	; 0x44
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007606:	61bb      	str	r3, [r7, #24]
 8007608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6979      	ldr	r1, [r7, #20]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	613b      	str	r3, [r7, #16]
   return(result);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e6      	bne.n	80075e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800762e:	bf00      	nop
 8007630:	3754      	adds	r7, #84	; 0x54
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_UARTEx_DisableFifoMode+0x16>
 800764c:	2302      	movs	r3, #2
 800764e:	e027      	b.n	80076a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2224      	movs	r2, #36	; 0x24
 800765c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0201 	bic.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800767e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e02d      	b.n	8007720 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2224      	movs	r2, #36	; 0x24
 80076d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f84f 	bl	80077a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800773c:	2302      	movs	r3, #2
 800773e:	e02d      	b.n	800779c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	; 0x24
 800774c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f811 	bl	80077a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d108      	bne.n	80077c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077c4:	e031      	b.n	800782a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077c6:	2308      	movs	r3, #8
 80077c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077ca:	2308      	movs	r3, #8
 80077cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	0e5b      	lsrs	r3, r3, #25
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	0f5b      	lsrs	r3, r3, #29
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f003 0307 	and.w	r3, r3, #7
 80077ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	7b3a      	ldrb	r2, [r7, #12]
 80077f2:	4911      	ldr	r1, [pc, #68]	; (8007838 <UARTEx_SetNbDataToProcess+0x94>)
 80077f4:	5c8a      	ldrb	r2, [r1, r2]
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077fa:	7b3a      	ldrb	r2, [r7, #12]
 80077fc:	490f      	ldr	r1, [pc, #60]	; (800783c <UARTEx_SetNbDataToProcess+0x98>)
 80077fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007800:	fb93 f3f2 	sdiv	r3, r3, r2
 8007804:	b29a      	uxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	7b7a      	ldrb	r2, [r7, #13]
 8007810:	4909      	ldr	r1, [pc, #36]	; (8007838 <UARTEx_SetNbDataToProcess+0x94>)
 8007812:	5c8a      	ldrb	r2, [r1, r2]
 8007814:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007818:	7b7a      	ldrb	r2, [r7, #13]
 800781a:	4908      	ldr	r1, [pc, #32]	; (800783c <UARTEx_SetNbDataToProcess+0x98>)
 800781c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800781e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	08007a7c 	.word	0x08007a7c
 800783c:	08007a84 	.word	0x08007a84

08007840 <malloc>:
 8007840:	4b02      	ldr	r3, [pc, #8]	; (800784c <malloc+0xc>)
 8007842:	4601      	mov	r1, r0
 8007844:	6818      	ldr	r0, [r3, #0]
 8007846:	f000 b823 	b.w	8007890 <_malloc_r>
 800784a:	bf00      	nop
 800784c:	2000005c 	.word	0x2000005c

08007850 <sbrk_aligned>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	4e0e      	ldr	r6, [pc, #56]	; (800788c <sbrk_aligned+0x3c>)
 8007854:	460c      	mov	r4, r1
 8007856:	6831      	ldr	r1, [r6, #0]
 8007858:	4605      	mov	r5, r0
 800785a:	b911      	cbnz	r1, 8007862 <sbrk_aligned+0x12>
 800785c:	f000 f8ac 	bl	80079b8 <_sbrk_r>
 8007860:	6030      	str	r0, [r6, #0]
 8007862:	4621      	mov	r1, r4
 8007864:	4628      	mov	r0, r5
 8007866:	f000 f8a7 	bl	80079b8 <_sbrk_r>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	d00a      	beq.n	8007884 <sbrk_aligned+0x34>
 800786e:	1cc4      	adds	r4, r0, #3
 8007870:	f024 0403 	bic.w	r4, r4, #3
 8007874:	42a0      	cmp	r0, r4
 8007876:	d007      	beq.n	8007888 <sbrk_aligned+0x38>
 8007878:	1a21      	subs	r1, r4, r0
 800787a:	4628      	mov	r0, r5
 800787c:	f000 f89c 	bl	80079b8 <_sbrk_r>
 8007880:	3001      	adds	r0, #1
 8007882:	d101      	bne.n	8007888 <sbrk_aligned+0x38>
 8007884:	f04f 34ff 	mov.w	r4, #4294967295
 8007888:	4620      	mov	r0, r4
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	20000584 	.word	0x20000584

08007890 <_malloc_r>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	1ccd      	adds	r5, r1, #3
 8007896:	f025 0503 	bic.w	r5, r5, #3
 800789a:	3508      	adds	r5, #8
 800789c:	2d0c      	cmp	r5, #12
 800789e:	bf38      	it	cc
 80078a0:	250c      	movcc	r5, #12
 80078a2:	2d00      	cmp	r5, #0
 80078a4:	4607      	mov	r7, r0
 80078a6:	db01      	blt.n	80078ac <_malloc_r+0x1c>
 80078a8:	42a9      	cmp	r1, r5
 80078aa:	d905      	bls.n	80078b8 <_malloc_r+0x28>
 80078ac:	230c      	movs	r3, #12
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	2600      	movs	r6, #0
 80078b2:	4630      	mov	r0, r6
 80078b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800798c <_malloc_r+0xfc>
 80078bc:	f000 f868 	bl	8007990 <__malloc_lock>
 80078c0:	f8d8 3000 	ldr.w	r3, [r8]
 80078c4:	461c      	mov	r4, r3
 80078c6:	bb5c      	cbnz	r4, 8007920 <_malloc_r+0x90>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4638      	mov	r0, r7
 80078cc:	f7ff ffc0 	bl	8007850 <sbrk_aligned>
 80078d0:	1c43      	adds	r3, r0, #1
 80078d2:	4604      	mov	r4, r0
 80078d4:	d155      	bne.n	8007982 <_malloc_r+0xf2>
 80078d6:	f8d8 4000 	ldr.w	r4, [r8]
 80078da:	4626      	mov	r6, r4
 80078dc:	2e00      	cmp	r6, #0
 80078de:	d145      	bne.n	800796c <_malloc_r+0xdc>
 80078e0:	2c00      	cmp	r4, #0
 80078e2:	d048      	beq.n	8007976 <_malloc_r+0xe6>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	4631      	mov	r1, r6
 80078e8:	4638      	mov	r0, r7
 80078ea:	eb04 0903 	add.w	r9, r4, r3
 80078ee:	f000 f863 	bl	80079b8 <_sbrk_r>
 80078f2:	4581      	cmp	r9, r0
 80078f4:	d13f      	bne.n	8007976 <_malloc_r+0xe6>
 80078f6:	6821      	ldr	r1, [r4, #0]
 80078f8:	1a6d      	subs	r5, r5, r1
 80078fa:	4629      	mov	r1, r5
 80078fc:	4638      	mov	r0, r7
 80078fe:	f7ff ffa7 	bl	8007850 <sbrk_aligned>
 8007902:	3001      	adds	r0, #1
 8007904:	d037      	beq.n	8007976 <_malloc_r+0xe6>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	442b      	add	r3, r5
 800790a:	6023      	str	r3, [r4, #0]
 800790c:	f8d8 3000 	ldr.w	r3, [r8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d038      	beq.n	8007986 <_malloc_r+0xf6>
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	42a2      	cmp	r2, r4
 8007918:	d12b      	bne.n	8007972 <_malloc_r+0xe2>
 800791a:	2200      	movs	r2, #0
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	e00f      	b.n	8007940 <_malloc_r+0xb0>
 8007920:	6822      	ldr	r2, [r4, #0]
 8007922:	1b52      	subs	r2, r2, r5
 8007924:	d41f      	bmi.n	8007966 <_malloc_r+0xd6>
 8007926:	2a0b      	cmp	r2, #11
 8007928:	d917      	bls.n	800795a <_malloc_r+0xca>
 800792a:	1961      	adds	r1, r4, r5
 800792c:	42a3      	cmp	r3, r4
 800792e:	6025      	str	r5, [r4, #0]
 8007930:	bf18      	it	ne
 8007932:	6059      	strne	r1, [r3, #4]
 8007934:	6863      	ldr	r3, [r4, #4]
 8007936:	bf08      	it	eq
 8007938:	f8c8 1000 	streq.w	r1, [r8]
 800793c:	5162      	str	r2, [r4, r5]
 800793e:	604b      	str	r3, [r1, #4]
 8007940:	4638      	mov	r0, r7
 8007942:	f104 060b 	add.w	r6, r4, #11
 8007946:	f000 f829 	bl	800799c <__malloc_unlock>
 800794a:	f026 0607 	bic.w	r6, r6, #7
 800794e:	1d23      	adds	r3, r4, #4
 8007950:	1af2      	subs	r2, r6, r3
 8007952:	d0ae      	beq.n	80078b2 <_malloc_r+0x22>
 8007954:	1b9b      	subs	r3, r3, r6
 8007956:	50a3      	str	r3, [r4, r2]
 8007958:	e7ab      	b.n	80078b2 <_malloc_r+0x22>
 800795a:	42a3      	cmp	r3, r4
 800795c:	6862      	ldr	r2, [r4, #4]
 800795e:	d1dd      	bne.n	800791c <_malloc_r+0x8c>
 8007960:	f8c8 2000 	str.w	r2, [r8]
 8007964:	e7ec      	b.n	8007940 <_malloc_r+0xb0>
 8007966:	4623      	mov	r3, r4
 8007968:	6864      	ldr	r4, [r4, #4]
 800796a:	e7ac      	b.n	80078c6 <_malloc_r+0x36>
 800796c:	4634      	mov	r4, r6
 800796e:	6876      	ldr	r6, [r6, #4]
 8007970:	e7b4      	b.n	80078dc <_malloc_r+0x4c>
 8007972:	4613      	mov	r3, r2
 8007974:	e7cc      	b.n	8007910 <_malloc_r+0x80>
 8007976:	230c      	movs	r3, #12
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	4638      	mov	r0, r7
 800797c:	f000 f80e 	bl	800799c <__malloc_unlock>
 8007980:	e797      	b.n	80078b2 <_malloc_r+0x22>
 8007982:	6025      	str	r5, [r4, #0]
 8007984:	e7dc      	b.n	8007940 <_malloc_r+0xb0>
 8007986:	605b      	str	r3, [r3, #4]
 8007988:	deff      	udf	#255	; 0xff
 800798a:	bf00      	nop
 800798c:	20000580 	.word	0x20000580

08007990 <__malloc_lock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__malloc_lock+0x8>)
 8007992:	f000 b84b 	b.w	8007a2c <__retarget_lock_acquire_recursive>
 8007996:	bf00      	nop
 8007998:	200006c4 	.word	0x200006c4

0800799c <__malloc_unlock>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__malloc_unlock+0x8>)
 800799e:	f000 b846 	b.w	8007a2e <__retarget_lock_release_recursive>
 80079a2:	bf00      	nop
 80079a4:	200006c4 	.word	0x200006c4

080079a8 <memset>:
 80079a8:	4402      	add	r2, r0
 80079aa:	4603      	mov	r3, r0
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d100      	bne.n	80079b2 <memset+0xa>
 80079b0:	4770      	bx	lr
 80079b2:	f803 1b01 	strb.w	r1, [r3], #1
 80079b6:	e7f9      	b.n	80079ac <memset+0x4>

080079b8 <_sbrk_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4d06      	ldr	r5, [pc, #24]	; (80079d4 <_sbrk_r+0x1c>)
 80079bc:	2300      	movs	r3, #0
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	602b      	str	r3, [r5, #0]
 80079c4:	f7fa f87e 	bl	8001ac4 <_sbrk>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_sbrk_r+0x1a>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_sbrk_r+0x1a>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	200006c0 	.word	0x200006c0

080079d8 <__errno>:
 80079d8:	4b01      	ldr	r3, [pc, #4]	; (80079e0 <__errno+0x8>)
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	2000005c 	.word	0x2000005c

080079e4 <__libc_init_array>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	4d0d      	ldr	r5, [pc, #52]	; (8007a1c <__libc_init_array+0x38>)
 80079e8:	4c0d      	ldr	r4, [pc, #52]	; (8007a20 <__libc_init_array+0x3c>)
 80079ea:	1b64      	subs	r4, r4, r5
 80079ec:	10a4      	asrs	r4, r4, #2
 80079ee:	2600      	movs	r6, #0
 80079f0:	42a6      	cmp	r6, r4
 80079f2:	d109      	bne.n	8007a08 <__libc_init_array+0x24>
 80079f4:	4d0b      	ldr	r5, [pc, #44]	; (8007a24 <__libc_init_array+0x40>)
 80079f6:	4c0c      	ldr	r4, [pc, #48]	; (8007a28 <__libc_init_array+0x44>)
 80079f8:	f000 f81a 	bl	8007a30 <_init>
 80079fc:	1b64      	subs	r4, r4, r5
 80079fe:	10a4      	asrs	r4, r4, #2
 8007a00:	2600      	movs	r6, #0
 8007a02:	42a6      	cmp	r6, r4
 8007a04:	d105      	bne.n	8007a12 <__libc_init_array+0x2e>
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a0c:	4798      	blx	r3
 8007a0e:	3601      	adds	r6, #1
 8007a10:	e7ee      	b.n	80079f0 <__libc_init_array+0xc>
 8007a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a16:	4798      	blx	r3
 8007a18:	3601      	adds	r6, #1
 8007a1a:	e7f2      	b.n	8007a02 <__libc_init_array+0x1e>
 8007a1c:	08007a94 	.word	0x08007a94
 8007a20:	08007a94 	.word	0x08007a94
 8007a24:	08007a94 	.word	0x08007a94
 8007a28:	08007a98 	.word	0x08007a98

08007a2c <__retarget_lock_acquire_recursive>:
 8007a2c:	4770      	bx	lr

08007a2e <__retarget_lock_release_recursive>:
 8007a2e:	4770      	bx	lr

08007a30 <_init>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	bf00      	nop
 8007a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a36:	bc08      	pop	{r3}
 8007a38:	469e      	mov	lr, r3
 8007a3a:	4770      	bx	lr

08007a3c <_fini>:
 8007a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3e:	bf00      	nop
 8007a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a42:	bc08      	pop	{r3}
 8007a44:	469e      	mov	lr, r3
 8007a46:	4770      	bx	lr
