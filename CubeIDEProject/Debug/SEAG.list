
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000696c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006b44  08006b44  00016b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b88  08006b88  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b90  08006b90  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000060  08006bf8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08006bf8  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d4d8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037c0  00000000  00000000  0003d5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  00040d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013f0  00000000  00000000  000426f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bb5  00000000  00000000  00043ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3fc  00000000  00000000  0006569d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b32  00000000  00000000  00084a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072c8  00000000  00000000  001665cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0016d894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006b2c 	.word	0x08006b2c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08006b2c 	.word	0x08006b2c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

	ResetCodec(hi2c1);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f825 	bl	8000d48 <ResetCodec>

	HAL_Delay(25);
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 fe9c 	bl	8001a3c <HAL_Delay>

	//un mute left channel
	WriteCodecRegister(hi2c1, 0x00, 0b100010111);
 8000d04:	2217      	movs	r2, #23
 8000d06:	2100      	movs	r1, #0
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f000 f82a 	bl	8000d62 <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 1 << 7);
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	2101      	movs	r1, #1
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f825 	bl	8000d62 <WriteCodecRegister>


	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000d18:	2279      	movs	r2, #121	; 0x79
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f000 f820 	bl	8000d62 <WriteCodecRegister>

	// power management R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b011101000);
 8000d22:	22e8      	movs	r2, #232	; 0xe8
 8000d24:	2119      	movs	r1, #25
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f81b 	bl	8000d62 <WriteCodecRegister>

	// enable left input PGA
	WriteCodecRegister(hi2c1, 0x2F, 0b000100000);
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	212f      	movs	r1, #47	; 0x2f
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f816 	bl	8000d62 <WriteCodecRegister>

	// Disable master mode codec
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 8000d36:	220a      	movs	r2, #10
 8000d38:	2107      	movs	r1, #7
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f811 	bl	8000d62 <WriteCodecRegister>

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/


}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	210f      	movs	r1, #15
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f804 	bl	8000d62 <WriteCodecRegister>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint16_t reg, uint8_t pData){
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af04      	add	r7, sp, #16
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	807b      	strh	r3, [r7, #2]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	707b      	strb	r3, [r7, #1]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &pData, 1, HAL_MAX_DELAY);
 8000d72:	2334      	movs	r3, #52	; 0x34
 8000d74:	b299      	uxth	r1, r3
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	1c7b      	adds	r3, r7, #1
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f003 f9d5 	bl	8004138 <HAL_I2C_Mem_Write>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000d9c:	2340      	movs	r3, #64	; 0x40
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 fdcb 	bl	800693c <malloc>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <InitDSP+0x2c>)
 8000dac:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000dae:	2340      	movs	r3, #64	; 0x40
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4618      	mov	r0, r3
 8000db4:	f005 fdc2 	bl	800693c <malloc>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <InitDSP+0x30>)
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000007c 	.word	0x2000007c
 8000dc8:	20000080 	.word	0x20000080

08000dcc <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const uint16_t* input, uint16_t* output, size_t bufferLength) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00c      	b.n	8000df8 <processBuffer+0x2c>
        output[i] = input[i];
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	441a      	add	r2, r3
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	440b      	add	r3, r1
 8000dee:	8812      	ldrh	r2, [r2, #0]
 8000df0:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferLength; i++) {
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8ee      	bhi.n	8000dde <processBuffer+0x12>
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_ADC_ConvHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000e1c:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000e22:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	490b      	ldr	r1, [pc, #44]	; (8000e54 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000e28:	4808      	ldr	r0, [pc, #32]	; (8000e4c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000e2a:	f7ff ffcf 	bl	8000dcc <processBuffer>

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f003 f8c9 	bl	8003fcc <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]

}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200004f8 	.word	0x200004f8
 8000e4c:	200002f8 	.word	0x200002f8
 8000e50:	20000000 	.word	0x20000000
 8000e54:	200003f8 	.word	0x200003f8
 8000e58:	200004fc 	.word	0x200004fc

08000e5c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000e66:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_ADC_ConvCpltCallback+0x40>)
 8000e68:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_ADC_ConvCpltCallback+0x44>)
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000e6e:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)(adcBuf+AUDIO_BUFFER_SIZE/2), (uint16_t*)(dacBuf+AUDIO_BUFFER_SIZE/2), AUDIO_BUFFER_SIZE/2);
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_ADC_ConvCpltCallback+0x40>)
 8000e72:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <HAL_ADC_ConvCpltCallback+0x48>)
 8000e74:	2240      	movs	r2, #64	; 0x40
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffa8 	bl	8000dcc <processBuffer>
	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e84:	f003 f8a2 	bl	8003fcc <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200004f8 	.word	0x200004f8
 8000e9c:	20000378 	.word	0x20000378
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000478 	.word	0x20000478
 8000ea8:	200004fc 	.word	0x200004fc

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fd52 	bl	800195a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f83b 	bl	8000f30 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000eba:	b662      	cpsie	i
}
 8000ebc:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 fa47 	bl	8001350 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec2:	f000 fa13 	bl	80012ec <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000ec6:	f000 f973 	bl	80011b0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000eca:	f000 f87d 	bl	8000fc8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ece:	f000 f8f5 	bl	80010bc <MX_DAC1_Init>
  MX_TIM6_Init();
 8000ed2:	f000 f9b9 	bl	8001248 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000ed6:	f000 f92b 	bl	8001130 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <main+0x6c>)
 8000edc:	f004 fd70 	bl	80059c0 <HAL_TIM_Base_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  InitDSP();
 8000ee0:	f7ff ff5a 	bl	8000d98 <InitDSP>

  CodecInit(&hi2c1);
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <main+0x70>)
 8000ee6:	f7ff ff03 	bl	8000cf0 <CodecInit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, AUDIO_BUFFER_SIZE);
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <main+0x74>)
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <main+0x78>)
 8000ef0:	f001 f968 	bl	80021c4 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacBuf, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <main+0x7c>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <main+0x80>)
 8000f00:	f002 f924 	bl	800314c <HAL_DAC_Start_DMA>
      //uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      //DAC1->DHR12R1 = dacOutput;

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f04:	2120      	movs	r1, #32
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 f85f 	bl	8003fcc <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 8000f0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f12:	f000 fd93 	bl	8001a3c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f16:	e7f5      	b.n	8000f04 <main+0x58>
 8000f18:	200002ac 	.word	0x200002ac
 8000f1c:	200001c4 	.word	0x200001c4
 8000f20:	200002f8 	.word	0x200002f8
 8000f24:	20000084 	.word	0x20000084
 8000f28:	200003f8 	.word	0x200003f8
 8000f2c:	20000150 	.word	0x20000150

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2238      	movs	r2, #56	; 0x38
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 fdb0 	bl	8006aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f003 fd0a 	bl	800496c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000f72:	2355      	movs	r3, #85	; 0x55
 8000f74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fda4 	bl	8004ad4 <HAL_RCC_OscConfig>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f92:	f000 fa45 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f96:	230f      	movs	r3, #15
 8000f98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2104      	movs	r1, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 f8a2 	bl	80050f8 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000fba:	f000 fa31 	bl	8001420 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3750      	adds	r7, #80	; 0x50
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2220      	movs	r2, #32
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 fd5f 	bl	8006aa4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <MX_ADC1_Init+0xec>)
 8000fe8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <MX_ADC1_Init+0xec>)
 8000ff0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ff4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <MX_ADC1_Init+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_ADC1_Init+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001002:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001008:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <MX_ADC1_Init+0xec>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001010:	2204      	movs	r2, #4
 8001012:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001016:	2200      	movs	r2, #0
 8001018:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_ADC1_Init+0xec>)
 800101c:	2201      	movs	r2, #1
 800101e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001022:	2201      	movs	r2, #1
 8001024:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001030:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001038:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC1_Init+0xec>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001056:	f000 ff31 	bl	8001ebc <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001060:	f000 f9de 	bl	8001420 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_ADC1_Init+0xec>)
 8001070:	f001 fe96 	bl	8002da0 <HAL_ADCEx_MultiModeConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f000 f9d1 	bl	8001420 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_ADC1_Init+0xf0>)
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001082:	2306      	movs	r3, #6
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108a:	237f      	movs	r3, #127	; 0x7f
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108e:	2304      	movs	r3, #4
 8001090:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_ADC1_Init+0xec>)
 800109c:	f001 f950 	bl	8002340 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80010a6:	f000 f9bb 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000084 	.word	0x20000084
 80010b8:	04300002 	.word	0x04300002

080010bc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2230      	movs	r2, #48	; 0x30
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fceb 	bl	8006aa4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_DAC1_Init+0x6c>)
 80010d0:	4a16      	ldr	r2, [pc, #88]	; (800112c <MX_DAC1_Init+0x70>)
 80010d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010d4:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_DAC1_Init+0x6c>)
 80010d6:	f002 f816 	bl	8003106 <HAL_DAC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010e0:	f000 f99e 	bl	8001420 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80010e4:	2302      	movs	r3, #2
 80010e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80010f4:	231e      	movs	r3, #30
 80010f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001100:	2301      	movs	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	; (8001128 <MX_DAC1_Init+0x6c>)
 8001110:	f002 f90e 	bl	8003330 <HAL_DAC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800111a:	f000 f981 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3730      	adds	r7, #48	; 0x30
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000150 	.word	0x20000150
 800112c:	50000800 	.word	0x50000800

08001130 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <MX_I2C1_Init+0x78>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_I2C1_Init+0x74>)
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <MX_I2C1_Init+0x7c>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <MX_I2C1_Init+0x74>)
 800116c:	f002 ff48 	bl	8004000 <HAL_I2C_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001176:	f000 f953 	bl	8001420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <MX_I2C1_Init+0x74>)
 800117e:	f003 fb5d 	bl	800483c <HAL_I2CEx_ConfigAnalogFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001188:	f000 f94a 	bl	8001420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001190:	f003 fb9f 	bl	80048d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 f941 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200001c4 	.word	0x200001c4
 80011a8:	40005400 	.word	0x40005400
 80011ac:	30a0a7fb 	.word	0x30a0a7fb

080011b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <MX_LPUART1_UART_Init+0x90>)
 80011b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	f004 fd64 	bl	8005cc0 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011fe:	f000 f90f 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001202:	2100      	movs	r1, #0
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 8001206:	f005 facf 	bl	80067a8 <HAL_UARTEx_SetTxFifoThreshold>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001210:	f000 f906 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001214:	2100      	movs	r1, #0
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 8001218:	f005 fb04 	bl	8006824 <HAL_UARTEx_SetRxFifoThreshold>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001222:	f000 f8fd 	bl	8001420 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_LPUART1_UART_Init+0x8c>)
 8001228:	f005 fa85 	bl	8006736 <HAL_UARTEx_DisableFifoMode>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001232:	f000 f8f5 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000218 	.word	0x20000218
 8001240:	40008000 	.word	0x40008000
 8001244:	00000000 	.word	0x00000000

08001248 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001258:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_TIM6_Init+0x98>)
 800125a:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <MX_TIM6_Init+0x9c>)
 800125c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MX_TIM6_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_TIM6_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_TIM6_Init+0x98>)
 800126c:	f640 7218 	movw	r2, #3864	; 0xf18
 8001270:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_TIM6_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001278:	4819      	ldr	r0, [pc, #100]	; (80012e0 <MX_TIM6_Init+0x98>)
 800127a:	f004 fb49 	bl	8005910 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001284:	f000 f8cc 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001288:	2320      	movs	r3, #32
 800128a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <MX_TIM6_Init+0x98>)
 8001296:	f004 fc91 	bl	8005bbc <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012a0:	f000 f8be 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_TIM6_Init+0xa0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f907 	bl	80004bc <__aeabi_i2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	a109      	add	r1, pc, #36	; (adr r1, 80012d8 <MX_TIM6_Init+0x90>)
 80012b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b8:	f7ff fa94 	bl	80007e4 <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fb76 	bl	80009b4 <__aeabi_d2uiz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <MX_TIM6_Init+0x98>)
 80012cc:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	00000000 	.word	0x00000000
 80012dc:	41a443fd 	.word	0x41a443fd
 80012e0:	200002ac 	.word	0x200002ac
 80012e4:	40001000 	.word	0x40001000
 80012e8:	08006b44 	.word	0x08006b44

080012ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012f2:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_DMA_Init+0x60>)
 80012f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f6:	4a15      	ldr	r2, [pc, #84]	; (800134c <MX_DMA_Init+0x60>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6493      	str	r3, [r2, #72]	; 0x48
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_DMA_Init+0x60>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_DMA_Init+0x60>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <MX_DMA_Init+0x60>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6493      	str	r3, [r2, #72]	; 0x48
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_DMA_Init+0x60>)
 8001318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	200b      	movs	r0, #11
 8001328:	f001 feb9 	bl	800309e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800132c:	200b      	movs	r0, #11
 800132e:	f001 fed0 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	200c      	movs	r0, #12
 8001338:	f001 feb1 	bl	800309e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800133c:	200c      	movs	r0, #12
 800133e:	f001 fec8 	bl	80030d2 <HAL_NVIC_EnableIRQ>

}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021000 	.word	0x40021000

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <MX_GPIO_Init+0xc8>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <MX_GPIO_Init+0xc8>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b29      	ldr	r3, [pc, #164]	; (8001418 <MX_GPIO_Init+0xc8>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_GPIO_Init+0xc8>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4a25      	ldr	r2, [pc, #148]	; (8001418 <MX_GPIO_Init+0xc8>)
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_GPIO_Init+0xc8>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_GPIO_Init+0xc8>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <MX_GPIO_Init+0xc8>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_GPIO_Init+0xc8>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_GPIO_Init+0xc8>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <MX_GPIO_Init+0xc8>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_GPIO_Init+0xc8>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d0:	f002 fde4 	bl	8003f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_GPIO_Init+0xcc>)
 80013ec:	f002 fc54 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 80013f0:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f002 fc44 	bl	8003c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	; 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	48000800 	.word	0x48000800

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x8>
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_MspInit+0x44>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_MspInit+0x44>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6613      	str	r3, [r2, #96]	; 0x60
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_MspInit+0x44>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x44>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x44>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6593      	str	r3, [r2, #88]	; 0x58
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x44>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001462:	f003 fb27 	bl	8004ab4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000

08001474 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	; 0x68
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2244      	movs	r2, #68	; 0x44
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f005 fb05 	bl	8006aa4 <memset>
  if(hadc->Instance==ADC1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014a2:	d160      	bne.n	8001566 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 f83b 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80014c0:	f7ff ffae 	bl	8001420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_ADC_MspInit+0xfc>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a29      	ldr	r2, [pc, #164]	; (8001570 <HAL_ADC_MspInit+0xfc>)
 80014ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_ADC_MspInit+0xfc>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <HAL_ADC_MspInit+0xfc>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e0:	4a23      	ldr	r2, [pc, #140]	; (8001570 <HAL_ADC_MspInit+0xfc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <HAL_ADC_MspInit+0xfc>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 80014f4:	2301      	movs	r3, #1
 80014f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f8:	2303      	movs	r3, #3
 80014fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f002 fbc5 	bl	8003c98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_ADC_MspInit+0x100>)
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_ADC_MspInit+0x104>)
 8001512:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_ADC_MspInit+0x100>)
 8001516:	2205      	movs	r2, #5
 8001518:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_ADC_MspInit+0x100>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_ADC_MspInit+0x100>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_ADC_MspInit+0x100>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_ADC_MspInit+0x100>)
 800152e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001532:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_ADC_MspInit+0x100>)
 8001536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_ADC_MspInit+0x100>)
 800153e:	2220      	movs	r2, #32
 8001540:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_ADC_MspInit+0x100>)
 8001544:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <HAL_ADC_MspInit+0x100>)
 800154c:	f002 f932 	bl	80037b4 <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 8001556:	f7ff ff63 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a05      	ldr	r2, [pc, #20]	; (8001574 <HAL_ADC_MspInit+0x100>)
 800155e:	655a      	str	r2, [r3, #84]	; 0x54
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_ADC_MspInit+0x100>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3768      	adds	r7, #104	; 0x68
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	200000f0 	.word	0x200000f0
 8001578:	40020008 	.word	0x40020008

0800157c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a2b      	ldr	r2, [pc, #172]	; (8001648 <HAL_DAC_MspInit+0xcc>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d150      	bne.n	8001640 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4a24      	ldr	r2, [pc, #144]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_DAC_MspInit+0xd0>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ce:	2310      	movs	r3, #16
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e4:	f002 fb58 	bl	8003c98 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_DAC_MspInit+0xd8>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015f0:	2206      	movs	r2, #6
 80015f2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015f6:	2210      	movs	r2, #16
 80015f8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001614:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 800161e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001622:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001626:	f002 f8c5 	bl	80037b4 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001630:	f7ff fef6 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a06      	ldr	r2, [pc, #24]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_DAC_MspInit+0xd4>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	50000800 	.word	0x50000800
 800164c:	40021000 	.word	0x40021000
 8001650:	20000164 	.word	0x20000164
 8001654:	4002001c 	.word	0x4002001c

08001658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09a      	sub	sp, #104	; 0x68
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2244      	movs	r2, #68	; 0x44
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fa13 	bl	8006aa4 <memset>
  if(hi2c->Instance==I2C1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1f      	ldr	r2, [pc, #124]	; (8001700 <HAL_I2C_MspInit+0xa8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d136      	bne.n	80016f6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4618      	mov	r0, r3
 8001696:	f003 ff4b 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016a0:	f7ff febe 	bl	8001420 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0xac>)
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <HAL_I2C_MspInit+0xac>)
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_I2C_MspInit+0xac>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c2:	2312      	movs	r3, #18
 80016c4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ce:	2304      	movs	r3, #4
 80016d0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016d6:	4619      	mov	r1, r3
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <HAL_I2C_MspInit+0xb0>)
 80016da:	f002 fadd 	bl	8003c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_I2C_MspInit+0xac>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_I2C_MspInit+0xac>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_I2C_MspInit+0xac>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016f6:	bf00      	nop
 80016f8:	3768      	adds	r7, #104	; 0x68
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	40021000 	.word	0x40021000
 8001708:	48000400 	.word	0x48000400

0800170c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b09a      	sub	sp, #104	; 0x68
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2244      	movs	r2, #68	; 0x44
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f005 f9b9 	bl	8006aa4 <memset>
  if(huart->Instance==LPUART1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <HAL_UART_MspInit+0xa8>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d136      	bne.n	80017aa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800173c:	2320      	movs	r3, #32
 800173e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4618      	mov	r0, r3
 800174a:	f003 fef1 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001754:	f7ff fe64 	bl	8001420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_UART_MspInit+0xac>)
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <HAL_UART_MspInit+0xac>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <HAL_UART_MspInit+0xac>)
 8001766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_UART_MspInit+0xac>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_UART_MspInit+0xac>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_UART_MspInit+0xac>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001788:	230c      	movs	r3, #12
 800178a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001798:	230c      	movs	r3, #12
 800179a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f002 fa77 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3768      	adds	r7, #104	; 0x68
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40008000 	.word	0x40008000
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_TIM_Base_MspInit+0x38>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10b      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_TIM_Base_MspInit+0x3c>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_TIM_Base_MspInit+0x3c>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	6593      	str	r3, [r2, #88]	; 0x58
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <HAL_TIM_Base_MspInit+0x3c>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40001000 	.word	0x40001000
 80017f8:	40021000 	.word	0x40021000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 f8da 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Channel1_IRQHandler+0x10>)
 8001856:	f002 f8d0 	bl	80039fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200000f0 	.word	0x200000f0

08001864 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Channel2_IRQHandler+0x10>)
 800186a:	f002 f8c6 	bl	80039fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000164 	.word	0x20000164

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f005 f914 	bl	8006ad4 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20008000 	.word	0x20008000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000500 	.word	0x20000500
 80018e0:	20000650 	.word	0x20000650

080018e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800190a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800190c:	f7ff ffea 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <LoopForever+0x6>)
  ldr r1, =_edata
 8001912:	490d      	ldr	r1, [pc, #52]	; (8001948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <LoopForever+0xe>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001928:	4c0a      	ldr	r4, [pc, #40]	; (8001954 <LoopForever+0x16>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001936:	f005 f8d3 	bl	8006ae0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800193a:	f7ff fab7 	bl	8000eac <main>

0800193e <LoopForever>:

LoopForever:
    b LoopForever
 800193e:	e7fe      	b.n	800193e <LoopForever>
  ldr   r0, =_estack
 8001940:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001948:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800194c:	08006b98 	.word	0x08006b98
  ldr r2, =_sbss
 8001950:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001954:	20000650 	.word	0x20000650

08001958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001958:	e7fe      	b.n	8001958 <ADC1_2_IRQHandler>

0800195a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f001 fb8f 	bl	8003088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f80e 	bl	800198c <HAL_InitTick>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e001      	b.n	8001980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800197c:	f7ff fd56 	bl	800142c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001980:	79fb      	ldrb	r3, [r7, #7]

}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_InitTick+0x68>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d022      	beq.n	80019e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_InitTick+0x6c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_InitTick+0x68>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fb9a 	bl	80030ee <HAL_SYSTICK_Config>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10f      	bne.n	80019e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b0f      	cmp	r3, #15
 80019c4:	d809      	bhi.n	80019da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c6:	2200      	movs	r2, #0
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	f04f 30ff 	mov.w	r0, #4294967295
 80019ce:	f001 fb66 	bl	800309e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_InitTick+0x70>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e007      	b.n	80019ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e004      	b.n	80019ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e001      	b.n	80019ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	20000004 	.word	0x20000004
 80019fc:	20000008 	.word	0x20000008

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x20>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a10:	6013      	str	r3, [r2, #0]
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	20000504 	.word	0x20000504
 8001a20:	2000000c 	.word	0x2000000c

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000504 	.word	0x20000504

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d004      	beq.n	8001a60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_Delay+0x40>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a60:	bf00      	nop
 8001a62:	f7ff ffdf 	bl	8001a24 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d8f7      	bhi.n	8001a62 <HAL_Delay+0x26>
  {
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000000c 	.word	0x2000000c

08001a80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	609a      	str	r2, [r3, #8]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3360      	adds	r3, #96	; 0x60
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <LL_ADC_SetOffset+0x44>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b20:	bf00      	nop
 8001b22:	371c      	adds	r7, #28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	03fff000 	.word	0x03fff000

08001b30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3360      	adds	r3, #96	; 0x60
 8001b3e:	461a      	mov	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b087      	sub	sp, #28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3360      	adds	r3, #96	; 0x60
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b86:	bf00      	nop
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3360      	adds	r3, #96	; 0x60
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bbc:	bf00      	nop
 8001bbe:	371c      	adds	r7, #28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b087      	sub	sp, #28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3360      	adds	r3, #96	; 0x60
 8001bd8:	461a      	mov	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001bf2:	bf00      	nop
 8001bf4:	371c      	adds	r7, #28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	615a      	str	r2, [r3, #20]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3330      	adds	r3, #48	; 0x30
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	4413      	add	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f003 031f 	and.w	r3, r3, #31
 8001c74:	211f      	movs	r1, #31
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0e9b      	lsrs	r3, r3, #26
 8001c82:	f003 011f 	and.w	r1, r3, #31
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	431a      	orrs	r2, r3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3314      	adds	r3, #20
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0e5b      	lsrs	r3, r3, #25
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	4413      	add	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	0d1b      	lsrs	r3, r3, #20
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	2107      	movs	r1, #7
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	0d1b      	lsrs	r3, r3, #20
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cec:	bf00      	nop
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0318 	and.w	r3, r3, #24
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d1c:	40d9      	lsrs	r1, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	400b      	ands	r3, r1
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	431a      	orrs	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	0007ffff 	.word	0x0007ffff

08001d40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6093      	str	r3, [r2, #8]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d94:	d101      	bne.n	8001d9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001db8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001de4:	d101      	bne.n	8001dea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <LL_ADC_IsEnabled+0x18>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <LL_ADC_IsEnabled+0x1a>
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e5a:	f043 0204 	orr.w	r2, r3, #4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d101      	bne.n	8001e86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d101      	bne.n	8001eac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b590      	push	{r4, r7, lr}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e167      	b.n	80021a6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff fac5 	bl	8001474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff3f 	bl	8001d80 <LL_ADC_IsDeepPowerDownEnabled>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d004      	beq.n	8001f12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff25 	bl	8001d5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff5a 	bl	8001dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d115      	bne.n	8001f4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff3e 	bl	8001da8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f2c:	4ba0      	ldr	r3, [pc, #640]	; (80021b0 <HAL_ADC_Init+0x2f4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	4aa0      	ldr	r2, [pc, #640]	; (80021b4 <HAL_ADC_Init+0x2f8>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	099b      	lsrs	r3, r3, #6
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f40:	e002      	b.n	8001f48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f9      	bne.n	8001f42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff3c 	bl	8001dd0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10d      	bne.n	8001f7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff75 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8001f84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 8100 	bne.w	8002194 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80fc 	bne.w	8002194 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fa4:	f043 0202 	orr.w	r2, r3, #2
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff35 	bl	8001e20 <LL_ADC_IsEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d111      	bne.n	8001fe0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fbc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001fc0:	f7ff ff2e 	bl	8001e20 <LL_ADC_IsEnabled>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	487c      	ldr	r0, [pc, #496]	; (80021b8 <HAL_ADC_Init+0x2fc>)
 8001fc8:	f7ff ff2a 	bl	8001e20 <LL_ADC_IsEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4878      	ldr	r0, [pc, #480]	; (80021bc <HAL_ADC_Init+0x300>)
 8001fdc:	f7ff fd50 	bl	8001a80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7f5b      	ldrb	r3, [r3, #29]
 8001fe4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ff0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ff6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800200a:	2b01      	cmp	r3, #1
 800200c:	d106      	bne.n	800201c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	045b      	lsls	r3, r3, #17
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <HAL_ADC_Init+0x304>)
 8002040:	4013      	ands	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	69b9      	ldr	r1, [r7, #24]
 8002048:	430b      	orrs	r3, r1
 800204a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff14 	bl	8001e94 <LL_ADC_INJ_IsConversionOngoing>
 800206c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d16d      	bne.n	8002150 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d16a      	bne.n	8002150 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800207e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002086:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002096:	f023 0302 	bic.w	r3, r3, #2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d017      	beq.n	80020dc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6911      	ldr	r1, [r2, #16]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020da:	e013      	b.n	8002104 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002100:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800210a:	2b01      	cmp	r3, #1
 800210c:	d118      	bne.n	8002140 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002130:	430a      	orrs	r2, r1
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	e007      	b.n	8002150 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10c      	bne.n	8002172 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f023 010f 	bic.w	r1, r3, #15
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
 8002170:	e007      	b.n	8002182 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 020f 	bic.w	r2, r2, #15
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	65da      	str	r2, [r3, #92]	; 0x5c
 8002192:	e007      	b.n	80021a4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	f043 0210 	orr.w	r2, r3, #16
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd90      	pop	{r4, r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000004 	.word	0x20000004
 80021b4:	053e2d63 	.word	0x053e2d63
 80021b8:	50000100 	.word	0x50000100
 80021bc:	50000300 	.word	0x50000300
 80021c0:	fff04007 	.word	0xfff04007

080021c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d0:	4851      	ldr	r0, [pc, #324]	; (8002318 <HAL_ADC_Start_DMA+0x154>)
 80021d2:	f7ff fdb5 	bl	8001d40 <LL_ADC_GetMultimode>
 80021d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fe46 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f040 808f 	bne.w	8002308 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_ADC_Start_DMA+0x34>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e08a      	b.n	800230e <HAL_ADC_Start_DMA+0x14a>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d002      	beq.n	8002212 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	2b09      	cmp	r3, #9
 8002210:	d173      	bne.n	80022fa <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fc84 	bl	8002b20 <ADC_Enable>
 8002218:	4603      	mov	r3, r0
 800221a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d166      	bne.n	80022f0 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800222a:	f023 0301 	bic.w	r3, r3, #1
 800222e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a38      	ldr	r2, [pc, #224]	; (800231c <HAL_ADC_Start_DMA+0x158>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d002      	beq.n	8002246 <HAL_ADC_Start_DMA+0x82>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	e001      	b.n	800224a <HAL_ADC_Start_DMA+0x86>
 8002246:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	4293      	cmp	r3, r2
 8002250:	d002      	beq.n	8002258 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002274:	f023 0206 	bic.w	r2, r3, #6
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	661a      	str	r2, [r3, #96]	; 0x60
 800227c:	e002      	b.n	8002284 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <HAL_ADC_Start_DMA+0x15c>)
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_ADC_Start_DMA+0x160>)
 8002292:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	4a23      	ldr	r2, [pc, #140]	; (8002328 <HAL_ADC_Start_DMA+0x164>)
 800229a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	221c      	movs	r2, #28
 80022a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0210 	orr.w	r2, r2, #16
 80022ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3340      	adds	r3, #64	; 0x40
 80022d6:	4619      	mov	r1, r3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f001 fb12 	bl	8003904 <HAL_DMA_Start_IT>
 80022e0:	4603      	mov	r3, r0
 80022e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fdac 	bl	8001e46 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80022ee:	e00d      	b.n	800230c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80022f8:	e008      	b.n	800230c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002306:	e001      	b.n	800230c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002308:	2302      	movs	r3, #2
 800230a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800230c:	7dfb      	ldrb	r3, [r7, #23]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	50000300 	.word	0x50000300
 800231c:	50000100 	.word	0x50000100
 8002320:	08002c2d 	.word	0x08002c2d
 8002324:	08002d05 	.word	0x08002d05
 8002328:	08002d21 	.word	0x08002d21

0800232c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0b6      	sub	sp, #216	; 0xd8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x22>
 800235e:	2302      	movs	r3, #2
 8002360:	e3c8      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x7b4>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fd7d 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 83ad 	bne.w	8002ad6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	f7ff fc5e 	bl	8001c4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fd6b 	bl	8001e6e <LL_ADC_REG_IsConversionOngoing>
 8002398:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fd77 	bl	8001e94 <LL_ADC_INJ_IsConversionOngoing>
 80023a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 81d9 	bne.w	8002766 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 81d4 	bne.w	8002766 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023c6:	d10f      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2200      	movs	r2, #0
 80023d2:	4619      	mov	r1, r3
 80023d4:	f7ff fc65 	bl	8001ca2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fc0c 	bl	8001bfe <LL_ADC_SetSamplingTimeCommonConfig>
 80023e6:	e00e      	b.n	8002406 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f7ff fc54 	bl	8001ca2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fbfc 	bl	8001bfe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d022      	beq.n	800246e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6919      	ldr	r1, [r3, #16]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002438:	f7ff fb56 	bl	8001ae8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6919      	ldr	r1, [r3, #16]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	461a      	mov	r2, r3
 800244a:	f7ff fba2 	bl	8001b92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x124>
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	e000      	b.n	8002466 <HAL_ADC_ConfigChannel+0x126>
 8002464:	2300      	movs	r3, #0
 8002466:	461a      	mov	r2, r3
 8002468:	f7ff fbae 	bl	8001bc8 <LL_ADC_SetOffsetSaturation>
 800246c:	e17b      	b.n	8002766 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fb5b 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <HAL_ADC_ConfigChannel+0x15a>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fb50 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	0e9b      	lsrs	r3, r3, #26
 8002494:	f003 021f 	and.w	r2, r3, #31
 8002498:	e01e      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x198>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2100      	movs	r1, #0
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fb45 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e004      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80024cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1b0>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	0e9b      	lsrs	r3, r3, #26
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	e018      	b.n	8002522 <HAL_ADC_ConfigChannel+0x1e2>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800250c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e004      	b.n	8002522 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251c:	fab3 f383 	clz	r3, r3
 8002520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002522:	429a      	cmp	r2, r3
 8002524:	d106      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fb14 	bl	8001b5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff faf8 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 8002540:	4603      	mov	r3, r0
 8002542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x220>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff faed 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	0e9b      	lsrs	r3, r3, #26
 800255a:	f003 021f 	and.w	r2, r3, #31
 800255e:	e01e      	b.n	800259e <HAL_ADC_ConfigChannel+0x25e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fae2 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800257e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800258e:	2320      	movs	r3, #32
 8002590:	e004      	b.n	800259c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x276>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	e018      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x2a8>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e004      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80025de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d106      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fab1 	bl	8001b5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2102      	movs	r1, #2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fa95 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10a      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x2e6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2102      	movs	r1, #2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fa8a 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	0e9b      	lsrs	r3, r3, #26
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	e01e      	b.n	8002664 <HAL_ADC_ConfigChannel+0x324>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2102      	movs	r1, #2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fa7f 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800264c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002654:	2320      	movs	r3, #32
 8002656:	e004      	b.n	8002662 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002658:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265c:	fab3 f383 	clz	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_ADC_ConfigChannel+0x33c>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	0e9b      	lsrs	r3, r3, #26
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	e016      	b.n	80026aa <HAL_ADC_ConfigChannel+0x36a>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800268e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800269c:	2320      	movs	r3, #32
 800269e:	e004      	b.n	80026aa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d106      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2102      	movs	r1, #2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fa50 	bl	8001b5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2103      	movs	r1, #3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fa34 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x3a8>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2103      	movs	r1, #3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fa29 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	f003 021f 	and.w	r2, r3, #31
 80026e6:	e017      	b.n	8002718 <HAL_ADC_ConfigChannel+0x3d8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2103      	movs	r1, #3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fa1e 	bl	8001b30 <LL_ADC_GetOffsetChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002700:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002702:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800270a:	2320      	movs	r3, #32
 800270c:	e003      	b.n	8002716 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800270e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x3f0>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	e011      	b.n	8002754 <HAL_ADC_ConfigChannel+0x414>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800273e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002740:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e003      	b.n	8002754 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800274c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	2103      	movs	r1, #3
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f9fb 	bl	8001b5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fb58 	bl	8001e20 <LL_ADC_IsEnabled>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 8140 	bne.w	80029f8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	461a      	mov	r2, r3
 8002786:	f7ff fab7 	bl	8001cf8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a8f      	ldr	r2, [pc, #572]	; (80029cc <HAL_ADC_ConfigChannel+0x68c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	f040 8131 	bne.w	80029f8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10b      	bne.n	80027be <HAL_ADC_ConfigChannel+0x47e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	bf94      	ite	ls
 80027b6:	2301      	movls	r3, #1
 80027b8:	2300      	movhi	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	e019      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x4b2>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80027da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	2b09      	cmp	r3, #9
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d079      	beq.n	80028ea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d107      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x4d2>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0e9b      	lsrs	r3, r3, #26
 8002808:	3301      	adds	r3, #1
 800280a:	069b      	lsls	r3, r3, #26
 800280c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002810:	e015      	b.n	800283e <HAL_ADC_ConfigChannel+0x4fe>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002822:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800282a:	2320      	movs	r3, #32
 800282c:	e003      	b.n	8002836 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	3301      	adds	r3, #1
 8002838:	069b      	lsls	r3, r3, #26
 800283a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_ADC_ConfigChannel+0x51e>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	3301      	adds	r3, #1
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	e017      	b.n	800288e <HAL_ADC_ConfigChannel+0x54e>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800286c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e003      	b.n	8002882 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800287a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	ea42 0103 	orr.w	r1, r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x574>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	3301      	adds	r3, #1
 80028a6:	f003 021f 	and.w	r2, r3, #31
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	051b      	lsls	r3, r3, #20
 80028b2:	e018      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x5a6>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80028cc:	2320      	movs	r3, #32
 80028ce:	e003      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80028d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3301      	adds	r3, #1
 80028da:	f003 021f 	and.w	r2, r3, #31
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e6:	430b      	orrs	r3, r1
 80028e8:	e081      	b.n	80029ee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d107      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x5c6>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0e9b      	lsrs	r3, r3, #26
 80028fc:	3301      	adds	r3, #1
 80028fe:	069b      	lsls	r3, r3, #26
 8002900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002904:	e015      	b.n	8002932 <HAL_ADC_ConfigChannel+0x5f2>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800291e:	2320      	movs	r3, #32
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3301      	adds	r3, #1
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x612>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	3301      	adds	r3, #1
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	2101      	movs	r1, #1
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	e017      	b.n	8002982 <HAL_ADC_ConfigChannel+0x642>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	61fb      	str	r3, [r7, #28]
  return result;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e003      	b.n	8002976 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	ea42 0103 	orr.w	r1, r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10d      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x66e>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	3301      	adds	r3, #1
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	3b1e      	subs	r3, #30
 80029a6:	051b      	lsls	r3, r3, #20
 80029a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ac:	e01e      	b.n	80029ec <HAL_ADC_ConfigChannel+0x6ac>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	613b      	str	r3, [r7, #16]
  return result;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80029c6:	2320      	movs	r3, #32
 80029c8:	e006      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x698>
 80029ca:	bf00      	nop
 80029cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 021f 	and.w	r2, r3, #31
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	3b1e      	subs	r3, #30
 80029e6:	051b      	lsls	r3, r3, #20
 80029e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7ff f955 	bl	8001ca2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_ADC_ConfigChannel+0x7bc>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d071      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a04:	483e      	ldr	r0, [pc, #248]	; (8002b00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a06:	f7ff f861 	bl	8001acc <LL_ADC_GetCommonPathInternalCh>
 8002a0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d004      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x6e2>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a3a      	ldr	r2, [pc, #232]	; (8002b08 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d127      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d121      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a36:	d157      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a40:	4619      	mov	r1, r3
 8002a42:	482f      	ldr	r0, [pc, #188]	; (8002b00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a44:	f7ff f82f 	bl	8001aa6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_ADC_ConfigChannel+0x7cc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a62:	e002      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f9      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a70:	e03a      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d113      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d02a      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4818      	ldr	r0, [pc, #96]	; (8002b00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a9e:	f7ff f802 	bl	8001aa6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa2:	e021      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_ADC_ConfigChannel+0x7dc>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d11c      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d011      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002acc:	4619      	mov	r1, r3
 8002ace:	480c      	ldr	r0, [pc, #48]	; (8002b00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ad0:	f7fe ffe9 	bl	8001aa6 <LL_ADC_SetCommonPathInternalCh>
 8002ad4:	e008      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002af0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	37d8      	adds	r7, #216	; 0xd8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	80080000 	.word	0x80080000
 8002b00:	50000300 	.word	0x50000300
 8002b04:	c3210000 	.word	0xc3210000
 8002b08:	90c00010 	.word	0x90c00010
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	c7520000 	.word	0xc7520000
 8002b18:	50000100 	.word	0x50000100
 8002b1c:	cb840000 	.word	0xcb840000

08002b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f975 	bl	8001e20 <LL_ADC_IsEnabled>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d169      	bne.n	8002c10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <ADC_Enable+0xfc>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e055      	b.n	8002c12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f944 	bl	8001df8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b70:	482b      	ldr	r0, [pc, #172]	; (8002c20 <ADC_Enable+0x100>)
 8002b72:	f7fe ffab 	bl	8001acc <LL_ADC_GetCommonPathInternalCh>
 8002b76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b80:	4b28      	ldr	r3, [pc, #160]	; (8002c24 <ADC_Enable+0x104>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <ADC_Enable+0x108>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b9a:	e002      	b.n	8002ba2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f9      	bne.n	8002b9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe ff3c 	bl	8001a24 <HAL_GetTick>
 8002bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bae:	e028      	b.n	8002c02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff f933 	bl	8001e20 <LL_ADC_IsEnabled>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d104      	bne.n	8002bca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff f917 	bl	8001df8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bca:	f7fe ff2b 	bl	8001a24 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d914      	bls.n	8002c02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d00d      	beq.n	8002c02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e007      	b.n	8002c12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d1cf      	bne.n	8002bb0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	8000003f 	.word	0x8000003f
 8002c20:	50000300 	.word	0x50000300
 8002c24:	20000004 	.word	0x20000004
 8002c28:	053e2d63 	.word	0x053e2d63

08002c2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d14b      	bne.n	8002cde <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d021      	beq.n	8002ca4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe ffdd 	bl	8001c24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d032      	beq.n	8002cd6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d12b      	bne.n	8002cd6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d11f      	bne.n	8002cd6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	f043 0201 	orr.w	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ca2:	e018      	b.n	8002cd6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d111      	bne.n	8002cd6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7fe f8c0 	bl	8000e5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cdc:	e00e      	b.n	8002cfc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff fb1e 	bl	800232c <HAL_ADC_ErrorCallback>
}
 8002cf0:	e004      	b.n	8002cfc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7fe f87c 	bl	8000e10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	f043 0204 	orr.w	r2, r3, #4
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff faf0 	bl	800232c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d4c:	bf00      	nop
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <LL_ADC_IsEnabled>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <LL_ADC_IsEnabled+0x18>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <LL_ADC_IsEnabled+0x1a>
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_REG_IsConversionOngoing>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b0a1      	sub	sp, #132	; 0x84
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e08b      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd6:	d102      	bne.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002dd8:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	e001      	b.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e06a      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ffb9 	bl	8002d7a <LL_ADC_REG_IsConversionOngoing>
 8002e08:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ffb3 	bl	8002d7a <LL_ADC_REG_IsConversionOngoing>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d14c      	bne.n	8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d149      	bne.n	8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e22:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d028      	beq.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e3e:	035b      	lsls	r3, r3, #13
 8002e40:	430b      	orrs	r3, r1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e4c:	f7ff ff82 	bl	8002d54 <LL_ADC_IsEnabled>
 8002e50:	4604      	mov	r4, r0
 8002e52:	4823      	ldr	r0, [pc, #140]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e54:	f7ff ff7e 	bl	8002d54 <LL_ADC_IsEnabled>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4323      	orrs	r3, r4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d133      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e68:	f023 030f 	bic.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	6811      	ldr	r1, [r2, #0]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	431a      	orrs	r2, r3
 8002e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e7c:	e024      	b.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e8e:	f7ff ff61 	bl	8002d54 <LL_ADC_IsEnabled>
 8002e92:	4604      	mov	r4, r0
 8002e94:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e96:	f7ff ff5d 	bl	8002d54 <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4323      	orrs	r3, r4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d112      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eaa:	f023 030f 	bic.w	r3, r3, #15
 8002eae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eb0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb2:	e009      	b.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ec6:	e000      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ed2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3784      	adds	r7, #132	; 0x84
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd90      	pop	{r4, r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	50000100 	.word	0x50000100
 8002ee4:	50000300 	.word	0x50000300

08002ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <__NVIC_GetPriorityGrouping+0x18>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0307 	and.w	r3, r3, #7
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <__NVIC_EnableIRQ+0x38>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	6039      	str	r1, [r7, #0]
 8002f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	db0a      	blt.n	8002fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	490c      	ldr	r1, [pc, #48]	; (8002fd4 <__NVIC_SetPriority+0x4c>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	0112      	lsls	r2, r2, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	440b      	add	r3, r1
 8002fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb0:	e00a      	b.n	8002fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4908      	ldr	r1, [pc, #32]	; (8002fd8 <__NVIC_SetPriority+0x50>)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	3b04      	subs	r3, #4
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	761a      	strb	r2, [r3, #24]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	e000e100 	.word	0xe000e100
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f1c3 0307 	rsb	r3, r3, #7
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	bf28      	it	cs
 8002ffa:	2304      	movcs	r3, #4
 8002ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3304      	adds	r3, #4
 8003002:	2b06      	cmp	r3, #6
 8003004:	d902      	bls.n	800300c <NVIC_EncodePriority+0x30>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3b03      	subs	r3, #3
 800300a:	e000      	b.n	800300e <NVIC_EncodePriority+0x32>
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	f04f 32ff 	mov.w	r2, #4294967295
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43da      	mvns	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	401a      	ands	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003024:	f04f 31ff 	mov.w	r1, #4294967295
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43d9      	mvns	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003034:	4313      	orrs	r3, r2
         );
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	; 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003054:	d301      	bcc.n	800305a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003056:	2301      	movs	r3, #1
 8003058:	e00f      	b.n	800307a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <SysTick_Config+0x40>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3b01      	subs	r3, #1
 8003060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003062:	210f      	movs	r1, #15
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f7ff ff8e 	bl	8002f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <SysTick_Config+0x40>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <SysTick_Config+0x40>)
 8003074:	2207      	movs	r2, #7
 8003076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000e010 	.word	0xe000e010

08003088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff29 	bl	8002ee8 <__NVIC_SetPriorityGrouping>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff40 	bl	8002f30 <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff90 	bl	8002fdc <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5f 	bl	8002f88 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff33 	bl	8002f4c <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa4 	bl	8003044 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e014      	b.n	8003142 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	791b      	ldrb	r3, [r3, #4]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fe fa27 	bl	800157c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0b2      	b.n	80032ca <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	795b      	ldrb	r3, [r3, #5]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_DAC_Start_DMA+0x24>
 800316c:	2302      	movs	r3, #2
 800316e:	e0ac      	b.n	80032ca <HAL_DAC_Start_DMA+0x17e>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2202      	movs	r2, #2
 800317a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d129      	bne.n	80031d6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4a53      	ldr	r2, [pc, #332]	; (80032d4 <HAL_DAC_Start_DMA+0x188>)
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_DAC_Start_DMA+0x18c>)
 8003190:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4a51      	ldr	r2, [pc, #324]	; (80032dc <HAL_DAC_Start_DMA+0x190>)
 8003198:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <HAL_DAC_Start_DMA+0x6c>
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d005      	beq.n	80031c2 <HAL_DAC_Start_DMA+0x76>
 80031b6:	e009      	b.n	80031cc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	61bb      	str	r3, [r7, #24]
        break;
 80031c0:	e033      	b.n	800322a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	330c      	adds	r3, #12
 80031c8:	61bb      	str	r3, [r7, #24]
        break;
 80031ca:	e02e      	b.n	800322a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3310      	adds	r3, #16
 80031d2:	61bb      	str	r3, [r7, #24]
        break;
 80031d4:	e029      	b.n	800322a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4a41      	ldr	r2, [pc, #260]	; (80032e0 <HAL_DAC_Start_DMA+0x194>)
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	4a40      	ldr	r2, [pc, #256]	; (80032e4 <HAL_DAC_Start_DMA+0x198>)
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	4a3f      	ldr	r2, [pc, #252]	; (80032e8 <HAL_DAC_Start_DMA+0x19c>)
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031fc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_DAC_Start_DMA+0xc0>
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	2b04      	cmp	r3, #4
 8003208:	d005      	beq.n	8003216 <HAL_DAC_Start_DMA+0xca>
 800320a:	e009      	b.n	8003220 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3314      	adds	r3, #20
 8003212:	61bb      	str	r3, [r7, #24]
        break;
 8003214:	e009      	b.n	800322a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3318      	adds	r3, #24
 800321c:	61bb      	str	r3, [r7, #24]
        break;
 800321e:	e004      	b.n	800322a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	331c      	adds	r3, #28
 8003226:	61bb      	str	r3, [r7, #24]
        break;
 8003228:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d111      	bne.n	8003254 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800323e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6898      	ldr	r0, [r3, #8]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f000 fb5b 	bl	8003904 <HAL_DMA_Start_IT>
 800324e:	4603      	mov	r3, r0
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e010      	b.n	8003276 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003262:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68d8      	ldr	r0, [r3, #12]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	f000 fb49 	bl	8003904 <HAL_DMA_Start_IT>
 8003272:	4603      	mov	r3, r0
 8003274:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11c      	bne.n	80032bc <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2201      	movs	r2, #1
 8003290:	409a      	lsls	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HAL_DAC_Start_DMA+0x1a0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_DAC_Start_DMA+0x1a4>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80032ac:	e002      	b.n	80032b4 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f9      	bne.n	80032ae <HAL_DAC_Start_DMA+0x162>
 80032ba:	e005      	b.n	80032c8 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80032c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	080036a1 	.word	0x080036a1
 80032d8:	080036c3 	.word	0x080036c3
 80032dc:	080036df 	.word	0x080036df
 80032e0:	08003749 	.word	0x08003749
 80032e4:	0800376b 	.word	0x0800376b
 80032e8:	08003787 	.word	0x08003787
 80032ec:	20000004 	.word	0x20000004
 80032f0:	053e2d63 	.word	0x053e2d63

080032f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_DAC_ConfigChannel+0x1c>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e19e      	b.n	800368e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	795b      	ldrb	r3, [r3, #5]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_DAC_ConfigChannel+0x2c>
 8003358:	2302      	movs	r3, #2
 800335a:	e198      	b.n	800368e <HAL_DAC_ConfigChannel+0x35e>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2202      	movs	r2, #2
 8003366:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d17a      	bne.n	8003466 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003370:	f7fe fb58 	bl	8001a24 <HAL_GetTick>
 8003374:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13d      	bne.n	80033f8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800337c:	e018      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800337e:	f7fe fb51 	bl	8001a24 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	d911      	bls.n	80033b0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f043 0208 	orr.w	r2, r3, #8
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2203      	movs	r2, #3
 80033aa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e16e      	b.n	800368e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1df      	bne.n	800337e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40
 80033c8:	e020      	b.n	800340c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033ca:	f7fe fb2b 	bl	8001a24 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d90f      	bls.n	80033f8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da0a      	bge.n	80033f8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f043 0208 	orr.w	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2203      	movs	r2, #3
 80033f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e14a      	b.n	800368e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dbe3      	blt.n	80033ca <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	ea02 0103 	and.w	r1, r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	409a      	lsls	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	21ff      	movs	r1, #255	; 0xff
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	ea02 0103 	and.w	r1, r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	409a      	lsls	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d11d      	bne.n	80034aa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	221f      	movs	r2, #31
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003486:	4013      	ands	r3, r2
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	4313      	orrs	r3, r2
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2207      	movs	r2, #7
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	4013      	ands	r3, r2
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	e00f      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d102      	bne.n	80034e2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80034dc:	2301      	movs	r3, #1
 80034de:	623b      	str	r3, [r7, #32]
 80034e0:	e008      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80034ea:	2301      	movs	r3, #1
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	e001      	b.n	80034f4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	6a3a      	ldr	r2, [r7, #32]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	4013      	ands	r3, r2
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	791b      	ldrb	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_DAC_ConfigChannel+0x1f8>
 8003522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003526:	e000      	b.n	800352a <HAL_DAC_ConfigChannel+0x1fa>
 8003528:	2300      	movs	r3, #0
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	4013      	ands	r3, r2
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	795b      	ldrb	r3, [r3, #5]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d102      	bne.n	8003554 <HAL_DAC_ConfigChannel+0x224>
 800354e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003552:	e000      	b.n	8003556 <HAL_DAC_ConfigChannel+0x226>
 8003554:	2300      	movs	r3, #0
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d114      	bne.n	8003596 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800356c:	f001 ff62 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8003570:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4a48      	ldr	r2, [pc, #288]	; (8003698 <HAL_DAC_ConfigChannel+0x368>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d904      	bls.n	8003584 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	e00f      	b.n	80035a4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4a45      	ldr	r2, [pc, #276]	; (800369c <HAL_DAC_ConfigChannel+0x36c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d90a      	bls.n	80035a2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
 8003594:	e006      	b.n	80035a4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	4313      	orrs	r3, r2
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
 80035a0:	e000      	b.n	80035a4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80035a2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	4313      	orrs	r3, r2
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	400a      	ands	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4013      	ands	r3, r2
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	4313      	orrs	r3, r2
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003618:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6819      	ldr	r1, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	22c0      	movs	r2, #192	; 0xc0
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43da      	mvns	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	ea02 0103 	and.w	r1, r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800368c:	7ffb      	ldrb	r3, [r7, #31]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	09896800 	.word	0x09896800
 800369c:	04c4b400 	.word	0x04c4b400

080036a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f7ff fe20 	bl	80032f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	711a      	strb	r2, [r3, #4]
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fe19 	bl	8003308 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff fe0f 	bl	800331c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	711a      	strb	r2, [r3, #4]
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff ffd8 	bl	800370c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	711a      	strb	r2, [r3, #4]
}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f7ff ffd1 	bl	8003720 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f7ff ffc7 	bl	8003734 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	711a      	strb	r2, [r3, #4]
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e08d      	b.n	80038e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	4b47      	ldr	r3, [pc, #284]	; (80038ec <HAL_DMA_Init+0x138>)
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d80f      	bhi.n	80037f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <HAL_DMA_Init+0x13c>)
 80037da:	4413      	add	r3, r2
 80037dc:	4a45      	ldr	r2, [pc, #276]	; (80038f4 <HAL_DMA_Init+0x140>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	009a      	lsls	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <HAL_DMA_Init+0x144>)
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
 80037f0:	e00e      	b.n	8003810 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_DMA_Init+0x148>)
 80037fa:	4413      	add	r3, r2
 80037fc:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <HAL_DMA_Init+0x140>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	009a      	lsls	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a3c      	ldr	r2, [pc, #240]	; (8003900 <HAL_DMA_Init+0x14c>)
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9b6 	bl	8003bd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003870:	d102      	bne.n	8003878 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800388c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_DMA_Init+0x104>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d80c      	bhi.n	80038b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9d6 	bl	8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e008      	b.n	80038ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40020407 	.word	0x40020407
 80038f0:	bffdfff8 	.word	0xbffdfff8
 80038f4:	cccccccd 	.word	0xcccccccd
 80038f8:	40020000 	.word	0x40020000
 80038fc:	bffdfbf8 	.word	0xbffdfbf8
 8003900:	40020400 	.word	0x40020400

08003904 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_DMA_Start_IT+0x20>
 8003920:	2302      	movs	r3, #2
 8003922:	e066      	b.n	80039f2 <HAL_DMA_Start_IT+0xee>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d155      	bne.n	80039e4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f8fb 	bl	8003b58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 020e 	orr.w	r2, r2, #14
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e00f      	b.n	800399c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 020a 	orr.w	r2, r2, #10
 800399a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e005      	b.n	80039f0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
 80039ee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d026      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x7a>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d021      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d107      	bne.n	8003a4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0204 	bic.w	r2, r2, #4
 8003a4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f003 021f 	and.w	r2, r3, #31
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d071      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a72:	e06c      	b.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d02e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d029      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 020a 	bic.w	r2, r2, #10
 8003aae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d038      	beq.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ae4:	e033      	b.n	8003b4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2208      	movs	r2, #8
 8003af0:	409a      	lsls	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d02a      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d025      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 020e 	bic.w	r2, r2, #14
 8003b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f202 	lsl.w	r2, r1, r2
 8003b26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
}
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f003 021f 	and.w	r2, r3, #31
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d108      	bne.n	8003bb8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bb6:	e007      	b.n	8003bc8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d802      	bhi.n	8003bee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e001      	b.n	8003bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bf0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3b08      	subs	r3, #8
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a0b      	ldr	r2, [pc, #44]	; (8003c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2201      	movs	r2, #1
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40020407 	.word	0x40020407
 8003c40:	40020800 	.word	0x40020800
 8003c44:	40020820 	.word	0x40020820
 8003c48:	cccccccd 	.word	0xcccccccd
 8003c4c:	40020880 	.word	0x40020880

08003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c72:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	1000823f 	.word	0x1000823f
 8003c94:	40020940 	.word	0x40020940

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ca6:	e15a      	b.n	8003f5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2101      	movs	r1, #1
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 814c 	beq.w	8003f58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0303 	and.w	r3, r3, #3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d005      	beq.n	8003cd8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d130      	bne.n	8003d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d0e:	2201      	movs	r2, #1
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 0201 	and.w	r2, r3, #1
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d017      	beq.n	8003d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	2203      	movs	r2, #3
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d123      	bne.n	8003dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	08da      	lsrs	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3208      	adds	r2, #8
 8003d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	220f      	movs	r2, #15
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	08da      	lsrs	r2, r3, #3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3208      	adds	r2, #8
 8003dc4:	6939      	ldr	r1, [r7, #16]
 8003dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80a6 	beq.w	8003f58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0c:	4b5b      	ldr	r3, [pc, #364]	; (8003f7c <HAL_GPIO_Init+0x2e4>)
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	4a5a      	ldr	r2, [pc, #360]	; (8003f7c <HAL_GPIO_Init+0x2e4>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6613      	str	r3, [r2, #96]	; 0x60
 8003e18:	4b58      	ldr	r3, [pc, #352]	; (8003f7c <HAL_GPIO_Init+0x2e4>)
 8003e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e24:	4a56      	ldr	r2, [pc, #344]	; (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e4e:	d01f      	beq.n	8003e90 <HAL_GPIO_Init+0x1f8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a4c      	ldr	r2, [pc, #304]	; (8003f84 <HAL_GPIO_Init+0x2ec>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d019      	beq.n	8003e8c <HAL_GPIO_Init+0x1f4>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a4b      	ldr	r2, [pc, #300]	; (8003f88 <HAL_GPIO_Init+0x2f0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d013      	beq.n	8003e88 <HAL_GPIO_Init+0x1f0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a4a      	ldr	r2, [pc, #296]	; (8003f8c <HAL_GPIO_Init+0x2f4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00d      	beq.n	8003e84 <HAL_GPIO_Init+0x1ec>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a49      	ldr	r2, [pc, #292]	; (8003f90 <HAL_GPIO_Init+0x2f8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <HAL_GPIO_Init+0x1e8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a48      	ldr	r2, [pc, #288]	; (8003f94 <HAL_GPIO_Init+0x2fc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_GPIO_Init+0x1e4>
 8003e78:	2305      	movs	r3, #5
 8003e7a:	e00a      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e7c:	2306      	movs	r3, #6
 8003e7e:	e008      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e80:	2304      	movs	r3, #4
 8003e82:	e006      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e84:	2303      	movs	r3, #3
 8003e86:	e004      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e002      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e90:	2300      	movs	r3, #0
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	f002 0203 	and.w	r2, r2, #3
 8003e98:	0092      	lsls	r2, r2, #2
 8003e9a:	4093      	lsls	r3, r2
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea2:	4937      	ldr	r1, [pc, #220]	; (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eb0:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed4:	4a30      	ldr	r2, [pc, #192]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eda:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003efe:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f28:	4a1b      	ldr	r2, [pc, #108]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f52:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	fa22 f303 	lsr.w	r3, r2, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f47f ae9d 	bne.w	8003ca8 <HAL_GPIO_Init+0x10>
  }
}
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40010000 	.word	0x40010000
 8003f84:	48000400 	.word	0x48000400
 8003f88:	48000800 	.word	0x48000800
 8003f8c:	48000c00 	.word	0x48000c00
 8003f90:	48001000 	.word	0x48001000
 8003f94:	48001400 	.word	0x48001400
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	807b      	strh	r3, [r7, #2]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb2:	887a      	ldrh	r2, [r7, #2]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb8:	e002      	b.n	8003fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	041a      	lsls	r2, r3, #16
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43d9      	mvns	r1, r3
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	400b      	ands	r3, r1
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e08d      	b.n	800412e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fb16 	bl	8001658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	e006      	b.n	8004088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d108      	bne.n	80040a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	e007      	b.n	80040b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69d9      	ldr	r1, [r3, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	461a      	mov	r2, r3
 8004146:	4603      	mov	r3, r0
 8004148:	817b      	strh	r3, [r7, #10]
 800414a:	460b      	mov	r3, r1
 800414c:	813b      	strh	r3, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	f040 80f9 	bne.w	8004352 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_I2C_Mem_Write+0x34>
 8004166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0ed      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_I2C_Mem_Write+0x4e>
 8004182:	2302      	movs	r3, #2
 8004184:	e0e6      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800418e:	f7fd fc49 	bl	8001a24 <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2319      	movs	r3, #25
 800419a:	2201      	movs	r2, #1
 800419c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f955 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0d1      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2221      	movs	r2, #33	; 0x21
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041d8:	88f8      	ldrh	r0, [r7, #6]
 80041da:	893a      	ldrh	r2, [r7, #8]
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	4603      	mov	r3, r0
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f8b9 	bl	8004360 <I2C_RequestMemoryWrite>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0a9      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2bff      	cmp	r3, #255	; 0xff
 8004208:	d90e      	bls.n	8004228 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	b2da      	uxtb	r2, r3
 8004216:	8979      	ldrh	r1, [r7, #10]
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fad9 	bl	80047d8 <I2C_TransferConfig>
 8004226:	e00f      	b.n	8004248 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	b2da      	uxtb	r2, r3
 8004238:	8979      	ldrh	r1, [r7, #10]
 800423a:	2300      	movs	r3, #0
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fac8 	bl	80047d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f958 	bl	8004502 <I2C_WaitOnTXISFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e07b      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	781a      	ldrb	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d034      	beq.n	8004300 <HAL_I2C_Mem_Write+0x1c8>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d130      	bne.n	8004300 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	2200      	movs	r2, #0
 80042a6:	2180      	movs	r1, #128	; 0x80
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f8d1 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e04d      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2bff      	cmp	r3, #255	; 0xff
 80042c0:	d90e      	bls.n	80042e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	22ff      	movs	r2, #255	; 0xff
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	8979      	ldrh	r1, [r7, #10]
 80042d0:	2300      	movs	r3, #0
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fa7d 	bl	80047d8 <I2C_TransferConfig>
 80042de:	e00f      	b.n	8004300 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	8979      	ldrh	r1, [r7, #10]
 80042f2:	2300      	movs	r3, #0
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fa6c 	bl	80047d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d19e      	bne.n	8004248 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f93e 	bl	8004590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e01a      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2220      	movs	r2, #32
 8004324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HAL_I2C_Mem_Write+0x224>)
 8004332:	400b      	ands	r3, r1
 8004334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e000      	b.n	8004354 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004352:	2302      	movs	r3, #2
  }
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	fe00e800 	.word	0xfe00e800

08004360 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af02      	add	r7, sp, #8
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	4608      	mov	r0, r1
 800436a:	4611      	mov	r1, r2
 800436c:	461a      	mov	r2, r3
 800436e:	4603      	mov	r3, r0
 8004370:	817b      	strh	r3, [r7, #10]
 8004372:	460b      	mov	r3, r1
 8004374:	813b      	strh	r3, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	8979      	ldrh	r1, [r7, #10]
 8004380:	4b20      	ldr	r3, [pc, #128]	; (8004404 <I2C_RequestMemoryWrite+0xa4>)
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fa25 	bl	80047d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	69b9      	ldr	r1, [r7, #24]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f8b5 	bl	8004502 <I2C_WaitOnTXISFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e02c      	b.n	80043fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043a8:	893b      	ldrh	r3, [r7, #8]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	629a      	str	r2, [r3, #40]	; 0x28
 80043b2:	e015      	b.n	80043e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043b4:	893b      	ldrh	r3, [r7, #8]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f89b 	bl	8004502 <I2C_WaitOnTXISFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e012      	b.n	80043fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043d6:	893b      	ldrh	r3, [r7, #8]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2200      	movs	r2, #0
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 f830 	bl	8004450 <I2C_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	80002000 	.word	0x80002000

08004408 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	d103      	bne.n	8004426 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d007      	beq.n	8004444 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	619a      	str	r2, [r3, #24]
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	4613      	mov	r3, r2
 800445e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004460:	e03b      	b.n	80044da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8d6 	bl	8004618 <I2C_IsErrorOccurred>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e041      	b.n	80044fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d02d      	beq.n	80044da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fd fad1 	bl	8001a24 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_WaitOnFlagUntilTimeout+0x44>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d122      	bne.n	80044da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d113      	bne.n	80044da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00f      	b.n	80044fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699a      	ldr	r2, [r3, #24]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d0b4      	beq.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800450e:	e033      	b.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f87f 	bl	8004618 <I2C_IsErrorOccurred>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e031      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452a:	d025      	beq.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800452c:	f7fd fa7a 	bl	8001a24 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	d302      	bcc.n	8004542 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d11a      	bne.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b02      	cmp	r3, #2
 800454e:	d013      	beq.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d1c4      	bne.n	8004510 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459c:	e02f      	b.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f838 	bl	8004618 <I2C_IsErrorOccurred>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e02d      	b.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7fd fa37 	bl	8001a24 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11a      	bne.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d013      	beq.n	80045fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e007      	b.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b20      	cmp	r3, #32
 800460a:	d1c8      	bne.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08a      	sub	sp, #40	; 0x28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d068      	beq.n	8004716 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2210      	movs	r2, #16
 800464a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800464c:	e049      	b.n	80046e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d045      	beq.n	80046e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004656:	f7fd f9e5 	bl	8001a24 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <I2C_IsErrorOccurred+0x54>
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d13a      	bne.n	80046e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004676:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800467e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d121      	bne.n	80046d4 <I2C_IsErrorOccurred+0xbc>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004696:	d01d      	beq.n	80046d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b20      	cmp	r3, #32
 800469c:	d01a      	beq.n	80046d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046ae:	f7fd f9b9 	bl	8001a24 <HAL_GetTick>
 80046b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046b4:	e00e      	b.n	80046d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046b6:	f7fd f9b5 	bl	8001a24 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b19      	cmp	r3, #25
 80046c2:	d907      	bls.n	80046d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	f043 0320 	orr.w	r3, r3, #32
 80046ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80046d2:	e006      	b.n	80046e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d1e9      	bne.n	80046b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d003      	beq.n	80046f8 <I2C_IsErrorOccurred+0xe0>
 80046f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0aa      	beq.n	800464e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2220      	movs	r2, #32
 8004706:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f043 0301 	orr.w	r3, r3, #1
 800472e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f043 0308 	orr.w	r3, r3, #8
 8004750:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800475a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f043 0302 	orr.w	r3, r3, #2
 8004772:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01c      	beq.n	80047c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fe3b 	bl	8004408 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <I2C_IsErrorOccurred+0x1bc>)
 800479e:	400b      	ands	r3, r1
 80047a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3728      	adds	r7, #40	; 0x28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	fe00e800 	.word	0xfe00e800

080047d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	4613      	mov	r3, r2
 80047e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047f0:	7a7b      	ldrb	r3, [r7, #9]
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	4313      	orrs	r3, r2
 8004802:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004806:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	0d5b      	lsrs	r3, r3, #21
 8004812:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <I2C_TransferConfig+0x60>)
 8004818:	430b      	orrs	r3, r1
 800481a:	43db      	mvns	r3, r3
 800481c:	ea02 0103 	and.w	r1, r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	03ff63ff 	.word	0x03ff63ff

0800483c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b20      	cmp	r3, #32
 8004850:	d138      	bne.n	80048c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800485c:	2302      	movs	r3, #2
 800485e:	e032      	b.n	80048c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2224      	movs	r2, #36	; 0x24
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0201 	bic.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800488e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6819      	ldr	r1, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0201 	orr.w	r2, r2, #1
 80048ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d139      	bne.n	800495c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e033      	b.n	800495e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2224      	movs	r2, #36	; 0x24
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0201 	bic.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	e000      	b.n	800495e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d141      	bne.n	80049fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800497a:	4b4b      	ldr	r3, [pc, #300]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d131      	bne.n	80049ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004988:	4b47      	ldr	r3, [pc, #284]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800498a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800498e:	4a46      	ldr	r2, [pc, #280]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004994:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004998:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049a0:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049a8:	4b40      	ldr	r3, [pc, #256]	; (8004aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2232      	movs	r2, #50	; 0x32
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	4a3f      	ldr	r2, [pc, #252]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	0c9b      	lsrs	r3, r3, #18
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049be:	e002      	b.n	80049c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d2:	d102      	bne.n	80049da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f2      	bne.n	80049c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049da:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e6:	d158      	bne.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e057      	b.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049ec:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f2:	4a2d      	ldr	r2, [pc, #180]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049fc:	e04d      	b.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a04:	d141      	bne.n	8004a8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a12:	d131      	bne.n	8004a78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1a:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a24:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a2c:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2232      	movs	r2, #50	; 0x32
 8004a3a:	fb02 f303 	mul.w	r3, r2, r3
 8004a3e:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a40:	fba2 2303 	umull	r2, r3, r2, r3
 8004a44:	0c9b      	lsrs	r3, r3, #18
 8004a46:	3301      	adds	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a4a:	e002      	b.n	8004a52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d102      	bne.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f2      	bne.n	8004a4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d112      	bne.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e011      	b.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7e:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a88:	e007      	b.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a92:	4a05      	ldr	r2, [pc, #20]	; (8004aa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	20000004 	.word	0x20000004
 8004ab0:	431bde83 	.word	0x431bde83

08004ab4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4a04      	ldr	r2, [pc, #16]	; (8004ad0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac2:	6093      	str	r3, [r2, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40007000 	.word	0x40007000

08004ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e2fe      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d075      	beq.n	8004bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af2:	4b97      	ldr	r3, [pc, #604]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004afc:	4b94      	ldr	r3, [pc, #592]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b0c      	cmp	r3, #12
 8004b0a:	d102      	bne.n	8004b12 <HAL_RCC_OscConfig+0x3e>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d002      	beq.n	8004b18 <HAL_RCC_OscConfig+0x44>
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d10b      	bne.n	8004b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	4b8d      	ldr	r3, [pc, #564]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d05b      	beq.n	8004bdc <HAL_RCC_OscConfig+0x108>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d157      	bne.n	8004bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e2d9      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b38:	d106      	bne.n	8004b48 <HAL_RCC_OscConfig+0x74>
 8004b3a:	4b85      	ldr	r3, [pc, #532]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a84      	ldr	r2, [pc, #528]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e01d      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b50:	d10c      	bne.n	8004b6c <HAL_RCC_OscConfig+0x98>
 8004b52:	4b7f      	ldr	r3, [pc, #508]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a7e      	ldr	r2, [pc, #504]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4b7c      	ldr	r3, [pc, #496]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7b      	ldr	r2, [pc, #492]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_OscConfig+0xb0>
 8004b6c:	4b78      	ldr	r3, [pc, #480]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a77      	ldr	r2, [pc, #476]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	4b75      	ldr	r3, [pc, #468]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a74      	ldr	r2, [pc, #464]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d013      	beq.n	8004bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fc ff4a 	bl	8001a24 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b94:	f7fc ff46 	bl	8001a24 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e29e      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba6:	4b6a      	ldr	r3, [pc, #424]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0xc0>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fc ff36 	bl	8001a24 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bbc:	f7fc ff32 	bl	8001a24 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e28a      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bce:	4b60      	ldr	r3, [pc, #384]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0xe8>
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d075      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bea:	4b59      	ldr	r3, [pc, #356]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bf4:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b0c      	cmp	r3, #12
 8004c02:	d102      	bne.n	8004c0a <HAL_RCC_OscConfig+0x136>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d002      	beq.n	8004c10 <HAL_RCC_OscConfig+0x13c>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d11f      	bne.n	8004c50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c10:	4b4f      	ldr	r3, [pc, #316]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_OscConfig+0x154>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e25d      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c28:	4b49      	ldr	r3, [pc, #292]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	061b      	lsls	r3, r3, #24
 8004c36:	4946      	ldr	r1, [pc, #280]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <HAL_RCC_OscConfig+0x280>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc fea3 	bl	800198c <HAL_InitTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d043      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e249      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d023      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c58:	4b3d      	ldr	r3, [pc, #244]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3c      	ldr	r2, [pc, #240]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fc fede 	bl	8001a24 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c6c:	f7fc feda 	bl	8001a24 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e232      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c7e:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8a:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	061b      	lsls	r3, r3, #24
 8004c98:	492d      	ldr	r1, [pc, #180]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	604b      	str	r3, [r1, #4]
 8004c9e:	e01a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca0:	4b2b      	ldr	r3, [pc, #172]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2a      	ldr	r2, [pc, #168]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fc feba 	bl	8001a24 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb4:	f7fc feb6 	bl	8001a24 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e20e      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x1e0>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d041      	beq.n	8004d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf0:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfa:	f7fc fe93 	bl	8001a24 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d02:	f7fc fe8f 	bl	8001a24 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1e7      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0ef      	beq.n	8004d02 <HAL_RCC_OscConfig+0x22e>
 8004d22:	e020      	b.n	8004d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fc fe76 	bl	8001a24 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d3a:	e00d      	b.n	8004d58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7fc fe72 	bl	8001a24 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d906      	bls.n	8004d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1ca      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000
 8004d54:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d58:	4b8c      	ldr	r3, [pc, #560]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ea      	bne.n	8004d3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80a6 	beq.w	8004ec0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d74:	2300      	movs	r3, #0
 8004d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d78:	4b84      	ldr	r3, [pc, #528]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_OscConfig+0x2b4>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x2b6>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	4b7f      	ldr	r3, [pc, #508]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d92:	4a7e      	ldr	r2, [pc, #504]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
 8004d9a:	4b7c      	ldr	r3, [pc, #496]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004da6:	2301      	movs	r3, #1
 8004da8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004daa:	4b79      	ldr	r3, [pc, #484]	; (8004f90 <HAL_RCC_OscConfig+0x4bc>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d118      	bne.n	8004de8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db6:	4b76      	ldr	r3, [pc, #472]	; (8004f90 <HAL_RCC_OscConfig+0x4bc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a75      	ldr	r2, [pc, #468]	; (8004f90 <HAL_RCC_OscConfig+0x4bc>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc2:	f7fc fe2f 	bl	8001a24 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fc fe2b 	bl	8001a24 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e183      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ddc:	4b6c      	ldr	r3, [pc, #432]	; (8004f90 <HAL_RCC_OscConfig+0x4bc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d108      	bne.n	8004e02 <HAL_RCC_OscConfig+0x32e>
 8004df0:	4b66      	ldr	r3, [pc, #408]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	4a65      	ldr	r2, [pc, #404]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e00:	e024      	b.n	8004e4c <HAL_RCC_OscConfig+0x378>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b05      	cmp	r3, #5
 8004e08:	d110      	bne.n	8004e2c <HAL_RCC_OscConfig+0x358>
 8004e0a:	4b60      	ldr	r3, [pc, #384]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	4a5e      	ldr	r2, [pc, #376]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e12:	f043 0304 	orr.w	r3, r3, #4
 8004e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e1a:	4b5c      	ldr	r3, [pc, #368]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	4a5a      	ldr	r2, [pc, #360]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e2a:	e00f      	b.n	8004e4c <HAL_RCC_OscConfig+0x378>
 8004e2c:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e32:	4a56      	ldr	r2, [pc, #344]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e3c:	4b53      	ldr	r3, [pc, #332]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e42:	4a52      	ldr	r2, [pc, #328]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d016      	beq.n	8004e82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fc fde6 	bl	8001a24 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5c:	f7fc fde2 	bl	8001a24 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e138      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e72:	4b46      	ldr	r3, [pc, #280]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ed      	beq.n	8004e5c <HAL_RCC_OscConfig+0x388>
 8004e80:	e015      	b.n	8004eae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fc fdcf 	bl	8001a24 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fc fdcb 	bl	8001a24 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e121      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea0:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1ed      	bne.n	8004e8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eae:	7ffb      	ldrb	r3, [r7, #31]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb4:	4b35      	ldr	r3, [pc, #212]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4a34      	ldr	r2, [pc, #208]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d03c      	beq.n	8004f46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01c      	beq.n	8004f0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee4:	f7fc fd9e 	bl	8001a24 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eec:	f7fc fd9a 	bl	8001a24 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0f2      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004efe:	4b23      	ldr	r3, [pc, #140]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ef      	beq.n	8004eec <HAL_RCC_OscConfig+0x418>
 8004f0c:	e01b      	b.n	8004f46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f0e:	4b1f      	ldr	r3, [pc, #124]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f14:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fc fd81 	bl	8001a24 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f26:	f7fc fd7d 	bl	8001a24 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0d5      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f38:	4b14      	ldr	r3, [pc, #80]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ef      	bne.n	8004f26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80c9 	beq.w	80050e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f50:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b0c      	cmp	r3, #12
 8004f5a:	f000 8083 	beq.w	8005064 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d15e      	bne.n	8005024 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <HAL_RCC_OscConfig+0x4b8>)
 8004f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fc fd57 	bl	8001a24 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f78:	e00c      	b.n	8004f94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fc fd53 	bl	8001a24 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d905      	bls.n	8004f94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e0ab      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	4b55      	ldr	r3, [pc, #340]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ec      	bne.n	8004f7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa0:	4b52      	ldr	r3, [pc, #328]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	4b52      	ldr	r3, [pc, #328]	; (80050f0 <HAL_RCC_OscConfig+0x61c>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6a11      	ldr	r1, [r2, #32]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	0112      	lsls	r2, r2, #4
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004fba:	0212      	lsls	r2, r2, #8
 8004fbc:	4311      	orrs	r1, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fc2:	0852      	lsrs	r2, r2, #1
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	0552      	lsls	r2, r2, #21
 8004fc8:	4311      	orrs	r1, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fce:	0852      	lsrs	r2, r2, #1
 8004fd0:	3a01      	subs	r2, #1
 8004fd2:	0652      	lsls	r2, r2, #25
 8004fd4:	4311      	orrs	r1, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fda:	06d2      	lsls	r2, r2, #27
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	4943      	ldr	r1, [pc, #268]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a40      	ldr	r2, [pc, #256]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ff0:	4b3e      	ldr	r3, [pc, #248]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	4a3d      	ldr	r2, [pc, #244]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8004ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fc fd12 	bl	8001a24 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fc fd0e 	bl	8001a24 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e066      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	4b35      	ldr	r3, [pc, #212]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x530>
 8005022:	e05e      	b.n	80050e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005024:	4b31      	ldr	r3, [pc, #196]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a30      	ldr	r2, [pc, #192]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 800502a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fc fcf8 	bl	8001a24 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005038:	f7fc fcf4 	bl	8001a24 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e04c      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800504a:	4b28      	ldr	r3, [pc, #160]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f0      	bne.n	8005038 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8005058:	68da      	ldr	r2, [r3, #12]
 800505a:	4924      	ldr	r1, [pc, #144]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 800505c:	4b25      	ldr	r3, [pc, #148]	; (80050f4 <HAL_RCC_OscConfig+0x620>)
 800505e:	4013      	ands	r3, r2
 8005060:	60cb      	str	r3, [r1, #12]
 8005062:	e03e      	b.n	80050e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e039      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005070:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <HAL_RCC_OscConfig+0x618>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0203 	and.w	r2, r3, #3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	429a      	cmp	r2, r3
 8005082:	d12c      	bne.n	80050de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	3b01      	subs	r3, #1
 8005090:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d123      	bne.n	80050de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d11b      	bne.n	80050de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d113      	bne.n	80050de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	3b01      	subs	r3, #1
 80050c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d109      	bne.n	80050de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d4:	085b      	lsrs	r3, r3, #1
 80050d6:	3b01      	subs	r3, #1
 80050d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000
 80050f0:	019f800c 	.word	0x019f800c
 80050f4:	feeefffc 	.word	0xfeeefffc

080050f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e11e      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b91      	ldr	r3, [pc, #580]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d910      	bls.n	8005140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b8e      	ldr	r3, [pc, #568]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 020f 	bic.w	r2, r3, #15
 8005126:	498c      	ldr	r1, [pc, #560]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b8a      	ldr	r3, [pc, #552]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e106      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d073      	beq.n	8005234 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d129      	bne.n	80051a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005154:	4b81      	ldr	r3, [pc, #516]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e0f4      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005164:	f000 f99e 	bl	80054a4 <RCC_GetSysClockFreqFromPLLSource>
 8005168:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4a7c      	ldr	r2, [pc, #496]	; (8005360 <HAL_RCC_ClockConfig+0x268>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d93f      	bls.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005172:	4b7a      	ldr	r3, [pc, #488]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005186:	2b00      	cmp	r3, #0
 8005188:	d033      	beq.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800518e:	2b00      	cmp	r3, #0
 8005190:	d12f      	bne.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005192:	4b72      	ldr	r3, [pc, #456]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800519a:	4a70      	ldr	r2, [pc, #448]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 800519c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e024      	b.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d107      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b0:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0c6      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0be      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051d0:	f000 f8ce 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4a61      	ldr	r2, [pc, #388]	; (8005360 <HAL_RCC_ClockConfig+0x268>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d909      	bls.n	80051f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051de:	4b5f      	ldr	r3, [pc, #380]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e6:	4a5d      	ldr	r2, [pc, #372]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 80051e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f2:	4b5a      	ldr	r3, [pc, #360]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f023 0203 	bic.w	r2, r3, #3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	4957      	ldr	r1, [pc, #348]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005200:	4313      	orrs	r3, r2
 8005202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005204:	f7fc fc0e 	bl	8001a24 <HAL_GetTick>
 8005208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520a:	e00a      	b.n	8005222 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520c:	f7fc fc0a 	bl	8001a24 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	; 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e095      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	4b4e      	ldr	r3, [pc, #312]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 020c 	and.w	r2, r3, #12
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	429a      	cmp	r2, r3
 8005232:	d1eb      	bne.n	800520c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d023      	beq.n	8005288 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800524c:	4b43      	ldr	r3, [pc, #268]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	4a42      	ldr	r2, [pc, #264]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005252:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005256:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005264:	4b3d      	ldr	r3, [pc, #244]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800526c:	4a3b      	ldr	r2, [pc, #236]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 800526e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005272:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b39      	ldr	r3, [pc, #228]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4936      	ldr	r1, [pc, #216]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
 8005286:	e008      	b.n	800529a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d105      	bne.n	800529a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800528e:	4b33      	ldr	r3, [pc, #204]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	4a32      	ldr	r2, [pc, #200]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005298:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529a:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d21d      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f023 020f 	bic.w	r2, r3, #15
 80052b0:	4929      	ldr	r1, [pc, #164]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052b8:	f7fc fbb4 	bl	8001a24 <HAL_GetTick>
 80052bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052c0:	f7fc fbb0 	bl	8001a24 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e03b      	b.n	800534e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	4b20      	ldr	r3, [pc, #128]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d1ed      	bne.n	80052c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052f0:	4b1a      	ldr	r3, [pc, #104]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4917      	ldr	r1, [pc, #92]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	490f      	ldr	r1, [pc, #60]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005322:	f000 f825 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8005326:	4602      	mov	r2, r0
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <HAL_RCC_ClockConfig+0x264>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	490c      	ldr	r1, [pc, #48]	; (8005364 <HAL_RCC_ClockConfig+0x26c>)
 8005334:	5ccb      	ldrb	r3, [r1, r3]
 8005336:	f003 031f 	and.w	r3, r3, #31
 800533a:	fa22 f303 	lsr.w	r3, r2, r3
 800533e:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <HAL_RCC_ClockConfig+0x270>)
 8005340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005342:	4b0a      	ldr	r3, [pc, #40]	; (800536c <HAL_RCC_ClockConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4618      	mov	r0, r3
 8005348:	f7fc fb20 	bl	800198c <HAL_InitTick>
 800534c:	4603      	mov	r3, r0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40022000 	.word	0x40022000
 800535c:	40021000 	.word	0x40021000
 8005360:	04c4b400 	.word	0x04c4b400
 8005364:	08006b48 	.word	0x08006b48
 8005368:	20000004 	.word	0x20000004
 800536c:	20000008 	.word	0x20000008

08005370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005376:	4b2c      	ldr	r3, [pc, #176]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b04      	cmp	r3, #4
 8005380:	d102      	bne.n	8005388 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005382:	4b2a      	ldr	r3, [pc, #168]	; (800542c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e047      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005388:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 030c 	and.w	r3, r3, #12
 8005390:	2b08      	cmp	r3, #8
 8005392:	d102      	bne.n	800539a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005394:	4b26      	ldr	r3, [pc, #152]	; (8005430 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e03e      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800539a:	4b23      	ldr	r3, [pc, #140]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 030c 	and.w	r3, r3, #12
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	d136      	bne.n	8005414 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b20      	ldr	r3, [pc, #128]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053b0:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3301      	adds	r3, #1
 80053bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d10c      	bne.n	80053de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c4:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053cc:	4a16      	ldr	r2, [pc, #88]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ce:	68d2      	ldr	r2, [r2, #12]
 80053d0:	0a12      	lsrs	r2, r2, #8
 80053d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053d6:	fb02 f303 	mul.w	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
      break;
 80053dc:	e00c      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <HAL_RCC_GetSysClockFreq+0xbc>)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	0a12      	lsrs	r2, r2, #8
 80053ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
      break;
 80053f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	0e5b      	lsrs	r3, r3, #25
 80053fe:	f003 0303 	and.w	r3, r3, #3
 8005402:	3301      	adds	r3, #1
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	e001      	b.n	8005418 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005418:	693b      	ldr	r3, [r7, #16]
}
 800541a:	4618      	mov	r0, r3
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40021000 	.word	0x40021000
 800542c:	00f42400 	.word	0x00f42400
 8005430:	016e3600 	.word	0x016e3600

08005434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b03      	ldr	r3, [pc, #12]	; (8005448 <HAL_RCC_GetHCLKFreq+0x14>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	4618      	mov	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000004 	.word	0x20000004

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005450:	f7ff fff0 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4904      	ldr	r1, [pc, #16]	; (8005474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	08006b58 	.word	0x08006b58

08005478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800547c:	f7ff ffda 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	0adb      	lsrs	r3, r3, #11
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	4904      	ldr	r1, [pc, #16]	; (80054a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005498:	4618      	mov	r0, r3
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000
 80054a0:	08006b58 	.word	0x08006b58

080054a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054aa:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d10c      	bne.n	80054e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054c8:	4a17      	ldr	r2, [pc, #92]	; (8005528 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d0:	4a14      	ldr	r2, [pc, #80]	; (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054d2:	68d2      	ldr	r2, [r2, #12]
 80054d4:	0a12      	lsrs	r2, r2, #8
 80054d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054da:	fb02 f303 	mul.w	r3, r2, r3
 80054de:	617b      	str	r3, [r7, #20]
    break;
 80054e0:	e00c      	b.n	80054fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054e2:	4a12      	ldr	r2, [pc, #72]	; (800552c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ea:	4a0e      	ldr	r2, [pc, #56]	; (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	0a12      	lsrs	r2, r2, #8
 80054f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054f4:	fb02 f303 	mul.w	r3, r2, r3
 80054f8:	617b      	str	r3, [r7, #20]
    break;
 80054fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0e5b      	lsrs	r3, r3, #25
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	3301      	adds	r3, #1
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005516:	687b      	ldr	r3, [r7, #4]
}
 8005518:	4618      	mov	r0, r3
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40021000 	.word	0x40021000
 8005528:	016e3600 	.word	0x016e3600
 800552c:	00f42400 	.word	0x00f42400

08005530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005538:	2300      	movs	r3, #0
 800553a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800553c:	2300      	movs	r3, #0
 800553e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 8098 	beq.w	800567e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554e:	2300      	movs	r3, #0
 8005550:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005552:	4b43      	ldr	r3, [pc, #268]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555e:	4b40      	ldr	r3, [pc, #256]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	4a3f      	ldr	r2, [pc, #252]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005568:	6593      	str	r3, [r2, #88]	; 0x58
 800556a:	4b3d      	ldr	r3, [pc, #244]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005576:	2301      	movs	r3, #1
 8005578:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800557a:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a39      	ldr	r2, [pc, #228]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005586:	f7fc fa4d 	bl	8001a24 <HAL_GetTick>
 800558a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800558c:	e009      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558e:	f7fc fa49 	bl	8001a24 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d902      	bls.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	74fb      	strb	r3, [r7, #19]
        break;
 80055a0:	e005      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a2:	4b30      	ldr	r3, [pc, #192]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0ef      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055ae:	7cfb      	ldrb	r3, [r7, #19]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d159      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055b4:	4b2a      	ldr	r3, [pc, #168]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01e      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d019      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055d0:	4b23      	ldr	r3, [pc, #140]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055dc:	4b20      	ldr	r3, [pc, #128]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ec:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055fc:	4a18      	ldr	r2, [pc, #96]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560e:	f7fc fa09 	bl	8001a24 <HAL_GetTick>
 8005612:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005614:	e00b      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005616:	f7fc fa05 	bl	8001a24 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f241 3288 	movw	r2, #5000	; 0x1388
 8005624:	4293      	cmp	r3, r2
 8005626:	d902      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	74fb      	strb	r3, [r7, #19]
            break;
 800562c:	e006      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0ec      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	4903      	ldr	r1, [pc, #12]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005658:	e008      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	74bb      	strb	r3, [r7, #18]
 800565e:	e005      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005660:	40021000 	.word	0x40021000
 8005664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800566c:	7c7b      	ldrb	r3, [r7, #17]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005672:	4ba6      	ldr	r3, [pc, #664]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005676:	4aa5      	ldr	r2, [pc, #660]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800568a:	4ba0      	ldr	r3, [pc, #640]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f023 0203 	bic.w	r2, r3, #3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	499c      	ldr	r1, [pc, #624]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056ac:	4b97      	ldr	r3, [pc, #604]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f023 020c 	bic.w	r2, r3, #12
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	4994      	ldr	r1, [pc, #592]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ce:	4b8f      	ldr	r3, [pc, #572]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	498b      	ldr	r1, [pc, #556]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056f0:	4b86      	ldr	r3, [pc, #536]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	4983      	ldr	r1, [pc, #524]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005712:	4b7e      	ldr	r3, [pc, #504]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	497a      	ldr	r1, [pc, #488]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005734:	4b75      	ldr	r3, [pc, #468]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	4972      	ldr	r1, [pc, #456]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005756:	4b6d      	ldr	r3, [pc, #436]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	4969      	ldr	r1, [pc, #420]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005778:	4b64      	ldr	r3, [pc, #400]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	4961      	ldr	r1, [pc, #388]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800579a:	4b5c      	ldr	r3, [pc, #368]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800579c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	4958      	ldr	r1, [pc, #352]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057bc:	4b53      	ldr	r3, [pc, #332]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	4950      	ldr	r1, [pc, #320]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057da:	d105      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057dc:	4b4b      	ldr	r3, [pc, #300]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a4a      	ldr	r2, [pc, #296]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d015      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057f4:	4b45      	ldr	r3, [pc, #276]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	4942      	ldr	r1, [pc, #264]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005812:	d105      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005814:	4b3d      	ldr	r3, [pc, #244]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4a3c      	ldr	r2, [pc, #240]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800581a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800581e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d015      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800582c:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	4934      	ldr	r1, [pc, #208]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800584a:	d105      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4a2e      	ldr	r2, [pc, #184]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005856:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d015      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005864:	4b29      	ldr	r3, [pc, #164]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	4926      	ldr	r1, [pc, #152]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005882:	d105      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4a20      	ldr	r2, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800588e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800589c:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	4918      	ldr	r1, [pc, #96]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ba:	d105      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058bc:	4b13      	ldr	r3, [pc, #76]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4a12      	ldr	r2, [pc, #72]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	490a      	ldr	r1, [pc, #40]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f2:	d105      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4a04      	ldr	r2, [pc, #16]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005900:	7cbb      	ldrb	r3, [r7, #18]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000

08005910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e049      	b.n	80059b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb ff40 	bl	80017bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 f898 	bl	8005a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d001      	beq.n	80059d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e042      	b.n	8005a5e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_TIM_Base_Start+0xac>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIM_Base_Start+0x5c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_Base_Start+0x5c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <HAL_TIM_Base_Start+0xb0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_Base_Start+0x5c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1c      	ldr	r2, [pc, #112]	; (8005a74 <HAL_TIM_Base_Start+0xb4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_Base_Start+0x5c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <HAL_TIM_Base_Start+0xb8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_Base_Start+0x5c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a19      	ldr	r2, [pc, #100]	; (8005a7c <HAL_TIM_Base_Start+0xbc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d115      	bne.n	8005a48 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	4b17      	ldr	r3, [pc, #92]	; (8005a80 <HAL_TIM_Base_Start+0xc0>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d015      	beq.n	8005a5a <HAL_TIM_Base_Start+0x9a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a34:	d011      	beq.n	8005a5a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	e008      	b.n	8005a5a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0201 	orr.w	r2, r2, #1
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e000      	b.n	8005a5c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40013400 	.word	0x40013400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	00010007 	.word	0x00010007

08005a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a42      	ldr	r2, [pc, #264]	; (8005ba0 <TIM_Base_SetConfig+0x11c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00f      	beq.n	8005abc <TIM_Base_SetConfig+0x38>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d00b      	beq.n	8005abc <TIM_Base_SetConfig+0x38>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a3f      	ldr	r2, [pc, #252]	; (8005ba4 <TIM_Base_SetConfig+0x120>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0x38>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3e      	ldr	r2, [pc, #248]	; (8005ba8 <TIM_Base_SetConfig+0x124>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0x38>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3d      	ldr	r2, [pc, #244]	; (8005bac <TIM_Base_SetConfig+0x128>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d108      	bne.n	8005ace <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a33      	ldr	r2, [pc, #204]	; (8005ba0 <TIM_Base_SetConfig+0x11c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01b      	beq.n	8005b0e <TIM_Base_SetConfig+0x8a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005adc:	d017      	beq.n	8005b0e <TIM_Base_SetConfig+0x8a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a30      	ldr	r2, [pc, #192]	; (8005ba4 <TIM_Base_SetConfig+0x120>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <TIM_Base_SetConfig+0x8a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2f      	ldr	r2, [pc, #188]	; (8005ba8 <TIM_Base_SetConfig+0x124>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00f      	beq.n	8005b0e <TIM_Base_SetConfig+0x8a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2e      	ldr	r2, [pc, #184]	; (8005bac <TIM_Base_SetConfig+0x128>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00b      	beq.n	8005b0e <TIM_Base_SetConfig+0x8a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2d      	ldr	r2, [pc, #180]	; (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d007      	beq.n	8005b0e <TIM_Base_SetConfig+0x8a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2c      	ldr	r2, [pc, #176]	; (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d003      	beq.n	8005b0e <TIM_Base_SetConfig+0x8a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a2b      	ldr	r2, [pc, #172]	; (8005bb8 <TIM_Base_SetConfig+0x134>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d108      	bne.n	8005b20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a16      	ldr	r2, [pc, #88]	; (8005ba0 <TIM_Base_SetConfig+0x11c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00f      	beq.n	8005b6c <TIM_Base_SetConfig+0xe8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a17      	ldr	r2, [pc, #92]	; (8005bac <TIM_Base_SetConfig+0x128>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <TIM_Base_SetConfig+0xe8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <TIM_Base_SetConfig+0x12c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d007      	beq.n	8005b6c <TIM_Base_SetConfig+0xe8>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <TIM_Base_SetConfig+0x130>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_Base_SetConfig+0xe8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <TIM_Base_SetConfig+0x134>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d103      	bne.n	8005b74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d105      	bne.n	8005b92 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	611a      	str	r2, [r3, #16]
  }
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40013400 	.word	0x40013400
 8005bb0:	40014000 	.word	0x40014000
 8005bb4:	40014400 	.word	0x40014400
 8005bb8:	40014800 	.word	0x40014800

08005bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e065      	b.n	8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1b      	ldr	r2, [pc, #108]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d018      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d013      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00e      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a17      	ldr	r2, [pc, #92]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d10c      	bne.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40013400 	.word	0x40013400
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40014000 	.word	0x40014000

08005cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e042      	b.n	8005d58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fb fd11 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2224      	movs	r2, #36	; 0x24
 8005cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0201 	bic.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 faf4 	bl	80062f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f825 	bl	8005d60 <UART_SetConfig>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e01b      	b.n	8005d58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fb73 	bl	800643c <UART_CheckIdleState>
 8005d56:	4603      	mov	r3, r0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d64:	b08c      	sub	sp, #48	; 0x30
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4bab      	ldr	r3, [pc, #684]	; (800603c <UART_SetConfig+0x2dc>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4aa0      	ldr	r2, [pc, #640]	; (8006040 <UART_SetConfig+0x2e0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005dd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f023 010f 	bic.w	r1, r3, #15
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a91      	ldr	r2, [pc, #580]	; (8006044 <UART_SetConfig+0x2e4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d125      	bne.n	8005e50 <UART_SetConfig+0xf0>
 8005e04:	4b90      	ldr	r3, [pc, #576]	; (8006048 <UART_SetConfig+0x2e8>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	d81a      	bhi.n	8005e48 <UART_SetConfig+0xe8>
 8005e12:	a201      	add	r2, pc, #4	; (adr r2, 8005e18 <UART_SetConfig+0xb8>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e29 	.word	0x08005e29
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e41 	.word	0x08005e41
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2e:	e0d6      	b.n	8005fde <UART_SetConfig+0x27e>
 8005e30:	2302      	movs	r3, #2
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e36:	e0d2      	b.n	8005fde <UART_SetConfig+0x27e>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e0ce      	b.n	8005fde <UART_SetConfig+0x27e>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e0ca      	b.n	8005fde <UART_SetConfig+0x27e>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e4e:	e0c6      	b.n	8005fde <UART_SetConfig+0x27e>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a7d      	ldr	r2, [pc, #500]	; (800604c <UART_SetConfig+0x2ec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d138      	bne.n	8005ecc <UART_SetConfig+0x16c>
 8005e5a:	4b7b      	ldr	r3, [pc, #492]	; (8006048 <UART_SetConfig+0x2e8>)
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b0c      	cmp	r3, #12
 8005e66:	d82d      	bhi.n	8005ec4 <UART_SetConfig+0x164>
 8005e68:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x110>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005ea5 	.word	0x08005ea5
 8005e74:	08005ec5 	.word	0x08005ec5
 8005e78:	08005ec5 	.word	0x08005ec5
 8005e7c:	08005ec5 	.word	0x08005ec5
 8005e80:	08005eb5 	.word	0x08005eb5
 8005e84:	08005ec5 	.word	0x08005ec5
 8005e88:	08005ec5 	.word	0x08005ec5
 8005e8c:	08005ec5 	.word	0x08005ec5
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	08005ec5 	.word	0x08005ec5
 8005e98:	08005ec5 	.word	0x08005ec5
 8005e9c:	08005ec5 	.word	0x08005ec5
 8005ea0:	08005ebd 	.word	0x08005ebd
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eaa:	e098      	b.n	8005fde <UART_SetConfig+0x27e>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb2:	e094      	b.n	8005fde <UART_SetConfig+0x27e>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eba:	e090      	b.n	8005fde <UART_SetConfig+0x27e>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ec2:	e08c      	b.n	8005fde <UART_SetConfig+0x27e>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eca:	e088      	b.n	8005fde <UART_SetConfig+0x27e>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a5f      	ldr	r2, [pc, #380]	; (8006050 <UART_SetConfig+0x2f0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d125      	bne.n	8005f22 <UART_SetConfig+0x1c2>
 8005ed6:	4b5c      	ldr	r3, [pc, #368]	; (8006048 <UART_SetConfig+0x2e8>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ee0:	2b30      	cmp	r3, #48	; 0x30
 8005ee2:	d016      	beq.n	8005f12 <UART_SetConfig+0x1b2>
 8005ee4:	2b30      	cmp	r3, #48	; 0x30
 8005ee6:	d818      	bhi.n	8005f1a <UART_SetConfig+0x1ba>
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d00a      	beq.n	8005f02 <UART_SetConfig+0x1a2>
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d814      	bhi.n	8005f1a <UART_SetConfig+0x1ba>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <UART_SetConfig+0x19a>
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d008      	beq.n	8005f0a <UART_SetConfig+0x1aa>
 8005ef8:	e00f      	b.n	8005f1a <UART_SetConfig+0x1ba>
 8005efa:	2300      	movs	r3, #0
 8005efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f00:	e06d      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f02:	2302      	movs	r3, #2
 8005f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f08:	e069      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f0a:	2304      	movs	r3, #4
 8005f0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f10:	e065      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f12:	2308      	movs	r3, #8
 8005f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f18:	e061      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f1a:	2310      	movs	r3, #16
 8005f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f20:	e05d      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a4b      	ldr	r2, [pc, #300]	; (8006054 <UART_SetConfig+0x2f4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d125      	bne.n	8005f78 <UART_SetConfig+0x218>
 8005f2c:	4b46      	ldr	r3, [pc, #280]	; (8006048 <UART_SetConfig+0x2e8>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f36:	2bc0      	cmp	r3, #192	; 0xc0
 8005f38:	d016      	beq.n	8005f68 <UART_SetConfig+0x208>
 8005f3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f3c:	d818      	bhi.n	8005f70 <UART_SetConfig+0x210>
 8005f3e:	2b80      	cmp	r3, #128	; 0x80
 8005f40:	d00a      	beq.n	8005f58 <UART_SetConfig+0x1f8>
 8005f42:	2b80      	cmp	r3, #128	; 0x80
 8005f44:	d814      	bhi.n	8005f70 <UART_SetConfig+0x210>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <UART_SetConfig+0x1f0>
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d008      	beq.n	8005f60 <UART_SetConfig+0x200>
 8005f4e:	e00f      	b.n	8005f70 <UART_SetConfig+0x210>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f56:	e042      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f58:	2302      	movs	r3, #2
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e03e      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f60:	2304      	movs	r3, #4
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f66:	e03a      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f68:	2308      	movs	r3, #8
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6e:	e036      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f70:	2310      	movs	r3, #16
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f76:	e032      	b.n	8005fde <UART_SetConfig+0x27e>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a30      	ldr	r2, [pc, #192]	; (8006040 <UART_SetConfig+0x2e0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d12a      	bne.n	8005fd8 <UART_SetConfig+0x278>
 8005f82:	4b31      	ldr	r3, [pc, #196]	; (8006048 <UART_SetConfig+0x2e8>)
 8005f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f90:	d01a      	beq.n	8005fc8 <UART_SetConfig+0x268>
 8005f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f96:	d81b      	bhi.n	8005fd0 <UART_SetConfig+0x270>
 8005f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9c:	d00c      	beq.n	8005fb8 <UART_SetConfig+0x258>
 8005f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa2:	d815      	bhi.n	8005fd0 <UART_SetConfig+0x270>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <UART_SetConfig+0x250>
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fac:	d008      	beq.n	8005fc0 <UART_SetConfig+0x260>
 8005fae:	e00f      	b.n	8005fd0 <UART_SetConfig+0x270>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb6:	e012      	b.n	8005fde <UART_SetConfig+0x27e>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fbe:	e00e      	b.n	8005fde <UART_SetConfig+0x27e>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fc6:	e00a      	b.n	8005fde <UART_SetConfig+0x27e>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fce:	e006      	b.n	8005fde <UART_SetConfig+0x27e>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd6:	e002      	b.n	8005fde <UART_SetConfig+0x27e>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a17      	ldr	r2, [pc, #92]	; (8006040 <UART_SetConfig+0x2e0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	f040 80a8 	bne.w	800613a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d834      	bhi.n	800605c <UART_SetConfig+0x2fc>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0x298>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	0800605d 	.word	0x0800605d
 8006000:	08006025 	.word	0x08006025
 8006004:	0800605d 	.word	0x0800605d
 8006008:	0800602b 	.word	0x0800602b
 800600c:	0800605d 	.word	0x0800605d
 8006010:	0800605d 	.word	0x0800605d
 8006014:	0800605d 	.word	0x0800605d
 8006018:	08006033 	.word	0x08006033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601c:	f7ff fa16 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8006020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006022:	e021      	b.n	8006068 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <UART_SetConfig+0x2f8>)
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006028:	e01e      	b.n	8006068 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800602a:	f7ff f9a1 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006030:	e01a      	b.n	8006068 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006038:	e016      	b.n	8006068 <UART_SetConfig+0x308>
 800603a:	bf00      	nop
 800603c:	cfff69f3 	.word	0xcfff69f3
 8006040:	40008000 	.word	0x40008000
 8006044:	40013800 	.word	0x40013800
 8006048:	40021000 	.word	0x40021000
 800604c:	40004400 	.word	0x40004400
 8006050:	40004800 	.word	0x40004800
 8006054:	40004c00 	.word	0x40004c00
 8006058:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006066:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 812a 	beq.w	80062c4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	4a9e      	ldr	r2, [pc, #632]	; (80062f0 <UART_SetConfig+0x590>)
 8006076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607a:	461a      	mov	r2, r3
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006082:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	4613      	mov	r3, r2
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	4413      	add	r3, r2
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	429a      	cmp	r2, r3
 8006092:	d305      	bcc.n	80060a0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	429a      	cmp	r2, r3
 800609e:	d903      	bls.n	80060a8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060a6:	e10d      	b.n	80062c4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	2200      	movs	r2, #0
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	60fa      	str	r2, [r7, #12]
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	4a8e      	ldr	r2, [pc, #568]	; (80062f0 <UART_SetConfig+0x590>)
 80060b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2200      	movs	r2, #0
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060ca:	f7fa fc93 	bl	80009f4 <__aeabi_uldivmod>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4610      	mov	r0, r2
 80060d4:	4619      	mov	r1, r3
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	020b      	lsls	r3, r1, #8
 80060e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060e4:	0202      	lsls	r2, r0, #8
 80060e6:	6979      	ldr	r1, [r7, #20]
 80060e8:	6849      	ldr	r1, [r1, #4]
 80060ea:	0849      	lsrs	r1, r1, #1
 80060ec:	2000      	movs	r0, #0
 80060ee:	460c      	mov	r4, r1
 80060f0:	4605      	mov	r5, r0
 80060f2:	eb12 0804 	adds.w	r8, r2, r4
 80060f6:	eb43 0905 	adc.w	r9, r3, r5
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	469a      	mov	sl, r3
 8006102:	4693      	mov	fp, r2
 8006104:	4652      	mov	r2, sl
 8006106:	465b      	mov	r3, fp
 8006108:	4640      	mov	r0, r8
 800610a:	4649      	mov	r1, r9
 800610c:	f7fa fc72 	bl	80009f4 <__aeabi_uldivmod>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4613      	mov	r3, r2
 8006116:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800611e:	d308      	bcc.n	8006132 <UART_SetConfig+0x3d2>
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006126:	d204      	bcs.n	8006132 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	60da      	str	r2, [r3, #12]
 8006130:	e0c8      	b.n	80062c4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006138:	e0c4      	b.n	80062c4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006142:	d167      	bne.n	8006214 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006148:	2b08      	cmp	r3, #8
 800614a:	d828      	bhi.n	800619e <UART_SetConfig+0x43e>
 800614c:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <UART_SetConfig+0x3f4>)
 800614e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006152:	bf00      	nop
 8006154:	08006179 	.word	0x08006179
 8006158:	08006181 	.word	0x08006181
 800615c:	08006189 	.word	0x08006189
 8006160:	0800619f 	.word	0x0800619f
 8006164:	0800618f 	.word	0x0800618f
 8006168:	0800619f 	.word	0x0800619f
 800616c:	0800619f 	.word	0x0800619f
 8006170:	0800619f 	.word	0x0800619f
 8006174:	08006197 	.word	0x08006197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006178:	f7ff f968 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 800617c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800617e:	e014      	b.n	80061aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006180:	f7ff f97a 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 8006184:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006186:	e010      	b.n	80061aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006188:	4b5a      	ldr	r3, [pc, #360]	; (80062f4 <UART_SetConfig+0x594>)
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800618c:	e00d      	b.n	80061aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618e:	f7ff f8ef 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006194:	e009      	b.n	80061aa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800619c:	e005      	b.n	80061aa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8089 	beq.w	80062c4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	4a4e      	ldr	r2, [pc, #312]	; (80062f0 <UART_SetConfig+0x590>)
 80061b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061bc:	461a      	mov	r2, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80061c4:	005a      	lsls	r2, r3, #1
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	441a      	add	r2, r3
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d916      	bls.n	800620c <UART_SetConfig+0x4ac>
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e4:	d212      	bcs.n	800620c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f023 030f 	bic.w	r3, r3, #15
 80061ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	8bfb      	ldrh	r3, [r7, #30]
 80061fe:	4313      	orrs	r3, r2
 8006200:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	8bfa      	ldrh	r2, [r7, #30]
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	e05b      	b.n	80062c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006212:	e057      	b.n	80062c4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006218:	2b08      	cmp	r3, #8
 800621a:	d828      	bhi.n	800626e <UART_SetConfig+0x50e>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x4c4>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	0800626f 	.word	0x0800626f
 8006234:	0800625f 	.word	0x0800625f
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800626f 	.word	0x0800626f
 8006244:	08006267 	.word	0x08006267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7ff f900 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 800624c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800624e:	e014      	b.n	800627a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006250:	f7ff f912 	bl	8005478 <HAL_RCC_GetPCLK2Freq>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006256:	e010      	b.n	800627a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006258:	4b26      	ldr	r3, [pc, #152]	; (80062f4 <UART_SetConfig+0x594>)
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800625c:	e00d      	b.n	800627a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625e:	f7ff f887 	bl	8005370 <HAL_RCC_GetSysClockFreq>
 8006262:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006264:	e009      	b.n	800627a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800626c:	e005      	b.n	800627a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006278:	bf00      	nop
    }

    if (pclk != 0U)
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d021      	beq.n	80062c4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <UART_SetConfig+0x590>)
 8006286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800628a:	461a      	mov	r2, r3
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	441a      	add	r2, r3
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b0f      	cmp	r3, #15
 80062a8:	d909      	bls.n	80062be <UART_SetConfig+0x55e>
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d205      	bcs.n	80062be <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	e002      	b.n	80062c4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2200      	movs	r2, #0
 80062d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80062e0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3730      	adds	r7, #48	; 0x30
 80062e8:	46bd      	mov	sp, r7
 80062ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ee:	bf00      	nop
 80062f0:	08006b60 	.word	0x08006b60
 80062f4:	00f42400 	.word	0x00f42400

080062f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f003 0310 	and.w	r3, r3, #16
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00a      	beq.n	80063cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01a      	beq.n	800640e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f6:	d10a      	bne.n	800640e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	605a      	str	r2, [r3, #4]
  }
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b098      	sub	sp, #96	; 0x60
 8006440:	af02      	add	r7, sp, #8
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800644c:	f7fb faea 	bl	8001a24 <HAL_GetTick>
 8006450:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b08      	cmp	r3, #8
 800645e:	d12f      	bne.n	80064c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006468:	2200      	movs	r2, #0
 800646a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f88e 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d022      	beq.n	80064c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800648e:	653b      	str	r3, [r7, #80]	; 0x50
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006498:	647b      	str	r3, [r7, #68]	; 0x44
 800649a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800649e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e6      	bne.n	800647a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e063      	b.n	8006588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d149      	bne.n	8006562 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d6:	2200      	movs	r2, #0
 80064d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f857 	bl	8006590 <UART_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d03c      	beq.n	8006562 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	e853 3f00 	ldrex	r3, [r3]
 80064f4:	623b      	str	r3, [r7, #32]
   return(result);
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
 8006508:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e6      	bne.n	80064e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	e853 3f00 	ldrex	r3, [r3]
 8006528:	60fb      	str	r3, [r7, #12]
   return(result);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	64bb      	str	r3, [r7, #72]	; 0x48
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3308      	adds	r3, #8
 8006538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800653a:	61fa      	str	r2, [r7, #28]
 800653c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	69b9      	ldr	r1, [r7, #24]
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	617b      	str	r3, [r7, #20]
   return(result);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e5      	bne.n	800651a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e012      	b.n	8006588 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3758      	adds	r7, #88	; 0x58
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4613      	mov	r3, r2
 800659e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a0:	e04f      	b.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a8:	d04b      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fb fa3b 	bl	8001a24 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e04e      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d037      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d034      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d031      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d110      	bne.n	800660e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2208      	movs	r2, #8
 80065f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f838 	bl	800666a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2208      	movs	r2, #8
 80065fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e029      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661c:	d111      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f81e 	bl	800666a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e00f      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4013      	ands	r3, r2
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	429a      	cmp	r2, r3
 8006650:	bf0c      	ite	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	2300      	movne	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	429a      	cmp	r2, r3
 800665e:	d0a0      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800666a:	b480      	push	{r7}
 800666c:	b095      	sub	sp, #84	; 0x54
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006690:	643b      	str	r3, [r7, #64]	; 0x40
 8006692:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	64bb      	str	r3, [r7, #72]	; 0x48
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e3      	bne.n	80066a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d118      	bne.n	8006716 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f023 0310 	bic.w	r3, r3, #16
 80066f8:	647b      	str	r3, [r7, #68]	; 0x44
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6979      	ldr	r1, [r7, #20]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	613b      	str	r3, [r7, #16]
   return(result);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e6      	bne.n	80066e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	675a      	str	r2, [r3, #116]	; 0x74
}
 800672a:	bf00      	nop
 800672c:	3754      	adds	r7, #84	; 0x54
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_UARTEx_DisableFifoMode+0x16>
 8006748:	2302      	movs	r3, #2
 800674a:	e027      	b.n	800679c <HAL_UARTEx_DisableFifoMode+0x66>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800677a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067bc:	2302      	movs	r3, #2
 80067be:	e02d      	b.n	800681c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2224      	movs	r2, #36	; 0x24
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f84f 	bl	80068a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006838:	2302      	movs	r3, #2
 800683a:	e02d      	b.n	8006898 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f811 	bl	80068a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068c0:	e031      	b.n	8006926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068c2:	2308      	movs	r3, #8
 80068c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068c6:	2308      	movs	r3, #8
 80068c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	0e5b      	lsrs	r3, r3, #25
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	0f5b      	lsrs	r3, r3, #29
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	7b3a      	ldrb	r2, [r7, #12]
 80068ee:	4911      	ldr	r1, [pc, #68]	; (8006934 <UARTEx_SetNbDataToProcess+0x94>)
 80068f0:	5c8a      	ldrb	r2, [r1, r2]
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068f6:	7b3a      	ldrb	r2, [r7, #12]
 80068f8:	490f      	ldr	r1, [pc, #60]	; (8006938 <UARTEx_SetNbDataToProcess+0x98>)
 80068fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006900:	b29a      	uxth	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	7b7a      	ldrb	r2, [r7, #13]
 800690c:	4909      	ldr	r1, [pc, #36]	; (8006934 <UARTEx_SetNbDataToProcess+0x94>)
 800690e:	5c8a      	ldrb	r2, [r1, r2]
 8006910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006914:	7b7a      	ldrb	r2, [r7, #13]
 8006916:	4908      	ldr	r1, [pc, #32]	; (8006938 <UARTEx_SetNbDataToProcess+0x98>)
 8006918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800691a:	fb93 f3f2 	sdiv	r3, r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	08006b78 	.word	0x08006b78
 8006938:	08006b80 	.word	0x08006b80

0800693c <malloc>:
 800693c:	4b02      	ldr	r3, [pc, #8]	; (8006948 <malloc+0xc>)
 800693e:	4601      	mov	r1, r0
 8006940:	6818      	ldr	r0, [r3, #0]
 8006942:	f000 b823 	b.w	800698c <_malloc_r>
 8006946:	bf00      	nop
 8006948:	2000005c 	.word	0x2000005c

0800694c <sbrk_aligned>:
 800694c:	b570      	push	{r4, r5, r6, lr}
 800694e:	4e0e      	ldr	r6, [pc, #56]	; (8006988 <sbrk_aligned+0x3c>)
 8006950:	460c      	mov	r4, r1
 8006952:	6831      	ldr	r1, [r6, #0]
 8006954:	4605      	mov	r5, r0
 8006956:	b911      	cbnz	r1, 800695e <sbrk_aligned+0x12>
 8006958:	f000 f8ac 	bl	8006ab4 <_sbrk_r>
 800695c:	6030      	str	r0, [r6, #0]
 800695e:	4621      	mov	r1, r4
 8006960:	4628      	mov	r0, r5
 8006962:	f000 f8a7 	bl	8006ab4 <_sbrk_r>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	d00a      	beq.n	8006980 <sbrk_aligned+0x34>
 800696a:	1cc4      	adds	r4, r0, #3
 800696c:	f024 0403 	bic.w	r4, r4, #3
 8006970:	42a0      	cmp	r0, r4
 8006972:	d007      	beq.n	8006984 <sbrk_aligned+0x38>
 8006974:	1a21      	subs	r1, r4, r0
 8006976:	4628      	mov	r0, r5
 8006978:	f000 f89c 	bl	8006ab4 <_sbrk_r>
 800697c:	3001      	adds	r0, #1
 800697e:	d101      	bne.n	8006984 <sbrk_aligned+0x38>
 8006980:	f04f 34ff 	mov.w	r4, #4294967295
 8006984:	4620      	mov	r0, r4
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	2000050c 	.word	0x2000050c

0800698c <_malloc_r>:
 800698c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006990:	1ccd      	adds	r5, r1, #3
 8006992:	f025 0503 	bic.w	r5, r5, #3
 8006996:	3508      	adds	r5, #8
 8006998:	2d0c      	cmp	r5, #12
 800699a:	bf38      	it	cc
 800699c:	250c      	movcc	r5, #12
 800699e:	2d00      	cmp	r5, #0
 80069a0:	4607      	mov	r7, r0
 80069a2:	db01      	blt.n	80069a8 <_malloc_r+0x1c>
 80069a4:	42a9      	cmp	r1, r5
 80069a6:	d905      	bls.n	80069b4 <_malloc_r+0x28>
 80069a8:	230c      	movs	r3, #12
 80069aa:	603b      	str	r3, [r7, #0]
 80069ac:	2600      	movs	r6, #0
 80069ae:	4630      	mov	r0, r6
 80069b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a88 <_malloc_r+0xfc>
 80069b8:	f000 f868 	bl	8006a8c <__malloc_lock>
 80069bc:	f8d8 3000 	ldr.w	r3, [r8]
 80069c0:	461c      	mov	r4, r3
 80069c2:	bb5c      	cbnz	r4, 8006a1c <_malloc_r+0x90>
 80069c4:	4629      	mov	r1, r5
 80069c6:	4638      	mov	r0, r7
 80069c8:	f7ff ffc0 	bl	800694c <sbrk_aligned>
 80069cc:	1c43      	adds	r3, r0, #1
 80069ce:	4604      	mov	r4, r0
 80069d0:	d155      	bne.n	8006a7e <_malloc_r+0xf2>
 80069d2:	f8d8 4000 	ldr.w	r4, [r8]
 80069d6:	4626      	mov	r6, r4
 80069d8:	2e00      	cmp	r6, #0
 80069da:	d145      	bne.n	8006a68 <_malloc_r+0xdc>
 80069dc:	2c00      	cmp	r4, #0
 80069de:	d048      	beq.n	8006a72 <_malloc_r+0xe6>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	4631      	mov	r1, r6
 80069e4:	4638      	mov	r0, r7
 80069e6:	eb04 0903 	add.w	r9, r4, r3
 80069ea:	f000 f863 	bl	8006ab4 <_sbrk_r>
 80069ee:	4581      	cmp	r9, r0
 80069f0:	d13f      	bne.n	8006a72 <_malloc_r+0xe6>
 80069f2:	6821      	ldr	r1, [r4, #0]
 80069f4:	1a6d      	subs	r5, r5, r1
 80069f6:	4629      	mov	r1, r5
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7ff ffa7 	bl	800694c <sbrk_aligned>
 80069fe:	3001      	adds	r0, #1
 8006a00:	d037      	beq.n	8006a72 <_malloc_r+0xe6>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	442b      	add	r3, r5
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d038      	beq.n	8006a82 <_malloc_r+0xf6>
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	42a2      	cmp	r2, r4
 8006a14:	d12b      	bne.n	8006a6e <_malloc_r+0xe2>
 8006a16:	2200      	movs	r2, #0
 8006a18:	605a      	str	r2, [r3, #4]
 8006a1a:	e00f      	b.n	8006a3c <_malloc_r+0xb0>
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	1b52      	subs	r2, r2, r5
 8006a20:	d41f      	bmi.n	8006a62 <_malloc_r+0xd6>
 8006a22:	2a0b      	cmp	r2, #11
 8006a24:	d917      	bls.n	8006a56 <_malloc_r+0xca>
 8006a26:	1961      	adds	r1, r4, r5
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	6025      	str	r5, [r4, #0]
 8006a2c:	bf18      	it	ne
 8006a2e:	6059      	strne	r1, [r3, #4]
 8006a30:	6863      	ldr	r3, [r4, #4]
 8006a32:	bf08      	it	eq
 8006a34:	f8c8 1000 	streq.w	r1, [r8]
 8006a38:	5162      	str	r2, [r4, r5]
 8006a3a:	604b      	str	r3, [r1, #4]
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f104 060b 	add.w	r6, r4, #11
 8006a42:	f000 f829 	bl	8006a98 <__malloc_unlock>
 8006a46:	f026 0607 	bic.w	r6, r6, #7
 8006a4a:	1d23      	adds	r3, r4, #4
 8006a4c:	1af2      	subs	r2, r6, r3
 8006a4e:	d0ae      	beq.n	80069ae <_malloc_r+0x22>
 8006a50:	1b9b      	subs	r3, r3, r6
 8006a52:	50a3      	str	r3, [r4, r2]
 8006a54:	e7ab      	b.n	80069ae <_malloc_r+0x22>
 8006a56:	42a3      	cmp	r3, r4
 8006a58:	6862      	ldr	r2, [r4, #4]
 8006a5a:	d1dd      	bne.n	8006a18 <_malloc_r+0x8c>
 8006a5c:	f8c8 2000 	str.w	r2, [r8]
 8006a60:	e7ec      	b.n	8006a3c <_malloc_r+0xb0>
 8006a62:	4623      	mov	r3, r4
 8006a64:	6864      	ldr	r4, [r4, #4]
 8006a66:	e7ac      	b.n	80069c2 <_malloc_r+0x36>
 8006a68:	4634      	mov	r4, r6
 8006a6a:	6876      	ldr	r6, [r6, #4]
 8006a6c:	e7b4      	b.n	80069d8 <_malloc_r+0x4c>
 8006a6e:	4613      	mov	r3, r2
 8006a70:	e7cc      	b.n	8006a0c <_malloc_r+0x80>
 8006a72:	230c      	movs	r3, #12
 8006a74:	603b      	str	r3, [r7, #0]
 8006a76:	4638      	mov	r0, r7
 8006a78:	f000 f80e 	bl	8006a98 <__malloc_unlock>
 8006a7c:	e797      	b.n	80069ae <_malloc_r+0x22>
 8006a7e:	6025      	str	r5, [r4, #0]
 8006a80:	e7dc      	b.n	8006a3c <_malloc_r+0xb0>
 8006a82:	605b      	str	r3, [r3, #4]
 8006a84:	deff      	udf	#255	; 0xff
 8006a86:	bf00      	nop
 8006a88:	20000508 	.word	0x20000508

08006a8c <__malloc_lock>:
 8006a8c:	4801      	ldr	r0, [pc, #4]	; (8006a94 <__malloc_lock+0x8>)
 8006a8e:	f000 b84b 	b.w	8006b28 <__retarget_lock_acquire_recursive>
 8006a92:	bf00      	nop
 8006a94:	2000064c 	.word	0x2000064c

08006a98 <__malloc_unlock>:
 8006a98:	4801      	ldr	r0, [pc, #4]	; (8006aa0 <__malloc_unlock+0x8>)
 8006a9a:	f000 b846 	b.w	8006b2a <__retarget_lock_release_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	2000064c 	.word	0x2000064c

08006aa4 <memset>:
 8006aa4:	4402      	add	r2, r0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d100      	bne.n	8006aae <memset+0xa>
 8006aac:	4770      	bx	lr
 8006aae:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab2:	e7f9      	b.n	8006aa8 <memset+0x4>

08006ab4 <_sbrk_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	4d06      	ldr	r5, [pc, #24]	; (8006ad0 <_sbrk_r+0x1c>)
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4608      	mov	r0, r1
 8006abe:	602b      	str	r3, [r5, #0]
 8006ac0:	f7fa feda 	bl	8001878 <_sbrk>
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d102      	bne.n	8006ace <_sbrk_r+0x1a>
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	b103      	cbz	r3, 8006ace <_sbrk_r+0x1a>
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	20000648 	.word	0x20000648

08006ad4 <__errno>:
 8006ad4:	4b01      	ldr	r3, [pc, #4]	; (8006adc <__errno+0x8>)
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	2000005c 	.word	0x2000005c

08006ae0 <__libc_init_array>:
 8006ae0:	b570      	push	{r4, r5, r6, lr}
 8006ae2:	4d0d      	ldr	r5, [pc, #52]	; (8006b18 <__libc_init_array+0x38>)
 8006ae4:	4c0d      	ldr	r4, [pc, #52]	; (8006b1c <__libc_init_array+0x3c>)
 8006ae6:	1b64      	subs	r4, r4, r5
 8006ae8:	10a4      	asrs	r4, r4, #2
 8006aea:	2600      	movs	r6, #0
 8006aec:	42a6      	cmp	r6, r4
 8006aee:	d109      	bne.n	8006b04 <__libc_init_array+0x24>
 8006af0:	4d0b      	ldr	r5, [pc, #44]	; (8006b20 <__libc_init_array+0x40>)
 8006af2:	4c0c      	ldr	r4, [pc, #48]	; (8006b24 <__libc_init_array+0x44>)
 8006af4:	f000 f81a 	bl	8006b2c <_init>
 8006af8:	1b64      	subs	r4, r4, r5
 8006afa:	10a4      	asrs	r4, r4, #2
 8006afc:	2600      	movs	r6, #0
 8006afe:	42a6      	cmp	r6, r4
 8006b00:	d105      	bne.n	8006b0e <__libc_init_array+0x2e>
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b08:	4798      	blx	r3
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	e7ee      	b.n	8006aec <__libc_init_array+0xc>
 8006b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b12:	4798      	blx	r3
 8006b14:	3601      	adds	r6, #1
 8006b16:	e7f2      	b.n	8006afe <__libc_init_array+0x1e>
 8006b18:	08006b90 	.word	0x08006b90
 8006b1c:	08006b90 	.word	0x08006b90
 8006b20:	08006b90 	.word	0x08006b90
 8006b24:	08006b94 	.word	0x08006b94

08006b28 <__retarget_lock_acquire_recursive>:
 8006b28:	4770      	bx	lr

08006b2a <__retarget_lock_release_recursive>:
 8006b2a:	4770      	bx	lr

08006b2c <_init>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	bf00      	nop
 8006b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b32:	bc08      	pop	{r3}
 8006b34:	469e      	mov	lr, r3
 8006b36:	4770      	bx	lr

08006b38 <_fini>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr
