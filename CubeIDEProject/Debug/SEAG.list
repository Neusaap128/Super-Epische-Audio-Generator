
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f74  08005f74  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f7c  08005f7c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f7c  08005f7c  00015f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  20000060  08005fe4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  08005fe4  00020848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170df  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e80  00000000  00000000  000371b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0003a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001066  00000000  00000000  0003b520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f499  00000000  00000000  0003c586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6a3  00000000  00000000  0005ba1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae16  00000000  00000000  000760c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d44  00000000  00000000  00140ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00146c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f18 	.word	0x08005f18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08005f18 	.word	0x08005f18

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]


	ResetCodec(hi2c1);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f87d 	bl	8000df8 <ResetCodec>

	HAL_Delay(25);
 8000cfe:	2019      	movs	r0, #25
 8000d00:	f000 fee4 	bl	8001acc <HAL_Delay>


	// -----------

	//Connect Linput1 to inverting input of left input PGA, 0db gain, connecting Left input PGA to input booster
	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000d04:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d08:	2120      	movs	r1, #32
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f000 f881 	bl	8000e12 <WriteCodecRegister>

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000d10:	f240 1279 	movw	r2, #377	; 0x179
 8000d14:	2102      	movs	r1, #2
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f87b 	bl	8000e12 <WriteCodecRegister>

	//un mute left channel
	WriteCodecRegister(hi2c1, 0x00, 0b100000000);
 8000d1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d20:	2100      	movs	r1, #0
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f875 	bl	8000e12 <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 0b100000000);
 8000d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f86f 	bl	8000e12 <WriteCodecRegister>

	//Enable LB2LO
	WriteCodecRegister(hi2c1, 0x2D, 0b101010000);
 8000d34:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000d38:	212d      	movs	r1, #45	; 0x2d
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f869 	bl	8000e12 <WriteCodecRegister>


	// ----- Power Management -----

	// outdated R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b111111100);
 8000d40:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8000d44:	2119      	movs	r1, #25
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f863 	bl	8000e12 <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b111010000);
 8000d4c:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000d50:	211a      	movs	r1, #26
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f85d 	bl	8000e12 <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000111100);
 8000d58:	223c      	movs	r2, #60	; 0x3c
 8000d5a:	212f      	movs	r1, #47	; 0x2f
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f858 	bl	8000e12 <WriteCodecRegister>

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b100000000);
 8000d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d66:	2102      	movs	r1, #2
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f852 	bl	8000e12 <WriteCodecRegister>



	// Disable master mode codec
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 8000d6e:	220a      	movs	r2, #10
 8000d70:	2107      	movs	r1, #7
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f84d 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000d78:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f847 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x21, 0b100001000);
 8000d84:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000d88:	2121      	movs	r1, #33	; 0x21
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f841 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x2D, 0b000000000);
 8000d90:	2200      	movs	r2, #0
 8000d92:	212d      	movs	r1, #45	; 0x2d
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f83c 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x2E, 0b000000000);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	212e      	movs	r1, #46	; 0x2e
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f837 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x22, 0b101010000);
 8000da4:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000da8:	2122      	movs	r1, #34	; 0x22
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f831 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x25, 0b101010000);
 8000db0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000db4:	2125      	movs	r1, #37	; 0x25
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f000 f82b 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x34, 0b000000000);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2134      	movs	r1, #52	; 0x34
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f826 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x04, 0b000000000);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2104      	movs	r1, #4
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f821 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x08, 0b111000000);
 8000dd0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f81b 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x05, 0b000000000);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2105      	movs	r1, #5
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f816 	bl	8000e12 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x09, 0b000000001);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2109      	movs	r1, #9
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f811 	bl	8000e12 <WriteCodecRegister>
	HAL_I2C_Master_Transmit(hi2c1, codecAddr, buf, 1 , HAL_MAX_DELAY);

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/

}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 8000e00:	22ff      	movs	r2, #255	; 0xff
 8000e02:	210f      	movs	r1, #15
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f804 	bl	8000e12 <WriteCodecRegister>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint16_t reg, uint16_t pData){
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b088      	sub	sp, #32
 8000e16:	af04      	add	r7, sp, #16
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	803b      	strh	r3, [r7, #0]
	uint8_t lowByte  = (uint8_t)(pData & 0xFF);
 8000e22:	883b      	ldrh	r3, [r7, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	73fb      	strb	r3, [r7, #15]
	uint8_t highByte = (uint8_t)(pData >> 8);
 8000e28:	883b      	ldrh	r3, [r7, #0]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &highByte, 1, HAL_MAX_DELAY);
 8000e32:	2334      	movs	r3, #52	; 0x34
 8000e34:	b299      	uxth	r1, r3
 8000e36:	887a      	ldrh	r2, [r7, #2]
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	f107 030e 	add.w	r3, r7, #14
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f001 fc32 	bl	80026b4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 8000e50:	2334      	movs	r3, #52	; 0x34
 8000e52:	b299      	uxth	r1, r3
 8000e54:	887a      	ldrh	r2, [r7, #2]
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	f107 030f 	add.w	r3, r7, #15
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f001 fc23 	bl	80026b4 <HAL_I2C_Mem_Write>

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000e7c:	2340      	movs	r3, #64	; 0x40
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f004 ff51 	bl	8005d28 <malloc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <InitDSP+0x2c>)
 8000e8c:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f004 ff48 	bl	8005d28 <malloc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <InitDSP+0x30>)
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000007c 	.word	0x2000007c
 8000ea8:	20000080 	.word	0x20000080

08000eac <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const SampleType* input, SampleType* output, size_t bufferLength) {
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e002      	b.n	8000ec4 <processBuffer+0x18>
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f8      	bhi.n	8000ebe <processBuffer+0x12>
        //output[i] = i;
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	371c      	adds	r7, #28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_I2S_RxHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000ee8:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_I2S_RxHalfCpltCallback+0x40>)
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000eee:	601a      	str	r2, [r3, #0]

	processBuffer(adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000ef0:	2240      	movs	r2, #64	; 0x40
 8000ef2:	490b      	ldr	r1, [pc, #44]	; (8000f20 <HAL_I2S_RxHalfCpltCallback+0x44>)
 8000ef4:	4808      	ldr	r0, [pc, #32]	; (8000f18 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000ef6:	f7ff ffd9 	bl	8000eac <processBuffer>

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f001 fb21 	bl	8002548 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_I2S_RxHalfCpltCallback+0x48>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]

}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200006f0 	.word	0x200006f0
 8000f18:	200002f0 	.word	0x200002f0
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	200004f0 	.word	0x200004f0
 8000f24:	200006f4 	.word	0x200006f4

08000f28 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_I2S_RxCpltCallback+0x3c>)
 8000f32:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_I2S_RxCpltCallback+0x40>)
 8000f34:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_I2S_RxCpltCallback+0x44>)
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_I2S_RxCpltCallback+0x48>)
 8000f3a:	601a      	str	r2, [r3, #0]

	processBuffer((SampleType*)(adcBuf+AUDIO_BUFFER_SIZE/2), (SampleType*)(dacBuf+AUDIO_BUFFER_SIZE/2), AUDIO_BUFFER_SIZE/2);
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_I2S_RxCpltCallback+0x40>)
 8000f3e:	490c      	ldr	r1, [pc, #48]	; (8000f70 <HAL_I2S_RxCpltCallback+0x48>)
 8000f40:	2240      	movs	r2, #64	; 0x40
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ffb2 	bl	8000eac <processBuffer>
	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000f48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f001 fafa 	bl	8002548 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_I2S_RxCpltCallback+0x4c>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200006f0 	.word	0x200006f0
 8000f68:	200003f0 	.word	0x200003f0
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	200005f0 	.word	0x200005f0
 8000f74:	200006f4 	.word	0x200006f4

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fd34 	bl	80019ea <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f843 	bl	800100c <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f86:	b662      	cpsie	i
}
 8000f88:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8a:	f000 f9e9 	bl	8001360 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f8e:	f000 f9b5 	bl	80012fc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000f92:	f000 f915 	bl	80011c0 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8000f96:	f000 f95f 	bl	8001258 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000f9a:	f000 f883 	bl	80010a4 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000f9e:	f000 f8c1 	bl	8001124 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000fa2:	f000 f8e7 	bl	8001174 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DMA_Start(&hdma_spi2_rx, (uint32_t)hi2s2.pRxBuffPtr, (uint32_t)adcBuf, AUDIO_BUFFER_SIZE);


  HAL_TIM_Base_Start(&htim6);
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <main+0x7c>)
 8000fa8:	f003 ff00 	bl	8004dac <HAL_TIM_Base_Start>

  InitDSP();
 8000fac:	f7ff ff64 	bl	8000e78 <InitDSP>

  CodecInit(&hi2c1);
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <main+0x80>)
 8000fb2:	f7ff fe9d 	bl	8000cf0 <CodecInit>

  for(int i = 0; i < AUDIO_BUFFER_SIZE;i++){
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	e007      	b.n	8000fcc <main+0x54>
	  dacBuf[i] = i;
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	490f      	ldr	r1, [pc, #60]	; (8000ffc <main+0x84>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < AUDIO_BUFFER_SIZE;i++){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd0:	ddf4      	ble.n	8000fbc <main+0x44>
  }

  HAL_Delay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 fd7a 	bl	8001acc <HAL_Delay>

  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*)&adcBuf[0], AUDIO_BUFFER_SIZE);
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	4909      	ldr	r1, [pc, #36]	; (8001000 <main+0x88>)
 8000fdc:	4809      	ldr	r0, [pc, #36]	; (8001004 <main+0x8c>)
 8000fde:	f002 f90b 	bl	80031f8 <HAL_I2S_Receive_DMA>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)&dacBuf[0], AUDIO_BUFFER_SIZE);
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	4905      	ldr	r1, [pc, #20]	; (8000ffc <main+0x84>)
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <main+0x90>)
 8000fe8:	f002 f85e 	bl	80030a8 <HAL_I2S_Transmit_DMA>
      //float sinVal = (sin( (float)timerValue/3863*2*M_PI)+1)/2 *3.3;
      //uint32_t dacOutput = (uint32_t)(sinVal*4096)/3.3;

      //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
      //DAC1->DHR12R1 = dacOutput;
	  uint16_t data = 0x55;
 8000fec:	2355      	movs	r3, #85	; 0x55
 8000fee:	807b      	strh	r3, [r7, #2]
  {
 8000ff0:	e7fc      	b.n	8000fec <main+0x74>
 8000ff2:	bf00      	nop
 8000ff4:	200002a4 	.word	0x200002a4
 8000ff8:	20000084 	.word	0x20000084
 8000ffc:	200004f0 	.word	0x200004f0
 8001000:	200002f0 	.word	0x200002f0
 8001004:	200000d8 	.word	0x200000d8
 8001008:	20000114 	.word	0x20000114

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	2238      	movs	r2, #56	; 0x38
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f004 ff38 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800102e:	2000      	movs	r0, #0
 8001030:	f002 fa40 	bl	80034b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103e:	2340      	movs	r3, #64	; 0x40
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800104a:	2304      	movs	r3, #4
 800104c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800104e:	2355      	movs	r3, #85	; 0x55
 8001050:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0318 	add.w	r3, r7, #24
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fada 	bl	800361c <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800106e:	f000 f9f5 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2303      	movs	r3, #3
 8001078:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2104      	movs	r1, #4
 800108a:	4618      	mov	r0, r3
 800108c:	f002 fdd8 	bl	8003c40 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001096:	f000 f9e1 	bl	800145c <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3750      	adds	r7, #80	; 0x50
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_I2C1_Init+0x74>)
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <MX_I2C1_Init+0x78>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_I2C1_Init+0x74>)
 80010b0:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <MX_I2C1_Init+0x7c>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_I2C1_Init+0x74>)
 80010bc:	2201      	movs	r2, #1
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <MX_I2C1_Init+0x74>)
 80010e0:	f001 fa4c 	bl	800257c <HAL_I2C_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ea:	f000 f9b7 	bl	800145c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <MX_I2C1_Init+0x74>)
 80010f2:	f001 fe61 	bl	8002db8 <HAL_I2CEx_ConfigAnalogFilter>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010fc:	f000 f9ae 	bl	800145c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_I2C1_Init+0x74>)
 8001104:	f001 fea3 	bl	8002e4e <HAL_I2CEx_ConfigDigitalFilter>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800110e:	f000 f9a5 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000084 	.word	0x20000084
 800111c:	40005400 	.word	0x40005400
 8001120:	30a0a7fb 	.word	0x30a0a7fb

08001124 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_I2S2_Init+0x48>)
 800112a:	4a11      	ldr	r2, [pc, #68]	; (8001170 <MX_I2S2_Init+0x4c>)
 800112c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2S2_Init+0x48>)
 8001130:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001134:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MX_I2S2_Init+0x48>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_I2S2_Init+0x48>)
 800113e:	2203      	movs	r2, #3
 8001140:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <MX_I2S2_Init+0x48>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_I2S2_Init+0x48>)
 800114a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800114e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_I2S2_Init+0x48>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_I2S2_Init+0x48>)
 8001158:	f001 fec6 	bl	8002ee8 <HAL_I2S_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8001162:	f000 f97b 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000d8 	.word	0x200000d8
 8001170:	40003800 	.word	0x40003800

08001174 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2S3_Init+0x44>)
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <MX_I2S3_Init+0x48>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_TX;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_I2S3_Init+0x44>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_I2S3_Init+0x44>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_I2S3_Init+0x44>)
 800118c:	2203      	movs	r2, #3
 800118e:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_I2S3_Init+0x44>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_I2S3_Init+0x44>)
 8001198:	f64a 4244 	movw	r2, #44100	; 0xac44
 800119c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_I2S3_Init+0x44>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_I2S3_Init+0x44>)
 80011a6:	f001 fe9f 	bl	8002ee8 <HAL_I2S_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2S3_Init+0x40>
  {
    Error_Handler();
 80011b0:	f000 f954 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000114 	.word	0x20000114
 80011bc:	40003c00 	.word	0x40003c00

080011c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011c6:	4a22      	ldr	r2, [pc, #136]	; (8001250 <MX_LPUART1_UART_Init+0x90>)
 80011c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001202:	4812      	ldr	r0, [pc, #72]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 8001204:	f003 ff52 	bl	80050ac <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f925 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001212:	2100      	movs	r1, #0
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 8001216:	f004 fcbd 	bl	8005b94 <HAL_UARTEx_SetTxFifoThreshold>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001220:	f000 f91c 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 8001228:	f004 fcf2 	bl	8005c10 <HAL_UARTEx_SetRxFifoThreshold>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001232:	f000 f913 	bl	800145c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_LPUART1_UART_Init+0x8c>)
 8001238:	f004 fc73 	bl	8005b22 <HAL_UARTEx_DisableFifoMode>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001242:	f000 f90b 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000210 	.word	0x20000210
 8001250:	40008000 	.word	0x40008000
 8001254:	00000000 	.word	0x00000000

08001258 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_TIM6_Init+0x98>)
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <MX_TIM6_Init+0x9c>)
 800126c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <MX_TIM6_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_TIM6_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_TIM6_Init+0x98>)
 800127c:	f640 7218 	movw	r2, #3864	; 0xf18
 8001280:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_TIM6_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001288:	4819      	ldr	r0, [pc, #100]	; (80012f0 <MX_TIM6_Init+0x98>)
 800128a:	f003 fd37 	bl	8004cfc <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001294:	f000 f8e2 	bl	800145c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001298:	2320      	movs	r3, #32
 800129a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <MX_TIM6_Init+0x98>)
 80012a6:	f003 fe7f 	bl	8004fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80012b0:	f000 f8d4 	bl	800145c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_TIM6_Init+0xa0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8ff 	bl	80004bc <__aeabi_i2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	a109      	add	r1, pc, #36	; (adr r1, 80012e8 <MX_TIM6_Init+0x90>)
 80012c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c8:	f7ff fa8c 	bl	80007e4 <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fb6e 	bl	80009b4 <__aeabi_d2uiz>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <MX_TIM6_Init+0x98>)
 80012dc:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	00000000 	.word	0x00000000
 80012ec:	41a443fd 	.word	0x41a443fd
 80012f0:	200002a4 	.word	0x200002a4
 80012f4:	40001000 	.word	0x40001000
 80012f8:	08005f30 	.word	0x08005f30

080012fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_DMA_Init+0x60>)
 8001304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <MX_DMA_Init+0x60>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6493      	str	r3, [r2, #72]	; 0x48
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_DMA_Init+0x60>)
 8001310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_DMA_Init+0x60>)
 800131c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <MX_DMA_Init+0x60>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6493      	str	r3, [r2, #72]	; 0x48
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_DMA_Init+0x60>)
 8001328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	200d      	movs	r0, #13
 8001338:	f000 fcc5 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800133c:	200d      	movs	r0, #13
 800133e:	f000 fcdc 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	200e      	movs	r0, #14
 8001348:	f000 fcbd 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800134c:	200e      	movs	r0, #14
 800134e:	f000 fcd4 	bl	8001cfa <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <MX_GPIO_Init+0xf0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a35      	ldr	r2, [pc, #212]	; (8001450 <MX_GPIO_Init+0xf0>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <MX_GPIO_Init+0xf0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_GPIO_Init+0xf0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <MX_GPIO_Init+0xf0>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <MX_GPIO_Init+0xf0>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_GPIO_Init+0xf0>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a29      	ldr	r2, [pc, #164]	; (8001450 <MX_GPIO_Init+0xf0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <MX_GPIO_Init+0xf0>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <MX_GPIO_Init+0xf0>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <MX_GPIO_Init+0xf0>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <MX_GPIO_Init+0xf0>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f001 f89a 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2107      	movs	r1, #7
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <MX_GPIO_Init+0xf4>)
 80013ea:	f001 f895 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4814      	ldr	r0, [pc, #80]	; (8001458 <MX_GPIO_Init+0xf8>)
 8001406:	f000 ff05 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 800140a:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f000 fef5 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShiftRegClk_Pin ShiftRegData_Pin ShiftRegEn_Pin */
  GPIO_InitStruct.Pin = ShiftRegClk_Pin|ShiftRegData_Pin|ShiftRegEn_Pin;
 800142a:	2307      	movs	r3, #7
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_GPIO_Init+0xf4>)
 8001442:	f000 fee7 	bl	8002214 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	; 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	48000400 	.word	0x48000400
 8001458:	48000800 	.word	0x48000800

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_MspInit+0x44>)
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_MspInit+0x44>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6613      	str	r3, [r2, #96]	; 0x60
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_MspInit+0x44>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_MspInit+0x44>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_MspInit+0x44>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6593      	str	r3, [r2, #88]	; 0x58
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_MspInit+0x44>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800149e:	f002 f8ad 	bl	80035fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b09a      	sub	sp, #104	; 0x68
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2244      	movs	r2, #68	; 0x44
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 fcdd 	bl	8005e90 <memset>
  if(hi2c->Instance==I2C1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <HAL_I2C_MspInit+0xa8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d136      	bne.n	800154e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014e0:	2340      	movs	r3, #64	; 0x40
 80014e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fdc3 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014f8:	f7ff ffb0 	bl	800145c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_I2C_MspInit+0xac>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	4a16      	ldr	r2, [pc, #88]	; (800155c <HAL_I2C_MspInit+0xac>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_I2C_MspInit+0xac>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001514:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001518:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001526:	2304      	movs	r3, #4
 8001528:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800152e:	4619      	mov	r1, r3
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <HAL_I2C_MspInit+0xb0>)
 8001532:	f000 fe6f 	bl	8002214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_I2C_MspInit+0xac>)
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_I2C_MspInit+0xac>)
 800153c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_I2C_MspInit+0xac>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3768      	adds	r7, #104	; 0x68
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40005400 	.word	0x40005400
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400

08001564 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b09e      	sub	sp, #120	; 0x78
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	2244      	movs	r2, #68	; 0x44
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fc83 	bl	8005e90 <memset>
  if(hi2s->Instance==SPI2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_I2S_MspInit+0x214>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d164      	bne.n	800165e <HAL_I2S_MspInit+0xfa>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001598:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 800159a:	2300      	movs	r3, #0
 800159c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fd68 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80015ae:	f7ff ff55 	bl	800145c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015b2:	4b72      	ldr	r3, [pc, #456]	; (800177c <HAL_I2S_MspInit+0x218>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	4a71      	ldr	r2, [pc, #452]	; (800177c <HAL_I2S_MspInit+0x218>)
 80015b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
 80015be:	4b6f      	ldr	r3, [pc, #444]	; (800177c <HAL_I2S_MspInit+0x218>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b6c      	ldr	r3, [pc, #432]	; (800177c <HAL_I2S_MspInit+0x218>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a6b      	ldr	r2, [pc, #428]	; (800177c <HAL_I2S_MspInit+0x218>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b69      	ldr	r3, [pc, #420]	; (800177c <HAL_I2S_MspInit+0x218>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80015e2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80015e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f4:	2305      	movs	r3, #5
 80015f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015fc:	4619      	mov	r1, r3
 80015fe:	4860      	ldr	r0, [pc, #384]	; (8001780 <HAL_I2S_MspInit+0x21c>)
 8001600:	f000 fe08 	bl	8002214 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 8001604:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001606:	4a60      	ldr	r2, [pc, #384]	; (8001788 <HAL_I2S_MspInit+0x224>)
 8001608:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800160a:	4b5e      	ldr	r3, [pc, #376]	; (8001784 <HAL_I2S_MspInit+0x220>)
 800160c:	220c      	movs	r2, #12
 800160e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001610:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001616:	4b5b      	ldr	r3, [pc, #364]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800161c:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_I2S_MspInit+0x220>)
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001622:	4b58      	ldr	r3, [pc, #352]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001628:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800162a:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_I2S_MspInit+0x220>)
 800162c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001630:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001632:	4b54      	ldr	r3, [pc, #336]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001634:	2220      	movs	r2, #32
 8001636:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001638:	4b52      	ldr	r3, [pc, #328]	; (8001784 <HAL_I2S_MspInit+0x220>)
 800163a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800163e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001640:	4850      	ldr	r0, [pc, #320]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001642:	f000 fb75 	bl	8001d30 <HAL_DMA_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_I2S_MspInit+0xec>
    {
      Error_Handler();
 800164c:	f7ff ff06 	bl	800145c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
 8001656:	4a4b      	ldr	r2, [pc, #300]	; (8001784 <HAL_I2S_MspInit+0x220>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800165c:	e087      	b.n	800176e <HAL_I2S_MspInit+0x20a>
  else if(hi2s->Instance==SPI3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a4a      	ldr	r2, [pc, #296]	; (800178c <HAL_I2S_MspInit+0x228>)
 8001664:	4293      	cmp	r3, r2
 8001666:	f040 8082 	bne.w	800176e <HAL_I2S_MspInit+0x20a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800166a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800166e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 8001670:	2300      	movs	r3, #0
 8001672:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fcfd 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_I2S_MspInit+0x124>
      Error_Handler();
 8001684:	f7ff feea 	bl	800145c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001688:	4b3c      	ldr	r3, [pc, #240]	; (800177c <HAL_I2S_MspInit+0x218>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	4a3b      	ldr	r2, [pc, #236]	; (800177c <HAL_I2S_MspInit+0x218>)
 800168e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001692:	6593      	str	r3, [r2, #88]	; 0x58
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_I2S_MspInit+0x218>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_I2S_MspInit+0x218>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	4a35      	ldr	r2, [pc, #212]	; (800177c <HAL_I2S_MspInit+0x218>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_I2S_MspInit+0x218>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_I2S_MspInit+0x218>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_I2S_MspInit+0x218>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_I2S_MspInit+0x218>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016e2:	2306      	movs	r3, #6
 80016e4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f000 fd90 	bl	8002214 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80016f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016f8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001706:	2306      	movs	r3, #6
 8001708:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800170e:	4619      	mov	r1, r3
 8001710:	481f      	ldr	r0, [pc, #124]	; (8001790 <HAL_I2S_MspInit+0x22c>)
 8001712:	f000 fd7f 	bl	8002214 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Channel4;
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_I2S_MspInit+0x230>)
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <HAL_I2S_MspInit+0x234>)
 800171a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800171c:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_I2S_MspInit+0x230>)
 800171e:	220f      	movs	r2, #15
 8001720:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_I2S_MspInit+0x230>)
 8001724:	2210      	movs	r2, #16
 8001726:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_I2S_MspInit+0x230>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_I2S_MspInit+0x230>)
 8001730:	2280      	movs	r2, #128	; 0x80
 8001732:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_I2S_MspInit+0x230>)
 8001736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_I2S_MspInit+0x230>)
 800173e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001742:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_I2S_MspInit+0x230>)
 8001746:	2220      	movs	r2, #32
 8001748:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_I2S_MspInit+0x230>)
 800174c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001750:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001752:	4810      	ldr	r0, [pc, #64]	; (8001794 <HAL_I2S_MspInit+0x230>)
 8001754:	f000 faec 	bl	8001d30 <HAL_DMA_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2S_MspInit+0x1fe>
      Error_Handler();
 800175e:	f7ff fe7d 	bl	800145c <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_I2S_MspInit+0x230>)
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_I2S_MspInit+0x230>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800176e:	bf00      	nop
 8001770:	3778      	adds	r7, #120	; 0x78
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40003800 	.word	0x40003800
 800177c:	40021000 	.word	0x40021000
 8001780:	48000400 	.word	0x48000400
 8001784:	20000150 	.word	0x20000150
 8001788:	40020030 	.word	0x40020030
 800178c:	40003c00 	.word	0x40003c00
 8001790:	48000800 	.word	0x48000800
 8001794:	200001b0 	.word	0x200001b0
 8001798:	40020044 	.word	0x40020044

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b09a      	sub	sp, #104	; 0x68
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	2244      	movs	r2, #68	; 0x44
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f004 fb67 	bl	8005e90 <memset>
  if(huart->Instance==LPUART1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <HAL_UART_MspInit+0xa8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d136      	bne.n	800183a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017cc:	2320      	movs	r3, #32
 80017ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fc4d 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e4:	f7ff fe3a 	bl	800145c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_UART_MspInit+0xac>)
 80017ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <HAL_UART_MspInit+0xac>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_UART_MspInit+0xac>)
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_UART_MspInit+0xac>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_UART_MspInit+0xac>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_UART_MspInit+0xac>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001818:	230c      	movs	r3, #12
 800181a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001828:	230c      	movs	r3, #12
 800182a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f000 fced 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3768      	adds	r7, #104	; 0x68
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40008000 	.word	0x40008000
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_TIM_Base_MspInit+0x38>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10b      	bne.n	8001876 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_TIM_Base_MspInit+0x3c>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_TIM_Base_MspInit+0x3c>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	6593      	str	r3, [r2, #88]	; 0x58
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <HAL_TIM_Base_MspInit+0x3c>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40001000 	.word	0x40001000
 8001888:	40021000 	.word	0x40021000

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d8:	f000 f8da 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <DMA1_Channel3_IRQHandler+0x10>)
 80018e6:	f000 fb46 	bl	8001f76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000150 	.word	0x20000150

080018f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <DMA1_Channel4_IRQHandler+0x10>)
 80018fa:	f000 fb3c 	bl	8001f76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001b0 	.word	0x200001b0

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f004 fac2 	bl	8005ec0 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20008000 	.word	0x20008000
 8001968:	00000400 	.word	0x00000400
 800196c:	200006f8 	.word	0x200006f8
 8001970:	20000848 	.word	0x20000848

08001974 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800199a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800199c:	f7ff ffea 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019a2:	490d      	ldr	r1, [pc, #52]	; (80019d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019a4:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <LoopForever+0xe>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019a8:	e002      	b.n	80019b0 <LoopCopyDataInit>

080019aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ae:	3304      	adds	r3, #4

080019b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b4:	d3f9      	bcc.n	80019aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019b8:	4c0a      	ldr	r4, [pc, #40]	; (80019e4 <LoopForever+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019bc:	e001      	b.n	80019c2 <LoopFillZerobss>

080019be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c0:	3204      	adds	r2, #4

080019c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c4:	d3fb      	bcc.n	80019be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80019c6:	f004 fa81 	bl	8005ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ca:	f7ff fad5 	bl	8000f78 <main>

080019ce <LoopForever>:

LoopForever:
    b LoopForever
 80019ce:	e7fe      	b.n	80019ce <LoopForever>
  ldr   r0, =_estack
 80019d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80019d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80019dc:	08005f84 	.word	0x08005f84
  ldr r2, =_sbss
 80019e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80019e4:	20000848 	.word	0x20000848

080019e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019e8:	e7fe      	b.n	80019e8 <ADC1_2_IRQHandler>

080019ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f95b 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f80e 	bl	8001a1c <HAL_InitTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e001      	b.n	8001a10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a0c:	f7ff fd2c 	bl	8001468 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a10:	79fb      	ldrb	r3, [r7, #7]

}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_InitTick+0x68>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d022      	beq.n	8001a76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_InitTick+0x6c>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_InitTick+0x68>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f966 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10f      	bne.n	8001a70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0f      	cmp	r3, #15
 8001a54:	d809      	bhi.n	8001a6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a56:	2200      	movs	r2, #0
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5e:	f000 f932 	bl	8001cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_InitTick+0x70>)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e007      	b.n	8001a7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e004      	b.n	8001a7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	20000008 	.word	0x20000008

08001a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_IncTick+0x1c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_IncTick+0x1c>)
 8001aa0:	6013      	str	r3, [r2, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	200006fc 	.word	0x200006fc
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	200006fc 	.word	0x200006fc

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff ffee 	bl	8001ab4 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d004      	beq.n	8001af0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_Delay+0x40>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af0:	bf00      	nop
 8001af2:	f7ff ffdf 	bl	8001ab4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d8f7      	bhi.n	8001af2 <HAL_Delay+0x26>
  {
  }
}
 8001b02:	bf00      	nop
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000000c 	.word	0x2000000c

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff40 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff90 	bl	8001c04 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5f 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff33 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa4 	bl	8001c6c <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e08d      	b.n	8001e5e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b47      	ldr	r3, [pc, #284]	; (8001e68 <HAL_DMA_Init+0x138>)
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d80f      	bhi.n	8001d6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <HAL_DMA_Init+0x13c>)
 8001d56:	4413      	add	r3, r2
 8001d58:	4a45      	ldr	r2, [pc, #276]	; (8001e70 <HAL_DMA_Init+0x140>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	091b      	lsrs	r3, r3, #4
 8001d60:	009a      	lsls	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a42      	ldr	r2, [pc, #264]	; (8001e74 <HAL_DMA_Init+0x144>)
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6c:	e00e      	b.n	8001d8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_DMA_Init+0x148>)
 8001d76:	4413      	add	r3, r2
 8001d78:	4a3d      	ldr	r2, [pc, #244]	; (8001e70 <HAL_DMA_Init+0x140>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	009a      	lsls	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a3c      	ldr	r2, [pc, #240]	; (8001e7c <HAL_DMA_Init+0x14c>)
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f9b6 	bl	8002150 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dec:	d102      	bne.n	8001df4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e08:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <HAL_DMA_Init+0x104>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d80c      	bhi.n	8001e34 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f9d6 	bl	80021cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e008      	b.n	8001e46 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40020407 	.word	0x40020407
 8001e6c:	bffdfff8 	.word	0xbffdfff8
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	40020000 	.word	0x40020000
 8001e78:	bffdfbf8 	.word	0xbffdfbf8
 8001e7c:	40020400 	.word	0x40020400

08001e80 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_DMA_Start_IT+0x20>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e066      	b.n	8001f6e <HAL_DMA_Start_IT+0xee>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d155      	bne.n	8001f60 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f8fb 	bl	80020d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 020e 	orr.w	r2, r2, #14
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e00f      	b.n	8001f18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 020a 	orr.w	r2, r2, #10
 8001f16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f34:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f4c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e005      	b.n	8001f6c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2204      	movs	r2, #4
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d026      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x7a>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d021      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0204 	bic.w	r2, r2, #4
 8001fc8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f003 021f 	and.w	r2, r3, #31
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fdc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d071      	beq.n	80020ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fee:	e06c      	b.n	80020ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d02e      	beq.n	8002062 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d029      	beq.n	8002062 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 020a 	bic.w	r2, r2, #10
 800202a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	2102      	movs	r1, #2
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d038      	beq.n	80020ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002060:	e033      	b.n	80020ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2208      	movs	r2, #8
 800206c:	409a      	lsls	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d02a      	beq.n	80020cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d025      	beq.n	80020cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 020e 	bic.w	r2, r2, #14
 800208e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d004      	beq.n	80020cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
}
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f202 	lsl.w	r2, r1, r2
 8002110:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d108      	bne.n	8002134 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002132:	e007      	b.n	8002144 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	60da      	str	r2, [r3, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002160:	429a      	cmp	r2, r3
 8002162:	d802      	bhi.n	800216a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e001      	b.n	800216e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800216c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3b08      	subs	r3, #8
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800219a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40020407 	.word	0x40020407
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020820 	.word	0x40020820
 80021c4:	cccccccd 	.word	0xcccccccd
 80021c8:	40020880 	.word	0x40020880

080021cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	461a      	mov	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a08      	ldr	r2, [pc, #32]	; (8002210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2201      	movs	r2, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	1000823f 	.word	0x1000823f
 8002210:	40020940 	.word	0x40020940

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002222:	e15a      	b.n	80024da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 814c 	beq.w	80024d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0201 	and.w	r2, r3, #1
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	6939      	ldr	r1, [r7, #16]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a6 	beq.w	80024d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <HAL_GPIO_Init+0x2e4>)
 800238a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238c:	4a5a      	ldr	r2, [pc, #360]	; (80024f8 <HAL_GPIO_Init+0x2e4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6613      	str	r3, [r2, #96]	; 0x60
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <HAL_GPIO_Init+0x2e4>)
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	3302      	adds	r3, #2
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4013      	ands	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ca:	d01f      	beq.n	800240c <HAL_GPIO_Init+0x1f8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <HAL_GPIO_Init+0x2ec>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d019      	beq.n	8002408 <HAL_GPIO_Init+0x1f4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a4b      	ldr	r2, [pc, #300]	; (8002504 <HAL_GPIO_Init+0x2f0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d013      	beq.n	8002404 <HAL_GPIO_Init+0x1f0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a4a      	ldr	r2, [pc, #296]	; (8002508 <HAL_GPIO_Init+0x2f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00d      	beq.n	8002400 <HAL_GPIO_Init+0x1ec>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a49      	ldr	r2, [pc, #292]	; (800250c <HAL_GPIO_Init+0x2f8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <HAL_GPIO_Init+0x1e8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a48      	ldr	r2, [pc, #288]	; (8002510 <HAL_GPIO_Init+0x2fc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_GPIO_Init+0x1e4>
 80023f4:	2305      	movs	r3, #5
 80023f6:	e00a      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 80023f8:	2306      	movs	r3, #6
 80023fa:	e008      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e006      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002400:	2303      	movs	r3, #3
 8002402:	e004      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002404:	2302      	movs	r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_GPIO_Init+0x1fa>
 800240c:	2300      	movs	r3, #0
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	4093      	lsls	r3, r2
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241e:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_GPIO_Init+0x2e8>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800242c:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_GPIO_Init+0x300>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002450:	4a30      	ldr	r2, [pc, #192]	; (8002514 <HAL_GPIO_Init+0x300>)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <HAL_GPIO_Init+0x300>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800247a:	4a26      	ldr	r2, [pc, #152]	; (8002514 <HAL_GPIO_Init+0x300>)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_GPIO_Init+0x300>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_GPIO_Init+0x300>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_GPIO_Init+0x300>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_GPIO_Init+0x300>)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae9d 	bne.w	8002224 <HAL_GPIO_Init+0x10>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	48000400 	.word	0x48000400
 8002504:	48000800 	.word	0x48000800
 8002508:	48000c00 	.word	0x48000c00
 800250c:	48001000 	.word	0x48001000
 8002510:	48001400 	.word	0x48001400
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002534:	e002      	b.n	800253c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4013      	ands	r3, r2
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43d9      	mvns	r1, r3
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	400b      	ands	r3, r1
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e08d      	b.n	80026aa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe ff84 	bl	80014b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	; 0x24
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d107      	bne.n	80025f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e006      	b.n	8002604 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002602:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d108      	bne.n	800261e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	e007      	b.n	800262e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800262c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800263c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002640:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002650:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69d9      	ldr	r1, [r3, #28]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	4608      	mov	r0, r1
 80026be:	4611      	mov	r1, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4603      	mov	r3, r0
 80026c4:	817b      	strh	r3, [r7, #10]
 80026c6:	460b      	mov	r3, r1
 80026c8:	813b      	strh	r3, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 80f9 	bne.w	80028ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_I2C_Mem_Write+0x34>
 80026e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ed      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_I2C_Mem_Write+0x4e>
 80026fe:	2302      	movs	r3, #2
 8002700:	e0e6      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800270a:	f7ff f9d3 	bl	8001ab4 <HAL_GetTick>
 800270e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2319      	movs	r3, #25
 8002716:	2201      	movs	r2, #1
 8002718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f955 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0d1      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2221      	movs	r2, #33	; 0x21
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2240      	movs	r2, #64	; 0x40
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800274c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002754:	88f8      	ldrh	r0, [r7, #6]
 8002756:	893a      	ldrh	r2, [r7, #8]
 8002758:	8979      	ldrh	r1, [r7, #10]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4603      	mov	r3, r0
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f8b9 	bl	80028dc <I2C_RequestMemoryWrite>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0a9      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	2bff      	cmp	r3, #255	; 0xff
 8002784:	d90e      	bls.n	80027a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	22ff      	movs	r2, #255	; 0xff
 800278a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002790:	b2da      	uxtb	r2, r3
 8002792:	8979      	ldrh	r1, [r7, #10]
 8002794:	2300      	movs	r3, #0
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fad9 	bl	8002d54 <I2C_TransferConfig>
 80027a2:	e00f      	b.n	80027c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	8979      	ldrh	r1, [r7, #10]
 80027b6:	2300      	movs	r3, #0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fac8 	bl	8002d54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f958 	bl	8002a7e <I2C_WaitOnTXISFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e07b      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d034      	beq.n	800287c <HAL_I2C_Mem_Write+0x1c8>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	d130      	bne.n	800287c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	2200      	movs	r2, #0
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f8d1 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e04d      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	2bff      	cmp	r3, #255	; 0xff
 800283c:	d90e      	bls.n	800285c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	22ff      	movs	r2, #255	; 0xff
 8002842:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	b2da      	uxtb	r2, r3
 800284a:	8979      	ldrh	r1, [r7, #10]
 800284c:	2300      	movs	r3, #0
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fa7d 	bl	8002d54 <I2C_TransferConfig>
 800285a:	e00f      	b.n	800287c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286a:	b2da      	uxtb	r2, r3
 800286c:	8979      	ldrh	r1, [r7, #10]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fa6c 	bl	8002d54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d19e      	bne.n	80027c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f93e 	bl	8002b0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e01a      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2220      	movs	r2, #32
 80028a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_I2C_Mem_Write+0x224>)
 80028ae:	400b      	ands	r3, r1
 80028b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	fe00e800 	.word	0xfe00e800

080028dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	817b      	strh	r3, [r7, #10]
 80028ee:	460b      	mov	r3, r1
 80028f0:	813b      	strh	r3, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	8979      	ldrh	r1, [r7, #10]
 80028fc:	4b20      	ldr	r3, [pc, #128]	; (8002980 <I2C_RequestMemoryWrite+0xa4>)
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 fa25 	bl	8002d54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	69b9      	ldr	r1, [r7, #24]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f8b5 	bl	8002a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e02c      	b.n	8002978 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002924:	893b      	ldrh	r3, [r7, #8]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
 800292e:	e015      	b.n	800295c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002930:	893b      	ldrh	r3, [r7, #8]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b29b      	uxth	r3, r3
 8002936:	b2da      	uxtb	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f89b 	bl	8002a7e <I2C_WaitOnTXISFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e012      	b.n	8002978 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002952:	893b      	ldrh	r3, [r7, #8]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2200      	movs	r2, #0
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f830 	bl	80029cc <I2C_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	80002000 	.word	0x80002000

08002984 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d103      	bne.n	80029a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2200      	movs	r2, #0
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d007      	beq.n	80029c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	619a      	str	r2, [r3, #24]
  }
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029dc:	e03b      	b.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8d6 	bl	8002b94 <I2C_IsErrorOccurred>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e041      	b.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d02d      	beq.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff f85b 	bl	8001ab4 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d122      	bne.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d113      	bne.n	8002a56 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d0b4      	beq.n	80029de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a8a:	e033      	b.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f87f 	bl	8002b94 <I2C_IsErrorOccurred>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e031      	b.n	8002b04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa6:	d025      	beq.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa8:	f7ff f804 	bl	8001ab4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d302      	bcc.n	8002abe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11a      	bne.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d013      	beq.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e007      	b.n	8002b04 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d1c4      	bne.n	8002a8c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b18:	e02f      	b.n	8002b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f838 	bl	8002b94 <I2C_IsErrorOccurred>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e02d      	b.n	8002b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7fe ffc1 	bl	8001ab4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d302      	bcc.n	8002b44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11a      	bne.n	8002b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d013      	beq.n	8002b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f043 0220 	orr.w	r2, r3, #32
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e007      	b.n	8002b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d1c8      	bne.n	8002b1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d068      	beq.n	8002c92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc8:	e049      	b.n	8002c5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d045      	beq.n	8002c5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bd2:	f7fe ff6f 	bl	8001ab4 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <I2C_IsErrorOccurred+0x54>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d13a      	bne.n	8002c5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bfa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c0a:	d121      	bne.n	8002c50 <I2C_IsErrorOccurred+0xbc>
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c12:	d01d      	beq.n	8002c50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	2b20      	cmp	r3, #32
 8002c18:	d01a      	beq.n	8002c50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c2a:	f7fe ff43 	bl	8001ab4 <HAL_GetTick>
 8002c2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c30:	e00e      	b.n	8002c50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c32:	f7fe ff3f 	bl	8001ab4 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b19      	cmp	r3, #25
 8002c3e:	d907      	bls.n	8002c50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f043 0320 	orr.w	r3, r3, #32
 8002c46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c4e:	e006      	b.n	8002c5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d1e9      	bne.n	8002c32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d003      	beq.n	8002c74 <I2C_IsErrorOccurred+0xe0>
 8002c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0aa      	beq.n	8002bca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2220      	movs	r2, #32
 8002c82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f043 0308 	orr.w	r3, r3, #8
 8002ccc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f043 0302 	orr.w	r3, r3, #2
 8002cee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01c      	beq.n	8002d42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f7ff fe3b 	bl	8002984 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <I2C_IsErrorOccurred+0x1bc>)
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	fe00e800 	.word	0xfe00e800

08002d54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	4613      	mov	r3, r2
 8002d64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d6c:	7a7b      	ldrb	r3, [r7, #9]
 8002d6e:	041b      	lsls	r3, r3, #16
 8002d70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	0d5b      	lsrs	r3, r3, #21
 8002d8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d92:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <I2C_TransferConfig+0x60>)
 8002d94:	430b      	orrs	r3, r1
 8002d96:	43db      	mvns	r3, r3
 8002d98:	ea02 0103 	and.w	r1, r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	03ff63ff 	.word	0x03ff63ff

08002db8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d138      	bne.n	8002e40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e032      	b.n	8002e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	; 0x24
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0201 	bic.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d139      	bne.n	8002ed8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e033      	b.n	8002eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2224      	movs	r2, #36	; 0x24
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0201 	bic.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ea0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	e000      	b.n	8002eda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ed8:	2302      	movs	r3, #2
  }
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0d0      	b.n	800309c <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe fb28 	bl	8001564 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f2a:	f023 030f 	bic.w	r3, r3, #15
 8002f2e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2202      	movs	r2, #2
 8002f36:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d061      	beq.n	8003004 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f48:	2310      	movs	r3, #16
 8002f4a:	617b      	str	r3, [r7, #20]
 8002f4c:	e001      	b.n	8002f52 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d802      	bhi.n	8002f60 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f64:	f001 fa78 	bl	8004458 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f68:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f72:	d125      	bne.n	8002fc0 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	3305      	adds	r3, #5
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e01f      	b.n	8002fde <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	3305      	adds	r3, #5
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e00e      	b.n	8002fde <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	3305      	adds	r3, #5
 8002fdc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4a30      	ldr	r2, [pc, #192]	; (80030a4 <HAL_I2S_Init+0x1bc>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	e003      	b.n	800300c <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003004:	2302      	movs	r3, #2
 8003006:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d902      	bls.n	8003018 <HAL_I2S_Init+0x130>
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2bff      	cmp	r3, #255	; 0xff
 8003016:	d907      	bls.n	8003028 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	f043 0210 	orr.w	r2, r3, #16
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e039      	b.n	800309c <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	ea42 0103 	orr.w	r1, r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	430a      	orrs	r2, r1
 800303a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003046:	f023 030f 	bic.w	r3, r3, #15
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6851      	ldr	r1, [r2, #4]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	4311      	orrs	r1, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	68d2      	ldr	r2, [r2, #12]
 8003058:	4311      	orrs	r1, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6992      	ldr	r2, [r2, #24]
 800305e:	430a      	orrs	r2, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d003      	beq.n	800307c <HAL_I2S_Init+0x194>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2bb0      	cmp	r3, #176	; 0xb0
 800307a:	d107      	bne.n	800308c <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800308a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	cccccccd 	.word	0xcccccccd

080030a8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_I2S_Transmit_DMA+0x1a>
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e08e      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_I2S_Transmit_DMA+0x2e>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e086      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x13c>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d005      	beq.n	80030f6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
 80030f4:	e076      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2203      	movs	r2, #3
 80030fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d002      	beq.n	8003122 <HAL_I2S_Transmit_DMA+0x7a>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d10a      	bne.n	8003138 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	845a      	strh	r2, [r3, #34]	; 0x22
 8003136:	e005      	b.n	8003144 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	4a28      	ldr	r2, [pc, #160]	; (80031ec <HAL_I2S_Transmit_DMA+0x144>)
 800314a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_I2S_Transmit_DMA+0x148>)
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <HAL_I2S_Transmit_DMA+0x14c>)
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003164:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800316c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8c1b      	ldrh	r3, [r3, #32]
 8003172:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003174:	f7fe fe84 	bl	8001e80 <HAL_DMA_Start_IT>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00f      	beq.n	800319e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	f043 0208 	orr.w	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e022      	b.n	80031e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ba:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 0202 	orr.w	r2, r2, #2
 80031d8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	080033ef 	.word	0x080033ef
 80031f0:	080033ad 	.word	0x080033ad
 80031f4:	08003469 	.word	0x08003469

080031f8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_I2S_Receive_DMA+0x1a>
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0a1      	b.n	800335a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_I2S_Receive_DMA+0x2e>
 8003222:	2302      	movs	r3, #2
 8003224:	e099      	b.n	800335a <HAL_I2S_Receive_DMA+0x162>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d005      	beq.n	8003246 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
 8003244:	e089      	b.n	800335a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2204      	movs	r2, #4
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pRxBuffPtr = pData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d002      	beq.n	8003272 <HAL_I2S_Receive_DMA+0x7a>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b05      	cmp	r3, #5
 8003270:	d10a      	bne.n	8003288 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = (Size << 1U);
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003286:	e005      	b.n	8003294 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a32      	ldr	r2, [pc, #200]	; (8003364 <HAL_I2S_Receive_DMA+0x16c>)
 800329a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	4a31      	ldr	r2, [pc, #196]	; (8003368 <HAL_I2S_Receive_DMA+0x170>)
 80032a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	4a30      	ldr	r2, [pc, #192]	; (800336c <HAL_I2S_Receive_DMA+0x174>)
 80032aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ba:	d10a      	bne.n	80032d2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	330c      	adds	r3, #12
 80032dc:	4619      	mov	r1, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80032ea:	f7fe fdc9 	bl	8001e80 <HAL_DMA_Start_IT>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00f      	beq.n	8003314 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	f043 0208 	orr.w	r2, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e022      	b.n	800335a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69da      	ldr	r2, [r3, #28]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003330:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	0800344d 	.word	0x0800344d
 8003368:	0800340b 	.word	0x0800340b
 800336c:	08003469 	.word	0x08003469

08003370 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10e      	bne.n	80033e0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0202 	bic.w	r2, r2, #2
 80033d0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7ff ffcf 	bl	8003384 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff ffb7 	bl	8003370 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10e      	bne.n	800343e <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7fd fd72 	bl	8000f28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7fd fd3e 	bl	8000edc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0203 	bic.w	r2, r2, #3
 8003484:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	f043 0208 	orr.w	r2, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff ff76 	bl	8003398 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d141      	bne.n	8003546 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034c2:	4b4b      	ldr	r3, [pc, #300]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d131      	bne.n	8003534 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034d0:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d6:	4a46      	ldr	r2, [pc, #280]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e8:	4a41      	ldr	r2, [pc, #260]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2232      	movs	r2, #50	; 0x32
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	4a3f      	ldr	r2, [pc, #252]	; (80035f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	0c9b      	lsrs	r3, r3, #18
 8003502:	3301      	adds	r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003506:	e002      	b.n	800350e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b01      	subs	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800350e:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351a:	d102      	bne.n	8003522 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f2      	bne.n	8003508 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003522:	4b33      	ldr	r3, [pc, #204]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352e:	d158      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e057      	b.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003534:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353a:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003540:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003544:	e04d      	b.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d141      	bne.n	80035d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355a:	d131      	bne.n	80035c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800357a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800357c:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2232      	movs	r2, #50	; 0x32
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	0c9b      	lsrs	r3, r3, #18
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003592:	e002      	b.n	800359a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3b01      	subs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d102      	bne.n	80035ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f2      	bne.n	8003594 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d112      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e011      	b.n	80035e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035d0:	e007      	b.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40007000 	.word	0x40007000
 80035f4:	20000004 	.word	0x20000004
 80035f8:	431bde83 	.word	0x431bde83

080035fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a04      	ldr	r2, [pc, #16]	; (8003618 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360a:	6093      	str	r3, [r2, #8]
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40007000 	.word	0x40007000

0800361c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e2fe      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d075      	beq.n	8003726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363a:	4b97      	ldr	r3, [pc, #604]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003644:	4b94      	ldr	r3, [pc, #592]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d102      	bne.n	800365a <HAL_RCC_OscConfig+0x3e>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d002      	beq.n	8003660 <HAL_RCC_OscConfig+0x44>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b08      	cmp	r3, #8
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	4b8d      	ldr	r3, [pc, #564]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05b      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d157      	bne.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e2d9      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d106      	bne.n	8003690 <HAL_RCC_OscConfig+0x74>
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a84      	ldr	r2, [pc, #528]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x98>
 800369a:	4b7f      	ldr	r3, [pc, #508]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7e      	ldr	r2, [pc, #504]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b7c      	ldr	r3, [pc, #496]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7b      	ldr	r2, [pc, #492]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 80036b4:	4b78      	ldr	r3, [pc, #480]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a77      	ldr	r2, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b75      	ldr	r3, [pc, #468]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a74      	ldr	r2, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe f9ee 	bl	8001ab4 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036dc:	f7fe f9ea 	bl	8001ab4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e29e      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe f9da 	bl	8001ab4 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe f9d6 	bl	8001ab4 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e28a      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003716:	4b60      	ldr	r3, [pc, #384]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d075      	beq.n	800381e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003732:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800373c:	4b56      	ldr	r3, [pc, #344]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d102      	bne.n	8003752 <HAL_RCC_OscConfig+0x136>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d002      	beq.n	8003758 <HAL_RCC_OscConfig+0x13c>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d11f      	bne.n	8003798 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_OscConfig+0x154>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e25d      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003770:	4b49      	ldr	r3, [pc, #292]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	4946      	ldr	r1, [pc, #280]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003784:	4b45      	ldr	r3, [pc, #276]	; (800389c <HAL_RCC_OscConfig+0x280>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe f947 	bl	8001a1c <HAL_InitTick>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d043      	beq.n	800381c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e249      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a0:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a3c      	ldr	r2, [pc, #240]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80037a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f982 	bl	8001ab4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fe f97e 	bl	8001ab4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e232      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c6:	4b34      	ldr	r3, [pc, #208]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d2:	4b31      	ldr	r3, [pc, #196]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	061b      	lsls	r3, r3, #24
 80037e0:	492d      	ldr	r1, [pc, #180]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
 80037e6:	e01a      	b.n	800381e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2a      	ldr	r2, [pc, #168]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe f95e 	bl	8001ab4 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fc:	f7fe f95a 	bl	8001ab4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e20e      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x1e0>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d041      	beq.n	80038ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01c      	beq.n	800386c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003832:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003838:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fe f937 	bl	8001ab4 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384a:	f7fe f933 	bl	8001ab4 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e1e7      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800385e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ef      	beq.n	800384a <HAL_RCC_OscConfig+0x22e>
 800386a:	e020      	b.n	80038ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 800386e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <HAL_RCC_OscConfig+0x27c>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe f91a 	bl	8001ab4 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003882:	e00d      	b.n	80038a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003884:	f7fe f916 	bl	8001ab4 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d906      	bls.n	80038a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e1ca      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000
 800389c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a0:	4b8c      	ldr	r3, [pc, #560]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ea      	bne.n	8003884 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80a6 	beq.w	8003a08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038c0:	4b84      	ldr	r3, [pc, #528]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2b4>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x2b6>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00d      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d6:	4b7f      	ldr	r3, [pc, #508]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	4a7e      	ldr	r2, [pc, #504]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6593      	str	r3, [r2, #88]	; 0x58
 80038e2:	4b7c      	ldr	r3, [pc, #496]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80038e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038ee:	2301      	movs	r3, #1
 80038f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f2:	4b79      	ldr	r3, [pc, #484]	; (8003ad8 <HAL_RCC_OscConfig+0x4bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d118      	bne.n	8003930 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038fe:	4b76      	ldr	r3, [pc, #472]	; (8003ad8 <HAL_RCC_OscConfig+0x4bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a75      	ldr	r2, [pc, #468]	; (8003ad8 <HAL_RCC_OscConfig+0x4bc>)
 8003904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390a:	f7fe f8d3 	bl	8001ab4 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003912:	f7fe f8cf 	bl	8001ab4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e183      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003924:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <HAL_RCC_OscConfig+0x4bc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d108      	bne.n	800394a <HAL_RCC_OscConfig+0x32e>
 8003938:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a65      	ldr	r2, [pc, #404]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003948:	e024      	b.n	8003994 <HAL_RCC_OscConfig+0x378>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b05      	cmp	r3, #5
 8003950:	d110      	bne.n	8003974 <HAL_RCC_OscConfig+0x358>
 8003952:	4b60      	ldr	r3, [pc, #384]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	4a5e      	ldr	r2, [pc, #376]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003962:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003968:	4a5a      	ldr	r2, [pc, #360]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003972:	e00f      	b.n	8003994 <HAL_RCC_OscConfig+0x378>
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	4a56      	ldr	r2, [pc, #344]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a52      	ldr	r2, [pc, #328]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d016      	beq.n	80039ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399c:	f7fe f88a 	bl	8001ab4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a2:	e00a      	b.n	80039ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fe f886 	bl	8001ab4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e138      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	4b46      	ldr	r3, [pc, #280]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ed      	beq.n	80039a4 <HAL_RCC_OscConfig+0x388>
 80039c8:	e015      	b.n	80039f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fe f873 	bl	8001ab4 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe f86f 	bl	8001ab4 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e121      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039e8:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ed      	bne.n	80039d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039f6:	7ffb      	ldrb	r3, [r7, #31]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d105      	bne.n	8003a08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	4a34      	ldr	r2, [pc, #208]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d03c      	beq.n	8003a8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01c      	beq.n	8003a56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a22:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe f842 	bl	8001ab4 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a34:	f7fe f83e 	bl	8001ab4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0f2      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <HAL_RCC_OscConfig+0x418>
 8003a54:	e01b      	b.n	8003a8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a56:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a5c:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fe f825 	bl	8001ab4 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a6e:	f7fe f821 	bl	8001ab4 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e0d5      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a80:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ef      	bne.n	8003a6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80c9 	beq.w	8003c2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a98:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 030c 	and.w	r3, r3, #12
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	f000 8083 	beq.w	8003bac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d15e      	bne.n	8003b6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fffb 	bl	8001ab4 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac0:	e00c      	b.n	8003adc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fd fff7 	bl	8001ab4 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d905      	bls.n	8003adc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0ab      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003adc:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ec      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae8:	4b52      	ldr	r3, [pc, #328]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	4b52      	ldr	r3, [pc, #328]	; (8003c38 <HAL_RCC_OscConfig+0x61c>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6a11      	ldr	r1, [r2, #32]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0112      	lsls	r2, r2, #4
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b02:	0212      	lsls	r2, r2, #8
 8003b04:	4311      	orrs	r1, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b0a:	0852      	lsrs	r2, r2, #1
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0552      	lsls	r2, r2, #21
 8003b10:	4311      	orrs	r1, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b16:	0852      	lsrs	r2, r2, #1
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0652      	lsls	r2, r2, #25
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b22:	06d2      	lsls	r2, r2, #27
 8003b24:	430a      	orrs	r2, r1
 8003b26:	4943      	ldr	r1, [pc, #268]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b2c:	4b41      	ldr	r3, [pc, #260]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b38:	4b3e      	ldr	r3, [pc, #248]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a3d      	ldr	r2, [pc, #244]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd ffb6 	bl	8001ab4 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b4c:	f7fd ffb2 	bl	8001ab4 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e066      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x530>
 8003b6a:	e05e      	b.n	8003c2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6c:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a30      	ldr	r2, [pc, #192]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fd ff9c 	bl	8001ab4 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd ff98 	bl	8001ab4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e04c      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b92:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b9e:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	4924      	ldr	r1, [pc, #144]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <HAL_RCC_OscConfig+0x620>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60cb      	str	r3, [r1, #12]
 8003baa:	e03e      	b.n	8003c2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e039      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <HAL_RCC_OscConfig+0x618>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d12c      	bne.n	8003c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d123      	bne.n	8003c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d11b      	bne.n	8003c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d113      	bne.n	8003c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000
 8003c38:	019f800c 	.word	0x019f800c
 8003c3c:	feeefffc 	.word	0xfeeefffc

08003c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e11e      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b91      	ldr	r3, [pc, #580]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b8e      	ldr	r3, [pc, #568]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 020f 	bic.w	r2, r3, #15
 8003c6e:	498c      	ldr	r1, [pc, #560]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b8a      	ldr	r3, [pc, #552]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e106      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d073      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d129      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9c:	4b81      	ldr	r3, [pc, #516]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0f4      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003cac:	f000 f99e 	bl	8003fec <RCC_GetSysClockFreqFromPLLSource>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4a7c      	ldr	r2, [pc, #496]	; (8003ea8 <HAL_RCC_ClockConfig+0x268>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d93f      	bls.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cba:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d033      	beq.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d12f      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cda:	4b72      	ldr	r3, [pc, #456]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ce2:	4a70      	ldr	r2, [pc, #448]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e024      	b.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e0c6      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0be      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d18:	f000 f8ce 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4a61      	ldr	r2, [pc, #388]	; (8003ea8 <HAL_RCC_ClockConfig+0x268>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d909      	bls.n	8003d3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d26:	4b5f      	ldr	r3, [pc, #380]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4957      	ldr	r1, [pc, #348]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4c:	f7fd feb2 	bl	8001ab4 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fd feae 	bl	8001ab4 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e095      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d023      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d94:	4b43      	ldr	r3, [pc, #268]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4a42      	ldr	r2, [pc, #264]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003dac:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003db4:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4936      	ldr	r1, [pc, #216]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dd6:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4a32      	ldr	r2, [pc, #200]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003ddc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de2:	4b2f      	ldr	r3, [pc, #188]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d21d      	bcs.n	8003e2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df0:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 020f 	bic.w	r2, r3, #15
 8003df8:	4929      	ldr	r1, [pc, #164]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e00:	f7fd fe58 	bl	8001ab4 <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fd fe54 	bl	8001ab4 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e03b      	b.n	8003e96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCC_ClockConfig+0x260>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1ed      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4917      	ldr	r1, [pc, #92]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e56:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	490f      	ldr	r1, [pc, #60]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e6a:	f000 f825 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_RCC_ClockConfig+0x264>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	490c      	ldr	r1, [pc, #48]	; (8003eac <HAL_RCC_ClockConfig+0x26c>)
 8003e7c:	5ccb      	ldrb	r3, [r1, r3]
 8003e7e:	f003 031f 	and.w	r3, r3, #31
 8003e82:	fa22 f303 	lsr.w	r3, r2, r3
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCC_ClockConfig+0x270>)
 8003e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <HAL_RCC_ClockConfig+0x274>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd fdc4 	bl	8001a1c <HAL_InitTick>
 8003e94:	4603      	mov	r3, r0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40022000 	.word	0x40022000
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	04c4b400 	.word	0x04c4b400
 8003eac:	08005f34 	.word	0x08005f34
 8003eb0:	20000004 	.word	0x20000004
 8003eb4:	20000008 	.word	0x20000008

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ebe:	4b2c      	ldr	r3, [pc, #176]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d102      	bne.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eca:	4b2a      	ldr	r3, [pc, #168]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	e047      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d102      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003edc:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	e03e      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ee2:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d136      	bne.n	8003f5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3301      	adds	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f0c:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f16:	68d2      	ldr	r2, [r2, #12]
 8003f18:	0a12      	lsrs	r2, r2, #8
 8003f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
      break;
 8003f24:	e00c      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	4a10      	ldr	r2, [pc, #64]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f30:	68d2      	ldr	r2, [r2, #12]
 8003f32:	0a12      	lsrs	r2, r2, #8
 8003f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]
      break;
 8003f3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	0e5b      	lsrs	r3, r3, #25
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	e001      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f60:	693b      	ldr	r3, [r7, #16]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	016e3600 	.word	0x016e3600

08003f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f80:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f82:	681b      	ldr	r3, [r3, #0]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000004 	.word	0x20000004

08003f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f98:	f7ff fff0 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4904      	ldr	r1, [pc, #16]	; (8003fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	08005f44 	.word	0x08005f44

08003fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fc4:	f7ff ffda 	bl	8003f7c <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0adb      	lsrs	r3, r3, #11
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4904      	ldr	r1, [pc, #16]	; (8003fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08005f44 	.word	0x08005f44

08003fec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	; (800406c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d10c      	bne.n	800402a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800401a:	68d2      	ldr	r2, [r2, #12]
 800401c:	0a12      	lsrs	r2, r2, #8
 800401e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	617b      	str	r3, [r7, #20]
    break;
 8004028:	e00c      	b.n	8004044 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	0a12      	lsrs	r2, r2, #8
 8004038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
    break;
 8004042:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004044:	4b09      	ldr	r3, [pc, #36]	; (800406c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	0e5b      	lsrs	r3, r3, #25
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	3301      	adds	r3, #1
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	fbb2 f3f3 	udiv	r3, r2, r3
 800405c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800405e:	687b      	ldr	r3, [r7, #4]
}
 8004060:	4618      	mov	r0, r3
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40021000 	.word	0x40021000
 8004070:	016e3600 	.word	0x016e3600
 8004074:	00f42400 	.word	0x00f42400

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004080:	2300      	movs	r3, #0
 8004082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004084:	2300      	movs	r3, #0
 8004086:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 8098 	beq.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004096:	2300      	movs	r3, #0
 8004098:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409a:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10d      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a6:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6593      	str	r3, [r2, #88]	; 0x58
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040be:	2301      	movs	r3, #1
 80040c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040c2:	4b3a      	ldr	r3, [pc, #232]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a39      	ldr	r2, [pc, #228]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ce:	f7fd fcf1 	bl	8001ab4 <HAL_GetTick>
 80040d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d4:	e009      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d6:	f7fd fced 	bl	8001ab4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d902      	bls.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	74fb      	strb	r3, [r7, #19]
        break;
 80040e8:	e005      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ea:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ef      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d159      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01e      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	429a      	cmp	r2, r3
 8004116:	d019      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004118:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004122:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004124:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800412c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004134:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004144:	4a18      	ldr	r2, [pc, #96]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fd fcad 	bl	8001ab4 <HAL_GetTick>
 800415a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415c:	e00b      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fd fca9 	bl	8001ab4 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d902      	bls.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	74fb      	strb	r3, [r7, #19]
            break;
 8004174:	e006      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ec      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	4903      	ldr	r1, [pc, #12]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041a0:	e008      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	74bb      	strb	r3, [r7, #18]
 80041a6:	e005      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b4:	7c7b      	ldrb	r3, [r7, #17]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ba:	4ba6      	ldr	r3, [pc, #664]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	4aa5      	ldr	r2, [pc, #660]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d2:	4ba0      	ldr	r3, [pc, #640]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f023 0203 	bic.w	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	499c      	ldr	r1, [pc, #624]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f4:	4b97      	ldr	r3, [pc, #604]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f023 020c 	bic.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	4994      	ldr	r1, [pc, #592]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004216:	4b8f      	ldr	r3, [pc, #572]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	498b      	ldr	r1, [pc, #556]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004238:	4b86      	ldr	r3, [pc, #536]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	4983      	ldr	r1, [pc, #524]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800425a:	4b7e      	ldr	r3, [pc, #504]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	497a      	ldr	r1, [pc, #488]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800427c:	4b75      	ldr	r3, [pc, #468]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	4972      	ldr	r1, [pc, #456]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800429e:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	4969      	ldr	r1, [pc, #420]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042c0:	4b64      	ldr	r3, [pc, #400]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4961      	ldr	r1, [pc, #388]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	4958      	ldr	r1, [pc, #352]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	4950      	ldr	r1, [pc, #320]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004322:	d105      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4a4a      	ldr	r2, [pc, #296]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800432e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004338:	2b00      	cmp	r3, #0
 800433a:	d015      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800433c:	4b45      	ldr	r3, [pc, #276]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	4942      	ldr	r1, [pc, #264]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435a:	d105      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800435c:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a3c      	ldr	r2, [pc, #240]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004366:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d015      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004374:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	4934      	ldr	r1, [pc, #208]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004394:	4b2f      	ldr	r3, [pc, #188]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4a2e      	ldr	r2, [pc, #184]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ac:	4b29      	ldr	r3, [pc, #164]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	4926      	ldr	r1, [pc, #152]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ca:	d105      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043cc:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a20      	ldr	r2, [pc, #128]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d015      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	4918      	ldr	r1, [pc, #96]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004402:	d105      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a12      	ldr	r2, [pc, #72]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	490a      	ldr	r1, [pc, #40]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800443a:	d105      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004446:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004448:	7cbb      	ldrb	r3, [r7, #18]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000

08004458 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800446a:	d136      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800446c:	4bac      	ldr	r3, [pc, #688]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004478:	4ba9      	ldr	r3, [pc, #676]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d108      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d104      	bne.n	8004498 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	f000 bc2a 	b.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004498:	4ba1      	ldr	r3, [pc, #644]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d108      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ac:	d104      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 80044ae:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	f000 bc1a 	b.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80044b8:	4b99      	ldr	r3, [pc, #612]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c4:	f040 8412 	bne.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ce:	f040 840d 	bne.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
    {
      frequency = HSE_VALUE / 32U;
 80044d2:	4b94      	ldr	r3, [pc, #592]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	f000 bc09 	b.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 80044da:	4b91      	ldr	r3, [pc, #580]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d10c      	bne.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044e6:	4b8e      	ldr	r3, [pc, #568]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f2:	d102      	bne.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 80044f4:	4b8c      	ldr	r3, [pc, #560]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	e017      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	e014      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8004500:	4b87      	ldr	r3, [pc, #540]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	2b03      	cmp	r3, #3
 800450a:	d10c      	bne.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800450c:	4b84      	ldr	r3, [pc, #528]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004518:	d102      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 800451a:	4b84      	ldr	r3, [pc, #528]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e004      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	e001      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800452a:	4b7d      	ldr	r3, [pc, #500]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	091b      	lsrs	r3, r3, #4
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	3301      	adds	r3, #1
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004544:	f000 8378 	beq.w	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800454e:	f200 83ae 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004558:	f000 8337 	beq.w	8004bca <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004562:	f200 83a4 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456c:	f000 82ff 	beq.w	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004576:	f200 839a 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	f000 82c0 	beq.w	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	f200 8390 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004594:	f000 8272 	beq.w	8004a7c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459e:	f200 8386 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a8:	f000 8224 	beq.w	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b2:	f200 837c 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045bc:	f000 81da 	beq.w	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c6:	f200 8372 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d0:	f000 81ab 	beq.w	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	f200 8368 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	f000 817d 	beq.w	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b80      	cmp	r3, #128	; 0x80
 80045ea:	f200 8360 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d84b      	bhi.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8359 	beq.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	2b1f      	cmp	r3, #31
 8004602:	f200 8354 	bhi.w	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004697 	.word	0x08004697
 8004610:	080046f9 	.word	0x080046f9
 8004614:	08004caf 	.word	0x08004caf
 8004618:	0800476b 	.word	0x0800476b
 800461c:	08004caf 	.word	0x08004caf
 8004620:	08004caf 	.word	0x08004caf
 8004624:	08004caf 	.word	0x08004caf
 8004628:	080047cd 	.word	0x080047cd
 800462c:	08004caf 	.word	0x08004caf
 8004630:	08004caf 	.word	0x08004caf
 8004634:	08004caf 	.word	0x08004caf
 8004638:	08004caf 	.word	0x08004caf
 800463c:	08004caf 	.word	0x08004caf
 8004640:	08004caf 	.word	0x08004caf
 8004644:	08004caf 	.word	0x08004caf
 8004648:	08004caf 	.word	0x08004caf
 800464c:	08004caf 	.word	0x08004caf
 8004650:	08004caf 	.word	0x08004caf
 8004654:	08004caf 	.word	0x08004caf
 8004658:	08004caf 	.word	0x08004caf
 800465c:	08004caf 	.word	0x08004caf
 8004660:	08004caf 	.word	0x08004caf
 8004664:	08004caf 	.word	0x08004caf
 8004668:	08004caf 	.word	0x08004caf
 800466c:	08004caf 	.word	0x08004caf
 8004670:	08004caf 	.word	0x08004caf
 8004674:	08004caf 	.word	0x08004caf
 8004678:	08004caf 	.word	0x08004caf
 800467c:	08004caf 	.word	0x08004caf
 8004680:	08004caf 	.word	0x08004caf
 8004684:	08004caf 	.word	0x08004caf
 8004688:	0800482f 	.word	0x0800482f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	f000 8101 	beq.w	8004896 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
      break;

#endif /* QUADSPI */

    default:
      break;
 8004694:	e30b      	b.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x856>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
        frequency = HAL_RCC_GetPCLK2Freq();
 80046a8:	f7ff fc8a 	bl	8003fc0 <HAL_RCC_GetPCLK2Freq>
 80046ac:	61f8      	str	r0, [r7, #28]
      break;
 80046ae:	e300      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d103      	bne.n	80046be <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        frequency = HAL_RCC_GetSysClockFreq();
 80046b6:	f7ff fbff 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 80046ba:	61f8      	str	r0, [r7, #28]
      break;
 80046bc:	e2f9      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d102      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        frequency = HSI_VALUE;
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80046d4:	61fb      	str	r3, [r7, #28]
      break;
 80046d6:	e2ec      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	f040 82e5 	bne.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	f040 82e1 	bne.w	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
        frequency = LSE_VALUE;
 80046f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f4:	61fb      	str	r3, [r7, #28]
      break;
 80046f6:	e2dc      	b.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        frequency = HAL_RCC_GetPCLK1Freq();
 800470a:	f7ff fc43 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 800470e:	61f8      	str	r0, [r7, #28]
      break;
 8004710:	e2d1      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8004718:	f7ff fbce 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 800471c:	61f8      	str	r0, [r7, #28]
      break;
 800471e:	e2ca      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8004720:	40021000 	.word	0x40021000
 8004724:	000b71b0 	.word	0x000b71b0
 8004728:	00f42400 	.word	0x00f42400
 800472c:	016e3600 	.word	0x016e3600
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004730:	4b9e      	ldr	r3, [pc, #632]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d105      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d102      	bne.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HSI_VALUE;
 8004744:	4b9a      	ldr	r3, [pc, #616]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004746:	61fb      	str	r3, [r7, #28]
      break;
 8004748:	e2b5      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800474a:	4b98      	ldr	r3, [pc, #608]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	f040 82ae 	bne.w	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b0c      	cmp	r3, #12
 800475e:	f040 82aa 	bne.w	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        frequency = LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004766:	61fb      	str	r3, [r7, #28]
      break;
 8004768:	e2a5      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800476a:	4b90      	ldr	r3, [pc, #576]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800476c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004774:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        frequency = HAL_RCC_GetPCLK1Freq();
 800477c:	f7ff fc0a 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 8004780:	61f8      	str	r0, [r7, #28]
      break;
 8004782:	e29a      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d103      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
        frequency = HAL_RCC_GetSysClockFreq();
 800478a:	f7ff fb95 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 800478e:	61f8      	str	r0, [r7, #28]
      break;
 8004790:	e293      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004792:	4b86      	ldr	r3, [pc, #536]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479e:	d105      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b20      	cmp	r3, #32
 80047a4:	d102      	bne.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>
        frequency = HSI_VALUE;
 80047a6:	4b82      	ldr	r3, [pc, #520]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80047a8:	61fb      	str	r3, [r7, #28]
      break;
 80047aa:	e286      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80047ac:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	f040 827f 	bne.w	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b30      	cmp	r3, #48	; 0x30
 80047c0:	f040 827b 	bne.w	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
        frequency = LSE_VALUE;
 80047c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c8:	61fb      	str	r3, [r7, #28]
      break;
 80047ca:	e276      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80047cc:	4b77      	ldr	r3, [pc, #476]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047d6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
        frequency = HAL_RCC_GetPCLK1Freq();
 80047de:	f7ff fbd9 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 80047e2:	61f8      	str	r0, [r7, #28]
      break;
 80047e4:	e26b      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d103      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
        frequency = HAL_RCC_GetSysClockFreq();
 80047ec:	f7ff fb64 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 80047f0:	61f8      	str	r0, [r7, #28]
      break;
 80047f2:	e264      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80047f4:	4b6d      	ldr	r3, [pc, #436]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004800:	d105      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b80      	cmp	r3, #128	; 0x80
 8004806:	d102      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
        frequency = HSI_VALUE;
 8004808:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800480a:	61fb      	str	r3, [r7, #28]
      break;
 800480c:	e257      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800480e:	4b67      	ldr	r3, [pc, #412]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b02      	cmp	r3, #2
 800481a:	f040 8250 	bne.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2bc0      	cmp	r3, #192	; 0xc0
 8004822:	f040 824c 	bne.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        frequency = LSE_VALUE;
 8004826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800482a:	61fb      	str	r3, [r7, #28]
      break;
 800482c:	e247      	b.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800482e:	4b5f      	ldr	r3, [pc, #380]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004838:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d103      	bne.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004840:	f7ff fba8 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 8004844:	61f8      	str	r0, [r7, #28]
      break;
 8004846:	e23c      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484e:	d103      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
        frequency = HAL_RCC_GetSysClockFreq();
 8004850:	f7ff fb32 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004854:	61f8      	str	r0, [r7, #28]
      break;
 8004856:	e234      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004858:	4b54      	ldr	r3, [pc, #336]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004864:	d106      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486c:	d102      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        frequency = HSI_VALUE;
 800486e:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004870:	61fb      	str	r3, [r7, #28]
      break;
 8004872:	e226      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004874:	4b4d      	ldr	r3, [pc, #308]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	f040 821f 	bne.w	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800488a:	f040 821a 	bne.w	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        frequency = LSE_VALUE;
 800488e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004892:	61fb      	str	r3, [r7, #28]
      break;
 8004894:	e215      	b.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004896:	4b45      	ldr	r3, [pc, #276]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048a0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d103      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7ff fb74 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
      break;
 80048ae:	e20a      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	d103      	bne.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
        frequency = HAL_RCC_GetSysClockFreq();
 80048b8:	f7ff fafe 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 80048bc:	61f8      	str	r0, [r7, #28]
      break;
 80048be:	e202      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80048c0:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048cc:	f040 81fb 	bne.w	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d6:	f040 81f6 	bne.w	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
        frequency = HSI_VALUE;
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80048dc:	61fb      	str	r3, [r7, #28]
      break;
 80048de:	e1f2      	b.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80048e0:	4b32      	ldr	r3, [pc, #200]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80048e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048ea:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
        frequency = HAL_RCC_GetPCLK1Freq();
 80048f2:	f7ff fb4f 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 80048f6:	61f8      	str	r0, [r7, #28]
      break;
 80048f8:	e1e7      	b.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004900:	d103      	bne.n	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
        frequency = HAL_RCC_GetSysClockFreq();
 8004902:	f7ff fad9 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004906:	61f8      	str	r0, [r7, #28]
      break;
 8004908:	e1df      	b.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800490a:	4b28      	ldr	r3, [pc, #160]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004916:	f040 81d8 	bne.w	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004920:	f040 81d3 	bne.w	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
        frequency = HSI_VALUE;
 8004924:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004926:	61fb      	str	r3, [r7, #28]
      break;
 8004928:	e1cf      	b.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x872>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004934:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        frequency = HAL_RCC_GetPCLK1Freq();
 800493c:	f7ff fb2a 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 8004940:	61f8      	str	r0, [r7, #28]
      break;
 8004942:	e1c4      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494a:	d103      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetSysClockFreq();
 800494c:	f7ff fab4 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004950:	61f8      	str	r0, [r7, #28]
      break;
 8004952:	e1bc      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8004954:	4b15      	ldr	r3, [pc, #84]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004960:	f040 81b5 	bne.w	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800496a:	f040 81b0 	bne.w	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
        frequency = HSI_VALUE;
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8004970:	61fb      	str	r3, [r7, #28]
      break;
 8004972:	e1ac      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x876>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800497e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x536>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004986:	f7ff fb05 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 800498a:	61f8      	str	r0, [r7, #28]
      break;
 800498c:	e1a1      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d10b      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049a2:	d107      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
        frequency = LSI_VALUE;
 80049a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e022      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	00f42400 	.word	0x00f42400
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80049b4:	4b9b      	ldr	r3, [pc, #620]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c0:	d106      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049c8:	d102      	bne.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
        frequency = HSI_VALUE;
 80049ca:	4b97      	ldr	r3, [pc, #604]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e010      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80049d0:	4b94      	ldr	r3, [pc, #592]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	f040 8179 	bne.w	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80049e6:	f040 8174 	bne.w	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
        frequency = LSE_VALUE;
 80049ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ee:	61fb      	str	r3, [r7, #28]
      break;
 80049f0:	e16f      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
 80049f2:	e16e      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x87a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80049f4:	4b8b      	ldr	r3, [pc, #556]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049fe:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
        frequency = HAL_RCC_GetSysClockFreq();
 8004a06:	f7ff fa57 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004a0a:	61f8      	str	r0, [r7, #28]
      break;
 8004a0c:	e163      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a14:	d11b      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004a16:	4b83      	ldr	r3, [pc, #524]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8159 	beq.w	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004a24:	4b7f      	ldr	r3, [pc, #508]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	fb03 f202 	mul.w	r2, r3, r2
 8004a38:	4b7a      	ldr	r3, [pc, #488]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	0d5b      	lsrs	r3, r3, #21
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	3301      	adds	r3, #1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61fb      	str	r3, [r7, #28]
      break;
 8004a4c:	e143      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a54:	d102      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a56:	4b75      	ldr	r3, [pc, #468]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8004a58:	61fb      	str	r3, [r7, #28]
      break;
 8004a5a:	e13c      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004a5c:	4b71      	ldr	r3, [pc, #452]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a68:	f040 8135 	bne.w	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a72:	f040 8130 	bne.w	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
        frequency = HSI_VALUE;
 8004a76:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8004a78:	61fb      	str	r3, [r7, #28]
      break;
 8004a7a:	e12c      	b.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a7c:	4b69      	ldr	r3, [pc, #420]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004a86:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
        frequency = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7ff fa13 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004a92:	61f8      	str	r0, [r7, #28]
      break;
 8004a94:	e121      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9c:	d11b      	bne.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004a9e:	4b61      	ldr	r3, [pc, #388]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8117 	beq.w	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004aac:	4b5d      	ldr	r3, [pc, #372]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0a1b      	lsrs	r3, r3, #8
 8004ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab6:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	fb03 f202 	mul.w	r2, r3, r2
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0d5b      	lsrs	r3, r3, #21
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	3301      	adds	r3, #1
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	61fb      	str	r3, [r7, #28]
      break;
 8004ad4:	e101      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004adc:	d102      	bne.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ade:	4b53      	ldr	r3, [pc, #332]	; (8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>)
 8004ae0:	61fb      	str	r3, [r7, #28]
      break;
 8004ae2:	e0fa      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8004ae4:	4b4f      	ldr	r3, [pc, #316]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af0:	f040 80f3 	bne.w	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004afa:	f040 80ee 	bne.w	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        frequency = HSI_VALUE;
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>)
 8004b00:	61fb      	str	r3, [r7, #28]
      break;
 8004b02:	e0ea      	b.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x882>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004b04:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004b0e:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b16:	d103      	bne.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7ff fa3c 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 8004b1c:	61f8      	str	r0, [r7, #28]
      break;
 8004b1e:	e0de      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
        frequency = HSE_VALUE;
 8004b26:	4b42      	ldr	r3, [pc, #264]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>)
 8004b28:	61fb      	str	r3, [r7, #28]
      break;
 8004b2a:	e0d8      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b32:	f040 80d4 	bne.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004b36:	4b3b      	ldr	r3, [pc, #236]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80cd 	beq.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b4e:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	fb03 f202 	mul.w	r2, r3, r2
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	0d5b      	lsrs	r3, r3, #21
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	3301      	adds	r3, #1
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	61fb      	str	r3, [r7, #28]
      break;
 8004b6c:	e0b7      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004b78:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b80:	d114      	bne.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b82:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b8c:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	fb03 f202 	mul.w	r2, r3, r2
 8004b96:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	0d5b      	lsrs	r3, r3, #21
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	61fb      	str	r3, [r7, #28]
      break;
 8004baa:	e09a      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	f040 8093 	bne.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 808f 	bne.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
        frequency = HSI48_VALUE;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8004bc6:	61fb      	str	r3, [r7, #28]
      break;
 8004bc8:	e08b      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004bd4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bdc:	d114      	bne.n	8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be8:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	fb03 f202 	mul.w	r2, r3, r2
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	0d5b      	lsrs	r3, r3, #21
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	61fb      	str	r3, [r7, #28]
      break;
 8004c06:	e06e      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 8004c08:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8004c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d167      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d164      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
        frequency = HSI48_VALUE;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>)
 8004c1e:	61fb      	str	r3, [r7, #28]
      break;
 8004c20:	e061      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	00bb8000 	.word	0x00bb8000
 8004c30:	016e3600 	.word	0x016e3600
 8004c34:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8004c38:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c42:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c4a:	d128      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d048      	beq.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004c58:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c62:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	0edb      	lsrs	r3, r3, #27
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
              pllp = 17U;
 8004c82:	2311      	movs	r3, #17
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e001      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
              pllp = 7U;
 8004c88:	2307      	movs	r3, #7
 8004c8a:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	fb03 f202 	mul.w	r2, r3, r2
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	61fb      	str	r3, [r7, #28]
      break;
 8004c9c:	e025      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca4:	d121      	bne.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
        frequency = HAL_RCC_GetSysClockFreq();
 8004ca6:	f7ff f907 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8004caa:	61f8      	str	r0, [r7, #28]
      break;
 8004cac:	e01d      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x892>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e01c      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e01a      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e018      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e016      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e014      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e012      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e010      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cca:	bf00      	nop
 8004ccc:	e00e      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e00c      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e00a      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e008      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e006      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e004      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      break;
 8004cea:	bf00      	nop
    }
  }

  return(frequency);
 8004cec:	69fb      	ldr	r3, [r7, #28]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000

08004cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e049      	b.n	8004da2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fc fd92 	bl	800184c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f000 f898 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d001      	beq.n	8004dc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e042      	b.n	8004e4a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a21      	ldr	r2, [pc, #132]	; (8004e58 <HAL_TIM_Base_Start+0xac>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d013      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1d      	ldr	r2, [pc, #116]	; (8004e5c <HAL_TIM_Base_Start+0xb0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <HAL_TIM_Base_Start+0xb4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <HAL_TIM_Base_Start+0xb8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_Base_Start+0x5c>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <HAL_TIM_Base_Start+0xbc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d115      	bne.n	8004e34 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <HAL_TIM_Base_Start+0xc0>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d015      	beq.n	8004e46 <HAL_TIM_Base_Start+0x9a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e20:	d011      	beq.n	8004e46 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 0201 	orr.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e32:	e008      	b.n	8004e46 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e000      	b.n	8004e48 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	00010007 	.word	0x00010007

08004e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a42      	ldr	r2, [pc, #264]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00f      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3f      	ldr	r2, [pc, #252]	; (8004f90 <TIM_Base_SetConfig+0x120>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3e      	ldr	r2, [pc, #248]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0x38>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3d      	ldr	r2, [pc, #244]	; (8004f98 <TIM_Base_SetConfig+0x128>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a33      	ldr	r2, [pc, #204]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01b      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec8:	d017      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a30      	ldr	r2, [pc, #192]	; (8004f90 <TIM_Base_SetConfig+0x120>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2f      	ldr	r2, [pc, #188]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00f      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2e      	ldr	r2, [pc, #184]	; (8004f98 <TIM_Base_SetConfig+0x128>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_Base_SetConfig+0x8a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2b      	ldr	r2, [pc, #172]	; (8004fa4 <TIM_Base_SetConfig+0x134>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <TIM_Base_SetConfig+0x128>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a16      	ldr	r2, [pc, #88]	; (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0xe8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <TIM_Base_SetConfig+0x134>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d103      	bne.n	8004f60 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	611a      	str	r2, [r3, #16]
  }
}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40012c00 	.word	0x40012c00
 8004f90:	40000400 	.word	0x40000400
 8004f94:	40000800 	.word	0x40000800
 8004f98:	40013400 	.word	0x40013400
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e065      	b.n	800508c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a2c      	ldr	r2, [pc, #176]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a2b      	ldr	r2, [pc, #172]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d108      	bne.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ffa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d018      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005036:	d013      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00e      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a17      	ldr	r2, [pc, #92]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a12      	ldr	r2, [pc, #72]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10c      	bne.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40013400 	.word	0x40013400
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40014000 	.word	0x40014000

080050ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e042      	b.n	8005144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7fc fb63 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2224      	movs	r2, #36	; 0x24
 80050da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0201 	bic.w	r2, r2, #1
 80050ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 faf4 	bl	80056e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f825 	bl	800514c <UART_SetConfig>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e01b      	b.n	8005144 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800511a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800512a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fb73 	bl	8005828 <UART_CheckIdleState>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800514c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005150:	b08c      	sub	sp, #48	; 0x30
 8005152:	af00      	add	r7, sp, #0
 8005154:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	431a      	orrs	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	431a      	orrs	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	4313      	orrs	r3, r2
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4bab      	ldr	r3, [pc, #684]	; (8005428 <UART_SetConfig+0x2dc>)
 800517c:	4013      	ands	r3, r2
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005184:	430b      	orrs	r3, r1
 8005186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4aa0      	ldr	r2, [pc, #640]	; (800542c <UART_SetConfig+0x2e0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b4:	4313      	orrs	r3, r2
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051cc:	430b      	orrs	r3, r1
 80051ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	f023 010f 	bic.w	r1, r3, #15
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a91      	ldr	r2, [pc, #580]	; (8005430 <UART_SetConfig+0x2e4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d125      	bne.n	800523c <UART_SetConfig+0xf0>
 80051f0:	4b90      	ldr	r3, [pc, #576]	; (8005434 <UART_SetConfig+0x2e8>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d81a      	bhi.n	8005234 <UART_SetConfig+0xe8>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <UART_SetConfig+0xb8>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005215 	.word	0x08005215
 8005208:	08005225 	.word	0x08005225
 800520c:	0800521d 	.word	0x0800521d
 8005210:	0800522d 	.word	0x0800522d
 8005214:	2301      	movs	r3, #1
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521a:	e0d6      	b.n	80053ca <UART_SetConfig+0x27e>
 800521c:	2302      	movs	r3, #2
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005222:	e0d2      	b.n	80053ca <UART_SetConfig+0x27e>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522a:	e0ce      	b.n	80053ca <UART_SetConfig+0x27e>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005232:	e0ca      	b.n	80053ca <UART_SetConfig+0x27e>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523a:	e0c6      	b.n	80053ca <UART_SetConfig+0x27e>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a7d      	ldr	r2, [pc, #500]	; (8005438 <UART_SetConfig+0x2ec>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d138      	bne.n	80052b8 <UART_SetConfig+0x16c>
 8005246:	4b7b      	ldr	r3, [pc, #492]	; (8005434 <UART_SetConfig+0x2e8>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f003 030c 	and.w	r3, r3, #12
 8005250:	2b0c      	cmp	r3, #12
 8005252:	d82d      	bhi.n	80052b0 <UART_SetConfig+0x164>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x110>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005291 	.word	0x08005291
 8005260:	080052b1 	.word	0x080052b1
 8005264:	080052b1 	.word	0x080052b1
 8005268:	080052b1 	.word	0x080052b1
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052b1 	.word	0x080052b1
 8005274:	080052b1 	.word	0x080052b1
 8005278:	080052b1 	.word	0x080052b1
 800527c:	08005299 	.word	0x08005299
 8005280:	080052b1 	.word	0x080052b1
 8005284:	080052b1 	.word	0x080052b1
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052a9 	.word	0x080052a9
 8005290:	2300      	movs	r3, #0
 8005292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005296:	e098      	b.n	80053ca <UART_SetConfig+0x27e>
 8005298:	2302      	movs	r3, #2
 800529a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800529e:	e094      	b.n	80053ca <UART_SetConfig+0x27e>
 80052a0:	2304      	movs	r3, #4
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052a6:	e090      	b.n	80053ca <UART_SetConfig+0x27e>
 80052a8:	2308      	movs	r3, #8
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ae:	e08c      	b.n	80053ca <UART_SetConfig+0x27e>
 80052b0:	2310      	movs	r3, #16
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b6:	e088      	b.n	80053ca <UART_SetConfig+0x27e>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5f      	ldr	r2, [pc, #380]	; (800543c <UART_SetConfig+0x2f0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d125      	bne.n	800530e <UART_SetConfig+0x1c2>
 80052c2:	4b5c      	ldr	r3, [pc, #368]	; (8005434 <UART_SetConfig+0x2e8>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d016      	beq.n	80052fe <UART_SetConfig+0x1b2>
 80052d0:	2b30      	cmp	r3, #48	; 0x30
 80052d2:	d818      	bhi.n	8005306 <UART_SetConfig+0x1ba>
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d00a      	beq.n	80052ee <UART_SetConfig+0x1a2>
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d814      	bhi.n	8005306 <UART_SetConfig+0x1ba>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <UART_SetConfig+0x19a>
 80052e0:	2b10      	cmp	r3, #16
 80052e2:	d008      	beq.n	80052f6 <UART_SetConfig+0x1aa>
 80052e4:	e00f      	b.n	8005306 <UART_SetConfig+0x1ba>
 80052e6:	2300      	movs	r3, #0
 80052e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ec:	e06d      	b.n	80053ca <UART_SetConfig+0x27e>
 80052ee:	2302      	movs	r3, #2
 80052f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f4:	e069      	b.n	80053ca <UART_SetConfig+0x27e>
 80052f6:	2304      	movs	r3, #4
 80052f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fc:	e065      	b.n	80053ca <UART_SetConfig+0x27e>
 80052fe:	2308      	movs	r3, #8
 8005300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005304:	e061      	b.n	80053ca <UART_SetConfig+0x27e>
 8005306:	2310      	movs	r3, #16
 8005308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530c:	e05d      	b.n	80053ca <UART_SetConfig+0x27e>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a4b      	ldr	r2, [pc, #300]	; (8005440 <UART_SetConfig+0x2f4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d125      	bne.n	8005364 <UART_SetConfig+0x218>
 8005318:	4b46      	ldr	r3, [pc, #280]	; (8005434 <UART_SetConfig+0x2e8>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005322:	2bc0      	cmp	r3, #192	; 0xc0
 8005324:	d016      	beq.n	8005354 <UART_SetConfig+0x208>
 8005326:	2bc0      	cmp	r3, #192	; 0xc0
 8005328:	d818      	bhi.n	800535c <UART_SetConfig+0x210>
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d00a      	beq.n	8005344 <UART_SetConfig+0x1f8>
 800532e:	2b80      	cmp	r3, #128	; 0x80
 8005330:	d814      	bhi.n	800535c <UART_SetConfig+0x210>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <UART_SetConfig+0x1f0>
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d008      	beq.n	800534c <UART_SetConfig+0x200>
 800533a:	e00f      	b.n	800535c <UART_SetConfig+0x210>
 800533c:	2300      	movs	r3, #0
 800533e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005342:	e042      	b.n	80053ca <UART_SetConfig+0x27e>
 8005344:	2302      	movs	r3, #2
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800534a:	e03e      	b.n	80053ca <UART_SetConfig+0x27e>
 800534c:	2304      	movs	r3, #4
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005352:	e03a      	b.n	80053ca <UART_SetConfig+0x27e>
 8005354:	2308      	movs	r3, #8
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800535a:	e036      	b.n	80053ca <UART_SetConfig+0x27e>
 800535c:	2310      	movs	r3, #16
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005362:	e032      	b.n	80053ca <UART_SetConfig+0x27e>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a30      	ldr	r2, [pc, #192]	; (800542c <UART_SetConfig+0x2e0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d12a      	bne.n	80053c4 <UART_SetConfig+0x278>
 800536e:	4b31      	ldr	r3, [pc, #196]	; (8005434 <UART_SetConfig+0x2e8>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800537c:	d01a      	beq.n	80053b4 <UART_SetConfig+0x268>
 800537e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005382:	d81b      	bhi.n	80053bc <UART_SetConfig+0x270>
 8005384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005388:	d00c      	beq.n	80053a4 <UART_SetConfig+0x258>
 800538a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538e:	d815      	bhi.n	80053bc <UART_SetConfig+0x270>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <UART_SetConfig+0x250>
 8005394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005398:	d008      	beq.n	80053ac <UART_SetConfig+0x260>
 800539a:	e00f      	b.n	80053bc <UART_SetConfig+0x270>
 800539c:	2300      	movs	r3, #0
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a2:	e012      	b.n	80053ca <UART_SetConfig+0x27e>
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053aa:	e00e      	b.n	80053ca <UART_SetConfig+0x27e>
 80053ac:	2304      	movs	r3, #4
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b2:	e00a      	b.n	80053ca <UART_SetConfig+0x27e>
 80053b4:	2308      	movs	r3, #8
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ba:	e006      	b.n	80053ca <UART_SetConfig+0x27e>
 80053bc:	2310      	movs	r3, #16
 80053be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c2:	e002      	b.n	80053ca <UART_SetConfig+0x27e>
 80053c4:	2310      	movs	r3, #16
 80053c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a17      	ldr	r2, [pc, #92]	; (800542c <UART_SetConfig+0x2e0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	f040 80a8 	bne.w	8005526 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d834      	bhi.n	8005448 <UART_SetConfig+0x2fc>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x298>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005449 	.word	0x08005449
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005449 	.word	0x08005449
 80053f4:	08005417 	.word	0x08005417
 80053f8:	08005449 	.word	0x08005449
 80053fc:	08005449 	.word	0x08005449
 8005400:	08005449 	.word	0x08005449
 8005404:	0800541f 	.word	0x0800541f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005408:	f7fe fdc4 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 800540c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800540e:	e021      	b.n	8005454 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <UART_SetConfig+0x2f8>)
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005414:	e01e      	b.n	8005454 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005416:	f7fe fd4f 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 800541a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800541c:	e01a      	b.n	8005454 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005424:	e016      	b.n	8005454 <UART_SetConfig+0x308>
 8005426:	bf00      	nop
 8005428:	cfff69f3 	.word	0xcfff69f3
 800542c:	40008000 	.word	0x40008000
 8005430:	40013800 	.word	0x40013800
 8005434:	40021000 	.word	0x40021000
 8005438:	40004400 	.word	0x40004400
 800543c:	40004800 	.word	0x40004800
 8005440:	40004c00 	.word	0x40004c00
 8005444:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005452:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 812a 	beq.w	80056b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	4a9e      	ldr	r2, [pc, #632]	; (80056dc <UART_SetConfig+0x590>)
 8005462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005466:	461a      	mov	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	fbb3 f3f2 	udiv	r3, r3, r2
 800546e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	4413      	add	r3, r2
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	429a      	cmp	r2, r3
 800547e:	d305      	bcc.n	800548c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	d903      	bls.n	8005494 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005492:	e10d      	b.n	80056b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	2200      	movs	r2, #0
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	60fa      	str	r2, [r7, #12]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	4a8e      	ldr	r2, [pc, #568]	; (80056dc <UART_SetConfig+0x590>)
 80054a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2200      	movs	r2, #0
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054b6:	f7fb fa9d 	bl	80009f4 <__aeabi_uldivmod>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	f04f 0200 	mov.w	r2, #0
 80054c6:	f04f 0300 	mov.w	r3, #0
 80054ca:	020b      	lsls	r3, r1, #8
 80054cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054d0:	0202      	lsls	r2, r0, #8
 80054d2:	6979      	ldr	r1, [r7, #20]
 80054d4:	6849      	ldr	r1, [r1, #4]
 80054d6:	0849      	lsrs	r1, r1, #1
 80054d8:	2000      	movs	r0, #0
 80054da:	460c      	mov	r4, r1
 80054dc:	4605      	mov	r5, r0
 80054de:	eb12 0804 	adds.w	r8, r2, r4
 80054e2:	eb43 0905 	adc.w	r9, r3, r5
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	469a      	mov	sl, r3
 80054ee:	4693      	mov	fp, r2
 80054f0:	4652      	mov	r2, sl
 80054f2:	465b      	mov	r3, fp
 80054f4:	4640      	mov	r0, r8
 80054f6:	4649      	mov	r1, r9
 80054f8:	f7fb fa7c 	bl	80009f4 <__aeabi_uldivmod>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4613      	mov	r3, r2
 8005502:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550a:	d308      	bcc.n	800551e <UART_SetConfig+0x3d2>
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005512:	d204      	bcs.n	800551e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a3a      	ldr	r2, [r7, #32]
 800551a:	60da      	str	r2, [r3, #12]
 800551c:	e0c8      	b.n	80056b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005524:	e0c4      	b.n	80056b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800552e:	d167      	bne.n	8005600 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005530:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005534:	2b08      	cmp	r3, #8
 8005536:	d828      	bhi.n	800558a <UART_SetConfig+0x43e>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0x3f4>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005565 	.word	0x08005565
 8005544:	0800556d 	.word	0x0800556d
 8005548:	08005575 	.word	0x08005575
 800554c:	0800558b 	.word	0x0800558b
 8005550:	0800557b 	.word	0x0800557b
 8005554:	0800558b 	.word	0x0800558b
 8005558:	0800558b 	.word	0x0800558b
 800555c:	0800558b 	.word	0x0800558b
 8005560:	08005583 	.word	0x08005583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005564:	f7fe fd16 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 8005568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800556a:	e014      	b.n	8005596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800556c:	f7fe fd28 	bl	8003fc0 <HAL_RCC_GetPCLK2Freq>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005572:	e010      	b.n	8005596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005574:	4b5a      	ldr	r3, [pc, #360]	; (80056e0 <UART_SetConfig+0x594>)
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005578:	e00d      	b.n	8005596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800557a:	f7fe fc9d 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 800557e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005580:	e009      	b.n	8005596 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005586:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005588:	e005      	b.n	8005596 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8089 	beq.w	80056b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	4a4e      	ldr	r2, [pc, #312]	; (80056dc <UART_SetConfig+0x590>)
 80055a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b0:	005a      	lsls	r2, r3, #1
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	441a      	add	r2, r3
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	d916      	bls.n	80055f8 <UART_SetConfig+0x4ac>
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	d212      	bcs.n	80055f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f023 030f 	bic.w	r3, r3, #15
 80055da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	085b      	lsrs	r3, r3, #1
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	8bfb      	ldrh	r3, [r7, #30]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	8bfa      	ldrh	r2, [r7, #30]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	e05b      	b.n	80056b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055fe:	e057      	b.n	80056b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005600:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005604:	2b08      	cmp	r3, #8
 8005606:	d828      	bhi.n	800565a <UART_SetConfig+0x50e>
 8005608:	a201      	add	r2, pc, #4	; (adr r2, 8005610 <UART_SetConfig+0x4c4>)
 800560a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560e:	bf00      	nop
 8005610:	08005635 	.word	0x08005635
 8005614:	0800563d 	.word	0x0800563d
 8005618:	08005645 	.word	0x08005645
 800561c:	0800565b 	.word	0x0800565b
 8005620:	0800564b 	.word	0x0800564b
 8005624:	0800565b 	.word	0x0800565b
 8005628:	0800565b 	.word	0x0800565b
 800562c:	0800565b 	.word	0x0800565b
 8005630:	08005653 	.word	0x08005653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005634:	f7fe fcae 	bl	8003f94 <HAL_RCC_GetPCLK1Freq>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800563a:	e014      	b.n	8005666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800563c:	f7fe fcc0 	bl	8003fc0 <HAL_RCC_GetPCLK2Freq>
 8005640:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005642:	e010      	b.n	8005666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005644:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <UART_SetConfig+0x594>)
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005648:	e00d      	b.n	8005666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564a:	f7fe fc35 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005650:	e009      	b.n	8005666 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005658:	e005      	b.n	8005666 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005664:	bf00      	nop
    }

    if (pclk != 0U)
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d021      	beq.n	80056b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	4a1a      	ldr	r2, [pc, #104]	; (80056dc <UART_SetConfig+0x590>)
 8005672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005676:	461a      	mov	r2, r3
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	fbb3 f2f2 	udiv	r2, r3, r2
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	441a      	add	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b0f      	cmp	r3, #15
 8005694:	d909      	bls.n	80056aa <UART_SetConfig+0x55e>
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569c:	d205      	bcs.n	80056aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	e002      	b.n	80056b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80056cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3730      	adds	r7, #48	; 0x30
 80056d4:	46bd      	mov	sp, r7
 80056d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056da:	bf00      	nop
 80056dc:	08005f4c 	.word	0x08005f4c
 80056e0:	00f42400 	.word	0x00f42400

080056e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00a      	beq.n	800570e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00a      	beq.n	8005752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01a      	beq.n	80057fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e2:	d10a      	bne.n	80057fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	605a      	str	r2, [r3, #4]
  }
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b098      	sub	sp, #96	; 0x60
 800582c:	af02      	add	r7, sp, #8
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005838:	f7fc f93c 	bl	8001ab4 <HAL_GetTick>
 800583c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b08      	cmp	r3, #8
 800584a:	d12f      	bne.n	80058ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005854:	2200      	movs	r2, #0
 8005856:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f88e 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d022      	beq.n	80058ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587a:	653b      	str	r3, [r7, #80]	; 0x50
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
 8005886:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800588a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e6      	bne.n	8005866 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2220      	movs	r2, #32
 800589c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e063      	b.n	8005974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d149      	bne.n	800594e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c2:	2200      	movs	r2, #0
 80058c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f857 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d03c      	beq.n	800594e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	623b      	str	r3, [r7, #32]
   return(result);
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f2:	633b      	str	r3, [r7, #48]	; 0x30
 80058f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	60fb      	str	r3, [r7, #12]
   return(result);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	64bb      	str	r3, [r7, #72]	; 0x48
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3308      	adds	r3, #8
 8005924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005926:	61fa      	str	r2, [r7, #28]
 8005928:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	69b9      	ldr	r1, [r7, #24]
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	617b      	str	r3, [r7, #20]
   return(result);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e5      	bne.n	8005906 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2220      	movs	r2, #32
 800593e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e012      	b.n	8005974 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3758      	adds	r7, #88	; 0x58
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598c:	e04f      	b.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d04b      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005996:	f7fc f88d 	bl	8001ab4 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <UART_WaitOnFlagUntilTimeout+0x30>
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e04e      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d037      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b80      	cmp	r3, #128	; 0x80
 80059c2:	d034      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d031      	beq.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b08      	cmp	r3, #8
 80059d6:	d110      	bne.n	80059fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2208      	movs	r2, #8
 80059de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f838 	bl	8005a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2208      	movs	r2, #8
 80059ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e029      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a08:	d111      	bne.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f81e 	bl	8005a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e00f      	b.n	8005a4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4013      	ands	r3, r2
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	bf0c      	ite	eq
 8005a3e:	2301      	moveq	r3, #1
 8005a40:	2300      	movne	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d0a0      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b095      	sub	sp, #84	; 0x54
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e3      	bne.n	8005a90 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d118      	bne.n	8005b02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f023 0310 	bic.w	r3, r3, #16
 8005ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aee:	61bb      	str	r3, [r7, #24]
 8005af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	613b      	str	r3, [r7, #16]
   return(result);
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1e6      	bne.n	8005ad0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005b16:	bf00      	nop
 8005b18:	3754      	adds	r7, #84	; 0x54
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e027      	b.n	8005b88 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2224      	movs	r2, #36	; 0x24
 8005b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e02d      	b.n	8005c08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2224      	movs	r2, #36	; 0x24
 8005bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0201 	bic.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f84f 	bl	8005c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e02d      	b.n	8005c84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f811 	bl	8005c8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d108      	bne.n	8005cae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cac:	e031      	b.n	8005d12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cae:	2308      	movs	r3, #8
 8005cb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	0e5b      	lsrs	r3, r3, #25
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	0f5b      	lsrs	r3, r3, #29
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
 8005cd8:	7b3a      	ldrb	r2, [r7, #12]
 8005cda:	4911      	ldr	r1, [pc, #68]	; (8005d20 <UARTEx_SetNbDataToProcess+0x94>)
 8005cdc:	5c8a      	ldrb	r2, [r1, r2]
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ce2:	7b3a      	ldrb	r2, [r7, #12]
 8005ce4:	490f      	ldr	r1, [pc, #60]	; (8005d24 <UARTEx_SetNbDataToProcess+0x98>)
 8005ce6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	7b7a      	ldrb	r2, [r7, #13]
 8005cf8:	4909      	ldr	r1, [pc, #36]	; (8005d20 <UARTEx_SetNbDataToProcess+0x94>)
 8005cfa:	5c8a      	ldrb	r2, [r1, r2]
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d00:	7b7a      	ldrb	r2, [r7, #13]
 8005d02:	4908      	ldr	r1, [pc, #32]	; (8005d24 <UARTEx_SetNbDataToProcess+0x98>)
 8005d04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d06:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	08005f64 	.word	0x08005f64
 8005d24:	08005f6c 	.word	0x08005f6c

08005d28 <malloc>:
 8005d28:	4b02      	ldr	r3, [pc, #8]	; (8005d34 <malloc+0xc>)
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	f000 b823 	b.w	8005d78 <_malloc_r>
 8005d32:	bf00      	nop
 8005d34:	2000005c 	.word	0x2000005c

08005d38 <sbrk_aligned>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	4e0e      	ldr	r6, [pc, #56]	; (8005d74 <sbrk_aligned+0x3c>)
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	6831      	ldr	r1, [r6, #0]
 8005d40:	4605      	mov	r5, r0
 8005d42:	b911      	cbnz	r1, 8005d4a <sbrk_aligned+0x12>
 8005d44:	f000 f8ac 	bl	8005ea0 <_sbrk_r>
 8005d48:	6030      	str	r0, [r6, #0]
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 f8a7 	bl	8005ea0 <_sbrk_r>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d00a      	beq.n	8005d6c <sbrk_aligned+0x34>
 8005d56:	1cc4      	adds	r4, r0, #3
 8005d58:	f024 0403 	bic.w	r4, r4, #3
 8005d5c:	42a0      	cmp	r0, r4
 8005d5e:	d007      	beq.n	8005d70 <sbrk_aligned+0x38>
 8005d60:	1a21      	subs	r1, r4, r0
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f89c 	bl	8005ea0 <_sbrk_r>
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d101      	bne.n	8005d70 <sbrk_aligned+0x38>
 8005d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d70:	4620      	mov	r0, r4
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	20000704 	.word	0x20000704

08005d78 <_malloc_r>:
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d7c:	1ccd      	adds	r5, r1, #3
 8005d7e:	f025 0503 	bic.w	r5, r5, #3
 8005d82:	3508      	adds	r5, #8
 8005d84:	2d0c      	cmp	r5, #12
 8005d86:	bf38      	it	cc
 8005d88:	250c      	movcc	r5, #12
 8005d8a:	2d00      	cmp	r5, #0
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	db01      	blt.n	8005d94 <_malloc_r+0x1c>
 8005d90:	42a9      	cmp	r1, r5
 8005d92:	d905      	bls.n	8005da0 <_malloc_r+0x28>
 8005d94:	230c      	movs	r3, #12
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	2600      	movs	r6, #0
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005da0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e74 <_malloc_r+0xfc>
 8005da4:	f000 f868 	bl	8005e78 <__malloc_lock>
 8005da8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dac:	461c      	mov	r4, r3
 8005dae:	bb5c      	cbnz	r4, 8005e08 <_malloc_r+0x90>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4638      	mov	r0, r7
 8005db4:	f7ff ffc0 	bl	8005d38 <sbrk_aligned>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	4604      	mov	r4, r0
 8005dbc:	d155      	bne.n	8005e6a <_malloc_r+0xf2>
 8005dbe:	f8d8 4000 	ldr.w	r4, [r8]
 8005dc2:	4626      	mov	r6, r4
 8005dc4:	2e00      	cmp	r6, #0
 8005dc6:	d145      	bne.n	8005e54 <_malloc_r+0xdc>
 8005dc8:	2c00      	cmp	r4, #0
 8005dca:	d048      	beq.n	8005e5e <_malloc_r+0xe6>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	4631      	mov	r1, r6
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	eb04 0903 	add.w	r9, r4, r3
 8005dd6:	f000 f863 	bl	8005ea0 <_sbrk_r>
 8005dda:	4581      	cmp	r9, r0
 8005ddc:	d13f      	bne.n	8005e5e <_malloc_r+0xe6>
 8005dde:	6821      	ldr	r1, [r4, #0]
 8005de0:	1a6d      	subs	r5, r5, r1
 8005de2:	4629      	mov	r1, r5
 8005de4:	4638      	mov	r0, r7
 8005de6:	f7ff ffa7 	bl	8005d38 <sbrk_aligned>
 8005dea:	3001      	adds	r0, #1
 8005dec:	d037      	beq.n	8005e5e <_malloc_r+0xe6>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	442b      	add	r3, r5
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	f8d8 3000 	ldr.w	r3, [r8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d038      	beq.n	8005e6e <_malloc_r+0xf6>
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	42a2      	cmp	r2, r4
 8005e00:	d12b      	bne.n	8005e5a <_malloc_r+0xe2>
 8005e02:	2200      	movs	r2, #0
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	e00f      	b.n	8005e28 <_malloc_r+0xb0>
 8005e08:	6822      	ldr	r2, [r4, #0]
 8005e0a:	1b52      	subs	r2, r2, r5
 8005e0c:	d41f      	bmi.n	8005e4e <_malloc_r+0xd6>
 8005e0e:	2a0b      	cmp	r2, #11
 8005e10:	d917      	bls.n	8005e42 <_malloc_r+0xca>
 8005e12:	1961      	adds	r1, r4, r5
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	6025      	str	r5, [r4, #0]
 8005e18:	bf18      	it	ne
 8005e1a:	6059      	strne	r1, [r3, #4]
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	bf08      	it	eq
 8005e20:	f8c8 1000 	streq.w	r1, [r8]
 8005e24:	5162      	str	r2, [r4, r5]
 8005e26:	604b      	str	r3, [r1, #4]
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f104 060b 	add.w	r6, r4, #11
 8005e2e:	f000 f829 	bl	8005e84 <__malloc_unlock>
 8005e32:	f026 0607 	bic.w	r6, r6, #7
 8005e36:	1d23      	adds	r3, r4, #4
 8005e38:	1af2      	subs	r2, r6, r3
 8005e3a:	d0ae      	beq.n	8005d9a <_malloc_r+0x22>
 8005e3c:	1b9b      	subs	r3, r3, r6
 8005e3e:	50a3      	str	r3, [r4, r2]
 8005e40:	e7ab      	b.n	8005d9a <_malloc_r+0x22>
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	6862      	ldr	r2, [r4, #4]
 8005e46:	d1dd      	bne.n	8005e04 <_malloc_r+0x8c>
 8005e48:	f8c8 2000 	str.w	r2, [r8]
 8005e4c:	e7ec      	b.n	8005e28 <_malloc_r+0xb0>
 8005e4e:	4623      	mov	r3, r4
 8005e50:	6864      	ldr	r4, [r4, #4]
 8005e52:	e7ac      	b.n	8005dae <_malloc_r+0x36>
 8005e54:	4634      	mov	r4, r6
 8005e56:	6876      	ldr	r6, [r6, #4]
 8005e58:	e7b4      	b.n	8005dc4 <_malloc_r+0x4c>
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	e7cc      	b.n	8005df8 <_malloc_r+0x80>
 8005e5e:	230c      	movs	r3, #12
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4638      	mov	r0, r7
 8005e64:	f000 f80e 	bl	8005e84 <__malloc_unlock>
 8005e68:	e797      	b.n	8005d9a <_malloc_r+0x22>
 8005e6a:	6025      	str	r5, [r4, #0]
 8005e6c:	e7dc      	b.n	8005e28 <_malloc_r+0xb0>
 8005e6e:	605b      	str	r3, [r3, #4]
 8005e70:	deff      	udf	#255	; 0xff
 8005e72:	bf00      	nop
 8005e74:	20000700 	.word	0x20000700

08005e78 <__malloc_lock>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__malloc_lock+0x8>)
 8005e7a:	f000 b84b 	b.w	8005f14 <__retarget_lock_acquire_recursive>
 8005e7e:	bf00      	nop
 8005e80:	20000844 	.word	0x20000844

08005e84 <__malloc_unlock>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__malloc_unlock+0x8>)
 8005e86:	f000 b846 	b.w	8005f16 <__retarget_lock_release_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	20000844 	.word	0x20000844

08005e90 <memset>:
 8005e90:	4402      	add	r2, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <_sbrk_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4d06      	ldr	r5, [pc, #24]	; (8005ebc <_sbrk_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	602b      	str	r3, [r5, #0]
 8005eac:	f7fb fd2c 	bl	8001908 <_sbrk>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_sbrk_r+0x1a>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_sbrk_r+0x1a>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20000840 	.word	0x20000840

08005ec0 <__errno>:
 8005ec0:	4b01      	ldr	r3, [pc, #4]	; (8005ec8 <__errno+0x8>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	2000005c 	.word	0x2000005c

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	; (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	; (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	; (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 f81a 	bl	8005f18 <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	08005f7c 	.word	0x08005f7c
 8005f08:	08005f7c 	.word	0x08005f7c
 8005f0c:	08005f7c 	.word	0x08005f7c
 8005f10:	08005f80 	.word	0x08005f80

08005f14 <__retarget_lock_acquire_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <__retarget_lock_release_recursive>:
 8005f16:	4770      	bx	lr

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
