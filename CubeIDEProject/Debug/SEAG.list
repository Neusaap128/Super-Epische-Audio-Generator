
SEAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006480  08006480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c4  080064c4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064cc  080064cc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080064d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000060  08006534  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08006534  000205fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1a2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000321b  00000000  00000000  0003a275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001668  00000000  00000000  0003d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116b  00000000  00000000  0003eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202ff  00000000  00000000  0003fc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a254  00000000  00000000  0005ff62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000debe1  00000000  00000000  0007a1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064e8  00000000  00000000  00158d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006468 	.word	0x08006468

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	08006468 	.word	0x08006468

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295
 8000a08:	f000 b970 	b.w	8000cec <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9e08      	ldr	r6, [sp, #32]
 8000a2a:	460d      	mov	r5, r1
 8000a2c:	4604      	mov	r4, r0
 8000a2e:	460f      	mov	r7, r1
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d14a      	bne.n	8000aca <__udivmoddi4+0xa6>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4694      	mov	ip, r2
 8000a38:	d965      	bls.n	8000b06 <__udivmoddi4+0xe2>
 8000a3a:	fab2 f382 	clz	r3, r2
 8000a3e:	b143      	cbz	r3, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	f1c3 0220 	rsb	r2, r3, #32
 8000a48:	409f      	lsls	r7, r3
 8000a4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	409c      	lsls	r4, r3
 8000a52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a56:	fa1f f58c 	uxth.w	r5, ip
 8000a5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a5e:	0c22      	lsrs	r2, r4, #16
 8000a60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a68:	fb01 f005 	mul.w	r0, r1, r5
 8000a6c:	4290      	cmp	r0, r2
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x62>
 8000a70:	eb1c 0202 	adds.w	r2, ip, r2
 8000a74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a78:	f080 811c 	bcs.w	8000cb4 <__udivmoddi4+0x290>
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	f240 8119 	bls.w	8000cb4 <__udivmoddi4+0x290>
 8000a82:	3902      	subs	r1, #2
 8000a84:	4462      	add	r2, ip
 8000a86:	1a12      	subs	r2, r2, r0
 8000a88:	b2a4      	uxth	r4, r4
 8000a8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a96:	fb00 f505 	mul.w	r5, r0, r5
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	d90a      	bls.n	8000ab4 <__udivmoddi4+0x90>
 8000a9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aa6:	f080 8107 	bcs.w	8000cb8 <__udivmoddi4+0x294>
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	f240 8104 	bls.w	8000cb8 <__udivmoddi4+0x294>
 8000ab0:	4464      	add	r4, ip
 8000ab2:	3802      	subs	r0, #2
 8000ab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ab8:	1b64      	subs	r4, r4, r5
 8000aba:	2100      	movs	r1, #0
 8000abc:	b11e      	cbz	r6, 8000ac6 <__udivmoddi4+0xa2>
 8000abe:	40dc      	lsrs	r4, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0xbc>
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	f000 80ed 	beq.w	8000cae <__udivmoddi4+0x28a>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	e9c6 0500 	strd	r0, r5, [r6]
 8000ada:	4608      	mov	r0, r1
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	fab3 f183 	clz	r1, r3
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d149      	bne.n	8000b7c <__udivmoddi4+0x158>
 8000ae8:	42ab      	cmp	r3, r5
 8000aea:	d302      	bcc.n	8000af2 <__udivmoddi4+0xce>
 8000aec:	4282      	cmp	r2, r0
 8000aee:	f200 80f8 	bhi.w	8000ce2 <__udivmoddi4+0x2be>
 8000af2:	1a84      	subs	r4, r0, r2
 8000af4:	eb65 0203 	sbc.w	r2, r5, r3
 8000af8:	2001      	movs	r0, #1
 8000afa:	4617      	mov	r7, r2
 8000afc:	2e00      	cmp	r6, #0
 8000afe:	d0e2      	beq.n	8000ac6 <__udivmoddi4+0xa2>
 8000b00:	e9c6 4700 	strd	r4, r7, [r6]
 8000b04:	e7df      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000b06:	b902      	cbnz	r2, 8000b0a <__udivmoddi4+0xe6>
 8000b08:	deff      	udf	#255	; 0xff
 8000b0a:	fab2 f382 	clz	r3, r2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8090 	bne.w	8000c34 <__udivmoddi4+0x210>
 8000b14:	1a8a      	subs	r2, r1, r2
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b24:	fb07 2015 	mls	r0, r7, r5, r2
 8000b28:	0c22      	lsrs	r2, r4, #16
 8000b2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b2e:	fb0e f005 	mul.w	r0, lr, r5
 8000b32:	4290      	cmp	r0, r2
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x124>
 8000b36:	eb1c 0202 	adds.w	r2, ip, r2
 8000b3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x122>
 8000b40:	4290      	cmp	r0, r2
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2b8>
 8000b46:	4645      	mov	r5, r8
 8000b48:	1a12      	subs	r2, r2, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b50:	fb07 2210 	mls	r2, r7, r0, r2
 8000b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x14e>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x14c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2c2>
 8000b70:	4610      	mov	r0, r2
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b7a:	e79f      	b.n	8000abc <__udivmoddi4+0x98>
 8000b7c:	f1c1 0720 	rsb	r7, r1, #32
 8000b80:	408b      	lsls	r3, r1
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b92:	40fd      	lsrs	r5, r7
 8000b94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b98:	4323      	orrs	r3, r4
 8000b9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ba2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ba6:	0c1c      	lsrs	r4, r3, #16
 8000ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bac:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb0:	42a5      	cmp	r5, r4
 8000bb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b0>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2b4>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4464      	add	r4, ip
 8000bd4:	1b64      	subs	r4, r4, r5
 8000bd6:	b29d      	uxth	r5, r3
 8000bd8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bdc:	fb09 4413 	mls	r4, r9, r3, r4
 8000be0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000be4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1da>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2ac>
 8000bfa:	3b02      	subs	r3, #2
 8000bfc:	4464      	add	r4, ip
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fba3 9502 	umull	r9, r5, r3, r2
 8000c06:	eba4 040e 	sub.w	r4, r4, lr
 8000c0a:	42ac      	cmp	r4, r5
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46ae      	mov	lr, r5
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x29c>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x298>
 8000c14:	b156      	cbz	r6, 8000c2c <__udivmoddi4+0x208>
 8000c16:	ebb0 0208 	subs.w	r2, r0, r8
 8000c1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c22:	40ca      	lsrs	r2, r1
 8000c24:	40cc      	lsrs	r4, r1
 8000c26:	4317      	orrs	r7, r2
 8000c28:	e9c6 7400 	strd	r7, r4, [r6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	2100      	movs	r1, #0
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	f1c3 0120 	rsb	r1, r3, #32
 8000c38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c40:	fa25 f101 	lsr.w	r1, r5, r1
 8000c44:	409d      	lsls	r5, r3
 8000c46:	432a      	orrs	r2, r5
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c54:	fb07 1510 	mls	r5, r7, r0, r1
 8000c58:	0c11      	lsrs	r1, r2, #16
 8000c5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c62:	428d      	cmp	r5, r1
 8000c64:	fa04 f403 	lsl.w	r4, r4, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x258>
 8000c6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c74:	428d      	cmp	r5, r1
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b0>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1b49      	subs	r1, r1, r5
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c84:	fb07 1115 	mls	r1, r7, r5, r1
 8000c88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c90:	4291      	cmp	r1, r2
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x282>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000ca2:	3d02      	subs	r5, #2
 8000ca4:	4462      	add	r2, ip
 8000ca6:	1a52      	subs	r2, r2, r1
 8000ca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0xfc>
 8000cae:	4631      	mov	r1, r6
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	e708      	b.n	8000ac6 <__udivmoddi4+0xa2>
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e6e6      	b.n	8000a86 <__udivmoddi4+0x62>
 8000cb8:	4610      	mov	r0, r2
 8000cba:	e6fb      	b.n	8000ab4 <__udivmoddi4+0x90>
 8000cbc:	4548      	cmp	r0, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f0>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f0>
 8000ccc:	4645      	mov	r5, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x282>
 8000cd0:	462b      	mov	r3, r5
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1da>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x258>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b0>
 8000cdc:	3d02      	subs	r5, #2
 8000cde:	4462      	add	r2, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x124>
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e70a      	b.n	8000afc <__udivmoddi4+0xd8>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x14e>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <InitDSP>:
const int samplingRate = 44E3; //44Khz

SampleType* previousSamples;
SampleType* previousOutputs;

void InitDSP(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	previousSamples = (SampleType*)malloc(N*sizeof(SampleType));
 8000cf4:	2340      	movs	r3, #64	; 0x40
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f005 fabd 	bl	8006278 <malloc>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <InitDSP+0x2c>)
 8000d04:	601a      	str	r2, [r3, #0]
	previousOutputs = (SampleType*)malloc(N*sizeof(SampleType));
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f005 fab4 	bl	8006278 <malloc>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b02      	ldr	r3, [pc, #8]	; (8000d20 <InitDSP+0x30>)
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000007c 	.word	0x2000007c
 8000d20:	20000080 	.word	0x20000080

08000d24 <processBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void processBuffer(const uint16_t* input, uint16_t* output, size_t bufferLength) {
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < bufferLength; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00c      	b.n	8000d50 <processBuffer+0x2c>
        output[i] = input[i];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	441a      	add	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	440b      	add	r3, r1
 8000d46:	8812      	ldrh	r2, [r2, #0]
 8000d48:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < bufferLength; i++) {
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8ee      	bhi.n	8000d36 <processBuffer+0x12>
        // output[i] = (uint16_t)(((float)(input[i])) / 4095.0f * 227.0f);
    }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	371c      	adds	r7, #28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <HAL_ADC_ConvHalfCpltCallback>:

//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[0];
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000d72:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000d74:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[0];
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000d7a:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)adcBuf, dacBuf, AUDIO_BUFFER_SIZE/2);
 8000d7c:	2240      	movs	r2, #64	; 0x40
 8000d7e:	490b      	ldr	r1, [pc, #44]	; (8000dac <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8000d82:	f7ff ffcf 	bl	8000d24 <processBuffer>

	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f003 f8a9 	bl	8003ee4 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	701a      	strb	r2, [r3, #0]

}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200004a4 	.word	0x200004a4
 8000da4:	200002a4 	.word	0x200002a4
 8000da8:	20000000 	.word	0x20000000
 8000dac:	200003a4 	.word	0x200003a4
 8000db0:	200004a8 	.word	0x200004a8

08000db4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

	inBufPointer = &adcBuf[AUDIO_BUFFER_SIZE/2];
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_ADC_ConvCpltCallback+0x40>)
 8000dc0:	601a      	str	r2, [r3, #0]
	outBufPointer = &dacBuf[AUDIO_BUFFER_SIZE/2];
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <HAL_ADC_ConvCpltCallback+0x48>)
 8000dc6:	601a      	str	r2, [r3, #0]

	processBuffer((uint16_t*)(adcBuf+AUDIO_BUFFER_SIZE/2), (uint16_t*)(dacBuf+AUDIO_BUFFER_SIZE/2), AUDIO_BUFFER_SIZE/2);
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_ADC_ConvCpltCallback+0x40>)
 8000dca:	490c      	ldr	r1, [pc, #48]	; (8000dfc <HAL_ADC_ConvCpltCallback+0x48>)
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ffa8 	bl	8000d24 <processBuffer>
	HAL_GPIO_TogglePin(SampleFreqOutClk_GPIO_Port, SampleFreqOutClk_Pin);
 8000dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f003 f882 	bl	8003ee4 <HAL_GPIO_TogglePin>

	dataReadyFlag = 1;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200004a4 	.word	0x200004a4
 8000df4:	20000324 	.word	0x20000324
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000424 	.word	0x20000424
 8000e00:	200004a8 	.word	0x200004a8

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fcea 	bl	80017e2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 f82b 	bl	8000e68 <SystemClock_Config>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e12:	b662      	cpsie	i
}
 8000e14:	bf00      	nop


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 f9ff 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1a:	f000 f9c3 	bl	80011a4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000e1e:	f000 f923 	bl	8001068 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000e22:	f000 f86d 	bl	8000f00 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e26:	f000 f8e5 	bl	8000ff4 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000e2a:	f000 f969 	bl	8001100 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 8000e2e:	4809      	ldr	r0, [pc, #36]	; (8000e54 <main+0x50>)
 8000e30:	f004 f89c 	bl	8004f6c <HAL_TIM_Base_Start>
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);

  InitDSP();
 8000e34:	f7ff ff5c 	bl	8000cf0 <InitDSP>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuf, AUDIO_BUFFER_SIZE);
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	4907      	ldr	r1, [pc, #28]	; (8000e58 <main+0x54>)
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <main+0x58>)
 8000e3e:	f001 f8e3 	bl	8002008 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dacBuf, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000e42:	2300      	movs	r3, #0
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <main+0x5c>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <main+0x60>)
 8000e4e:	f002 f89f 	bl	8002f90 <HAL_DAC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <main+0x4e>
 8000e54:	20000258 	.word	0x20000258
 8000e58:	200002a4 	.word	0x200002a4
 8000e5c:	20000084 	.word	0x20000084
 8000e60:	200003a4 	.word	0x200003a4
 8000e64:	20000150 	.word	0x20000150

08000e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b094      	sub	sp, #80	; 0x50
 8000e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	2238      	movs	r2, #56	; 0x38
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fab2 	bl	80063e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f003 f844 	bl	8003f18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000eaa:	2355      	movs	r3, #85	; 0x55
 8000eac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eba:	f107 0318 	add.w	r3, r7, #24
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 f8de 	bl	8004080 <HAL_RCC_OscConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eca:	f000 fa23 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ece:	230f      	movs	r3, #15
 8000ed0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fbdc 	bl	80046a4 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ef2:	f000 fa0f 	bl	8001314 <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2220      	movs	r2, #32
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f005 fa61 	bl	80063e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f48:	2204      	movs	r2, #4
 8000f4a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f68:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8c:	4817      	ldr	r0, [pc, #92]	; (8000fec <MX_ADC1_Init+0xec>)
 8000f8e:	f000 feb7 	bl	8001d00 <HAL_ADC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f98:	f000 f9bc 	bl	8001314 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_ADC1_Init+0xec>)
 8000fa8:	f001 fe1c 	bl	8002be4 <HAL_ADCEx_MultiModeConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fb2:	f000 f9af 	bl	8001314 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_ADC1_Init+0xf0>)
 8000fb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fc2:	237f      	movs	r3, #127	; 0x7f
 8000fc4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_ADC1_Init+0xec>)
 8000fd4:	f001 f8d6 	bl	8002184 <HAL_ADC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fde:	f000 f999 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000084 	.word	0x20000084
 8000ff0:	04300002 	.word	0x04300002

08000ff4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	; 0x30
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2230      	movs	r2, #48	; 0x30
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f005 f9ed 	bl	80063e0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_DAC1_Init+0x6c>)
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <MX_DAC1_Init+0x70>)
 800100a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800100c:	4814      	ldr	r0, [pc, #80]	; (8001060 <MX_DAC1_Init+0x6c>)
 800100e:	f001 ff9c 	bl	8002f4a <HAL_DAC_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001018:	f000 f97c 	bl	8001314 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800101c:	2302      	movs	r3, #2
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800102c:	231e      	movs	r3, #30
 800102e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001040:	463b      	mov	r3, r7
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_DAC1_Init+0x6c>)
 8001048:	f002 f8f4 	bl	8003234 <HAL_DAC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001052:	f000 f95f 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000150 	.word	0x20000150
 8001064:	50000800 	.word	0x50000800

08001068 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <MX_LPUART1_UART_Init+0x90>)
 8001070:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010aa:	4812      	ldr	r0, [pc, #72]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 80010ac:	f004 faa6 	bl	80055fc <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80010b6:	f000 f92d 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 80010be:	f005 f811 	bl	80060e4 <HAL_UARTEx_SetTxFifoThreshold>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010c8:	f000 f924 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010cc:	2100      	movs	r1, #0
 80010ce:	4809      	ldr	r0, [pc, #36]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 80010d0:	f005 f846 	bl	8006160 <HAL_UARTEx_SetRxFifoThreshold>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010da:	f000 f91b 	bl	8001314 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_LPUART1_UART_Init+0x8c>)
 80010e0:	f004 ffc7 	bl	8006072 <HAL_UARTEx_DisableFifoMode>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010ea:	f000 f913 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001c4 	.word	0x200001c4
 80010f8:	40008000 	.word	0x40008000
 80010fc:	00000000 	.word	0x00000000

08001100 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <MX_TIM6_Init+0x98>)
 8001112:	4a22      	ldr	r2, [pc, #136]	; (800119c <MX_TIM6_Init+0x9c>)
 8001114:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_TIM6_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_TIM6_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3864;
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM6_Init+0x98>)
 8001124:	f640 7218 	movw	r2, #3864	; 0xf18
 8001128:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM6_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001130:	4819      	ldr	r0, [pc, #100]	; (8001198 <MX_TIM6_Init+0x98>)
 8001132:	f003 fec3 	bl	8004ebc <HAL_TIM_Base_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800113c:	f000 f8ea 	bl	8001314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001140:	2320      	movs	r3, #32
 8001142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4812      	ldr	r0, [pc, #72]	; (8001198 <MX_TIM6_Init+0x98>)
 800114e:	f004 f98d 	bl	800546c <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001158:	f000 f8dc 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  htim6.Init.Period = 170E6/samplingRate;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <MX_TIM6_Init+0xa0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9ab 	bl	80004bc <__aeabi_i2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	a109      	add	r1, pc, #36	; (adr r1, 8001190 <MX_TIM6_Init+0x90>)
 800116c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001170:	f7ff fb38 	bl	80007e4 <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fc1a 	bl	80009b4 <__aeabi_d2uiz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <MX_TIM6_Init+0x98>)
 8001184:	60d3      	str	r3, [r2, #12]
  /* USER CODE END TIM6_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	00000000 	.word	0x00000000
 8001194:	41a443fd 	.word	0x41a443fd
 8001198:	20000258 	.word	0x20000258
 800119c:	40001000 	.word	0x40001000
 80011a0:	08006480 	.word	0x08006480

080011a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_DMA_Init+0x70>)
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <MX_DMA_Init+0x70>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6493      	str	r3, [r2, #72]	; 0x48
 80011b6:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_DMA_Init+0x70>)
 80011b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DMA_Init+0x70>)
 80011c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_DMA_Init+0x70>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6493      	str	r3, [r2, #72]	; 0x48
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA_Init+0x70>)
 80011d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	200b      	movs	r0, #11
 80011e0:	f001 fe7f 	bl	8002ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011e4:	200b      	movs	r0, #11
 80011e6:	f001 fe96 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	200c      	movs	r0, #12
 80011f0:	f001 fe77 	bl	8002ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011f4:	200c      	movs	r0, #12
 80011f6:	f001 fe8e 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	205e      	movs	r0, #94	; 0x5e
 8001200:	f001 fe6f 	bl	8002ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8001204:	205e      	movs	r0, #94	; 0x5e
 8001206:	f001 fe86 	bl	8002f16 <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a35      	ldr	r2, [pc, #212]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <MX_GPIO_Init+0xf0>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <MX_GPIO_Init+0xf0>)
 800124c:	f043 0320 	orr.w	r3, r3, #32
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <MX_GPIO_Init+0xf0>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_GPIO_Init+0xf0>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_GPIO_Init+0xf0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001298:	f002 fe0c 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2110      	movs	r1, #16
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <MX_GPIO_Init+0xf4>)
 80012a2:	f002 fe07 	bl	8003eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_GPIO_Init+0xf8>)
 80012be:	f002 fc77 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KnipperLedje_Pin SampleFreqOutClk_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KnipperLedje_Pin|SampleFreqOutClk_Pin;
 80012c2:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f002 fc67 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e2:	2310      	movs	r3, #16
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_GPIO_Init+0xf4>)
 80012fa:	f002 fc59 	bl	8003bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	48000400 	.word	0x48000400
 8001310:	48000800 	.word	0x48000800

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_MspInit+0x44>)
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_MspInit+0x44>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6613      	str	r3, [r2, #96]	; 0x60
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_MspInit+0x44>)
 8001334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_MspInit+0x44>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	4a08      	ldr	r2, [pc, #32]	; (8001364 <HAL_MspInit+0x44>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6593      	str	r3, [r2, #88]	; 0x58
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_MspInit+0x44>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001356:	f002 fe83 	bl	8004060 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000

08001368 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09a      	sub	sp, #104	; 0x68
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2244      	movs	r2, #68	; 0x44
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f005 f829 	bl	80063e0 <memset>
  if(hadc->Instance==ADC1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001396:	d160      	bne.n	800145a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800139c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800139e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 fb97 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013b4:	f7ff ffae 	bl	8001314 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_ADC_MspInit+0xfc>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AudioIn_Pin;
 80013e8:	2301      	movs	r3, #1
 80013ea:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ec:	2303      	movs	r3, #3
 80013ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(AudioIn_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f002 fbd7 	bl	8003bb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_ADC_MspInit+0x104>)
 8001406:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <HAL_ADC_MspInit+0x100>)
 800140a:	2205      	movs	r2, #5
 800140c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <HAL_ADC_MspInit+0x100>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_ADC_MspInit+0x100>)
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001432:	2220      	movs	r2, #32
 8001434:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001438:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800143c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800143e:	480a      	ldr	r0, [pc, #40]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001440:	f002 f944 	bl	80036cc <HAL_DMA_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800144a:	f7ff ff63 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_ADC_MspInit+0x100>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3768      	adds	r7, #104	; 0x68
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	200000f0 	.word	0x200000f0
 800146c:	40020008 	.word	0x40020008

08001470 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_DAC_MspInit+0xdc>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d158      	bne.n	8001544 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001492:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a2e      	ldr	r2, [pc, #184]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a28      	ldr	r2, [pc, #160]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c2:	2310      	movs	r3, #16
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f002 fb6a 	bl	8003bb0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_DAC_MspInit+0xe8>)
 80014e0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 80014e4:	2206      	movs	r2, #6
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 80014ea:	2210      	movs	r2, #16
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 80014fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001500:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 8001504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001508:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 800150c:	2220      	movs	r2, #32
 800150e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 8001512:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001518:	480e      	ldr	r0, [pc, #56]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 800151a:	f002 f8d7 	bl	80036cc <HAL_DMA_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001524:	f7ff fef6 	bl	8001314 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2100      	movs	r1, #0
 8001538:	2036      	movs	r0, #54	; 0x36
 800153a:	f001 fcd2 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800153e:	2036      	movs	r0, #54	; 0x36
 8001540:	f001 fce9 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	50000800 	.word	0x50000800
 8001550:	40021000 	.word	0x40021000
 8001554:	20000164 	.word	0x20000164
 8001558:	4002001c 	.word	0x4002001c

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b09a      	sub	sp, #104	; 0x68
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	2244      	movs	r2, #68	; 0x44
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f004 ff2f 	bl	80063e0 <memset>
  if(huart->Instance==LPUART1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <HAL_UART_MspInit+0xa8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d136      	bne.n	80015fa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800158c:	2320      	movs	r3, #32
 800158e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fa9f 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a4:	f7ff feb6 	bl	8001314 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_UART_MspInit+0xac>)
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	4a16      	ldr	r2, [pc, #88]	; (8001608 <HAL_UART_MspInit+0xac>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_UART_MspInit+0xac>)
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_UART_MspInit+0xac>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	4a10      	ldr	r2, [pc, #64]	; (8001608 <HAL_UART_MspInit+0xac>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_UART_MspInit+0xac>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80015d8:	230c      	movs	r3, #12
 80015da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80015e8:	230c      	movs	r3, #12
 80015ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f002 fadb 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3768      	adds	r7, #104	; 0x68
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40008000 	.word	0x40008000
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_TIM_Base_MspInit+0x44>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_TIM_Base_MspInit+0x48>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_TIM_Base_MspInit+0x48>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	6593      	str	r3, [r2, #88]	; 0x58
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_TIM_Base_MspInit+0x48>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2036      	movs	r0, #54	; 0x36
 800163c:	f001 fc51 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001640:	2036      	movs	r0, #54	; 0x36
 8001642:	f001 fc68 	bl	8002f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40001000 	.word	0x40001000
 8001654:	40021000 	.word	0x40021000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f8f0 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Channel1_IRQHandler+0x10>)
 80016b2:	f002 f92e 	bl	8003912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000f0 	.word	0x200000f0

080016c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <DMA1_Channel2_IRQHandler+0x10>)
 80016c6:	f002 f924 	bl	8003912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000164 	.word	0x20000164

080016d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016d8:	4803      	ldr	r0, [pc, #12]	; (80016e8 <TIM6_DAC_IRQHandler+0x14>)
 80016da:	f003 fca9 	bl	8005030 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <TIM6_DAC_IRQHandler+0x18>)
 80016e0:	f001 fd2a 	bl	8003138 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000258 	.word	0x20000258
 80016ec:	20000150 	.word	0x20000150

080016f0 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f004 fe6e 	bl	8006410 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20008000 	.word	0x20008000
 8001760:	00000400 	.word	0x00000400
 8001764:	200004ac 	.word	0x200004ac
 8001768:	20000600 	.word	0x20000600

0800176c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001792:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff ffea 	bl	800176c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <LoopForever+0x6>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <LoopForever+0xe>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <LoopForever+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f004 fe2d 	bl	800641c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017c2:	f7ff fb1f 	bl	8000e04 <main>

080017c6 <LoopForever>:

LoopForever:
    b LoopForever
 80017c6:	e7fe      	b.n	80017c6 <LoopForever>
  ldr   r0, =_estack
 80017c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017d4:	080064d4 	.word	0x080064d4
  ldr r2, =_sbss
 80017d8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017dc:	200005fc 	.word	0x200005fc

080017e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC1_2_IRQHandler>

080017e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f001 fb6d 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f80e 	bl	8001814 <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	e001      	b.n	8001808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001804:	f7ff fd8c 	bl	8001320 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001808:	79fb      	ldrb	r3, [r7, #7]

}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_InitTick+0x68>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d022      	beq.n	800186e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_InitTick+0x6c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_InitTick+0x68>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001834:	fbb1 f3f3 	udiv	r3, r1, r3
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fb78 	bl	8002f32 <HAL_SYSTICK_Config>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b0f      	cmp	r3, #15
 800184c:	d809      	bhi.n	8001862 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184e:	2200      	movs	r2, #0
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	f04f 30ff 	mov.w	r0, #4294967295
 8001856:	f001 fb44 	bl	8002ee2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_InitTick+0x70>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e007      	b.n	8001872 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e004      	b.n	8001872 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
 800186c:	e001      	b.n	8001872 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	2000000c 	.word	0x2000000c
 8001880:	20000004 	.word	0x20000004
 8001884:	20000008 	.word	0x20000008

08001888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x1c>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x20>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4413      	add	r3, r2
 8001896:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_IncTick+0x1c>)
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	200004b0 	.word	0x200004b0
 80018a8:	2000000c 	.word	0x2000000c

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	200004b0 	.word	0x200004b0

080018c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	609a      	str	r2, [r3, #8]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3360      	adds	r3, #96	; 0x60
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <LL_ADC_SetOffset+0x44>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	4313      	orrs	r3, r2
 800195c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	03fff000 	.word	0x03fff000

08001974 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3360      	adds	r3, #96	; 0x60
 8001982:	461a      	mov	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3360      	adds	r3, #96	; 0x60
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b087      	sub	sp, #28
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3360      	adds	r3, #96	; 0x60
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3360      	adds	r3, #96	; 0x60
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	615a      	str	r2, [r3, #20]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3330      	adds	r3, #48	; 0x30
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	4413      	add	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	211f      	movs	r1, #31
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	f003 011f 	and.w	r1, r3, #31
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ada:	bf00      	nop
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3314      	adds	r3, #20
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0e5b      	lsrs	r3, r3, #25
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0d1b      	lsrs	r3, r3, #20
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2107      	movs	r1, #7
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0d1b      	lsrs	r3, r3, #20
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0318 	and.w	r3, r3, #24
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b60:	40d9      	lsrs	r1, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	400b      	ands	r3, r1
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	0007ffff 	.word	0x0007ffff

08001b84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 031f 	and.w	r3, r3, #31
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6093      	str	r3, [r2, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bd8:	d101      	bne.n	8001bde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c28:	d101      	bne.n	8001c2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <LL_ADC_IsEnabled+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_ADC_IsEnabled+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c9e:	f043 0204 	orr.w	r2, r3, #4
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d101      	bne.n	8001cca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d101      	bne.n	8001cf0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b089      	sub	sp, #36	; 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e167      	b.n	8001fea <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fb1d 	bl	8001368 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff3f 	bl	8001bc4 <LL_ADC_IsDeepPowerDownEnabled>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff25 	bl	8001ba0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff5a 	bl	8001c14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d115      	bne.n	8001d92 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff3e 	bl	8001bec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d70:	4ba0      	ldr	r3, [pc, #640]	; (8001ff4 <HAL_ADC_Init+0x2f4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	099b      	lsrs	r3, r3, #6
 8001d76:	4aa0      	ldr	r2, [pc, #640]	; (8001ff8 <HAL_ADC_Init+0x2f8>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	3301      	adds	r3, #1
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff3c 	bl	8001c14 <LL_ADC_IsInternalRegulatorEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff75 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 8100 	bne.w	8001fd8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80fc 	bne.w	8001fd8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001de8:	f043 0202 	orr.w	r2, r3, #2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff35 	bl	8001c64 <LL_ADC_IsEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d111      	bne.n	8001e24 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e04:	f7ff ff2e 	bl	8001c64 <LL_ADC_IsEnabled>
 8001e08:	4604      	mov	r4, r0
 8001e0a:	487c      	ldr	r0, [pc, #496]	; (8001ffc <HAL_ADC_Init+0x2fc>)
 8001e0c:	f7ff ff2a 	bl	8001c64 <LL_ADC_IsEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4323      	orrs	r3, r4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4878      	ldr	r0, [pc, #480]	; (8002000 <HAL_ADC_Init+0x300>)
 8001e20:	f7ff fd50 	bl	80018c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7f5b      	ldrb	r3, [r3, #29]
 8001e28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	3b01      	subs	r3, #1
 8001e58:	045b      	lsls	r3, r3, #17
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_ADC_Init+0x304>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff14 	bl	8001cd8 <LL_ADC_INJ_IsConversionOngoing>
 8001eb0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d16d      	bne.n	8001f94 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d16a      	bne.n	8001f94 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eda:	f023 0302 	bic.w	r3, r3, #2
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d017      	beq.n	8001f20 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001efe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6911      	ldr	r1, [r2, #16]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f1e:	e013      	b.n	8001f48 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f44:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d118      	bne.n	8001f84 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f6e:	4311      	orrs	r1, r2
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f74:	430a      	orrs	r2, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	e007      	b.n	8001f94 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691a      	ldr	r2, [r3, #16]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f023 010f 	bic.w	r1, r3, #15
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	1e5a      	subs	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001fb4:	e007      	b.n	8001fc6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 020f 	bic.w	r2, r2, #15
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fd6:	e007      	b.n	8001fe8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	f043 0210 	orr.w	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	053e2d63 	.word	0x053e2d63
 8001ffc:	50000100 	.word	0x50000100
 8002000:	50000300 	.word	0x50000300
 8002004:	fff04007 	.word	0xfff04007

08002008 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002014:	4851      	ldr	r0, [pc, #324]	; (800215c <HAL_ADC_Start_DMA+0x154>)
 8002016:	f7ff fdb5 	bl	8001b84 <LL_ADC_GetMultimode>
 800201a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe46 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 808f 	bne.w	800214c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_ADC_Start_DMA+0x34>
 8002038:	2302      	movs	r3, #2
 800203a:	e08a      	b.n	8002152 <HAL_ADC_Start_DMA+0x14a>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d002      	beq.n	8002056 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b09      	cmp	r3, #9
 8002054:	d173      	bne.n	800213e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 fc84 	bl	8002964 <ADC_Enable>
 800205c:	4603      	mov	r3, r0
 800205e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002060:	7dfb      	ldrb	r3, [r7, #23]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d166      	bne.n	8002134 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_ADC_Start_DMA+0x158>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d002      	beq.n	800208a <HAL_ADC_Start_DMA+0x82>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	e001      	b.n	800208e <HAL_ADC_Start_DMA+0x86>
 800208a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4293      	cmp	r3, r2
 8002094:	d002      	beq.n	800209c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b8:	f023 0206 	bic.w	r2, r3, #6
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	661a      	str	r2, [r3, #96]	; 0x60
 80020c0:	e002      	b.n	80020c8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <HAL_ADC_Start_DMA+0x15c>)
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <HAL_ADC_Start_DMA+0x160>)
 80020d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	4a23      	ldr	r2, [pc, #140]	; (800216c <HAL_ADC_Start_DMA+0x164>)
 80020de:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	221c      	movs	r2, #28
 80020e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0210 	orr.w	r2, r2, #16
 80020fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3340      	adds	r3, #64	; 0x40
 800211a:	4619      	mov	r1, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f001 fb7c 	bl	800381c <HAL_DMA_Start_IT>
 8002124:	4603      	mov	r3, r0
 8002126:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fdac 	bl	8001c8a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002132:	e00d      	b.n	8002150 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800213c:	e008      	b.n	8002150 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800214a:	e001      	b.n	8002150 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800214c:	2302      	movs	r3, #2
 800214e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002150:	7dfb      	ldrb	r3, [r7, #23]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	50000300 	.word	0x50000300
 8002160:	50000100 	.word	0x50000100
 8002164:	08002a71 	.word	0x08002a71
 8002168:	08002b49 	.word	0x08002b49
 800216c:	08002b65 	.word	0x08002b65

08002170 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0b6      	sub	sp, #216	; 0xd8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x22>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e3c8      	b.n	8002938 <HAL_ADC_ConfigChannel+0x7b4>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fd7d 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 83ad 	bne.w	800291a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	f7ff fc5e 	bl	8001a8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fd6b 	bl	8001cb2 <LL_ADC_REG_IsConversionOngoing>
 80021dc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fd77 	bl	8001cd8 <LL_ADC_INJ_IsConversionOngoing>
 80021ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 81d9 	bne.w	80025aa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f040 81d4 	bne.w	80025aa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800220a:	d10f      	bne.n	800222c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	4619      	mov	r1, r3
 8002218:	f7ff fc65 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fc0c 	bl	8001a42 <LL_ADC_SetSamplingTimeCommonConfig>
 800222a:	e00e      	b.n	800224a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	461a      	mov	r2, r3
 800223a:	f7ff fc54 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fbfc 	bl	8001a42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d022      	beq.n	80022b2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6919      	ldr	r1, [r3, #16]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800227c:	f7ff fb56 	bl	800192c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6919      	ldr	r1, [r3, #16]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	461a      	mov	r2, r3
 800228e:	f7ff fba2 	bl	80019d6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x124>
 80022a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a6:	e000      	b.n	80022aa <HAL_ADC_ConfigChannel+0x126>
 80022a8:	2300      	movs	r3, #0
 80022aa:	461a      	mov	r2, r3
 80022ac:	f7ff fbae 	bl	8001a0c <LL_ADC_SetOffsetSaturation>
 80022b0:	e17b      	b.n	80025aa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fb5b 	bl	8001974 <LL_ADC_GetOffsetChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10a      	bne.n	80022de <HAL_ADC_ConfigChannel+0x15a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fb50 	bl	8001974 <LL_ADC_GetOffsetChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	e01e      	b.n	800231c <HAL_ADC_ConfigChannel+0x198>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fb45 	bl	8001974 <LL_ADC_GetOffsetChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002304:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e004      	b.n	800231a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002324:	2b00      	cmp	r3, #0
 8002326:	d105      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x1b0>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	0e9b      	lsrs	r3, r3, #26
 800232e:	f003 031f 	and.w	r3, r3, #31
 8002332:	e018      	b.n	8002366 <HAL_ADC_ConfigChannel+0x1e2>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e004      	b.n	8002366 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800235c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002366:	429a      	cmp	r2, r3
 8002368:	d106      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fb14 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff faf8 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10a      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x220>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff faed 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	f003 021f 	and.w	r2, r3, #31
 80023a2:	e01e      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x25e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fae2 	bl	8001974 <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e004      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80023d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x276>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	0e9b      	lsrs	r3, r3, #26
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	e018      	b.n	800242c <HAL_ADC_ConfigChannel+0x2a8>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800240e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002416:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800241e:	2320      	movs	r3, #32
 8002420:	e004      	b.n	800242c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002422:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800242c:	429a      	cmp	r2, r3
 800242e:	d106      	bne.n	800243e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fab1 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2102      	movs	r1, #2
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fa95 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10a      	bne.n	800246a <HAL_ADC_ConfigChannel+0x2e6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fa8a 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	0e9b      	lsrs	r3, r3, #26
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	e01e      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x324>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2102      	movs	r1, #2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fa7f 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002476:	4603      	mov	r3, r0
 8002478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002480:	fa93 f3a3 	rbit	r3, r3
 8002484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800248c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e004      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800249c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x33c>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0e9b      	lsrs	r3, r3, #26
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	e016      	b.n	80024ee <HAL_ADC_ConfigChannel+0x36a>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e004      	b.n	80024ee <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e8:	fab3 f383 	clz	r3, r3
 80024ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d106      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2200      	movs	r2, #0
 80024f8:	2102      	movs	r1, #2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fa50 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2103      	movs	r1, #3
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fa34 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800250c:	4603      	mov	r3, r0
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10a      	bne.n	800252c <HAL_ADC_ConfigChannel+0x3a8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2103      	movs	r1, #3
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fa29 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	f003 021f 	and.w	r2, r3, #31
 800252a:	e017      	b.n	800255c <HAL_ADC_ConfigChannel+0x3d8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2103      	movs	r1, #3
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fa1e 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002544:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002546:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800254e:	2320      	movs	r3, #32
 8002550:	e003      	b.n	800255a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002552:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x3f0>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	e011      	b.n	8002598 <HAL_ADC_ConfigChannel+0x414>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002584:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e003      	b.n	8002598 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002598:	429a      	cmp	r2, r3
 800259a:	d106      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	2103      	movs	r1, #3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff f9fb 	bl	80019a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fb58 	bl	8001c64 <LL_ADC_IsEnabled>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 8140 	bne.w	800283c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6819      	ldr	r1, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f7ff fab7 	bl	8001b3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4a8f      	ldr	r2, [pc, #572]	; (8002810 <HAL_ADC_ConfigChannel+0x68c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	f040 8131 	bne.w	800283c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10b      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x47e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2b09      	cmp	r3, #9
 80025f8:	bf94      	ite	ls
 80025fa:	2301      	movls	r3, #1
 80025fc:	2300      	movhi	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	e019      	b.n	8002636 <HAL_ADC_ConfigChannel+0x4b2>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002610:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002612:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e003      	b.n	8002626 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800261e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	2b09      	cmp	r3, #9
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002636:	2b00      	cmp	r3, #0
 8002638:	d079      	beq.n	800272e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d107      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x4d2>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	3301      	adds	r3, #1
 800264e:	069b      	lsls	r3, r3, #26
 8002650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002654:	e015      	b.n	8002682 <HAL_ADC_ConfigChannel+0x4fe>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e003      	b.n	800267a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	3301      	adds	r3, #1
 800267c:	069b      	lsls	r3, r3, #26
 800267e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x51e>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0e9b      	lsrs	r3, r3, #26
 8002694:	3301      	adds	r3, #1
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f303 	lsl.w	r3, r1, r3
 80026a0:	e017      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x54e>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80026b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80026b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80026ba:	2320      	movs	r3, #32
 80026bc:	e003      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80026be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	2101      	movs	r1, #1
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	ea42 0103 	orr.w	r1, r2, r3
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x574>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	3301      	adds	r3, #1
 80026ea:	f003 021f 	and.w	r2, r3, #31
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	e018      	b.n	800272a <HAL_ADC_ConfigChannel+0x5a6>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002710:	2320      	movs	r3, #32
 8002712:	e003      	b.n	800271c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f003 021f 	and.w	r2, r3, #31
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272a:	430b      	orrs	r3, r1
 800272c:	e081      	b.n	8002832 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002736:	2b00      	cmp	r3, #0
 8002738:	d107      	bne.n	800274a <HAL_ADC_ConfigChannel+0x5c6>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	0e9b      	lsrs	r3, r3, #26
 8002740:	3301      	adds	r3, #1
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002748:	e015      	b.n	8002776 <HAL_ADC_ConfigChannel+0x5f2>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002762:	2320      	movs	r3, #32
 8002764:	e003      	b.n	800276e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3301      	adds	r3, #1
 8002770:	069b      	lsls	r3, r3, #26
 8002772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x612>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	0e9b      	lsrs	r3, r3, #26
 8002788:	3301      	adds	r3, #1
 800278a:	f003 031f 	and.w	r3, r3, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	e017      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x642>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	61fb      	str	r3, [r7, #28]
  return result;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	ea42 0103 	orr.w	r1, r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10d      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x66e>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	3b1e      	subs	r3, #30
 80027ea:	051b      	lsls	r3, r3, #20
 80027ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f0:	e01e      	b.n	8002830 <HAL_ADC_ConfigChannel+0x6ac>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	613b      	str	r3, [r7, #16]
  return result;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e006      	b.n	800281c <HAL_ADC_ConfigChannel+0x698>
 800280e:	bf00      	nop
 8002810:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f003 021f 	and.w	r2, r3, #31
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	3b1e      	subs	r3, #30
 800282a:	051b      	lsls	r3, r3, #20
 800282c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002830:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002836:	4619      	mov	r1, r3
 8002838:	f7ff f955 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <HAL_ADC_ConfigChannel+0x7bc>)
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d071      	beq.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002848:	483e      	ldr	r0, [pc, #248]	; (8002944 <HAL_ADC_ConfigChannel+0x7c0>)
 800284a:	f7ff f861 	bl	8001910 <LL_ADC_GetCommonPathInternalCh>
 800284e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3c      	ldr	r2, [pc, #240]	; (8002948 <HAL_ADC_ConfigChannel+0x7c4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x6e2>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3a      	ldr	r2, [pc, #232]	; (800294c <HAL_ADC_ConfigChannel+0x7c8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d127      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002866:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800286a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287a:	d157      	bne.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800287c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002880:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002884:	4619      	mov	r1, r3
 8002886:	482f      	ldr	r0, [pc, #188]	; (8002944 <HAL_ADC_ConfigChannel+0x7c0>)
 8002888:	f7ff f82f 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_ADC_ConfigChannel+0x7cc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	099b      	lsrs	r3, r3, #6
 8002892:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_ADC_ConfigChannel+0x7d0>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028a6:	e002      	b.n	80028ae <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f9      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b4:	e03a      	b.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a27      	ldr	r2, [pc, #156]	; (8002958 <HAL_ADC_ConfigChannel+0x7d4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d113      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a22      	ldr	r2, [pc, #136]	; (800295c <HAL_ADC_ConfigChannel+0x7d8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02a      	beq.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028de:	4619      	mov	r1, r3
 80028e0:	4818      	ldr	r0, [pc, #96]	; (8002944 <HAL_ADC_ConfigChannel+0x7c0>)
 80028e2:	f7ff f802 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028e6:	e021      	b.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_ADC_ConfigChannel+0x7dc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d11c      	bne.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_ADC_ConfigChannel+0x7d8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d011      	beq.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800290c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002910:	4619      	mov	r1, r3
 8002912:	480c      	ldr	r0, [pc, #48]	; (8002944 <HAL_ADC_ConfigChannel+0x7c0>)
 8002914:	f7fe ffe9 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
 8002918:	e008      	b.n	800292c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	f043 0220 	orr.w	r2, r3, #32
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002934:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002938:	4618      	mov	r0, r3
 800293a:	37d8      	adds	r7, #216	; 0xd8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	80080000 	.word	0x80080000
 8002944:	50000300 	.word	0x50000300
 8002948:	c3210000 	.word	0xc3210000
 800294c:	90c00010 	.word	0x90c00010
 8002950:	20000004 	.word	0x20000004
 8002954:	053e2d63 	.word	0x053e2d63
 8002958:	c7520000 	.word	0xc7520000
 800295c:	50000100 	.word	0x50000100
 8002960:	cb840000 	.word	0xcb840000

08002964 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff f975 	bl	8001c64 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d169      	bne.n	8002a54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <ADC_Enable+0xfc>)
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	f043 0210 	orr.w	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e055      	b.n	8002a56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f944 	bl	8001c3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029b4:	482b      	ldr	r0, [pc, #172]	; (8002a64 <ADC_Enable+0x100>)
 80029b6:	f7fe ffab 	bl	8001910 <LL_ADC_GetCommonPathInternalCh>
 80029ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <ADC_Enable+0x104>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <ADC_Enable+0x108>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029de:	e002      	b.n	80029e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029ec:	f7fe ff5e 	bl	80018ac <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029f2:	e028      	b.n	8002a46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff f933 	bl	8001c64 <LL_ADC_IsEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f917 	bl	8001c3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a0e:	f7fe ff4d 	bl	80018ac <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d914      	bls.n	8002a46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d00d      	beq.n	8002a46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e007      	b.n	8002a56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d1cf      	bne.n	80029f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	8000003f 	.word	0x8000003f
 8002a64:	50000300 	.word	0x50000300
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	053e2d63 	.word	0x053e2d63

08002a70 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d14b      	bne.n	8002b22 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d021      	beq.n	8002ae8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe ffdd 	bl	8001a68 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d12b      	bne.n	8002b1a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11f      	bne.n	8002b1a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ae6:	e018      	b.n	8002b1a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d111      	bne.n	8002b1a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7fe f94a 	bl	8000db4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b20:	e00e      	b.n	8002b40 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff fb1e 	bl	8002170 <HAL_ADC_ErrorCallback>
}
 8002b34:	e004      	b.n	8002b40 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7fe f906 	bl	8000d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	f043 0204 	orr.w	r2, r3, #4
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7ff faf0 	bl	8002170 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <LL_ADC_IsEnabled>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <LL_ADC_IsEnabled+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_ADC_IsEnabled+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_ADC_REG_IsConversionOngoing>:
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d101      	bne.n	8002bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b0a1      	sub	sp, #132	; 0x84
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e08b      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c1a:	d102      	bne.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	e001      	b.n	8002c26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	f043 0220 	orr.w	r2, r3, #32
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e06a      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ffb9 	bl	8002bbe <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ffb3 	bl	8002bbe <LL_ADC_REG_IsConversionOngoing>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d14c      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d149      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002c66:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d028      	beq.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c82:	035b      	lsls	r3, r3, #13
 8002c84:	430b      	orrs	r3, r1
 8002c86:	431a      	orrs	r2, r3
 8002c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c90:	f7ff ff82 	bl	8002b98 <LL_ADC_IsEnabled>
 8002c94:	4604      	mov	r4, r0
 8002c96:	4823      	ldr	r0, [pc, #140]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c98:	f7ff ff7e 	bl	8002b98 <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d133      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cac:	f023 030f 	bic.w	r3, r3, #15
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	6811      	ldr	r1, [r2, #0]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cbe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc0:	e024      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ccc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cd2:	f7ff ff61 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4812      	ldr	r0, [pc, #72]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002cda:	f7ff ff5d 	bl	8002b98 <LL_ADC_IsEnabled>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4323      	orrs	r3, r4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d112      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cee:	f023 030f 	bic.w	r3, r3, #15
 8002cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cf4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf6:	e009      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d0a:	e000      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3784      	adds	r7, #132	; 0x84
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	50000100 	.word	0x50000100
 8002d28:	50000300 	.word	0x50000300

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	; (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	; (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f7ff ff8e 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff29 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef0:	f7ff ff40 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff90 	bl	8002e20 <NVIC_EncodePriority>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff5f 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff33 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffa4 	bl	8002e88 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e014      	b.n	8002f86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	791b      	ldrb	r3, [r3, #4]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fe fa7f 	bl	8001470 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b2      	b.n	800310e <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	795b      	ldrb	r3, [r3, #5]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_DAC_Start_DMA+0x24>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e0ac      	b.n	800310e <HAL_DAC_Start_DMA+0x17e>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d129      	bne.n	800301a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	4a53      	ldr	r2, [pc, #332]	; (8003118 <HAL_DAC_Start_DMA+0x188>)
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4a52      	ldr	r2, [pc, #328]	; (800311c <HAL_DAC_Start_DMA+0x18c>)
 8002fd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4a51      	ldr	r2, [pc, #324]	; (8003120 <HAL_DAC_Start_DMA+0x190>)
 8002fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_DAC_Start_DMA+0x6c>
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d005      	beq.n	8003006 <HAL_DAC_Start_DMA+0x76>
 8002ffa:	e009      	b.n	8003010 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	61bb      	str	r3, [r7, #24]
        break;
 8003004:	e033      	b.n	800306e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	61bb      	str	r3, [r7, #24]
        break;
 800300e:	e02e      	b.n	800306e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3310      	adds	r3, #16
 8003016:	61bb      	str	r3, [r7, #24]
        break;
 8003018:	e029      	b.n	800306e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	4a41      	ldr	r2, [pc, #260]	; (8003124 <HAL_DAC_Start_DMA+0x194>)
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	4a40      	ldr	r2, [pc, #256]	; (8003128 <HAL_DAC_Start_DMA+0x198>)
 8003028:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	4a3f      	ldr	r2, [pc, #252]	; (800312c <HAL_DAC_Start_DMA+0x19c>)
 8003030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003040:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_DAC_Start_DMA+0xc0>
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	2b04      	cmp	r3, #4
 800304c:	d005      	beq.n	800305a <HAL_DAC_Start_DMA+0xca>
 800304e:	e009      	b.n	8003064 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3314      	adds	r3, #20
 8003056:	61bb      	str	r3, [r7, #24]
        break;
 8003058:	e009      	b.n	800306e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3318      	adds	r3, #24
 8003060:	61bb      	str	r3, [r7, #24]
        break;
 8003062:	e004      	b.n	800306e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	331c      	adds	r3, #28
 800306a:	61bb      	str	r3, [r7, #24]
        break;
 800306c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d111      	bne.n	8003098 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003082:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6898      	ldr	r0, [r3, #8]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	f000 fbc5 	bl	800381c <HAL_DMA_Start_IT>
 8003092:	4603      	mov	r3, r0
 8003094:	77fb      	strb	r3, [r7, #31]
 8003096:	e010      	b.n	80030ba <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68d8      	ldr	r0, [r3, #12]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	f000 fbb3 	bl	800381c <HAL_DMA_Start_IT>
 80030b6:	4603      	mov	r3, r0
 80030b8:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80030c0:	7ffb      	ldrb	r3, [r7, #31]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11c      	bne.n	8003100 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2201      	movs	r2, #1
 80030d4:	409a      	lsls	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <HAL_DAC_Start_DMA+0x1a0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	099b      	lsrs	r3, r3, #6
 80030e4:	4a13      	ldr	r2, [pc, #76]	; (8003134 <HAL_DAC_Start_DMA+0x1a4>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80030f0:	e002      	b.n	80030f8 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f9      	bne.n	80030f2 <HAL_DAC_Start_DMA+0x162>
 80030fe:	e005      	b.n	800310c <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800310c:	7ffb      	ldrb	r3, [r7, #31]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	080035a5 	.word	0x080035a5
 800311c:	080035c7 	.word	0x080035c7
 8003120:	080035e3 	.word	0x080035e3
 8003124:	08003661 	.word	0x08003661
 8003128:	08003683 	.word	0x08003683
 800312c:	0800369f 	.word	0x0800369f
 8003130:	20000004 	.word	0x20000004
 8003134:	053e2d63 	.word	0x053e2d63

08003138 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01d      	beq.n	8003196 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d018      	beq.n	8003196 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2204      	movs	r2, #4
 8003168:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800317e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800318e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f845 	bl	8003220 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01d      	beq.n	80031dc <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d018      	beq.n	80031dc <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f043 0202 	orr.w	r2, r3, #2
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80031d4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa38 	bl	800364c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_DAC_ConfigChannel+0x1c>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e19e      	b.n	8003592 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	795b      	ldrb	r3, [r3, #5]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_DAC_ConfigChannel+0x2c>
 800325c:	2302      	movs	r3, #2
 800325e:	e198      	b.n	8003592 <HAL_DAC_ConfigChannel+0x35e>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2202      	movs	r2, #2
 800326a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b04      	cmp	r3, #4
 8003272:	d17a      	bne.n	800336a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003274:	f7fe fb1a 	bl	80018ac <HAL_GetTick>
 8003278:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d13d      	bne.n	80032fc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003280:	e018      	b.n	80032b4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003282:	f7fe fb13 	bl	80018ac <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d911      	bls.n	80032b4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f043 0208 	orr.w	r2, r3, #8
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2203      	movs	r2, #3
 80032ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e16e      	b.n	8003592 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1df      	bne.n	8003282 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
 80032cc:	e020      	b.n	8003310 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032ce:	f7fe faed 	bl	80018ac <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d90f      	bls.n	80032fc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da0a      	bge.n	80032fc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f043 0208 	orr.w	r2, r3, #8
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2203      	movs	r2, #3
 80032f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e14a      	b.n	8003592 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	2b00      	cmp	r3, #0
 8003304:	dbe3      	blt.n	80032ce <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	ea02 0103 	and.w	r1, r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	21ff      	movs	r1, #255	; 0xff
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	ea02 0103 	and.w	r1, r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d11d      	bne.n	80033ae <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	221f      	movs	r2, #31
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	4013      	ands	r3, r2
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0310 	and.w	r3, r3, #16
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	4313      	orrs	r3, r2
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2207      	movs	r2, #7
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	4013      	ands	r3, r2
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d102      	bne.n	80033d8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]
 80033d6:	e00f      	b.n	80033f8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d102      	bne.n	80033e6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80033e0:	2301      	movs	r3, #1
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	e008      	b.n	80033f8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80033ee:	2301      	movs	r3, #1
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	e001      	b.n	80033f8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	6a3a      	ldr	r2, [r7, #32]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	4013      	ands	r3, r2
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	791b      	ldrb	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_DAC_ConfigChannel+0x1f8>
 8003426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800342a:	e000      	b.n	800342e <HAL_DAC_ConfigChannel+0x1fa>
 800342c:	2300      	movs	r3, #0
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	4013      	ands	r3, r2
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	795b      	ldrb	r3, [r3, #5]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_DAC_ConfigChannel+0x224>
 8003452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003456:	e000      	b.n	800345a <HAL_DAC_ConfigChannel+0x226>
 8003458:	2300      	movs	r3, #0
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b02      	cmp	r3, #2
 800346e:	d114      	bne.n	800349a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003470:	f001 fab6 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8003474:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4a48      	ldr	r2, [pc, #288]	; (800359c <HAL_DAC_ConfigChannel+0x368>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d904      	bls.n	8003488 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
 8003486:	e00f      	b.n	80034a8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4a45      	ldr	r2, [pc, #276]	; (80035a0 <HAL_DAC_ConfigChannel+0x36c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d90a      	bls.n	80034a6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e006      	b.n	80034a8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	4313      	orrs	r3, r2
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	e000      	b.n	80034a8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034a6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	4313      	orrs	r3, r2
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	400a      	ands	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	4013      	ands	r3, r2
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	4313      	orrs	r3, r2
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6819      	ldr	r1, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	22c0      	movs	r2, #192	; 0xc0
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43da      	mvns	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	400a      	ands	r2, r1
 8003538:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	ea02 0103 	and.w	r1, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	409a      	lsls	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003590:	7ffb      	ldrb	r3, [r7, #31]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3728      	adds	r7, #40	; 0x28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	09896800 	.word	0x09896800
 80035a0:	04c4b400 	.word	0x04c4b400

080035a4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff fe16 	bl	80031e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	711a      	strb	r2, [r3, #4]
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff fe0f 	bl	80031f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fe05 	bl	800320c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	711a      	strb	r2, [r3, #4]
}
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff ffce 	bl	8003610 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	711a      	strb	r2, [r3, #4]
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ffc7 	bl	8003624 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f7ff ffbd 	bl	8003638 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	711a      	strb	r2, [r3, #4]
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e08d      	b.n	80037fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_DMA_Init+0x138>)
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d80f      	bhi.n	800370a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b45      	ldr	r3, [pc, #276]	; (8003808 <HAL_DMA_Init+0x13c>)
 80036f2:	4413      	add	r3, r2
 80036f4:	4a45      	ldr	r2, [pc, #276]	; (800380c <HAL_DMA_Init+0x140>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	009a      	lsls	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_DMA_Init+0x144>)
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
 8003708:	e00e      	b.n	8003728 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	4b40      	ldr	r3, [pc, #256]	; (8003814 <HAL_DMA_Init+0x148>)
 8003712:	4413      	add	r3, r2
 8003714:	4a3d      	ldr	r2, [pc, #244]	; (800380c <HAL_DMA_Init+0x140>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	009a      	lsls	r2, r3, #2
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a3c      	ldr	r2, [pc, #240]	; (8003818 <HAL_DMA_Init+0x14c>)
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800373e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003742:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800374c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9b6 	bl	8003aec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003788:	d102      	bne.n	8003790 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d010      	beq.n	80037d0 <HAL_DMA_Init+0x104>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d80c      	bhi.n	80037d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9d6 	bl	8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	e008      	b.n	80037e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40020407 	.word	0x40020407
 8003808:	bffdfff8 	.word	0xbffdfff8
 800380c:	cccccccd 	.word	0xcccccccd
 8003810:	40020000 	.word	0x40020000
 8003814:	bffdfbf8 	.word	0xbffdfbf8
 8003818:	40020400 	.word	0x40020400

0800381c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_DMA_Start_IT+0x20>
 8003838:	2302      	movs	r3, #2
 800383a:	e066      	b.n	800390a <HAL_DMA_Start_IT+0xee>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d155      	bne.n	80038fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	68b9      	ldr	r1, [r7, #8]
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f8fb 	bl	8003a70 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	2b00      	cmp	r3, #0
 8003880:	d008      	beq.n	8003894 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 020e 	orr.w	r2, r2, #14
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e00f      	b.n	80038b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 020a 	orr.w	r2, r2, #10
 80038b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e005      	b.n	8003908 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003904:	2302      	movs	r3, #2
 8003906:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003908:	7dfb      	ldrb	r3, [r7, #23]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2204      	movs	r2, #4
 8003934:	409a      	lsls	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d026      	beq.n	800398c <HAL_DMA_IRQHandler+0x7a>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d021      	beq.n	800398c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0204 	bic.w	r2, r2, #4
 8003964:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f003 021f 	and.w	r2, r3, #31
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2104      	movs	r1, #4
 8003974:	fa01 f202 	lsl.w	r2, r1, r2
 8003978:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	2b00      	cmp	r3, #0
 8003980:	d071      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800398a:	e06c      	b.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2202      	movs	r2, #2
 8003996:	409a      	lsls	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02e      	beq.n	80039fe <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d029      	beq.n	80039fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 020a 	bic.w	r2, r2, #10
 80039c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2102      	movs	r1, #2
 80039de:	fa01 f202 	lsl.w	r2, r1, r2
 80039e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d038      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039fc:	e033      	b.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f003 031f 	and.w	r3, r3, #31
 8003a06:	2208      	movs	r2, #8
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02a      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d025      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 020e 	bic.w	r2, r2, #14
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
}
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a86:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a98:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f003 021f 	and.w	r2, r3, #31
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d108      	bne.n	8003ad0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ace:	e007      	b.n	8003ae0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	60da      	str	r2, [r3, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d802      	bhi.n	8003b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b00:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e001      	b.n	8003b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b08:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3b08      	subs	r3, #8
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	009a      	lsls	r2, r3, #2
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b36:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2201      	movs	r2, #1
 8003b40:	409a      	lsls	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b46:	bf00      	nop
 8003b48:	371c      	adds	r7, #28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40020407 	.word	0x40020407
 8003b58:	40020800 	.word	0x40020800
 8003b5c:	40020820 	.word	0x40020820
 8003b60:	cccccccd 	.word	0xcccccccd
 8003b64:	40020880 	.word	0x40020880

08003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a08      	ldr	r2, [pc, #32]	; (8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b8a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2201      	movs	r2, #1
 8003b96:	409a      	lsls	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	1000823f 	.word	0x1000823f
 8003bac:	40020940 	.word	0x40020940

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bbe:	e15a      	b.n	8003e76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 814c 	beq.w	8003e70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d005      	beq.n	8003bf0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d130      	bne.n	8003c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c26:	2201      	movs	r2, #1
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0201 	and.w	r2, r3, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d017      	beq.n	8003c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d123      	bne.n	8003ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0203 	and.w	r2, r3, #3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80a6 	beq.w	8003e70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d24:	4b5b      	ldr	r3, [pc, #364]	; (8003e94 <HAL_GPIO_Init+0x2e4>)
 8003d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d28:	4a5a      	ldr	r2, [pc, #360]	; (8003e94 <HAL_GPIO_Init+0x2e4>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d30:	4b58      	ldr	r3, [pc, #352]	; (8003e94 <HAL_GPIO_Init+0x2e4>)
 8003d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3c:	4a56      	ldr	r2, [pc, #344]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	3302      	adds	r3, #2
 8003d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d66:	d01f      	beq.n	8003da8 <HAL_GPIO_Init+0x1f8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a4c      	ldr	r2, [pc, #304]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d019      	beq.n	8003da4 <HAL_GPIO_Init+0x1f4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a4b      	ldr	r2, [pc, #300]	; (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d013      	beq.n	8003da0 <HAL_GPIO_Init+0x1f0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <HAL_GPIO_Init+0x2f4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00d      	beq.n	8003d9c <HAL_GPIO_Init+0x1ec>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a49      	ldr	r2, [pc, #292]	; (8003ea8 <HAL_GPIO_Init+0x2f8>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <HAL_GPIO_Init+0x1e8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a48      	ldr	r2, [pc, #288]	; (8003eac <HAL_GPIO_Init+0x2fc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_GPIO_Init+0x1e4>
 8003d90:	2305      	movs	r3, #5
 8003d92:	e00a      	b.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003d94:	2306      	movs	r3, #6
 8003d96:	e008      	b.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e006      	b.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e004      	b.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e002      	b.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003da8:	2300      	movs	r3, #0
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4093      	lsls	r3, r2
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dba:	4937      	ldr	r1, [pc, #220]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc8:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dec:	4a30      	ldr	r2, [pc, #192]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e16:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e1c:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e46:	4b1a      	ldr	r3, [pc, #104]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4013      	ands	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e6a:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f ae9d 	bne.w	8003bc0 <HAL_GPIO_Init+0x10>
  }
}
 8003e86:	bf00      	nop
 8003e88:	bf00      	nop
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	48000400 	.word	0x48000400
 8003ea0:	48000800 	.word	0x48000800
 8003ea4:	48000c00 	.word	0x48000c00
 8003ea8:	48001000 	.word	0x48001000
 8003eac:	48001400 	.word	0x48001400
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec4:	787b      	ldrb	r3, [r7, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4013      	ands	r3, r2
 8003efc:	041a      	lsls	r2, r3, #16
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	43d9      	mvns	r1, r3
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	400b      	ands	r3, r1
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	619a      	str	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d141      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f26:	4b4b      	ldr	r3, [pc, #300]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f32:	d131      	bne.n	8003f98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f34:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f3a:	4a46      	ldr	r2, [pc, #280]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f44:	4b43      	ldr	r3, [pc, #268]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f4c:	4a41      	ldr	r2, [pc, #260]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2232      	movs	r2, #50	; 0x32
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	; (800405c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0c9b      	lsrs	r3, r3, #18
 8003f66:	3301      	adds	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f6a:	e002      	b.n	8003f72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f72:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d102      	bne.n	8003f86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f2      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f92:	d158      	bne.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e057      	b.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f98:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9e:	4a2d      	ldr	r2, [pc, #180]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fa8:	e04d      	b.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d141      	bne.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fb2:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fbe:	d131      	bne.n	8004024 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc6:	4a23      	ldr	r2, [pc, #140]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2232      	movs	r2, #50	; 0x32
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	4a1c      	ldr	r2, [pc, #112]	; (800405c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	0c9b      	lsrs	r3, r3, #18
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff6:	e002      	b.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400a:	d102      	bne.n	8004012 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f2      	bne.n	8003ff8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	d112      	bne.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e011      	b.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800402a:	4a0a      	ldr	r2, [pc, #40]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004034:	e007      	b.n	8004046 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004044:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40007000 	.word	0x40007000
 8004058:	20000004 	.word	0x20000004
 800405c:	431bde83 	.word	0x431bde83

08004060 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800406a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406e:	6093      	str	r3, [r2, #8]
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40007000 	.word	0x40007000

08004080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e2fe      	b.n	8004690 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409e:	4b97      	ldr	r3, [pc, #604]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a8:	4b94      	ldr	r3, [pc, #592]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b0c      	cmp	r3, #12
 80040b6:	d102      	bne.n	80040be <HAL_RCC_OscConfig+0x3e>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b8d      	ldr	r3, [pc, #564]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e2d9      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b85      	ldr	r3, [pc, #532]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a84      	ldr	r2, [pc, #528]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b7f      	ldr	r3, [pc, #508]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7e      	ldr	r2, [pc, #504]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b7c      	ldr	r3, [pc, #496]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7b      	ldr	r2, [pc, #492]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b78      	ldr	r3, [pc, #480]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a77      	ldr	r2, [pc, #476]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b75      	ldr	r3, [pc, #468]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a74      	ldr	r2, [pc, #464]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fbb8 	bl	80018ac <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fd fbb4 	bl	80018ac <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e29e      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	4b6a      	ldr	r3, [pc, #424]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd fba4 	bl	80018ac <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fd fba0 	bl	80018ac <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e28a      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417a:	4b60      	ldr	r3, [pc, #384]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d075      	beq.n	8004282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004196:	4b59      	ldr	r3, [pc, #356]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a0:	4b56      	ldr	r3, [pc, #344]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	d102      	bne.n	80041b6 <HAL_RCC_OscConfig+0x136>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_OscConfig+0x13c>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d11f      	bne.n	80041fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041bc:	4b4f      	ldr	r3, [pc, #316]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_OscConfig+0x154>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e25d      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b49      	ldr	r3, [pc, #292]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	4946      	ldr	r1, [pc, #280]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041e8:	4b45      	ldr	r3, [pc, #276]	; (8004300 <HAL_RCC_OscConfig+0x280>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fd fb11 	bl	8001814 <HAL_InitTick>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d043      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e249      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d023      	beq.n	800424c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004204:	4b3d      	ldr	r3, [pc, #244]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a3c      	ldr	r2, [pc, #240]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800420a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fb4c 	bl	80018ac <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004218:	f7fd fb48 	bl	80018ac <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e232      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422a:	4b34      	ldr	r3, [pc, #208]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004236:	4b31      	ldr	r3, [pc, #196]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	061b      	lsls	r3, r3, #24
 8004244:	492d      	ldr	r1, [pc, #180]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004246:	4313      	orrs	r3, r2
 8004248:	604b      	str	r3, [r1, #4]
 800424a:	e01a      	b.n	8004282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424c:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fb28 	bl	80018ac <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004260:	f7fd fb24 	bl	80018ac <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e20e      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004272:	4b22      	ldr	r3, [pc, #136]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1e0>
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d041      	beq.n	8004312 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d01c      	beq.n	80042d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 8004298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429c:	4a17      	ldr	r2, [pc, #92]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fd fb01 	bl	80018ac <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fd fafd 	bl	80018ac <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e1e7      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80042c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ef      	beq.n	80042ae <HAL_RCC_OscConfig+0x22e>
 80042ce:	e020      	b.n	8004312 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <HAL_RCC_OscConfig+0x27c>)
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fd fae4 	bl	80018ac <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042e6:	e00d      	b.n	8004304 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fd fae0 	bl	80018ac <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d906      	bls.n	8004304 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1ca      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004304:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ea      	bne.n	80042e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 80a6 	beq.w	800446c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004320:	2300      	movs	r3, #0
 8004322:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004324:	4b84      	ldr	r3, [pc, #528]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_OscConfig+0x2b4>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x2b6>
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	4b7f      	ldr	r3, [pc, #508]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	4a7e      	ldr	r2, [pc, #504]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004344:	6593      	str	r3, [r2, #88]	; 0x58
 8004346:	4b7c      	ldr	r3, [pc, #496]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004352:	2301      	movs	r3, #1
 8004354:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004356:	4b79      	ldr	r3, [pc, #484]	; (800453c <HAL_RCC_OscConfig+0x4bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d118      	bne.n	8004394 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004362:	4b76      	ldr	r3, [pc, #472]	; (800453c <HAL_RCC_OscConfig+0x4bc>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a75      	ldr	r2, [pc, #468]	; (800453c <HAL_RCC_OscConfig+0x4bc>)
 8004368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800436e:	f7fd fa9d 	bl	80018ac <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004376:	f7fd fa99 	bl	80018ac <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e183      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004388:	4b6c      	ldr	r3, [pc, #432]	; (800453c <HAL_RCC_OscConfig+0x4bc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d108      	bne.n	80043ae <HAL_RCC_OscConfig+0x32e>
 800439c:	4b66      	ldr	r3, [pc, #408]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ac:	e024      	b.n	80043f8 <HAL_RCC_OscConfig+0x378>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d110      	bne.n	80043d8 <HAL_RCC_OscConfig+0x358>
 80043b6:	4b60      	ldr	r3, [pc, #384]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	4a5e      	ldr	r2, [pc, #376]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043be:	f043 0304 	orr.w	r3, r3, #4
 80043c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043c6:	4b5c      	ldr	r3, [pc, #368]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	4a5a      	ldr	r2, [pc, #360]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d6:	e00f      	b.n	80043f8 <HAL_RCC_OscConfig+0x378>
 80043d8:	4b57      	ldr	r3, [pc, #348]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	4a56      	ldr	r2, [pc, #344]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e8:	4b53      	ldr	r3, [pc, #332]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	4a52      	ldr	r2, [pc, #328]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004400:	f7fd fa54 	bl	80018ac <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004406:	e00a      	b.n	800441e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004408:	f7fd fa50 	bl	80018ac <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e138      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800441e:	4b46      	ldr	r3, [pc, #280]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ed      	beq.n	8004408 <HAL_RCC_OscConfig+0x388>
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442e:	f7fd fa3d 	bl	80018ac <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fd fa39 	bl	80018ac <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e121      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800444c:	4b3a      	ldr	r3, [pc, #232]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ed      	bne.n	8004436 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800445a:	7ffb      	ldrb	r3, [r7, #31]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d105      	bne.n	800446c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004460:	4b35      	ldr	r3, [pc, #212]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	4a34      	ldr	r2, [pc, #208]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800446a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d03c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01c      	beq.n	80044ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004480:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004486:	4a2c      	ldr	r2, [pc, #176]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd fa0c 	bl	80018ac <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004498:	f7fd fa08 	bl	80018ac <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e0f2      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044aa:	4b23      	ldr	r3, [pc, #140]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80044ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <HAL_RCC_OscConfig+0x418>
 80044b8:	e01b      	b.n	80044f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80044bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c0:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fd f9ef 	bl	80018ac <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d2:	f7fd f9eb 	bl	80018ac <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0d5      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044e4:	4b14      	ldr	r3, [pc, #80]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80044e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ef      	bne.n	80044d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80c9 	beq.w	800468e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b0c      	cmp	r3, #12
 8004506:	f000 8083 	beq.w	8004610 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d15e      	bne.n	80045d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <HAL_RCC_OscConfig+0x4b8>)
 8004518:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800451c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd f9c5 	bl	80018ac <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	e00c      	b.n	8004540 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004526:	f7fd f9c1 	bl	80018ac <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d905      	bls.n	8004540 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e0ab      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
 8004538:	40021000 	.word	0x40021000
 800453c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	4b55      	ldr	r3, [pc, #340]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ec      	bne.n	8004526 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800454c:	4b52      	ldr	r3, [pc, #328]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	4b52      	ldr	r3, [pc, #328]	; (800469c <HAL_RCC_OscConfig+0x61c>)
 8004552:	4013      	ands	r3, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6a11      	ldr	r1, [r2, #32]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455c:	3a01      	subs	r2, #1
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004566:	0212      	lsls	r2, r2, #8
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800456e:	0852      	lsrs	r2, r2, #1
 8004570:	3a01      	subs	r2, #1
 8004572:	0552      	lsls	r2, r2, #21
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0652      	lsls	r2, r2, #25
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004586:	06d2      	lsls	r2, r2, #27
 8004588:	430a      	orrs	r2, r1
 800458a:	4943      	ldr	r1, [pc, #268]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 800458c:	4313      	orrs	r3, r2
 800458e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004590:	4b41      	ldr	r3, [pc, #260]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a40      	ldr	r2, [pc, #256]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 8004596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800459c:	4b3e      	ldr	r3, [pc, #248]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a3d      	ldr	r2, [pc, #244]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 80045a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd f980 	bl	80018ac <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd f97c 	bl	80018ac <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e066      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c2:	4b35      	ldr	r3, [pc, #212]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x530>
 80045ce:	e05e      	b.n	800468e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d0:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a30      	ldr	r2, [pc, #192]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 80045d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd f966 	bl	80018ac <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fd f962 	bl	80018ac <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e04c      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045f6:	4b28      	ldr	r3, [pc, #160]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004602:	4b25      	ldr	r3, [pc, #148]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	4924      	ldr	r1, [pc, #144]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <HAL_RCC_OscConfig+0x620>)
 800460a:	4013      	ands	r3, r2
 800460c:	60cb      	str	r3, [r1, #12]
 800460e:	e03e      	b.n	800468e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e039      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <HAL_RCC_OscConfig+0x618>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0203 	and.w	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	429a      	cmp	r2, r3
 800462e:	d12c      	bne.n	800468a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	3b01      	subs	r3, #1
 800463c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d123      	bne.n	800468a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d11b      	bne.n	800468a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d113      	bne.n	800468a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	3b01      	subs	r3, #1
 8004670:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d109      	bne.n	800468a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	3b01      	subs	r3, #1
 8004684:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d001      	beq.n	800468e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40021000 	.word	0x40021000
 800469c:	019f800c 	.word	0x019f800c
 80046a0:	feeefffc 	.word	0xfeeefffc

080046a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e11e      	b.n	80048fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046bc:	4b91      	ldr	r3, [pc, #580]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d910      	bls.n	80046ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ca:	4b8e      	ldr	r3, [pc, #568]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 020f 	bic.w	r2, r3, #15
 80046d2:	498c      	ldr	r1, [pc, #560]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b8a      	ldr	r3, [pc, #552]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e106      	b.n	80048fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d073      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d129      	bne.n	8004754 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004700:	4b81      	ldr	r3, [pc, #516]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0f4      	b.n	80048fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004710:	f000 f99e 	bl	8004a50 <RCC_GetSysClockFreqFromPLLSource>
 8004714:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4a7c      	ldr	r2, [pc, #496]	; (800490c <HAL_RCC_ClockConfig+0x268>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d93f      	bls.n	800479e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800471e:	4b7a      	ldr	r3, [pc, #488]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004732:	2b00      	cmp	r3, #0
 8004734:	d033      	beq.n	800479e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800473a:	2b00      	cmp	r3, #0
 800473c:	d12f      	bne.n	800479e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800473e:	4b72      	ldr	r3, [pc, #456]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004746:	4a70      	ldr	r2, [pc, #448]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e024      	b.n	800479e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d107      	bne.n	800476c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475c:	4b6a      	ldr	r3, [pc, #424]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0c6      	b.n	80048fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0be      	b.n	80048fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800477c:	f000 f8ce 	bl	800491c <HAL_RCC_GetSysClockFreq>
 8004780:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4a61      	ldr	r2, [pc, #388]	; (800490c <HAL_RCC_ClockConfig+0x268>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d909      	bls.n	800479e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800478a:	4b5f      	ldr	r3, [pc, #380]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004792:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800479e:	4b5a      	ldr	r3, [pc, #360]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 0203 	bic.w	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4957      	ldr	r1, [pc, #348]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b0:	f7fd f87c 	bl	80018ac <HAL_GetTick>
 80047b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b8:	f7fd f878 	bl	80018ac <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e095      	b.n	80048fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ce:	4b4e      	ldr	r3, [pc, #312]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 020c 	and.w	r2, r3, #12
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1eb      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d023      	beq.n	8004834 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b43      	ldr	r3, [pc, #268]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a42      	ldr	r2, [pc, #264]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80047fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004802:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004810:	4b3d      	ldr	r3, [pc, #244]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004818:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 800481a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800481e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b39      	ldr	r3, [pc, #228]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4936      	ldr	r1, [pc, #216]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
 8004832:	e008      	b.n	8004846 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d105      	bne.n	8004846 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800483a:	4b33      	ldr	r3, [pc, #204]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4a32      	ldr	r2, [pc, #200]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 8004840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004844:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004846:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d21d      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004854:	4b2b      	ldr	r3, [pc, #172]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 020f 	bic.w	r2, r3, #15
 800485c:	4929      	ldr	r1, [pc, #164]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004864:	f7fd f822 	bl	80018ac <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fd f81e 	bl	80018ac <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e03b      	b.n	80048fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b20      	ldr	r3, [pc, #128]	; (8004904 <HAL_RCC_ClockConfig+0x260>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d1ed      	bne.n	800486c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b1a      	ldr	r3, [pc, #104]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4917      	ldr	r1, [pc, #92]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ba:	4b13      	ldr	r3, [pc, #76]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	490f      	ldr	r1, [pc, #60]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ce:	f000 f825 	bl	800491c <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <HAL_RCC_ClockConfig+0x264>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	490c      	ldr	r1, [pc, #48]	; (8004910 <HAL_RCC_ClockConfig+0x26c>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <HAL_RCC_ClockConfig+0x270>)
 80048ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <HAL_RCC_ClockConfig+0x274>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fc ff8e 	bl	8001814 <HAL_InitTick>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40022000 	.word	0x40022000
 8004908:	40021000 	.word	0x40021000
 800490c:	04c4b400 	.word	0x04c4b400
 8004910:	08006484 	.word	0x08006484
 8004914:	20000004 	.word	0x20000004
 8004918:	20000008 	.word	0x20000008

0800491c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004922:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b04      	cmp	r3, #4
 800492c:	d102      	bne.n	8004934 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800492e:	4b2a      	ldr	r3, [pc, #168]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	e047      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b08      	cmp	r3, #8
 800493e:	d102      	bne.n	8004946 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004940:	4b26      	ldr	r3, [pc, #152]	; (80049dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e03e      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004946:	4b23      	ldr	r3, [pc, #140]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	2b0c      	cmp	r3, #12
 8004950:	d136      	bne.n	80049c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004952:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	3301      	adds	r3, #1
 8004968:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d10c      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800497a:	68d2      	ldr	r2, [r2, #12]
 800497c:	0a12      	lsrs	r2, r2, #8
 800497e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004982:	fb02 f303 	mul.w	r3, r2, r3
 8004986:	617b      	str	r3, [r7, #20]
      break;
 8004988:	e00c      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	4a10      	ldr	r2, [pc, #64]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	0a12      	lsrs	r2, r2, #8
 8004998:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800499c:	fb02 f303 	mul.w	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]
      break;
 80049a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0e5b      	lsrs	r3, r3, #25
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	e001      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049c4:	693b      	ldr	r3, [r7, #16]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	016e3600 	.word	0x016e3600

080049e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000004 	.word	0x20000004

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049fc:	f7ff fff0 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4904      	ldr	r1, [pc, #16]	; (8004a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	08006494 	.word	0x08006494

08004a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a28:	f7ff ffda 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	0adb      	lsrs	r3, r3, #11
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	4904      	ldr	r1, [pc, #16]	; (8004a4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a3a:	5ccb      	ldrb	r3, [r1, r3]
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	08006494 	.word	0x08006494

08004a50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a56:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d10c      	bne.n	8004a8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a74:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	4a14      	ldr	r2, [pc, #80]	; (8004ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a7e:	68d2      	ldr	r2, [r2, #12]
 8004a80:	0a12      	lsrs	r2, r2, #8
 8004a82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	617b      	str	r3, [r7, #20]
    break;
 8004a8c:	e00c      	b.n	8004aa8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a8e:	4a12      	ldr	r2, [pc, #72]	; (8004ad8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a96:	4a0e      	ldr	r2, [pc, #56]	; (8004ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a98:	68d2      	ldr	r2, [r2, #12]
 8004a9a:	0a12      	lsrs	r2, r2, #8
 8004a9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aa0:	fb02 f303 	mul.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
    break;
 8004aa6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	0e5b      	lsrs	r3, r3, #25
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ac2:	687b      	ldr	r3, [r7, #4]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	016e3600 	.word	0x016e3600
 8004ad8:	00f42400 	.word	0x00f42400

08004adc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ae8:	2300      	movs	r3, #0
 8004aea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8098 	beq.w	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afa:	2300      	movs	r3, #0
 8004afc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b14:	6593      	str	r3, [r2, #88]	; 0x58
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b22:	2301      	movs	r3, #1
 8004b24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b26:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a39      	ldr	r2, [pc, #228]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b32:	f7fc febb 	bl	80018ac <HAL_GetTick>
 8004b36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b38:	e009      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3a:	f7fc feb7 	bl	80018ac <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d902      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b4c:	e005      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4e:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d159      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b60:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01e      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d019      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b7c:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b88:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8e:	4a1f      	ldr	r2, [pc, #124]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b98:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ba8:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bba:	f7fc fe77 	bl	80018ac <HAL_GetTick>
 8004bbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc0:	e00b      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fc fe73 	bl	80018ac <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d902      	bls.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	74fb      	strb	r3, [r7, #19]
            break;
 8004bd8:	e006      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ec      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c04:	e008      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	74bb      	strb	r3, [r7, #18]
 8004c0a:	e005      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c18:	7c7b      	ldrb	r3, [r7, #17]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4ba6      	ldr	r3, [pc, #664]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	4aa5      	ldr	r2, [pc, #660]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c36:	4ba0      	ldr	r3, [pc, #640]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	f023 0203 	bic.w	r2, r3, #3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	499c      	ldr	r1, [pc, #624]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c58:	4b97      	ldr	r3, [pc, #604]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f023 020c 	bic.w	r2, r3, #12
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	4994      	ldr	r1, [pc, #592]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c7a:	4b8f      	ldr	r3, [pc, #572]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	498b      	ldr	r1, [pc, #556]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0308 	and.w	r3, r3, #8
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c9c:	4b86      	ldr	r3, [pc, #536]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	4983      	ldr	r1, [pc, #524]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cbe:	4b7e      	ldr	r3, [pc, #504]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	497a      	ldr	r1, [pc, #488]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce0:	4b75      	ldr	r3, [pc, #468]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	4972      	ldr	r1, [pc, #456]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d02:	4b6d      	ldr	r3, [pc, #436]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4969      	ldr	r1, [pc, #420]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d24:	4b64      	ldr	r3, [pc, #400]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	4961      	ldr	r1, [pc, #388]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d46:	4b5c      	ldr	r3, [pc, #368]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	4958      	ldr	r1, [pc, #352]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d015      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d68:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	4950      	ldr	r1, [pc, #320]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d86:	d105      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d88:	4b4b      	ldr	r3, [pc, #300]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a4a      	ldr	r2, [pc, #296]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004da0:	4b45      	ldr	r3, [pc, #276]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	4942      	ldr	r1, [pc, #264]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc0:	4b3d      	ldr	r3, [pc, #244]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d015      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dd8:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	4934      	ldr	r1, [pc, #208]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004df6:	d105      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df8:	4b2f      	ldr	r3, [pc, #188]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a2e      	ldr	r2, [pc, #184]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e10:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	4926      	ldr	r1, [pc, #152]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2e:	d105      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e30:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	4918      	ldr	r1, [pc, #96]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e66:	d105      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e68:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a12      	ldr	r2, [pc, #72]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d015      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	490a      	ldr	r1, [pc, #40]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e9e:	d105      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eaa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004eac:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40021000 	.word	0x40021000

08004ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e049      	b.n	8004f62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc fb92 	bl	800160c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f000 fa1a 	bl	8005334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e042      	b.n	800500a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a21      	ldr	r2, [pc, #132]	; (8005018 <HAL_TIM_Base_Start+0xac>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d018      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x5c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d013      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x5c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_TIM_Base_Start+0xb0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x5c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_TIM_Base_Start+0xb4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d009      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x5c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_TIM_Base_Start+0xb8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d004      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x5c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_TIM_Base_Start+0xbc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d115      	bne.n	8004ff4 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <HAL_TIM_Base_Start+0xc0>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d015      	beq.n	8005006 <HAL_TIM_Base_Start+0x9a>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d011      	beq.n	8005006 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	e008      	b.n	8005006 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e000      	b.n	8005008 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40013400 	.word	0x40013400
 8005028:	40014000 	.word	0x40014000
 800502c:	00010007 	.word	0x00010007

08005030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d020      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0202 	mvn.w	r2, #2
 8005064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f93b 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f92d 	bl	80052e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f93e 	bl	800530a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d020      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0204 	mvn.w	r2, #4
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f915 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f907 	bl	80052e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f918 	bl	800530a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d020      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0208 	mvn.w	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2204      	movs	r2, #4
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8ef 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8e1 	bl	80052e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8f2 	bl	800530a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0210 	mvn.w	r2, #16
 8005148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2208      	movs	r2, #8
 800514e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f8c9 	bl	80052f6 <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8bb 	bl	80052e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8cc 	bl	800530a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00c      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f899 	bl	80052ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80051c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f9dd 	bl	8005584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f9d5 	bl	8005598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00c      	beq.n	8005212 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f886 	bl	800531e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00c      	beq.n	8005236 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0220 	mvn.w	r2, #32
 800522e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f99d 	bl	8005570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00c      	beq.n	800525a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f9a9 	bl	80055ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00c      	beq.n	800527e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f9a1 	bl	80055c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800529a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f999 	bl	80055d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00c      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80052be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f991 	bl	80055e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005312:	bf00      	nop
 8005314:	370c      	adds	r7, #12
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a42      	ldr	r2, [pc, #264]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00f      	beq.n	800536c <TIM_Base_SetConfig+0x38>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005352:	d00b      	beq.n	800536c <TIM_Base_SetConfig+0x38>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a3f      	ldr	r2, [pc, #252]	; (8005454 <TIM_Base_SetConfig+0x120>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_Base_SetConfig+0x38>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a3e      	ldr	r2, [pc, #248]	; (8005458 <TIM_Base_SetConfig+0x124>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0x38>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a3d      	ldr	r2, [pc, #244]	; (800545c <TIM_Base_SetConfig+0x128>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a33      	ldr	r2, [pc, #204]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01b      	beq.n	80053be <TIM_Base_SetConfig+0x8a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538c:	d017      	beq.n	80053be <TIM_Base_SetConfig+0x8a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a30      	ldr	r2, [pc, #192]	; (8005454 <TIM_Base_SetConfig+0x120>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <TIM_Base_SetConfig+0x8a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2f      	ldr	r2, [pc, #188]	; (8005458 <TIM_Base_SetConfig+0x124>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00f      	beq.n	80053be <TIM_Base_SetConfig+0x8a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2e      	ldr	r2, [pc, #184]	; (800545c <TIM_Base_SetConfig+0x128>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00b      	beq.n	80053be <TIM_Base_SetConfig+0x8a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a2d      	ldr	r2, [pc, #180]	; (8005460 <TIM_Base_SetConfig+0x12c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d007      	beq.n	80053be <TIM_Base_SetConfig+0x8a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2c      	ldr	r2, [pc, #176]	; (8005464 <TIM_Base_SetConfig+0x130>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_Base_SetConfig+0x8a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <TIM_Base_SetConfig+0x134>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d108      	bne.n	80053d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a16      	ldr	r2, [pc, #88]	; (8005450 <TIM_Base_SetConfig+0x11c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00f      	beq.n	800541c <TIM_Base_SetConfig+0xe8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a17      	ldr	r2, [pc, #92]	; (800545c <TIM_Base_SetConfig+0x128>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_Base_SetConfig+0xe8>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a16      	ldr	r2, [pc, #88]	; (8005460 <TIM_Base_SetConfig+0x12c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_Base_SetConfig+0xe8>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a15      	ldr	r2, [pc, #84]	; (8005464 <TIM_Base_SetConfig+0x130>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_Base_SetConfig+0xe8>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a14      	ldr	r2, [pc, #80]	; (8005468 <TIM_Base_SetConfig+0x134>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d103      	bne.n	8005424 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d105      	bne.n	8005442 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f023 0201 	bic.w	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	611a      	str	r2, [r3, #16]
  }
}
 8005442:	bf00      	nop
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40000400 	.word	0x40000400
 8005458:	40000800 	.word	0x40000800
 800545c:	40013400 	.word	0x40013400
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800

0800546c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005480:	2302      	movs	r3, #2
 8005482:	e065      	b.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d004      	beq.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d018      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d013      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a18      	ldr	r2, [pc, #96]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a12      	ldr	r2, [pc, #72]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d10c      	bne.n	800553e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800552a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40013400 	.word	0x40013400
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40014000 	.word	0x40014000

08005570 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e042      	b.n	8005694 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fb ff9b 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	; 0x24
 800562a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 faf4 	bl	8005c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f825 	bl	800569c <UART_SetConfig>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e01b      	b.n	8005694 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800566a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800567a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb73 	bl	8005d78 <UART_CheckIdleState>
 8005692:	4603      	mov	r3, r0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800569c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a0:	b08c      	sub	sp, #48	; 0x30
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4bab      	ldr	r3, [pc, #684]	; (8005978 <UART_SetConfig+0x2dc>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4aa0      	ldr	r2, [pc, #640]	; (800597c <UART_SetConfig+0x2e0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005704:	4313      	orrs	r3, r2
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005712:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800571c:	430b      	orrs	r3, r1
 800571e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	f023 010f 	bic.w	r1, r3, #15
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a91      	ldr	r2, [pc, #580]	; (8005980 <UART_SetConfig+0x2e4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d125      	bne.n	800578c <UART_SetConfig+0xf0>
 8005740:	4b90      	ldr	r3, [pc, #576]	; (8005984 <UART_SetConfig+0x2e8>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d81a      	bhi.n	8005784 <UART_SetConfig+0xe8>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0xb8>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005765 	.word	0x08005765
 8005758:	08005775 	.word	0x08005775
 800575c:	0800576d 	.word	0x0800576d
 8005760:	0800577d 	.word	0x0800577d
 8005764:	2301      	movs	r3, #1
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576a:	e0d6      	b.n	800591a <UART_SetConfig+0x27e>
 800576c:	2302      	movs	r3, #2
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005772:	e0d2      	b.n	800591a <UART_SetConfig+0x27e>
 8005774:	2304      	movs	r3, #4
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577a:	e0ce      	b.n	800591a <UART_SetConfig+0x27e>
 800577c:	2308      	movs	r3, #8
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005782:	e0ca      	b.n	800591a <UART_SetConfig+0x27e>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578a:	e0c6      	b.n	800591a <UART_SetConfig+0x27e>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a7d      	ldr	r2, [pc, #500]	; (8005988 <UART_SetConfig+0x2ec>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d138      	bne.n	8005808 <UART_SetConfig+0x16c>
 8005796:	4b7b      	ldr	r3, [pc, #492]	; (8005984 <UART_SetConfig+0x2e8>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b0c      	cmp	r3, #12
 80057a2:	d82d      	bhi.n	8005800 <UART_SetConfig+0x164>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0x110>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057e1 	.word	0x080057e1
 80057b0:	08005801 	.word	0x08005801
 80057b4:	08005801 	.word	0x08005801
 80057b8:	08005801 	.word	0x08005801
 80057bc:	080057f1 	.word	0x080057f1
 80057c0:	08005801 	.word	0x08005801
 80057c4:	08005801 	.word	0x08005801
 80057c8:	08005801 	.word	0x08005801
 80057cc:	080057e9 	.word	0x080057e9
 80057d0:	08005801 	.word	0x08005801
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005801 	.word	0x08005801
 80057dc:	080057f9 	.word	0x080057f9
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e6:	e098      	b.n	800591a <UART_SetConfig+0x27e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e094      	b.n	800591a <UART_SetConfig+0x27e>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f6:	e090      	b.n	800591a <UART_SetConfig+0x27e>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fe:	e08c      	b.n	800591a <UART_SetConfig+0x27e>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005806:	e088      	b.n	800591a <UART_SetConfig+0x27e>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a5f      	ldr	r2, [pc, #380]	; (800598c <UART_SetConfig+0x2f0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d125      	bne.n	800585e <UART_SetConfig+0x1c2>
 8005812:	4b5c      	ldr	r3, [pc, #368]	; (8005984 <UART_SetConfig+0x2e8>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005818:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800581c:	2b30      	cmp	r3, #48	; 0x30
 800581e:	d016      	beq.n	800584e <UART_SetConfig+0x1b2>
 8005820:	2b30      	cmp	r3, #48	; 0x30
 8005822:	d818      	bhi.n	8005856 <UART_SetConfig+0x1ba>
 8005824:	2b20      	cmp	r3, #32
 8005826:	d00a      	beq.n	800583e <UART_SetConfig+0x1a2>
 8005828:	2b20      	cmp	r3, #32
 800582a:	d814      	bhi.n	8005856 <UART_SetConfig+0x1ba>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <UART_SetConfig+0x19a>
 8005830:	2b10      	cmp	r3, #16
 8005832:	d008      	beq.n	8005846 <UART_SetConfig+0x1aa>
 8005834:	e00f      	b.n	8005856 <UART_SetConfig+0x1ba>
 8005836:	2300      	movs	r3, #0
 8005838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583c:	e06d      	b.n	800591a <UART_SetConfig+0x27e>
 800583e:	2302      	movs	r3, #2
 8005840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005844:	e069      	b.n	800591a <UART_SetConfig+0x27e>
 8005846:	2304      	movs	r3, #4
 8005848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584c:	e065      	b.n	800591a <UART_SetConfig+0x27e>
 800584e:	2308      	movs	r3, #8
 8005850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005854:	e061      	b.n	800591a <UART_SetConfig+0x27e>
 8005856:	2310      	movs	r3, #16
 8005858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585c:	e05d      	b.n	800591a <UART_SetConfig+0x27e>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4b      	ldr	r2, [pc, #300]	; (8005990 <UART_SetConfig+0x2f4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d125      	bne.n	80058b4 <UART_SetConfig+0x218>
 8005868:	4b46      	ldr	r3, [pc, #280]	; (8005984 <UART_SetConfig+0x2e8>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005872:	2bc0      	cmp	r3, #192	; 0xc0
 8005874:	d016      	beq.n	80058a4 <UART_SetConfig+0x208>
 8005876:	2bc0      	cmp	r3, #192	; 0xc0
 8005878:	d818      	bhi.n	80058ac <UART_SetConfig+0x210>
 800587a:	2b80      	cmp	r3, #128	; 0x80
 800587c:	d00a      	beq.n	8005894 <UART_SetConfig+0x1f8>
 800587e:	2b80      	cmp	r3, #128	; 0x80
 8005880:	d814      	bhi.n	80058ac <UART_SetConfig+0x210>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <UART_SetConfig+0x1f0>
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d008      	beq.n	800589c <UART_SetConfig+0x200>
 800588a:	e00f      	b.n	80058ac <UART_SetConfig+0x210>
 800588c:	2300      	movs	r3, #0
 800588e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005892:	e042      	b.n	800591a <UART_SetConfig+0x27e>
 8005894:	2302      	movs	r3, #2
 8005896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589a:	e03e      	b.n	800591a <UART_SetConfig+0x27e>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a2:	e03a      	b.n	800591a <UART_SetConfig+0x27e>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058aa:	e036      	b.n	800591a <UART_SetConfig+0x27e>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b2:	e032      	b.n	800591a <UART_SetConfig+0x27e>
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a30      	ldr	r2, [pc, #192]	; (800597c <UART_SetConfig+0x2e0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d12a      	bne.n	8005914 <UART_SetConfig+0x278>
 80058be:	4b31      	ldr	r3, [pc, #196]	; (8005984 <UART_SetConfig+0x2e8>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058cc:	d01a      	beq.n	8005904 <UART_SetConfig+0x268>
 80058ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d2:	d81b      	bhi.n	800590c <UART_SetConfig+0x270>
 80058d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d8:	d00c      	beq.n	80058f4 <UART_SetConfig+0x258>
 80058da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058de:	d815      	bhi.n	800590c <UART_SetConfig+0x270>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x250>
 80058e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058e8:	d008      	beq.n	80058fc <UART_SetConfig+0x260>
 80058ea:	e00f      	b.n	800590c <UART_SetConfig+0x270>
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058f2:	e012      	b.n	800591a <UART_SetConfig+0x27e>
 80058f4:	2302      	movs	r3, #2
 80058f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058fa:	e00e      	b.n	800591a <UART_SetConfig+0x27e>
 80058fc:	2304      	movs	r3, #4
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005902:	e00a      	b.n	800591a <UART_SetConfig+0x27e>
 8005904:	2308      	movs	r3, #8
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590a:	e006      	b.n	800591a <UART_SetConfig+0x27e>
 800590c:	2310      	movs	r3, #16
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005912:	e002      	b.n	800591a <UART_SetConfig+0x27e>
 8005914:	2310      	movs	r3, #16
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <UART_SetConfig+0x2e0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	f040 80a8 	bne.w	8005a76 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005926:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800592a:	2b08      	cmp	r3, #8
 800592c:	d834      	bhi.n	8005998 <UART_SetConfig+0x2fc>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <UART_SetConfig+0x298>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005959 	.word	0x08005959
 8005938:	08005999 	.word	0x08005999
 800593c:	08005961 	.word	0x08005961
 8005940:	08005999 	.word	0x08005999
 8005944:	08005967 	.word	0x08005967
 8005948:	08005999 	.word	0x08005999
 800594c:	08005999 	.word	0x08005999
 8005950:	08005999 	.word	0x08005999
 8005954:	0800596f 	.word	0x0800596f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005958:	f7ff f84e 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 800595c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800595e:	e021      	b.n	80059a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <UART_SetConfig+0x2f8>)
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005964:	e01e      	b.n	80059a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005966:	f7fe ffd9 	bl	800491c <HAL_RCC_GetSysClockFreq>
 800596a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800596c:	e01a      	b.n	80059a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005974:	e016      	b.n	80059a4 <UART_SetConfig+0x308>
 8005976:	bf00      	nop
 8005978:	cfff69f3 	.word	0xcfff69f3
 800597c:	40008000 	.word	0x40008000
 8005980:	40013800 	.word	0x40013800
 8005984:	40021000 	.word	0x40021000
 8005988:	40004400 	.word	0x40004400
 800598c:	40004800 	.word	0x40004800
 8005990:	40004c00 	.word	0x40004c00
 8005994:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 812a 	beq.w	8005c00 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	4a9e      	ldr	r2, [pc, #632]	; (8005c2c <UART_SetConfig+0x590>)
 80059b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80059be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	4413      	add	r3, r2
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d305      	bcc.n	80059dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d903      	bls.n	80059e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059e2:	e10d      	b.n	8005c00 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	2200      	movs	r2, #0
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	60fa      	str	r2, [r7, #12]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	4a8e      	ldr	r2, [pc, #568]	; (8005c2c <UART_SetConfig+0x590>)
 80059f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2200      	movs	r2, #0
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a06:	f7fa fff5 	bl	80009f4 <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4610      	mov	r0, r2
 8005a10:	4619      	mov	r1, r3
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	020b      	lsls	r3, r1, #8
 8005a1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a20:	0202      	lsls	r2, r0, #8
 8005a22:	6979      	ldr	r1, [r7, #20]
 8005a24:	6849      	ldr	r1, [r1, #4]
 8005a26:	0849      	lsrs	r1, r1, #1
 8005a28:	2000      	movs	r0, #0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	eb12 0804 	adds.w	r8, r2, r4
 8005a32:	eb43 0905 	adc.w	r9, r3, r5
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	469a      	mov	sl, r3
 8005a3e:	4693      	mov	fp, r2
 8005a40:	4652      	mov	r2, sl
 8005a42:	465b      	mov	r3, fp
 8005a44:	4640      	mov	r0, r8
 8005a46:	4649      	mov	r1, r9
 8005a48:	f7fa ffd4 	bl	80009f4 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4613      	mov	r3, r2
 8005a52:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a5a:	d308      	bcc.n	8005a6e <UART_SetConfig+0x3d2>
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a62:	d204      	bcs.n	8005a6e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	e0c8      	b.n	8005c00 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a74:	e0c4      	b.n	8005c00 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7e:	d167      	bne.n	8005b50 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005a80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d828      	bhi.n	8005ada <UART_SetConfig+0x43e>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0x3f4>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ab5 	.word	0x08005ab5
 8005a94:	08005abd 	.word	0x08005abd
 8005a98:	08005ac5 	.word	0x08005ac5
 8005a9c:	08005adb 	.word	0x08005adb
 8005aa0:	08005acb 	.word	0x08005acb
 8005aa4:	08005adb 	.word	0x08005adb
 8005aa8:	08005adb 	.word	0x08005adb
 8005aac:	08005adb 	.word	0x08005adb
 8005ab0:	08005ad3 	.word	0x08005ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab4:	f7fe ffa0 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8005ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aba:	e014      	b.n	8005ae6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abc:	f7fe ffb2 	bl	8004a24 <HAL_RCC_GetPCLK2Freq>
 8005ac0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac2:	e010      	b.n	8005ae6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac4:	4b5a      	ldr	r3, [pc, #360]	; (8005c30 <UART_SetConfig+0x594>)
 8005ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ac8:	e00d      	b.n	8005ae6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aca:	f7fe ff27 	bl	800491c <HAL_RCC_GetSysClockFreq>
 8005ace:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad0:	e009      	b.n	8005ae6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ad8:	e005      	b.n	8005ae6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 8089 	beq.w	8005c00 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	4a4e      	ldr	r2, [pc, #312]	; (8005c2c <UART_SetConfig+0x590>)
 8005af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b00:	005a      	lsls	r2, r3, #1
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	441a      	add	r2, r3
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d916      	bls.n	8005b48 <UART_SetConfig+0x4ac>
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d212      	bcs.n	8005b48 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f023 030f 	bic.w	r3, r3, #15
 8005b2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	8bfb      	ldrh	r3, [r7, #30]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	8bfa      	ldrh	r2, [r7, #30]
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	e05b      	b.n	8005c00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b4e:	e057      	b.n	8005c00 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d828      	bhi.n	8005baa <UART_SetConfig+0x50e>
 8005b58:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <UART_SetConfig+0x4c4>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005b85 	.word	0x08005b85
 8005b64:	08005b8d 	.word	0x08005b8d
 8005b68:	08005b95 	.word	0x08005b95
 8005b6c:	08005bab 	.word	0x08005bab
 8005b70:	08005b9b 	.word	0x08005b9b
 8005b74:	08005bab 	.word	0x08005bab
 8005b78:	08005bab 	.word	0x08005bab
 8005b7c:	08005bab 	.word	0x08005bab
 8005b80:	08005ba3 	.word	0x08005ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b84:	f7fe ff38 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8005b88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b8a:	e014      	b.n	8005bb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b8c:	f7fe ff4a 	bl	8004a24 <HAL_RCC_GetPCLK2Freq>
 8005b90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b92:	e010      	b.n	8005bb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b94:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <UART_SetConfig+0x594>)
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b98:	e00d      	b.n	8005bb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b9a:	f7fe febf 	bl	800491c <HAL_RCC_GetSysClockFreq>
 8005b9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ba0:	e009      	b.n	8005bb6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ba8:	e005      	b.n	8005bb6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bb4:	bf00      	nop
    }

    if (pclk != 0U)
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d021      	beq.n	8005c00 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	; (8005c2c <UART_SetConfig+0x590>)
 8005bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d909      	bls.n	8005bfa <UART_SetConfig+0x55e>
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d205      	bcs.n	8005bfa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60da      	str	r2, [r3, #12]
 8005bf8:	e002      	b.n	8005c00 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2200      	movs	r2, #0
 8005c14:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3730      	adds	r7, #48	; 0x30
 8005c24:	46bd      	mov	sp, r7
 8005c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2a:	bf00      	nop
 8005c2c:	0800649c 	.word	0x0800649c
 8005c30:	00f42400 	.word	0x00f42400

08005c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d32:	d10a      	bne.n	8005d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b098      	sub	sp, #96	; 0x60
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d88:	f7fb fd90 	bl	80018ac <HAL_GetTick>
 8005d8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0308 	and.w	r3, r3, #8
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d12f      	bne.n	8005dfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da4:	2200      	movs	r2, #0
 8005da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f88e 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d022      	beq.n	8005dfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dca:	653b      	str	r3, [r7, #80]	; 0x50
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e6      	bne.n	8005db6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e063      	b.n	8005ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d149      	bne.n	8005e9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e12:	2200      	movs	r2, #0
 8005e14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f857 	bl	8005ecc <UART_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d03c      	beq.n	8005e9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	623b      	str	r3, [r7, #32]
   return(result);
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
 8005e44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e6      	bne.n	8005e24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e76:	61fa      	str	r2, [r7, #28]
 8005e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	69b9      	ldr	r1, [r7, #24]
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	617b      	str	r3, [r7, #20]
   return(result);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e5      	bne.n	8005e56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e012      	b.n	8005ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3758      	adds	r7, #88	; 0x58
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005edc:	e04f      	b.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d04b      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee6:	f7fb fce1 	bl	80018ac <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e04e      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d037      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b80      	cmp	r3, #128	; 0x80
 8005f12:	d034      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b40      	cmp	r3, #64	; 0x40
 8005f18:	d031      	beq.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d110      	bne.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f838 	bl	8005fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e029      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f58:	d111      	bne.n	8005f7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 f81e 	bl	8005fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e00f      	b.n	8005f9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4013      	ands	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	79fb      	ldrb	r3, [r7, #7]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d0a0      	beq.n	8005ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b095      	sub	sp, #84	; 0x54
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8005fce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	e853 3f00 	ldrex	r3, [r3]
 8005fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	f023 0301 	bic.w	r3, r3, #1
 8005ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e3      	bne.n	8005fe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d118      	bne.n	8006052 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	60bb      	str	r3, [r7, #8]
   return(result);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f023 0310 	bic.w	r3, r3, #16
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	613b      	str	r3, [r7, #16]
   return(result);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e6      	bne.n	8006020 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006066:	bf00      	nop
 8006068:	3754      	adds	r7, #84	; 0x54
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_UARTEx_DisableFifoMode+0x16>
 8006084:	2302      	movs	r3, #2
 8006086:	e027      	b.n	80060d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0201 	bic.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e02d      	b.n	8006158 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2224      	movs	r2, #36	; 0x24
 8006108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f84f 	bl	80061dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006174:	2302      	movs	r3, #2
 8006176:	e02d      	b.n	80061d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2224      	movs	r2, #36	; 0x24
 8006184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f811 	bl	80061dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d108      	bne.n	80061fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061fc:	e031      	b.n	8006262 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061fe:	2308      	movs	r3, #8
 8006200:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006202:	2308      	movs	r3, #8
 8006204:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	0e5b      	lsrs	r3, r3, #25
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	0f5b      	lsrs	r3, r3, #29
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006226:	7bbb      	ldrb	r3, [r7, #14]
 8006228:	7b3a      	ldrb	r2, [r7, #12]
 800622a:	4911      	ldr	r1, [pc, #68]	; (8006270 <UARTEx_SetNbDataToProcess+0x94>)
 800622c:	5c8a      	ldrb	r2, [r1, r2]
 800622e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006232:	7b3a      	ldrb	r2, [r7, #12]
 8006234:	490f      	ldr	r1, [pc, #60]	; (8006274 <UARTEx_SetNbDataToProcess+0x98>)
 8006236:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006238:	fb93 f3f2 	sdiv	r3, r3, r2
 800623c:	b29a      	uxth	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006244:	7bfb      	ldrb	r3, [r7, #15]
 8006246:	7b7a      	ldrb	r2, [r7, #13]
 8006248:	4909      	ldr	r1, [pc, #36]	; (8006270 <UARTEx_SetNbDataToProcess+0x94>)
 800624a:	5c8a      	ldrb	r2, [r1, r2]
 800624c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006250:	7b7a      	ldrb	r2, [r7, #13]
 8006252:	4908      	ldr	r1, [pc, #32]	; (8006274 <UARTEx_SetNbDataToProcess+0x98>)
 8006254:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006256:	fb93 f3f2 	sdiv	r3, r3, r2
 800625a:	b29a      	uxth	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006262:	bf00      	nop
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	080064b4 	.word	0x080064b4
 8006274:	080064bc 	.word	0x080064bc

08006278 <malloc>:
 8006278:	4b02      	ldr	r3, [pc, #8]	; (8006284 <malloc+0xc>)
 800627a:	4601      	mov	r1, r0
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	f000 b823 	b.w	80062c8 <_malloc_r>
 8006282:	bf00      	nop
 8006284:	2000005c 	.word	0x2000005c

08006288 <sbrk_aligned>:
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	4e0e      	ldr	r6, [pc, #56]	; (80062c4 <sbrk_aligned+0x3c>)
 800628c:	460c      	mov	r4, r1
 800628e:	6831      	ldr	r1, [r6, #0]
 8006290:	4605      	mov	r5, r0
 8006292:	b911      	cbnz	r1, 800629a <sbrk_aligned+0x12>
 8006294:	f000 f8ac 	bl	80063f0 <_sbrk_r>
 8006298:	6030      	str	r0, [r6, #0]
 800629a:	4621      	mov	r1, r4
 800629c:	4628      	mov	r0, r5
 800629e:	f000 f8a7 	bl	80063f0 <_sbrk_r>
 80062a2:	1c43      	adds	r3, r0, #1
 80062a4:	d00a      	beq.n	80062bc <sbrk_aligned+0x34>
 80062a6:	1cc4      	adds	r4, r0, #3
 80062a8:	f024 0403 	bic.w	r4, r4, #3
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d007      	beq.n	80062c0 <sbrk_aligned+0x38>
 80062b0:	1a21      	subs	r1, r4, r0
 80062b2:	4628      	mov	r0, r5
 80062b4:	f000 f89c 	bl	80063f0 <_sbrk_r>
 80062b8:	3001      	adds	r0, #1
 80062ba:	d101      	bne.n	80062c0 <sbrk_aligned+0x38>
 80062bc:	f04f 34ff 	mov.w	r4, #4294967295
 80062c0:	4620      	mov	r0, r4
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	200004b8 	.word	0x200004b8

080062c8 <_malloc_r>:
 80062c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062cc:	1ccd      	adds	r5, r1, #3
 80062ce:	f025 0503 	bic.w	r5, r5, #3
 80062d2:	3508      	adds	r5, #8
 80062d4:	2d0c      	cmp	r5, #12
 80062d6:	bf38      	it	cc
 80062d8:	250c      	movcc	r5, #12
 80062da:	2d00      	cmp	r5, #0
 80062dc:	4607      	mov	r7, r0
 80062de:	db01      	blt.n	80062e4 <_malloc_r+0x1c>
 80062e0:	42a9      	cmp	r1, r5
 80062e2:	d905      	bls.n	80062f0 <_malloc_r+0x28>
 80062e4:	230c      	movs	r3, #12
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	2600      	movs	r6, #0
 80062ea:	4630      	mov	r0, r6
 80062ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063c4 <_malloc_r+0xfc>
 80062f4:	f000 f868 	bl	80063c8 <__malloc_lock>
 80062f8:	f8d8 3000 	ldr.w	r3, [r8]
 80062fc:	461c      	mov	r4, r3
 80062fe:	bb5c      	cbnz	r4, 8006358 <_malloc_r+0x90>
 8006300:	4629      	mov	r1, r5
 8006302:	4638      	mov	r0, r7
 8006304:	f7ff ffc0 	bl	8006288 <sbrk_aligned>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	4604      	mov	r4, r0
 800630c:	d155      	bne.n	80063ba <_malloc_r+0xf2>
 800630e:	f8d8 4000 	ldr.w	r4, [r8]
 8006312:	4626      	mov	r6, r4
 8006314:	2e00      	cmp	r6, #0
 8006316:	d145      	bne.n	80063a4 <_malloc_r+0xdc>
 8006318:	2c00      	cmp	r4, #0
 800631a:	d048      	beq.n	80063ae <_malloc_r+0xe6>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	4631      	mov	r1, r6
 8006320:	4638      	mov	r0, r7
 8006322:	eb04 0903 	add.w	r9, r4, r3
 8006326:	f000 f863 	bl	80063f0 <_sbrk_r>
 800632a:	4581      	cmp	r9, r0
 800632c:	d13f      	bne.n	80063ae <_malloc_r+0xe6>
 800632e:	6821      	ldr	r1, [r4, #0]
 8006330:	1a6d      	subs	r5, r5, r1
 8006332:	4629      	mov	r1, r5
 8006334:	4638      	mov	r0, r7
 8006336:	f7ff ffa7 	bl	8006288 <sbrk_aligned>
 800633a:	3001      	adds	r0, #1
 800633c:	d037      	beq.n	80063ae <_malloc_r+0xe6>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	442b      	add	r3, r5
 8006342:	6023      	str	r3, [r4, #0]
 8006344:	f8d8 3000 	ldr.w	r3, [r8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d038      	beq.n	80063be <_malloc_r+0xf6>
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	42a2      	cmp	r2, r4
 8006350:	d12b      	bne.n	80063aa <_malloc_r+0xe2>
 8006352:	2200      	movs	r2, #0
 8006354:	605a      	str	r2, [r3, #4]
 8006356:	e00f      	b.n	8006378 <_malloc_r+0xb0>
 8006358:	6822      	ldr	r2, [r4, #0]
 800635a:	1b52      	subs	r2, r2, r5
 800635c:	d41f      	bmi.n	800639e <_malloc_r+0xd6>
 800635e:	2a0b      	cmp	r2, #11
 8006360:	d917      	bls.n	8006392 <_malloc_r+0xca>
 8006362:	1961      	adds	r1, r4, r5
 8006364:	42a3      	cmp	r3, r4
 8006366:	6025      	str	r5, [r4, #0]
 8006368:	bf18      	it	ne
 800636a:	6059      	strne	r1, [r3, #4]
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	bf08      	it	eq
 8006370:	f8c8 1000 	streq.w	r1, [r8]
 8006374:	5162      	str	r2, [r4, r5]
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	4638      	mov	r0, r7
 800637a:	f104 060b 	add.w	r6, r4, #11
 800637e:	f000 f829 	bl	80063d4 <__malloc_unlock>
 8006382:	f026 0607 	bic.w	r6, r6, #7
 8006386:	1d23      	adds	r3, r4, #4
 8006388:	1af2      	subs	r2, r6, r3
 800638a:	d0ae      	beq.n	80062ea <_malloc_r+0x22>
 800638c:	1b9b      	subs	r3, r3, r6
 800638e:	50a3      	str	r3, [r4, r2]
 8006390:	e7ab      	b.n	80062ea <_malloc_r+0x22>
 8006392:	42a3      	cmp	r3, r4
 8006394:	6862      	ldr	r2, [r4, #4]
 8006396:	d1dd      	bne.n	8006354 <_malloc_r+0x8c>
 8006398:	f8c8 2000 	str.w	r2, [r8]
 800639c:	e7ec      	b.n	8006378 <_malloc_r+0xb0>
 800639e:	4623      	mov	r3, r4
 80063a0:	6864      	ldr	r4, [r4, #4]
 80063a2:	e7ac      	b.n	80062fe <_malloc_r+0x36>
 80063a4:	4634      	mov	r4, r6
 80063a6:	6876      	ldr	r6, [r6, #4]
 80063a8:	e7b4      	b.n	8006314 <_malloc_r+0x4c>
 80063aa:	4613      	mov	r3, r2
 80063ac:	e7cc      	b.n	8006348 <_malloc_r+0x80>
 80063ae:	230c      	movs	r3, #12
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	4638      	mov	r0, r7
 80063b4:	f000 f80e 	bl	80063d4 <__malloc_unlock>
 80063b8:	e797      	b.n	80062ea <_malloc_r+0x22>
 80063ba:	6025      	str	r5, [r4, #0]
 80063bc:	e7dc      	b.n	8006378 <_malloc_r+0xb0>
 80063be:	605b      	str	r3, [r3, #4]
 80063c0:	deff      	udf	#255	; 0xff
 80063c2:	bf00      	nop
 80063c4:	200004b4 	.word	0x200004b4

080063c8 <__malloc_lock>:
 80063c8:	4801      	ldr	r0, [pc, #4]	; (80063d0 <__malloc_lock+0x8>)
 80063ca:	f000 b84b 	b.w	8006464 <__retarget_lock_acquire_recursive>
 80063ce:	bf00      	nop
 80063d0:	200005f8 	.word	0x200005f8

080063d4 <__malloc_unlock>:
 80063d4:	4801      	ldr	r0, [pc, #4]	; (80063dc <__malloc_unlock+0x8>)
 80063d6:	f000 b846 	b.w	8006466 <__retarget_lock_release_recursive>
 80063da:	bf00      	nop
 80063dc:	200005f8 	.word	0x200005f8

080063e0 <memset>:
 80063e0:	4402      	add	r2, r0
 80063e2:	4603      	mov	r3, r0
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d100      	bne.n	80063ea <memset+0xa>
 80063e8:	4770      	bx	lr
 80063ea:	f803 1b01 	strb.w	r1, [r3], #1
 80063ee:	e7f9      	b.n	80063e4 <memset+0x4>

080063f0 <_sbrk_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4d06      	ldr	r5, [pc, #24]	; (800640c <_sbrk_r+0x1c>)
 80063f4:	2300      	movs	r3, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fb f980 	bl	8001700 <_sbrk>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_sbrk_r+0x1a>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_sbrk_r+0x1a>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	200005f4 	.word	0x200005f4

08006410 <__errno>:
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <__errno+0x8>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	2000005c 	.word	0x2000005c

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4d0d      	ldr	r5, [pc, #52]	; (8006454 <__libc_init_array+0x38>)
 8006420:	4c0d      	ldr	r4, [pc, #52]	; (8006458 <__libc_init_array+0x3c>)
 8006422:	1b64      	subs	r4, r4, r5
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	2600      	movs	r6, #0
 8006428:	42a6      	cmp	r6, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	4d0b      	ldr	r5, [pc, #44]	; (800645c <__libc_init_array+0x40>)
 800642e:	4c0c      	ldr	r4, [pc, #48]	; (8006460 <__libc_init_array+0x44>)
 8006430:	f000 f81a 	bl	8006468 <_init>
 8006434:	1b64      	subs	r4, r4, r5
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	2600      	movs	r6, #0
 800643a:	42a6      	cmp	r6, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	f855 3b04 	ldr.w	r3, [r5], #4
 8006444:	4798      	blx	r3
 8006446:	3601      	adds	r6, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	f855 3b04 	ldr.w	r3, [r5], #4
 800644e:	4798      	blx	r3
 8006450:	3601      	adds	r6, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	080064cc 	.word	0x080064cc
 8006458:	080064cc 	.word	0x080064cc
 800645c:	080064cc 	.word	0x080064cc
 8006460:	080064d0 	.word	0x080064d0

08006464 <__retarget_lock_acquire_recursive>:
 8006464:	4770      	bx	lr

08006466 <__retarget_lock_release_recursive>:
 8006466:	4770      	bx	lr

08006468 <_init>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr

08006474 <_fini>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr
