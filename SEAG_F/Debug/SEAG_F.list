
SEAG_F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08008c58  08008c58  00018c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091a0  080091a0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080091a0  080091a0  000191a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091a8  080091a8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091ac  080091ac  000191ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080091b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  200000d0  08009280  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  08009280  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f61f  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003821  00000000  00000000  0002f762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00032f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a33  00000000  00000000  00033d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dd9  00000000  00000000  000347a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176db  00000000  00000000  0005a57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d24eb  00000000  00000000  00071c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043b4  00000000  00000000  00144144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001484f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000d0 	.word	0x200000d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008c3c 	.word	0x08008c3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d4 	.word	0x200000d4
 800021c:	08008c3c 	.word	0x08008c3c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

	ResetCodec(hi2c1);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f88c 	bl	80010aa <ResetCodec>

	HAL_Delay(25);
 8000f92:	2019      	movs	r0, #25
 8000f94:	f002 f9cc 	bl	8003330 <HAL_Delay>

	//Connect Linput1 to inverting input of left input PGA, 0db gain, connecting Left input PGA to input booster
	//WriteCodecRegister(hi2c1, 0x20, 0b100001000);

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000f98:	f240 1279 	movw	r2, #377	; 0x179
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f890 	bl	80010c4 <WriteCodecRegister>

	//un mute left channel, LINVOL = +0DB [5:0]
	WriteCodecRegister(hi2c1, 0x00, 0b100010111);
 8000fa4:	f240 1217 	movw	r2, #279	; 0x117
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f88a 	bl	80010c4 <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 0b100000000);
 8000fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f884 	bl	80010c4 <WriteCodecRegister>

	//Enable LB2LO
	WriteCodecRegister(hi2c1, 0x2D, 0b001010000);
 8000fbc:	2250      	movs	r2, #80	; 0x50
 8000fbe:	212d      	movs	r1, #45	; 0x2d
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f87f 	bl	80010c4 <WriteCodecRegister>


	// ----- Power Management -----

	// outdated R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b011111100);
 8000fc6:	22fc      	movs	r2, #252	; 0xfc
 8000fc8:	2119      	movs	r1, #25
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f87a 	bl	80010c4 <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b111010000);
 8000fd0:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000fd4:	211a      	movs	r1, #26
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f874 	bl	80010c4 <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000111100);
 8000fdc:	223c      	movs	r2, #60	; 0x3c
 8000fde:	212f      	movs	r1, #47	; 0x2f
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f86f 	bl	80010c4 <WriteCodecRegister>
	//WriteCodecRegister(hi2c1, 0x02, 0b100000000);

	//-----------------------

	// Disable master mode codec, I²S format
	WriteCodecRegister(hi2c1, 0x07, 0b000000010);
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	2107      	movs	r1, #7
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f86a 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000ff0:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f864 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x21, 0b000000000);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2121      	movs	r1, #33	; 0x21
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f85f 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x2E, 0b000000000);
 8001006:	2200      	movs	r2, #0
 8001008:	212e      	movs	r1, #46	; 0x2e
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f85a 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x22, 0b101010000);
 8001010:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001014:	2122      	movs	r1, #34	; 0x22
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f854 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x25, 0b001010000);
 800101c:	2250      	movs	r2, #80	; 0x50
 800101e:	2125      	movs	r1, #37	; 0x25
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f84f 	bl	80010c4 <WriteCodecRegister>

	//Write speaker L volume
	WriteCodecRegister(hi2c1, 0x28, 0b101111001);
 8001026:	f240 1279 	movw	r2, #377	; 0x179
 800102a:	2128      	movs	r1, #40	; 0x28
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f849 	bl	80010c4 <WriteCodecRegister>
	//Write speaker R volume
	WriteCodecRegister(hi2c1, 0x29, 0b101111001);
 8001032:	f240 1279 	movw	r2, #377	; 0x179
 8001036:	2129      	movs	r1, #41	; 0x29
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f843 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x34, 0b000000000);
 800103e:	2200      	movs	r2, #0
 8001040:	2134      	movs	r1, #52	; 0x34
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f83e 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x04, 0b000000000);
 8001048:	2200      	movs	r2, #0
 800104a:	2104      	movs	r1, #4
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f839 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x08, 0b111000000);
 8001052:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001056:	2108      	movs	r1, #8
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f833 	bl	80010c4 <WriteCodecRegister>

	// Disabled high pass filter
	WriteCodecRegister(hi2c1, 0x05, 0b000000001);
 800105e:	2201      	movs	r2, #1
 8001060:	2105      	movs	r1, #5
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f82e 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x09, 0b000000000);
 8001068:	2200      	movs	r2, #0
 800106a:	2109      	movs	r1, #9
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f829 	bl	80010c4 <WriteCodecRegister>

	//Writing ADC and DAC volume
	WriteCodecRegister(hi2c1, 0x15, 0b111000011);
 8001072:	f240 12c3 	movw	r2, #451	; 0x1c3
 8001076:	2115      	movs	r1, #21
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f823 	bl	80010c4 <WriteCodecRegister>
	WriteCodecRegister(hi2c1, 0x16, 0b111000011);
 800107e:	f240 12c3 	movw	r2, #451	; 0x1c3
 8001082:	2116      	movs	r1, #22
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f81d 	bl	80010c4 <WriteCodecRegister>

	//Writing ADC and DAC volume
	WriteCodecRegister(hi2c1, 0x0A, 0b111111111);
 800108a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800108e:	210a      	movs	r1, #10
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f817 	bl	80010c4 <WriteCodecRegister>
	WriteCodecRegister(hi2c1, 0x0B, 0b111111111);
 8001096:	f240 12ff 	movw	r2, #511	; 0x1ff
 800109a:	210b      	movs	r1, #11
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f811 	bl	80010c4 <WriteCodecRegister>
	buf[0]=0x55;
	HAL_I2C_Master_Transmit(hi2c1, codecAddr, buf, 1 , HAL_MAX_DELAY);

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	210f      	movs	r1, #15
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f804 	bl	80010c4 <WriteCodecRegister>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint8_t reg, uint16_t pData){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	803b      	strh	r3, [r7, #0]
	uint8_t regAddrWDataBit = (uint8_t)(reg << 1) | (pData >> 8);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	883b      	ldrh	r3, [r7, #0]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	73fb      	strb	r3, [r7, #15]
	uint8_t lowByte = (uint8_t)(pData & 0xFF);
 80010e6:	883b      	ldrh	r3, [r7, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, regAddrWDataBit, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 80010ec:	2334      	movs	r3, #52	; 0x34
 80010ee:	b299      	uxth	r1, r3
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 030e 	add.w	r3, r7, #14
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f003 f836 	bl	8004178 <HAL_I2C_Mem_Write>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <InitDSP>:

// --- filters ---
Filters* filters;


void InitDSP(uint32_t sampleFrequency, I2S_HandleTypeDef *hi2s1, I2S_HandleTypeDef *hi2s2){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]

	//Init filters
	filters = initializeFilters(sampleFrequency);
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 fcb9 	bl	8001a98 <initializeFilters>
 8001126:	4603      	mov	r3, r0
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <InitDSP+0x34>)
 800112a:	6013      	str	r3, [r2, #0]

	//Start the I²S DMA streams
	HAL_I2S_Transmit_DMA(hi2s1, (uint16_t*)&outputData[0], BUFFER_SIZE);
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	4907      	ldr	r1, [pc, #28]	; (800114c <InitDSP+0x38>)
 8001130:	68b8      	ldr	r0, [r7, #8]
 8001132:	f003 fcf9 	bl	8004b28 <HAL_I2S_Transmit_DMA>
	HAL_I2S_Receive_DMA(hi2s2, (uint16_t*)&inputData[0], BUFFER_SIZE);
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	4905      	ldr	r1, [pc, #20]	; (8001150 <InitDSP+0x3c>)
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f003 fd9c 	bl	8004c78 <HAL_I2S_Receive_DMA>

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002f0 	.word	0x200002f0
 800114c:	200001ec 	.word	0x200001ec
 8001150:	200000ec 	.word	0x200000ec

08001154 <DSPUpdate>:


void DSPUpdate(){
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0

	//When dataReadyFlag is set, DMA has filled up the buffer
	if(dataReadyFlag){
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <DSPUpdate+0x70>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d02b      	beq.n	80011ba <DSPUpdate+0x66>

		for(uint8_t i = 0; i < BUFFER_SIZE/2; i++){
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e022      	b.n	80011ae <DSPUpdate+0x5a>

			// Process left channel
			if(i % 2 == 0){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d112      	bne.n	800119a <DSPUpdate+0x46>
				*(outputBufPtr+i) = appendSample(filters, *(inputBufPtr+i));
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <DSPUpdate+0x74>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <DSPUpdate+0x78>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b219      	sxth	r1, r3
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <DSPUpdate+0x7c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	18d4      	adds	r4, r2, r3
 8001190:	f000 fd1e 	bl	8001bd0 <appendSample>
 8001194:	4603      	mov	r3, r0
 8001196:	8023      	strh	r3, [r4, #0]
 8001198:	e006      	b.n	80011a8 <DSPUpdate+0x54>

			}else{
				*(outputBufPtr+i) = (int16_t)(0);
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <DSPUpdate+0x7c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < BUFFER_SIZE/2; i++){
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	3301      	adds	r3, #1
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b3f      	cmp	r3, #63	; 0x3f
 80011b2:	d9d9      	bls.n	8001168 <DSPUpdate+0x14>
			}

		}

		//When the buffer is completely process, set dataReadyFlag low
		dataReadyFlag = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <DSPUpdate+0x70>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	}


}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200002ec 	.word	0x200002ec
 80011c8:	200002f0 	.word	0x200002f0
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <SetFilterStates>:


void SetFilterStates(uint8_t states){
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]

	filters->enabledFilters = states;
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SetFilterStates+0x20>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	701a      	strb	r2, [r3, #0]

}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	200002f0 	.word	0x200002f0

080011f8 <GetEnabledFilters>:

uint8_t GetEnabledFilters(){
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
	return filters->enabledFilters;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <GetEnabledFilters+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	781b      	ldrb	r3, [r3, #0]
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	200002f0 	.word	0x200002f0

08001210 <getFilters>:

Filters* getFilters(){
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	return filters;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <getFilters+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200002f0 	.word	0x200002f0

08001228 <HAL_I2S_RxHalfCpltCallback>:


/*
 * Callback for when the first half of the input buffer is filled
 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	//set the pointers to start of the array
	inputBufPtr = &inputData[0];
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001234:	601a      	str	r2, [r3, #0]
	outputBufPtr = &outputData[0];
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_I2S_RxHalfCpltCallback+0x34>)
 800123a:	601a      	str	r2, [r3, #0]

	//data is ready, and will get processed in DSPUpdate
	dataReadyFlag = 1;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_I2S_RxHalfCpltCallback+0x38>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]

}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000000 	.word	0x20000000
 8001254:	200000ec 	.word	0x200000ec
 8001258:	20000004 	.word	0x20000004
 800125c:	200001ec 	.word	0x200001ec
 8001260:	200002ec 	.word	0x200002ec

08001264 <HAL_I2S_RxCpltCallback>:

/*
 * Callback for when the second half of the input buffer is filled
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	//set the pointers to halfway the array
	inputBufPtr = &inputData[BUFFER_SIZE/2];
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_I2S_RxCpltCallback+0x28>)
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_I2S_RxCpltCallback+0x2c>)
 8001270:	601a      	str	r2, [r3, #0]
	outputBufPtr = &outputData[BUFFER_SIZE/2];
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_I2S_RxCpltCallback+0x30>)
 8001274:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_I2S_RxCpltCallback+0x34>)
 8001276:	601a      	str	r2, [r3, #0]

	//data is ready, and will get processed in DSPUpdate
	dataReadyFlag = 1;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_I2S_RxCpltCallback+0x38>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]

}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000000 	.word	0x20000000
 8001290:	2000016c 	.word	0x2000016c
 8001294:	20000004 	.word	0x20000004
 8001298:	2000026c 	.word	0x2000026c
 800129c:	200002ec 	.word	0x200002ec

080012a0 <initializeAllPass>:

#include "AllPass.h"

AllPass* initializeAllPass(uint32_t sampleRate, float delayS, float amplification, float attenuation){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80012b0:	ed87 1a00 	vstr	s2, [r7]

    AllPass* allPass = malloc(sizeof(AllPass));
 80012b4:	2008      	movs	r0, #8
 80012b6:	f004 fe97 	bl	8005fe8 <malloc>
 80012ba:	4603      	mov	r3, r0
 80012bc:	61fb      	str	r3, [r7, #28]

    CombFeedforward *combFeedforward = initializeCombFeedforward(sampleRate, delayS, amplification, attenuation);
 80012be:	ed97 1a00 	vldr	s2, [r7]
 80012c2:	edd7 0a01 	vldr	s1, [r7, #4]
 80012c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 fa18 	bl	8001700 <initializeCombFeedforward>
 80012d0:	61b8      	str	r0, [r7, #24]
    CombFeedback *combFeedback = initializeCombFeedback(sampleRate, delayS, amplification, attenuation);
 80012d2:	ed97 1a00 	vldr	s2, [r7]
 80012d6:	edd7 0a01 	vldr	s1, [r7, #4]
 80012da:	ed97 0a02 	vldr	s0, [r7, #8]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f956 	bl	8001590 <initializeCombFeedback>
 80012e4:	6178      	str	r0, [r7, #20]

    allPass->combFeedforward = combFeedforward;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	601a      	str	r2, [r3, #0]
    allPass->combFeedback = combFeedback;
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	605a      	str	r2, [r3, #4]

    return allPass;
 80012f2:	69fb      	ldr	r3, [r7, #28]

}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <allPassAppendSample>:

SampleType  allPassAppendSample(AllPass* filter, SampleType  newSample){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]

	SampleType feedForwardOutput = combFeedforwardAppendSample(filter->combFeedforward, newSample);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fa25 	bl	8001762 <combFeedforwardAppendSample>
 8001318:	4603      	mov	r3, r0
 800131a:	81fb      	strh	r3, [r7, #14]

	SampleType output = combFeedbackAppendSample(filter->combFeedback, feedForwardOutput); //gaat de waarde van forward gebruiken in de comback filter
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f96b 	bl	8001602 <combFeedbackAppendSample>
 800132c:	4603      	mov	r3, r0
 800132e:	81bb      	strh	r3, [r7, #12]

    return output;
 8001330:	f9b7 300c 	ldrsh.w	r3, [r7, #12]

}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <setAllPassLevel>:
	allPass->combFeedback->offset = offset;
	allPass->combFeedforward->offset = offset;

}

void setAllPassLevel(AllPass* allPass, float a){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	ed87 0a00 	vstr	s0, [r7]
	setCombFeedbackLevel(allPass->combFeedback, a);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	ed97 0a00 	vldr	s0, [r7]
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f999 	bl	8001688 <setCombFeedbackLevel>
	setCombFeedforwardLevel(allPass->combFeedforward, a);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	ed97 0a00 	vldr	s0, [r7]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 fa3e 	bl	80017e0 <setCombFeedforwardLevel>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <initializeChorus>:
#include "Chorus.h"


Chorus* initializeChorus(uint32_t sampleRate){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

    Chorus* filter = malloc(sizeof(Chorus));
 8001374:	2018      	movs	r0, #24
 8001376:	f004 fe37 	bl	8005fe8 <malloc>
 800137a:	4603      	mov	r3, r0
 800137c:	613b      	str	r3, [r7, #16]

    filter->delayLowPass = initializeLowPass(sampleRate, 10);
 800137e:	210a      	movs	r1, #10
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fcc5 	bl	8001d10 <initializeLowPass>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	605a      	str	r2, [r3, #4]
    
    filter->amountOfFeedforwardFilters = 2;
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2202      	movs	r2, #2
 8001390:	741a      	strb	r2, [r3, #16]
    filter->previousDelays = calloc(filter->amountOfFeedforwardFilters, sizeof(float));
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	7c1b      	ldrb	r3, [r3, #16]
 8001396:	2104      	movs	r1, #4
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fe07 	bl	8005fac <calloc>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	609a      	str	r2, [r3, #8]

    filter->a = 0.9999f;
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <initializeChorus+0xe4>)
 80013aa:	60da      	str	r2, [r3, #12]

    filter->combFeedforwardFilters = malloc(filter->amountOfFeedforwardFilters*sizeof(CombFeedforward));
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	7c1b      	ldrb	r3, [r3, #16]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fe18 	bl	8005fe8 <malloc>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	615a      	str	r2, [r3, #20]

    float delayS[2] = {0.03f, 0.050f};
 80013c0:	4a24      	ldr	r2, [pc, #144]	; (8001454 <initializeChorus+0xe8>)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ca:	e883 0003 	stmia.w	r3, {r0, r1}

    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	e032      	b.n	800143a <initializeChorus+0xce>
        filter->previousDelays[i] = sampleRate*delayS[i]/2;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	3318      	adds	r3, #24
 80013e4:	443b      	add	r3, r7
 80013e6:	3b10      	subs	r3, #16
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001402:	edc3 7a00 	vstr	s15, [r3]
        filter->combFeedforwardFilters[i] = initializeCombFeedforward(sampleRate, delayS[i], 1.0f, 0.99f);
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	3318      	adds	r3, #24
 800140c:	443b      	add	r3, r7
 800140e:	3b10      	subs	r3, #16
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	18d4      	adds	r4, r2, r3
 800141e:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001458 <initializeChorus+0xec>
 8001422:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f968 	bl	8001700 <initializeCombFeedforward>
 8001430:	4603      	mov	r3, r0
 8001432:	6023      	str	r3, [r4, #0]
    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	3301      	adds	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	7c1b      	ldrb	r3, [r3, #16]
 800143e:	7dfa      	ldrb	r2, [r7, #23]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3c7      	bcc.n	80013d4 <initializeChorus+0x68>

    }

    return filter;
 8001444:	693b      	ldr	r3, [r7, #16]

}
 8001446:	4618      	mov	r0, r3
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd90      	pop	{r4, r7, pc}
 800144e:	bf00      	nop
 8001450:	3f7ff972 	.word	0x3f7ff972
 8001454:	08008c58 	.word	0x08008c58
 8001458:	3f7d70a4 	.word	0x3f7d70a4

0800145c <chorusAppendSample>:

SampleType chorusAppendSample(Chorus *filter, SampleType input){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]

	SampleType output = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	81fb      	strh	r3, [r7, #14]

    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 800146c:	2300      	movs	r3, #0
 800146e:	737b      	strb	r3, [r7, #13]
 8001470:	e062      	b.n	8001538 <chorusAppendSample+0xdc>
        uint16_t rawDelay = rand() % filter->combFeedforwardFilters[i]->inputSamples->bufferSize; // max delay in sample amount
 8001472:	f004 fe6d 	bl	8006150 <rand>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6959      	ldr	r1, [r3, #20]
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	fbb2 f1f3 	udiv	r1, r2, r3
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	817b      	strh	r3, [r7, #10]

        filter->previousDelays[i] = filter->a*filter->previousDelays[i] + (1.0f-filter->a)*rawDelay; //gaat bepalen of de sprong niet groot is zodat er geen ruis gecreered word
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	ed93 7a03 	vldr	s14, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	7b7b      	ldrb	r3, [r7, #13]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80014b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014bc:	897b      	ldrh	r3, [r7, #10]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	7b7b      	ldrb	r3, [r7, #13]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d8:	edc3 7a00 	vstr	s15, [r3]

        uint16_t delay = (uint16_t)filter->previousDelays[i];
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ee:	ee17 3a90 	vmov	r3, s15
 80014f2:	813b      	strh	r3, [r7, #8]

        filter->combFeedforwardFilters[i]->offset = delay;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695a      	ldr	r2, [r3, #20]
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	893a      	ldrh	r2, [r7, #8]
 8001502:	601a      	str	r2, [r3, #0]

        
        output += combFeedforwardAppendSample(filter->combFeedforwardFilters[i], input)/filter->amountOfFeedforwardFilters; //gaat de meerdere comback waardens optellen voor geen clipping te krijgen delen we door het aantal filters, elke filter weegt even veel door
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f923 	bl	8001762 <combFeedforwardAppendSample>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7c1b      	ldrb	r3, [r3, #16]
 8001524:	fb92 f3f3 	sdiv	r3, r2, r3
 8001528:	b29a      	uxth	r2, r3
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	81fb      	strh	r3, [r7, #14]
    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 8001532:	7b7b      	ldrb	r3, [r7, #13]
 8001534:	3301      	adds	r3, #1
 8001536:	737b      	strb	r3, [r7, #13]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7c1b      	ldrb	r3, [r3, #16]
 800153c:	7b7a      	ldrb	r2, [r7, #13]
 800153e:	429a      	cmp	r2, r3
 8001540:	d397      	bcc.n	8001472 <chorusAppendSample+0x16>

    }

    return output;
 8001542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <setChorusLevel>:

void setChorusLevel(Chorus* filter, float a){
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	ed87 0a00 	vstr	s0, [r7]

	for(uint8_t i = 0 ;i < filter->amountOfFeedforwardFilters; i++){
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
 800155e:	e00d      	b.n	800157c <setChorusLevel+0x2e>

		setCombFeedforwardLevel(filter->combFeedforwardFilters[i], a);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	ed97 0a00 	vldr	s0, [r7]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f935 	bl	80017e0 <setCombFeedforwardLevel>
	for(uint8_t i = 0 ;i < filter->amountOfFeedforwardFilters; i++){
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7c1b      	ldrb	r3, [r3, #16]
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	429a      	cmp	r2, r3
 8001584:	d3ec      	bcc.n	8001560 <setChorusLevel+0x12>

	}

}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <initializeCombFeedback>:

#include "CombFeedback.h"

CombFeedback* initializeCombFeedback(uint32_t sampleRate, float delayS, float amplification, float attenuation){
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	ed87 0a02 	vstr	s0, [r7, #8]
 800159c:	edc7 0a01 	vstr	s1, [r7, #4]
 80015a0:	ed87 1a00 	vstr	s2, [r7]

    CombFeedback *filter = malloc(sizeof(CombFeedback));
 80015a4:	2014      	movs	r0, #20
 80015a6:	f004 fd1f 	bl	8005fe8 <malloc>
 80015aa:	4603      	mov	r3, r0
 80015ac:	617b      	str	r3, [r7, #20]

    filter->offset = 0;
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
    filter->outputSamples = initializeCircularBuffer( delayS*sampleRate);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015be:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ca:	ee17 0a90 	vmov	r0, s15
 80015ce:	f000 fd13 	bl	8001ff8 <initializeCircularBuffer>
 80015d2:	4602      	mov	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	605a      	str	r2, [r3, #4]

    filter->K = amplification;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	60da      	str	r2, [r3, #12]
    setCombFeedbackLevel(filter, attenuation);
 80015de:	ed97 0a00 	vldr	s0, [r7]
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f000 f850 	bl	8001688 <setCombFeedbackLevel>

    filter->lowPass = initializeLowPass(sampleRate, 1760);
 80015e8:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fb8f 	bl	8001d10 <initializeLowPass>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	609a      	str	r2, [r3, #8]

    return filter;
 80015f8:	697b      	ldr	r3, [r7, #20]

}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <combFeedbackAppendSample>:

SampleType combFeedbackAppendSample(CombFeedback *filter, SampleType newSample){
 8001602:	b590      	push	{r4, r7, lr}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	807b      	strh	r3, [r7, #2]

	SampleType lowPassedDelayedOutput = lowPassAppendSample( filter->lowPass, getValueInCircularBuffer(filter->outputSamples, filter->offset) ); //voor de ruis te bepreken voegen we een lowpas filter toe
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689c      	ldr	r4, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	4610      	mov	r0, r2
 800161e:	f000 fd27 	bl	8002070 <getValueInCircularBuffer>
 8001622:	4603      	mov	r3, r0
 8001624:	4619      	mov	r1, r3
 8001626:	4620      	mov	r0, r4
 8001628:	f000 fbba 	bl	8001da0 <lowPassAppendSample>
 800162c:	4603      	mov	r3, r0
 800162e:	81fb      	strh	r3, [r7, #14]

	SampleType output = (filter->K)*(newSample - (filter->a)*lowPassedDelayedOutput);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	ed93 7a03 	vldr	s14, [r3, #12]
 8001636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800163a:	ee07 3a90 	vmov	s15, r3
 800163e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	ed93 6a04 	vldr	s12, [r3, #16]
 8001648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001654:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001658:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	81bb      	strh	r3, [r7, #12]

	putValueInCircularBuffer(filter->outputSamples, output);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fcdb 	bl	8002030 <putValueInCircularBuffer>

    return output;
 800167a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]

}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bd90      	pop	{r4, r7, pc}
	...

08001688 <setCombFeedbackLevel>:

void setCombFeedbackLevel(CombFeedback *combfeedback, float a){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	ed87 0a00 	vstr	s0, [r7]

	if(a > 1.0f) a = 1.0f;
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800169c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	dd02      	ble.n	80016ac <setCombFeedbackLevel+0x24>
 80016a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016aa:	603b      	str	r3, [r7, #0]
	if(a < 0.0f) a = 0.0f;
 80016ac:	edd7 7a00 	vldr	s15, [r7]
 80016b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	d502      	bpl.n	80016c0 <setCombFeedbackLevel+0x38>
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	603b      	str	r3, [r7, #0]

	float value = pow(a, 1.0f/5.0f); //More resolution the higher a gets
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f7fe ff61 	bl	8000588 <__aeabi_f2d>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 80016f8 <setCombFeedbackLevel+0x70>
 80016ce:	ec43 2b10 	vmov	d0, r2, r3
 80016d2:	f005 fcb9 	bl	8007048 <pow>
 80016d6:	ec53 2b10 	vmov	r2, r3, d0
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa83 	bl	8000be8 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	60fb      	str	r3, [r7, #12]

    combfeedback->a = value;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	611a      	str	r2, [r3, #16]

}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	f3af 8000 	nop.w
 80016f8:	a0000000 	.word	0xa0000000
 80016fc:	3fc99999 	.word	0x3fc99999

08001700 <initializeCombFeedforward>:

#include "CombFeedforward.h"

CombFeedforward* initializeCombFeedforward(uint32_t sampleRate, float delayS, float amplification, float attenuation){
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	ed87 0a02 	vstr	s0, [r7, #8]
 800170c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001710:	ed87 1a00 	vstr	s2, [r7]

    CombFeedforward *filter = malloc(sizeof(CombFeedforward));
 8001714:	2010      	movs	r0, #16
 8001716:	f004 fc67 	bl	8005fe8 <malloc>
 800171a:	4603      	mov	r3, r0
 800171c:	617b      	str	r3, [r7, #20]

    filter->offset = 0;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
    
    filter->K = amplification;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]
    setCombFeedforwardLevel(filter, attenuation);
 800172a:	ed97 0a00 	vldr	s0, [r7]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f000 f856 	bl	80017e0 <setCombFeedforwardLevel>

    filter->inputSamples = initializeCircularBuffer(delayS*sampleRate);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800173e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174a:	ee17 0a90 	vmov	r0, s15
 800174e:	f000 fc53 	bl	8001ff8 <initializeCircularBuffer>
 8001752:	4602      	mov	r2, r0
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	605a      	str	r2, [r3, #4]
    
    return filter;
 8001758:	697b      	ldr	r3, [r7, #20]

}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <combFeedforwardAppendSample>:

int16_t combFeedforwardAppendSample(CombFeedforward *filter, int16_t newSample){
 8001762:	b580      	push	{r7, lr}
 8001764:	ed2d 8b02 	vpush	{d8}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	807b      	strh	r3, [r7, #2]

    int16_t output = filter->K*newSample + filter->a*getValueInCircularBuffer(filter->inputSamples, filter->offset);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	ed93 7a02 	vldr	s14, [r3, #8]
 8001778:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001784:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 8a03 	vldr	s17, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4619      	mov	r1, r3
 8001798:	4610      	mov	r0, r2
 800179a:	f000 fc69 	bl	8002070 <getValueInCircularBuffer>
 800179e:	4603      	mov	r3, r0
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80017ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	ee17 3a90 	vmov	r3, s15
 80017b8:	81fb      	strh	r3, [r7, #14]

    putValueInCircularBuffer(filter->inputSamples, newSample);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f000 fc33 	bl	8002030 <putValueInCircularBuffer>

    return output;
 80017ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	ecbd 8b02 	vpop	{d8}
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	0000      	movs	r0, r0
 80017dc:	0000      	movs	r0, r0
	...

080017e0 <setCombFeedforwardLevel>:

void setCombFeedforwardLevel(CombFeedforward *combfeedback, float a){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	ed87 0a00 	vstr	s0, [r7]

	if(a > 1.0f) a = 1.0f;
 80017ec:	edd7 7a00 	vldr	s15, [r7]
 80017f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	dd02      	ble.n	8001804 <setCombFeedforwardLevel+0x24>
 80017fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001802:	603b      	str	r3, [r7, #0]
	if(a < 0.0f) a = 0.0f;
 8001804:	edd7 7a00 	vldr	s15, [r7]
 8001808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	d502      	bpl.n	8001818 <setCombFeedforwardLevel+0x38>
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	603b      	str	r3, [r7, #0]

	float value = pow(a, 1.0f/5.0f); //More resolution the higher a gets
 8001818:	6838      	ldr	r0, [r7, #0]
 800181a:	f7fe feb5 	bl	8000588 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001850 <setCombFeedforwardLevel+0x70>
 8001826:	ec43 2b10 	vmov	d0, r2, r3
 800182a:	f005 fc0d 	bl	8007048 <pow>
 800182e:	ec53 2b10 	vmov	r2, r3, d0
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f9d7 	bl	8000be8 <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	60fb      	str	r3, [r7, #12]

	combfeedback->a = value;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	60da      	str	r2, [r3, #12]

}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	f3af 8000 	nop.w
 8001850:	a0000000 	.word	0xa0000000
 8001854:	3fc99999 	.word	0x3fc99999

08001858 <initializeDistortion>:

#include "Distortion.h"

Distortion* initializeDistortion(int threshold){
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
    Distortion *distortion= malloc(sizeof(Distortion));
 8001860:	2002      	movs	r0, #2
 8001862:	f004 fbc1 	bl	8005fe8 <malloc>
 8001866:	4603      	mov	r3, r0
 8001868:	60fb      	str	r3, [r7, #12]
    distortion->threshold = threshold;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	801a      	strh	r2, [r3, #0]
    return distortion;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <distortionAppendSample>:

SampleType distortionAppendSample(Distortion* distortion, SampleType newSample){
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	807b      	strh	r3, [r7, #2]
    float in, out, in_fabs;
    uint8_t negatief =1;
 8001888:	2301      	movs	r3, #1
 800188a:	74fb      	strb	r3, [r7, #19]

    // Normalize input to threshold level = 1.0
    in = (float)newSample/distortion->threshold;
 800188c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a8:	edc7 7a03 	vstr	s15, [r7, #12]
    in_fabs = fabs(in);
 80018ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b0:	eef0 7ae7 	vabs.f32	s15, s15
 80018b4:	edc7 7a02 	vstr	s15, [r7, #8]
    if (in_fabs == in){
 80018b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80018bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d101      	bne.n	80018ce <distortionAppendSample+0x52>
        negatief = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	74fb      	strb	r3, [r7, #19]
    }
    if (in_fabs<1.0f/3) {
 80018ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80019a4 <distortionAppendSample+0x128>
 80018d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d508      	bpl.n	80018f2 <distortionAppendSample+0x76>
        out = 1.5*in_fabs;
 80018e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80018e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ec:	edc7 7a05 	vstr	s15, [r7, #20]
 80018f0:	e035      	b.n	800195e <distortionAppendSample+0xe2>
    } else if (in_fabs >= 1.0f/3 && in_fabs < 2.0f/3) {
 80018f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80019a4 <distortionAppendSample+0x128>
 80018fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	db29      	blt.n	8001958 <distortionAppendSample+0xdc>
 8001904:	edd7 7a02 	vldr	s15, [r7, #8]
 8001908:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80019a8 <distortionAppendSample+0x12c>
 800190c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d520      	bpl.n	8001958 <distortionAppendSample+0xdc>
        out = (float)(3- (2-(3*in_fabs))*(2-(3*in_fabs)))/3;
 8001916:	edd7 7a02 	vldr	s15, [r7, #8]
 800191a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800191e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001922:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192a:	edd7 7a02 	vldr	s15, [r7, #8]
 800192e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001932:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001936:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800193a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001942:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800194e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001952:	edc7 7a05 	vstr	s15, [r7, #20]
 8001956:	e002      	b.n	800195e <distortionAppendSample+0xe2>
    } 
    else{
        out = 1;
 8001958:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800195c:	617b      	str	r3, [r7, #20]
    }
    if(negatief){
 800195e:	7cfb      	ldrb	r3, [r7, #19]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <distortionAppendSample+0xf4>
        out *= -1;
 8001964:	edd7 7a05 	vldr	s15, [r7, #20]
 8001968:	eef1 7a67 	vneg.f32	s15, s15
 800196c:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    out = out * distortion->threshold;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	edc7 7a05 	vstr	s15, [r7, #20]
    return (SampleType)out;
 8001988:	edd7 7a05 	vldr	s15, [r7, #20]
 800198c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001990:	ee17 3a90 	vmov	r3, s15
 8001994:	b21b      	sxth	r3, r3

}
 8001996:	4618      	mov	r0, r3
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	3eaaaaab 	.word	0x3eaaaaab
 80019a8:	3f2aaaab 	.word	0x3f2aaaab

080019ac <setDistortionLevel>:

void setDistortionLevel(Distortion* dist, float a){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	ed87 0a00 	vstr	s0, [r7]

	if(a > 1.0f) a = 1.0f;
 80019b8:	edd7 7a00 	vldr	s15, [r7]
 80019bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	dd02      	ble.n	80019d0 <setDistortionLevel+0x24>
 80019ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019ce:	603b      	str	r3, [r7, #0]
	if(a < 0.0f) a = 0.0f;
 80019d0:	edd7 7a00 	vldr	s15, [r7]
 80019d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	d502      	bpl.n	80019e4 <setDistortionLevel+0x38>
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	603b      	str	r3, [r7, #0]

	dist->threshold = 300 + a*(3000-300);
 80019e4:	edd7 7a00 	vldr	s15, [r7]
 80019e8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a14 <setDistortionLevel+0x68>
 80019ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001a18 <setDistortionLevel+0x6c>
 80019f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fc:	ee17 3a90 	vmov	r3, s15
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	801a      	strh	r2, [r3, #0]

}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	4528c000 	.word	0x4528c000
 8001a18:	43960000 	.word	0x43960000

08001a1c <createFilter>:
 *      Author: Joran
 */

#include "Filter.h"

Filter* createFilter(void* filterStruct, SampleType (*filterMethod)(void*, SampleType), void (*changeLevelMethod)(void*, float) ){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]

	Filter* filter = malloc(sizeof(Filter));
 8001a28:	200c      	movs	r0, #12
 8001a2a:	f004 fadd 	bl	8005fe8 <malloc>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	617b      	str	r3, [r7, #20]

	filter->filterStruct = filterStruct;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	601a      	str	r2, [r3, #0]
	filter->filterMethod = filterMethod;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	605a      	str	r2, [r3, #4]
	filter->changeLevelMethod = changeLevelMethod;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	609a      	str	r2, [r3, #8]

	return filter;
 8001a44:	697b      	ldr	r3, [r7, #20]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <changeFilterLevel>:


void changeFilterLevel(Filter* filter, float a){
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	ed87 0a00 	vstr	s0, [r7]
	filter->changeLevelMethod(filter->filterStruct, a);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	ed97 0a00 	vldr	s0, [r7]
 8001a66:	4610      	mov	r0, r2
 8001a68:	4798      	blx	r3
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <filterAppendSample>:

SampleType filterAppendSample(Filter* filter, SampleType newSample){
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	807b      	strh	r3, [r7, #2]
	return filter->filterMethod(filter->filterStruct, newSample);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4798      	blx	r3
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <initializeFilters>:
 *  Created on: May 13, 2024
 *      Author: Joran
 */
#include "Filters.h"

Filters* initializeFilters(uint32_t sampleRate){
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b097      	sub	sp, #92	; 0x5c
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	6078      	str	r0, [r7, #4]

	Filters* filters = malloc(sizeof(Filters));
 8001aa0:	2020      	movs	r0, #32
 8001aa2:	f004 faa1 	bl	8005fe8 <malloc>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	64fb      	str	r3, [r7, #76]	; 0x4c

	filters->outputLowPass = initializeLowPass(sampleRate, 5000);
 8001aaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f92e 	bl	8001d10 <initializeLowPass>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab8:	609a      	str	r2, [r3, #8]
	filters->inputLowPass = initializeLowPass(sampleRate, 5000);
 8001aba:	f241 3188 	movw	r1, #5000	; 0x1388
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f926 	bl	8001d10 <initializeLowPass>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac8:	605a      	str	r2, [r3, #4]

    filters->enabledFilters = 0b00000000;
 8001aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]

	Distortion* dist = initializeDistortion(1000);
 8001ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad4:	f7ff fec0 	bl	8001858 <initializeDistortion>
 8001ad8:	64b8      	str	r0, [r7, #72]	; 0x48
	Filter* distFilter = createFilter(dist, distortionAppendSample, setDistortionLevel);
 8001ada:	4a30      	ldr	r2, [pc, #192]	; (8001b9c <initializeFilters+0x104>)
 8001adc:	4930      	ldr	r1, [pc, #192]	; (8001ba0 <initializeFilters+0x108>)
 8001ade:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ae0:	f7ff ff9c 	bl	8001a1c <createFilter>
 8001ae4:	6478      	str	r0, [r7, #68]	; 0x44

    CombFeedback* echo = initializeCombFeedback(sampleRate, 0.5, 1.0, 0.5);
 8001ae6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001aea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001aee:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fd4c 	bl	8001590 <initializeCombFeedback>
 8001af8:	6438      	str	r0, [r7, #64]	; 0x40
    Filter* echoFilter = createFilter(echo, combFeedbackAppendSample, setCombFeedbackLevel);
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <initializeFilters+0x10c>)
 8001afc:	492a      	ldr	r1, [pc, #168]	; (8001ba8 <initializeFilters+0x110>)
 8001afe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001b00:	f7ff ff8c 	bl	8001a1c <createFilter>
 8001b04:	63f8      	str	r0, [r7, #60]	; 0x3c

    float delayCombS[4] = {0.0297, 0.0371, 0.0411, 0.0437};
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <initializeFilters+0x114>)
 8001b08:	f107 0414 	add.w	r4, r7, #20
 8001b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float delayAllS[2] = {0.005, 0.0017};
 8001b12:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <initializeFilters+0x118>)
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1c:	e883 0003 	stmia.w	r3, {r0, r1}
	Reverb* reverb = initializeReverb(sampleRate, 4, delayCombS, 2, delayAllS);
 8001b20:	f107 0214 	add.w	r2, r7, #20
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f96e 	bl	8001e10 <initializeReverb>
 8001b34:	63b8      	str	r0, [r7, #56]	; 0x38
	Filter* reverbFilter = createFilter(reverb, reverbAppendSample, setReverbLevel);
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <initializeFilters+0x11c>)
 8001b38:	491f      	ldr	r1, [pc, #124]	; (8001bb8 <initializeFilters+0x120>)
 8001b3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b3c:	f7ff ff6e 	bl	8001a1c <createFilter>
 8001b40:	6378      	str	r0, [r7, #52]	; 0x34

	Flanger* flanger = initializeFlanger(sampleRate, 5.0f, 0.02f);
 8001b42:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001bbc <initializeFilters+0x124>
 8001b46:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f882 	bl	8001c54 <initializeFlanger>
 8001b50:	6338      	str	r0, [r7, #48]	; 0x30
	Filter* flangerFilter = createFilter(flanger, flangerAppendSample, setFlangerLevel);
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <initializeFilters+0x128>)
 8001b54:	491b      	ldr	r1, [pc, #108]	; (8001bc4 <initializeFilters+0x12c>)
 8001b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b58:	f7ff ff60 	bl	8001a1c <createFilter>
 8001b5c:	62f8      	str	r0, [r7, #44]	; 0x2c

	Chorus* chorus = initializeChorus(sampleRate);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fc04 	bl	800136c <initializeChorus>
 8001b64:	62b8      	str	r0, [r7, #40]	; 0x28
	Filter* chorusFilter = createFilter(chorus, chorusAppendSample, setChorusLevel);
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <initializeFilters+0x130>)
 8001b68:	4918      	ldr	r1, [pc, #96]	; (8001bcc <initializeFilters+0x134>)
 8001b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b6c:	f7ff ff56 	bl	8001a1c <createFilter>
 8001b70:	6278      	str	r0, [r7, #36]	; 0x24


    filters->filterInstances[0] = distFilter;
 8001b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b76:	60da      	str	r2, [r3, #12]
    filters->filterInstances[1] = echoFilter;
 8001b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b7c:	611a      	str	r2, [r3, #16]
    filters->filterInstances[2] = reverbFilter;
 8001b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b82:	615a      	str	r2, [r3, #20]
    filters->filterInstances[3] = flangerFilter;
 8001b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b88:	619a      	str	r2, [r3, #24]
    filters->filterInstances[4] = chorusFilter;
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8e:	61da      	str	r2, [r3, #28]

    return filters;
 8001b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3754      	adds	r7, #84	; 0x54
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	080019ad 	.word	0x080019ad
 8001ba0:	0800187d 	.word	0x0800187d
 8001ba4:	08001689 	.word	0x08001689
 8001ba8:	08001603 	.word	0x08001603
 8001bac:	08008c60 	.word	0x08008c60
 8001bb0:	08008c70 	.word	0x08008c70
 8001bb4:	08001f8b 	.word	0x08001f8b
 8001bb8:	08001ef5 	.word	0x08001ef5
 8001bbc:	3ca3d70a 	.word	0x3ca3d70a
 8001bc0:	08001ce9 	.word	0x08001ce9
 8001bc4:	08001ca9 	.word	0x08001ca9
 8001bc8:	0800154f 	.word	0x0800154f
 8001bcc:	0800145d 	.word	0x0800145d

08001bd0 <appendSample>:


SampleType appendSample(Filters* filters, SampleType newSample){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]

	SampleType previousOutput = lowPassAppendSample(filters->inputLowPass, newSample);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f8da 	bl	8001da0 <lowPassAppendSample>
 8001bec:	4603      	mov	r3, r0
 8001bee:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i = 0; i < AMOUNT_OF_FILTERS; i++){
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	737b      	strb	r3, [r7, #13]
 8001bf4:	e01d      	b.n	8001c32 <appendSample+0x62>

		uint8_t filterEnabled = (filters->enabledFilters >> i) & 1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	fa42 f303 	asr.w	r3, r2, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	733b      	strb	r3, [r7, #12]
		if(filterEnabled){
 8001c0a:	7b3b      	ldrb	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00d      	beq.n	8001c2c <appendSample+0x5c>
			previousOutput = filterAppendSample(filters->filterInstances[i], previousOutput);
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	3302      	adds	r3, #2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff25 	bl	8001a72 <filterAppendSample>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < AMOUNT_OF_FILTERS; i++){
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	737b      	strb	r3, [r7, #13]
 8001c32:	7b7b      	ldrb	r3, [r7, #13]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d9de      	bls.n	8001bf6 <appendSample+0x26>
		}

	}

	return lowPassAppendSample(filters->outputLowPass, previousOutput);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f8ac 	bl	8001da0 <lowPassAppendSample>
 8001c48:	4603      	mov	r3, r0

}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <initializeFlanger>:

#include "Flanger.h"

Flanger* initializeFlanger(uint32_t sampleRate, float fer, float amp){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c60:	edc7 0a01 	vstr	s1, [r7, #4]

    Flanger *flanger= malloc(sizeof(flanger));
 8001c64:	2004      	movs	r0, #4
 8001c66:	f004 f9bf 	bl	8005fe8 <malloc>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	617b      	str	r3, [r7, #20]

    flanger->oscillator = initializeOscillator(sampleRate, fer, amp);
 8001c6e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c72:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 faae 	bl	80021d8 <initializeOscillator>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	60da      	str	r2, [r3, #12]
    flanger->combFilter = initializeCombFeedforward(sampleRate, amp, 1.0f, 0.95f);
 8001c82:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8001ca4 <initializeFlanger+0x50>
 8001c86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff fd36 	bl	8001700 <initializeCombFeedforward>
 8001c94:	4602      	mov	r2, r0
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	609a      	str	r2, [r3, #8]

    return flanger;
 8001c9a:	697b      	ldr	r3, [r7, #20]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	3f733333 	.word	0x3f733333

08001ca8 <flangerAppendSample>:

SampleType flangerAppendSample(Flanger* flanger, SampleType newSample){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
    
    uint32_t delay = oscillateAppendSample(flanger->oscillator);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 fac1 	bl	8002240 <oscillateAppendSample>
 8001cbe:	60f8      	str	r0, [r7, #12]

    flanger->combFilter->offset = delay;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

    SampleType result = combFeedforwardAppendSample(flanger->combFilter, newSample);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fd45 	bl	8001762 <combFeedforwardAppendSample>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	817b      	strh	r3, [r7, #10]

    return result;
 8001cdc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]

}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <setFlangerLevel>:

void setFlangerLevel(Flanger* flanger, float a){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	ed87 0a00 	vstr	s0, [r7]

	setCombFeedforwardLevel(flanger->combFilter, a);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	ed97 0a00 	vldr	s0, [r7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fd6f 	bl	80017e0 <setCombFeedforwardLevel>

}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	0000      	movs	r0, r0
 8001d0c:	0000      	movs	r0, r0
	...

08001d10 <initializeLowPass>:

#include "LowPass.h"

LowPass* initializeLowPass(uint32_t samplingFreq, uint32_t freq) {
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]

    LowPass *filter =malloc(sizeof(LowPass));
 8001d1a:	2008      	movs	r0, #8
 8001d1c:	f004 f964 	bl	8005fe8 <malloc>
 8001d20:	4603      	mov	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]

    filter->a = exp(-2*M_PI*(float)freq/samplingFreq);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	ee17 0a90 	vmov	r0, s15
 8001d32:	f7fe fc29 	bl	8000588 <__aeabi_f2d>
 8001d36:	a318      	add	r3, pc, #96	; (adr r3, 8001d98 <initializeLowPass+0x88>)
 8001d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3c:	f7fe fc7c 	bl	8000638 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4614      	mov	r4, r2
 8001d46:	461d      	mov	r5, r3
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fbfb 	bl	8000544 <__aeabi_ui2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f7fe fd99 	bl	800088c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	ec43 2b17 	vmov	d7, r2, r3
 8001d62:	eeb0 0a47 	vmov.f32	s0, s14
 8001d66:	eef0 0a67 	vmov.f32	s1, s15
 8001d6a:	f005 f925 	bl	8006fb8 <exp>
 8001d6e:	ec53 2b10 	vmov	r2, r3, d0
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe ff37 	bl	8000be8 <__aeabi_d2f>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]

    filter->prevInput = 0;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	80da      	strh	r2, [r3, #6]
    filter->prevOutput = 0;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	809a      	strh	r2, [r3, #4]

    return filter;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	54442d18 	.word	0x54442d18
 8001d9c:	c01921fb 	.word	0xc01921fb

08001da0 <lowPassAppendSample>:

SampleType lowPassAppendSample(LowPass *filter, SampleType input) {
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
    
	SampleType output = (1.0f-filter->a)*filter->prevInput + filter->a*filter->prevOutput;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001db6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edd3 6a00 	vldr	s13, [r3]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dec:	ee17 3a90 	vmov	r3, s15
 8001df0:	81fb      	strh	r3, [r7, #14]

    filter->prevInput = input;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	80da      	strh	r2, [r3, #6]
    filter->prevOutput = output;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	89fa      	ldrh	r2, [r7, #14]
 8001dfc:	809a      	strh	r2, [r3, #4]

    return output;
 8001dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <initializeReverb>:

#include "Reverb.h"

//Order delayS smallest to largest
Reverb* initializeReverb(uint32_t sampleRate, uint8_t amountOfCombFilters, float *delayCombS, uint8_t amountOfAllPassFilters, float *delayAllS){
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	72fb      	strb	r3, [r7, #11]
 8001e20:	4613      	mov	r3, r2
 8001e22:	72bb      	strb	r3, [r7, #10]

    Reverb *reverb = malloc(sizeof(Reverb));
 8001e24:	2010      	movs	r0, #16
 8001e26:	f004 f8df 	bl	8005fe8 <malloc>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	617b      	str	r3, [r7, #20]


    //Comb
    reverb->amountOfCombFilters = amountOfCombFilters;
 8001e2e:	7afa      	ldrb	r2, [r7, #11]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	601a      	str	r2, [r3, #0]

    reverb->combFilters = malloc(reverb->amountOfCombFilters*sizeof(CombFeedforward));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 f8d4 	bl	8005fe8 <malloc>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	605a      	str	r2, [r3, #4]

    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	e018      	b.n	8001e80 <initializeReverb+0x70>
        reverb->combFilters[i] = initializeCombFeedback(sampleRate, delayCombS[i], 1.0f, 0.8f);
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	18d4      	adds	r4, r2, r3
 8001e64:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001ef0 <initializeReverb+0xe0>
 8001e68:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fb8d 	bl	8001590 <initializeCombFeedback>
 8001e76:	4603      	mov	r3, r0
 8001e78:	6023      	str	r3, [r4, #0]
    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbe1      	blt.n	8001e4e <initializeReverb+0x3e>
    }
    
    
    //AllPass
    reverb->amountOfAllPassFilters = amountOfAllPassFilters;
 8001e8a:	7aba      	ldrb	r2, [r7, #10]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	609a      	str	r2, [r3, #8]
    reverb->allPassFilters = malloc(reverb->amountOfAllPassFilters*sizeof(AllPass));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 f8a6 	bl	8005fe8 <malloc>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	60da      	str	r2, [r3, #12]

    for(int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	e018      	b.n	8001edc <initializeReverb+0xcc>
        reverb->allPassFilters[i] = initializeAllPass(sampleRate, delayAllS[i], 1, 0.8f);
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb0:	4413      	add	r3, r2
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	18d4      	adds	r4, r2, r3
 8001ec0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8001ef0 <initializeReverb+0xe0>
 8001ec4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff f9e7 	bl	80012a0 <initializeAllPass>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6023      	str	r3, [r4, #0]
    for(int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	dbe1      	blt.n	8001eaa <initializeReverb+0x9a>
    }

    return reverb;
 8001ee6:	697b      	ldr	r3, [r7, #20]

}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3724      	adds	r7, #36	; 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}
 8001ef0:	3f4ccccd 	.word	0x3f4ccccd

08001ef4 <reverbAppendSample>:

SampleType reverbAppendSample(Reverb* reverb, SampleType newSample){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]

	SampleType combSumOutput = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	82fb      	strh	r3, [r7, #22]

    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e019      	b.n	8001f3e <reverbAppendSample+0x4a>
        combSumOutput += combFeedbackAppendSample(reverb->combFilters[i], newSample)/reverb->amountOfCombFilters;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fb70 	bl	8001602 <combFeedbackAppendSample>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	8afb      	ldrh	r3, [r7, #22]
 8001f32:	4413      	add	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	82fb      	strh	r3, [r7, #22]
    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbe0      	blt.n	8001f0a <reverbAppendSample+0x16>
    }


    SampleType  previousAllPassOutput = combSumOutput;
 8001f48:	8afb      	ldrh	r3, [r7, #22]
 8001f4a:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	e010      	b.n	8001f74 <reverbAppendSample+0x80>
        previousAllPassOutput = allPassAppendSample(reverb->allPassFilters[i], previousAllPassOutput);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f9c9 	bl	80012fc <allPassAppendSample>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	dbe9      	blt.n	8001f52 <reverbAppendSample+0x5e>
    }
    
    return previousAllPassOutput;
 8001f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <setReverbLevel>:

void setReverbLevel(Reverb* reverb, float a){
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	ed87 0a00 	vstr	s0, [r7]

	for(uint8_t i = 0; i < reverb->amountOfCombFilters; i++){
 8001f96:	2300      	movs	r3, #0
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	e00d      	b.n	8001fb8 <setReverbLevel+0x2e>
		setCombFeedbackLevel(reverb->combFilters[i], a);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	ed97 0a00 	vldr	s0, [r7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fb6b 	bl	8001688 <setCombFeedbackLevel>
	for(uint8_t i = 0; i < reverb->amountOfCombFilters; i++){
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbec      	blt.n	8001f9c <setReverbLevel+0x12>
	}

	for(uint8_t i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	73bb      	strb	r3, [r7, #14]
 8001fc6:	e00d      	b.n	8001fe4 <setReverbLevel+0x5a>
		setAllPassLevel(reverb->allPassFilters[i], a);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	ed97 0a00 	vldr	s0, [r7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f9af 	bl	800133c <setAllPassLevel>
	for(uint8_t i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001fde:	7bbb      	ldrb	r3, [r7, #14]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	73bb      	strb	r3, [r7, #14]
 8001fe4:	7bba      	ldrb	r2, [r7, #14]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	dbec      	blt.n	8001fc8 <setReverbLevel+0x3e>
	}

}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <initializeCircularBuffer>:

#include "CircularBuffer.h"

CircularBuffer* initializeCircularBuffer(uint32_t bufferSize){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

    CircularBuffer *buffer = malloc(sizeof(CircularBuffer));
 8002000:	200c      	movs	r0, #12
 8002002:	f003 fff1 	bl	8005fe8 <malloc>
 8002006:	4603      	mov	r3, r0
 8002008:	60fb      	str	r3, [r7, #12]

    buffer->bufferSize = bufferSize;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	609a      	str	r2, [r3, #8]
    buffer->buffer = calloc(bufferSize, sizeof(int16_t)); 	//zet alle waardens op 0 voor je buffer gebruikt
 8002010:	2102      	movs	r1, #2
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f003 ffca 	bl	8005fac <calloc>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]
    buffer->writeIndex = 0;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	605a      	str	r2, [r3, #4]

    return buffer;
 8002026:	68fb      	ldr	r3, [r7, #12]

}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <putValueInCircularBuffer>:

void putValueInCircularBuffer(CircularBuffer* buffer, int16_t value){
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]

    buffer->buffer[buffer->writeIndex] = value;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	801a      	strh	r2, [r3, #0]
    buffer->writeIndex = (buffer->writeIndex+1) % buffer->bufferSize;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	3301      	adds	r3, #1
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6892      	ldr	r2, [r2, #8]
 8002056:	fbb3 f1f2 	udiv	r1, r3, r2
 800205a:	fb01 f202 	mul.w	r2, r1, r2
 800205e:	1a9a      	subs	r2, r3, r2
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	605a      	str	r2, [r3, #4]

}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <getValueInCircularBuffer>:

SampleType getValueInCircularBuffer(CircularBuffer* buffer, uint32_t offset){
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]

    SampleType output = buffer->buffer[ (buffer->writeIndex + offset ) % buffer->bufferSize ]; //gaat op gevraagde index waarde halen als het groter is dan de buffer grote delen door het vorige
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	4413      	add	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6892      	ldr	r2, [r2, #8]
 800208a:	fbb3 f0f2 	udiv	r0, r3, r2
 800208e:	fb00 f202 	mul.w	r2, r0, r2
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	440b      	add	r3, r1
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	81fb      	strh	r3, [r7, #14]
    return output;
 800209c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	0000      	movs	r0, r0
	...

080020b0 <initSin>:

#define SIN_LUT_SIZE 128

static float sin_lut[SIN_LUT_SIZE];

void initSin(){
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0

    for(uint16_t i = 0; i < SIN_LUT_SIZE; i++){
 80020b6:	2300      	movs	r3, #0
 80020b8:	80fb      	strh	r3, [r7, #6]
 80020ba:	e02c      	b.n	8002116 <initSin+0x66>
        sin_lut[i] = sinf(M_TWOPI*(float)i/SIN_LUT_SIZE); //berekent de sinus voor verschillende waardens en slaagt het op in array
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	ee17 0a90 	vmov	r0, s15
 80020ca:	f7fe fa5d 	bl	8000588 <__aeabi_f2d>
 80020ce:	a318      	add	r3, pc, #96	; (adr r3, 8002130 <initSin+0x80>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fab0 	bl	8000638 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <initSin+0x78>)
 80020e6:	f7fe fbd1 	bl	800088c <__aeabi_ddiv>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fd79 	bl	8000be8 <__aeabi_d2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	88fc      	ldrh	r4, [r7, #6]
 80020fa:	ee00 3a10 	vmov	s0, r3
 80020fe:	f005 f813 	bl	8007128 <sinf>
 8002102:	eef0 7a40 	vmov.f32	s15, s0
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <initSin+0x7c>)
 8002108:	00a3      	lsls	r3, r4, #2
 800210a:	4413      	add	r3, r2
 800210c:	edc3 7a00 	vstr	s15, [r3]
    for(uint16_t i = 0; i < SIN_LUT_SIZE; i++){
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	3301      	adds	r3, #1
 8002114:	80fb      	strh	r3, [r7, #6]
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b7f      	cmp	r3, #127	; 0x7f
 800211a:	d9cf      	bls.n	80020bc <initSin+0xc>
    }

}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	40600000 	.word	0x40600000
 800212c:	200002f4 	.word	0x200002f4
 8002130:	54442d18 	.word	0x54442d18
 8002134:	401921fb 	.word	0x401921fb

08002138 <sinApproxLut>:

//x should be between 0 and 2 pi
float sinApproxLut(float x){
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	ed87 0a01 	vstr	s0, [r7, #4]

    //x -= truncf(x/(M_TWOPI))*M_TWOPI;

    float _x = x * 0.159154943092f; //[0..2*pi] to [0..1]
 8002142:	edd7 7a01 	vldr	s15, [r7, #4]
 8002146:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80021cc <sinApproxLut+0x94>
 800214a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214e:	edc7 7a05 	vstr	s15, [r7, #20]
    float findex = (_x * SIN_LUT_SIZE);
 8002152:	edd7 7a05 	vldr	s15, [r7, #20]
 8002156:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80021d0 <sinApproxLut+0x98>
 800215a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215e:	edc7 7a04 	vstr	s15, [r7, #16]
    uint16_t index = (uint16_t)(findex);
 8002162:	edd7 7a04 	vldr	s15, [r7, #16]
 8002166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216a:	ee17 3a90 	vmov	r3, s15
 800216e:	81fb      	strh	r3, [r7, #14]

    float fract = findex - index;
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217a:	ed97 7a04 	vldr	s14, [r7, #16]
 800217e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002182:	edc7 7a02 	vstr	s15, [r7, #8]

    return (1.0f-fract)*sin_lut[index]+fract*sin_lut[index+1];  //geeft een geinterpoleerde sinus waarde terug
 8002186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800218a:	edd7 7a02 	vldr	s15, [r7, #8]
 800218e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <sinApproxLut+0x9c>)
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a2:	89fb      	ldrh	r3, [r7, #14]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <sinApproxLut+0x9c>)
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	edd3 6a00 	vldr	s13, [r3]
 80021b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80021b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
    
    //return sin_lut[3];

}
 80021bc:	eeb0 0a67 	vmov.f32	s0, s15
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	3e22f983 	.word	0x3e22f983
 80021d0:	43000000 	.word	0x43000000
 80021d4:	200002f4 	.word	0x200002f4

080021d8 <initializeOscillator>:

#include "Oscillator.h"

Oscillator* initializeOscillator(uint32_t sampleRate, float frequency, float amplitude){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80021e4:	edc7 0a01 	vstr	s1, [r7, #4]

    Oscillator* oscillator = malloc(sizeof(Oscillator));
 80021e8:	200c      	movs	r0, #12
 80021ea:	f003 fefd 	bl	8005fe8 <malloc>
 80021ee:	4603      	mov	r3, r0
 80021f0:	617b      	str	r3, [r7, #20]

    oscillator->freq = sampleRate/frequency; // [(1/s)/(1/s)]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002208:	ee17 2a90 	vmov	r2, s15
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]
    oscillator->amp = amplitude*sampleRate;  // [s*1/s]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800221a:	edd7 7a01 	vldr	s15, [r7, #4]
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002226:	ee17 2a90 	vmov	r2, s15
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	605a      	str	r2, [r3, #4]

    oscillator->i =0;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]

    return oscillator;
 8002234:	697b      	ldr	r3, [r7, #20]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <oscillateAppendSample>:

uint32_t oscillateAppendSample(Oscillator* osc){
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	ed2d 8b02 	vpush	{d8}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

    float sinuscall = M_TWOPI*osc->i/osc->freq;	//gaat de value dat naar sins gaat bereken
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f977 	bl	8000544 <__aeabi_ui2d>
 8002256:	a326      	add	r3, pc, #152	; (adr r3, 80022f0 <oscillateAppendSample+0xb0>)
 8002258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225c:	f7fe f9ec 	bl	8000638 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4614      	mov	r4, r2
 8002266:	461d      	mov	r5, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f969 	bl	8000544 <__aeabi_ui2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe fb07 	bl	800088c <__aeabi_ddiv>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fcaf 	bl	8000be8 <__aeabi_d2f>
 800228a:	4603      	mov	r3, r0
 800228c:	60fb      	str	r3, [r7, #12]
    float output = osc->amp/2*(1.0f-(float)sinApproxLut(sinuscall)); //delen omdat het tussen de max waarden komt te zitte
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	085b      	lsrs	r3, r3, #1
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800229c:	ed97 0a03 	vldr	s0, [r7, #12]
 80022a0:	f7ff ff4a 	bl	8002138 <sinApproxLut>
 80022a4:	eef0 7a40 	vmov.f32	s15, s0
 80022a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80022b4:	edc7 7a02 	vstr	s15, [r7, #8]
    osc->i++;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	609a      	str	r2, [r3, #8]
    // zorgt er voor dat er geen overflow kan zijn
    if(osc->i >= osc->freq){
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <oscillateAppendSample+0x94>
    	osc->i = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
    }

    return output;
 80022d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022dc:	ee17 3a90 	vmov	r3, s15
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	ecbd 8b02 	vpop	{d8}
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	f3af 8000 	nop.w
 80022f0:	54442d18 	.word	0x54442d18
 80022f4:	401921fb 	.word	0x401921fb

080022f8 <InitIO>:
// 1, SelectingValue -> Disabled
// 2, Disabled -> SelectingFilter
// 3, SelectingFilter -> SelectingValue
uint8_t switchedStateFlag;

void InitIO(){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	LoadValueIntoShiftRegister(&shiftRegFilterSelect, 0x00);
 80022fc:	2100      	movs	r1, #0
 80022fe:	4804      	ldr	r0, [pc, #16]	; (8002310 <InitIO+0x18>)
 8002300:	f000 fa34 	bl	800276c <LoadValueIntoShiftRegister>
	ResetShiftRegister(&shiftRegLedbar);
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <InitIO+0x1c>)
 8002306:	f000 fa25 	bl	8002754 <ResetShiftRegister>
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000008 	.word	0x20000008
 8002314:	20000020 	.word	0x20000020

08002318 <HandleSelectingFilter>:

void HandleSelectingFilter(){
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0

	selectedFilter = (uint16_t)(rotaryEncoder.currentPos/4) % AMOUNT_OF_FILTERS; //door dat rotery de 4 fase overloopt en 4 keer opteld of afteld moet je delen door 4, voor varable extra dat weergeeft hoeveel filters er zijn
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HandleSelectingFilter+0x3c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HandleSelectingFilter+0x40>)
 8002326:	fba3 1302 	umull	r1, r3, r3, r2
 800232a:	0899      	lsrs	r1, r3, #2
 800232c:	460b      	mov	r3, r1
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HandleSelectingFilter+0x44>)
 8002338:	701a      	strb	r2, [r3, #0]
	LoadValueIntoShiftRegister(&shiftRegFilterSelect, 1 << selectedFilter);
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HandleSelectingFilter+0x44>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	2301      	movs	r3, #1
 8002342:	4093      	lsls	r3, r2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	; (8002360 <HandleSelectingFilter+0x48>)
 800234a:	f000 fa0f 	bl	800276c <LoadValueIntoShiftRegister>

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000038 	.word	0x20000038
 8002358:	cccccccd 	.word	0xcccccccd
 800235c:	200004f5 	.word	0x200004f5
 8002360:	20000008 	.word	0x20000008

08002364 <HandleSelectingValue>:

void HandleSelectingValue(){
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0

	uint8_t led_bar = (rotaryEncoder.currentPos/4); //door dat rotery de 4 fase overloopt en 4 keer opteld of afteld moet je delen door 4
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HandleSelectingValue+0x5c>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	71fb      	strb	r3, [r7, #7]
	uint8_t ledbar_array = (1 << led_bar) - 1;		//we werken binair dus hierdoor deze shift opperatie
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2201      	movs	r2, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	71bb      	strb	r3, [r7, #6]

	changeFilterLevel(getFilters()->filterInstances[selectedFilter], (float)led_bar/(8-1));
 8002380:	f7fe ff46 	bl	8001210 <getFilters>
 8002384:	4602      	mov	r2, r0
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HandleSelectingValue+0x60>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	3302      	adds	r3, #2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	ee07 2a90 	vmov	s15, r2
 8002398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239c:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80023a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023a4:	eeb0 0a47 	vmov.f32	s0, s14
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fb50 	bl	8001a4e <changeFilterLevel>

	LoadValueIntoShiftRegister(&shiftRegLedbar, ledbar_array);
 80023ae:	79bb      	ldrb	r3, [r7, #6]
 80023b0:	4619      	mov	r1, r3
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <HandleSelectingValue+0x64>)
 80023b4:	f000 f9da 	bl	800276c <LoadValueIntoShiftRegister>

}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000038 	.word	0x20000038
 80023c4:	200004f5 	.word	0x200004f5
 80023c8:	20000020 	.word	0x20000020

080023cc <ButtonInterrupt>:

//de functie die moet opgeroepen worden als er op de knop drukt
void ButtonInterrupt(){
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0

	IOState = (IOState + 1)%3;
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <ButtonInterrupt+0x40>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <ButtonInterrupt+0x44>)
 80023d8:	fb83 3102 	smull	r3, r1, r3, r2
 80023dc:	17d3      	asrs	r3, r2, #31
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	460b      	mov	r3, r1
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	440b      	add	r3, r1
 80023e6:	1ad1      	subs	r1, r2, r3
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <ButtonInterrupt+0x40>)
 80023ec:	701a      	strb	r2, [r3, #0]

	rotaryEncoder.currentPos = 0;
 80023ee:	4b09      	ldr	r3, [pc, #36]	; (8002414 <ButtonInterrupt+0x48>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]

	switchedStateFlag = IOState + 1;
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <ButtonInterrupt+0x40>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <ButtonInterrupt+0x4c>)
 80023fe:	701a      	strb	r2, [r3, #0]


}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200004f4 	.word	0x200004f4
 8002410:	55555556 	.word	0x55555556
 8002414:	20000038 	.word	0x20000038
 8002418:	200004f6 	.word	0x200004f6

0800241c <RotaryEncoderInterrupt>:
//op roepen als er aan de knop gedraaid word
void RotaryEncoderInterrupt(){
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	rot_intrupt(&rotaryEncoder);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <RotaryEncoderInterrupt+0x10>)
 8002422:	f000 f909 	bl	8002638 <rot_intrupt>
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000038 	.word	0x20000038

08002430 <IOUpdate>:

uint8_t newSelectedFilters = 0b00000000;
void IOUpdate(){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0


	uint8_t buttonPressed = HAL_GPIO_ReadPin(ToggleInput1_GPIO_Port, ToggleInput1_Pin);
 8002436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243a:	485d      	ldr	r0, [pc, #372]	; (80025b0 <IOUpdate+0x180>)
 800243c:	f001 fdc2 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
	if( !buttonPressed) newSelectedFilters |= (1 << 0);  else newSelectedFilters &= ~(1 << 0); // inverted because toggle is upside down
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <IOUpdate+0x2a>
 800244a:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <IOUpdate+0x184>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	b2da      	uxtb	r2, r3
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <IOUpdate+0x184>)
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e006      	b.n	8002468 <IOUpdate+0x38>
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <IOUpdate+0x184>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <IOUpdate+0x184>)
 8002466:	701a      	strb	r2, [r3, #0]
	buttonPressed = HAL_GPIO_ReadPin(ToggleInput2_GPIO_Port, ToggleInput2_Pin);
 8002468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800246c:	4850      	ldr	r0, [pc, #320]	; (80025b0 <IOUpdate+0x180>)
 800246e:	f001 fda9 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
	if( buttonPressed) newSelectedFilters |= (1 << 1);  else newSelectedFilters &= ~(1 << 1);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <IOUpdate+0x5c>
 800247c:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <IOUpdate+0x184>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <IOUpdate+0x184>)
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e006      	b.n	800249a <IOUpdate+0x6a>
 800248c:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <IOUpdate+0x184>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f023 0302 	bic.w	r3, r3, #2
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <IOUpdate+0x184>)
 8002498:	701a      	strb	r2, [r3, #0]
	buttonPressed = HAL_GPIO_ReadPin(ToggleInput3_GPIO_Port, ToggleInput3_Pin);
 800249a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800249e:	4844      	ldr	r0, [pc, #272]	; (80025b0 <IOUpdate+0x180>)
 80024a0:	f001 fd90 	bl	8003fc4 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
	if( buttonPressed) newSelectedFilters |= (1 << 2);  else newSelectedFilters &= ~(1 << 2);
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <IOUpdate+0x8e>
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <IOUpdate+0x184>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <IOUpdate+0x184>)
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	e006      	b.n	80024cc <IOUpdate+0x9c>
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <IOUpdate+0x184>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	f023 0304 	bic.w	r3, r3, #4
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <IOUpdate+0x184>)
 80024ca:	701a      	strb	r2, [r3, #0]
	buttonPressed = HAL_GPIO_ReadPin(ToggleInput4_GPIO_Port, ToggleInput4_Pin);
 80024cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024d0:	4837      	ldr	r0, [pc, #220]	; (80025b0 <IOUpdate+0x180>)
 80024d2:	f001 fd77 	bl	8003fc4 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
	if(!buttonPressed) newSelectedFilters |= (1 << 3);  else newSelectedFilters &= ~(1 << 3); // inverted because toggle is upside down
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <IOUpdate+0xc0>
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <IOUpdate+0x184>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f043 0308 	orr.w	r3, r3, #8
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <IOUpdate+0x184>)
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e006      	b.n	80024fe <IOUpdate+0xce>
 80024f0:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <IOUpdate+0x184>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	f023 0308 	bic.w	r3, r3, #8
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <IOUpdate+0x184>)
 80024fc:	701a      	strb	r2, [r3, #0]
	buttonPressed = HAL_GPIO_ReadPin(ToggleInput5_GPIO_Port, ToggleInput5_Pin);
 80024fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002502:	482d      	ldr	r0, [pc, #180]	; (80025b8 <IOUpdate+0x188>)
 8002504:	f001 fd5e 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
	if( buttonPressed) newSelectedFilters |= (1 << 4);  else newSelectedFilters &= ~(1 << 4);
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <IOUpdate+0xf2>
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <IOUpdate+0x184>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f043 0310 	orr.w	r3, r3, #16
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <IOUpdate+0x184>)
 800251e:	701a      	strb	r2, [r3, #0]
 8002520:	e006      	b.n	8002530 <IOUpdate+0x100>
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <IOUpdate+0x184>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	f023 0310 	bic.w	r3, r3, #16
 800252a:	b2da      	uxtb	r2, r3
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <IOUpdate+0x184>)
 800252e:	701a      	strb	r2, [r3, #0]
	SetFilterState(6, buttonPressed);
	uint8_t buttonPressed = HAL_GPIO_ReadPin(ToggleInput8_GPIO_Port, ToggleInput8_Pin);
	SetFilterState(7, buttonPressed);
	 */

	if(newSelectedFilters != GetEnabledFilters()){
 8002530:	f7fe fe62 	bl	80011f8 <GetEnabledFilters>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <IOUpdate+0x184>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <IOUpdate+0x114>
		UpdateLedsActiveFilters();
 8002540:	f000 f846 	bl	80025d0 <UpdateLedsActiveFilters>
	}

	//Handling Transistions
	if(switchedStateFlag > 0){
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <IOUpdate+0x18c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01b      	beq.n	8002584 <IOUpdate+0x154>

		switch(switchedStateFlag){
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <IOUpdate+0x18c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d010      	beq.n	8002576 <IOUpdate+0x146>
 8002554:	2b03      	cmp	r3, #3
 8002556:	dc12      	bgt.n	800257e <IOUpdate+0x14e>
 8002558:	2b01      	cmp	r3, #1
 800255a:	d001      	beq.n	8002560 <IOUpdate+0x130>
 800255c:	2b02      	cmp	r3, #2
				LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
				ResetShiftRegister(&shiftRegLedbar);
				break;
			case 2:
				// Nothing needs to be reset
				break;
 800255e:	e00e      	b.n	800257e <IOUpdate+0x14e>
				LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
 8002560:	f7fe fe4a 	bl	80011f8 <GetEnabledFilters>
 8002564:	4603      	mov	r3, r0
 8002566:	4619      	mov	r1, r3
 8002568:	4815      	ldr	r0, [pc, #84]	; (80025c0 <IOUpdate+0x190>)
 800256a:	f000 f8ff 	bl	800276c <LoadValueIntoShiftRegister>
				ResetShiftRegister(&shiftRegLedbar);
 800256e:	4815      	ldr	r0, [pc, #84]	; (80025c4 <IOUpdate+0x194>)
 8002570:	f000 f8f0 	bl	8002754 <ResetShiftRegister>
				break;
 8002574:	e003      	b.n	800257e <IOUpdate+0x14e>
			case 3:
				// Nothing needs to be reset
				rotaryEncoder.currentPos = 4; // At least one led on, at start
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <IOUpdate+0x198>)
 8002578:	2204      	movs	r2, #4
 800257a:	701a      	strb	r2, [r3, #0]
				break;
 800257c:	bf00      	nop
		}

		switchedStateFlag = 0;
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <IOUpdate+0x18c>)
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]

	}

	//Handling states
	switch (IOState) {
 8002584:	4b11      	ldr	r3, [pc, #68]	; (80025cc <IOUpdate+0x19c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d009      	beq.n	80025a0 <IOUpdate+0x170>
 800258c:	2b02      	cmp	r3, #2
 800258e:	dc0b      	bgt.n	80025a8 <IOUpdate+0x178>
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <IOUpdate+0x176>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d000      	beq.n	800259a <IOUpdate+0x16a>
	    case SelectingValue:			//hier ga je van de geselecteerde filter de waarde gaan aanpassen
	    	HandleSelectingValue();
	    	break;
	  }

}
 8002598:	e006      	b.n	80025a8 <IOUpdate+0x178>
	    	HandleSelectingFilter();
 800259a:	f7ff febd 	bl	8002318 <HandleSelectingFilter>
	    	break;
 800259e:	e003      	b.n	80025a8 <IOUpdate+0x178>
	    	HandleSelectingValue();
 80025a0:	f7ff fee0 	bl	8002364 <HandleSelectingValue>
	    	break;
 80025a4:	e000      	b.n	80025a8 <IOUpdate+0x178>
	    	break;
 80025a6:	bf00      	nop
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40020000 	.word	0x40020000
 80025b4:	200004f7 	.word	0x200004f7
 80025b8:	40020800 	.word	0x40020800
 80025bc:	200004f6 	.word	0x200004f6
 80025c0:	20000008 	.word	0x20000008
 80025c4:	20000020 	.word	0x20000020
 80025c8:	20000038 	.word	0x20000038
 80025cc:	200004f4 	.word	0x200004f4

080025d0 <UpdateLedsActiveFilters>:

void UpdateLedsActiveFilters(){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0

	SetFilterStates(newSelectedFilters);
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <UpdateLedsActiveFilters+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fdfb 	bl	80011d4 <SetFilterStates>
	LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
 80025de:	f7fe fe0b 	bl	80011f8 <GetEnabledFilters>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4619      	mov	r1, r3
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <UpdateLedsActiveFilters+0x24>)
 80025e8:	f000 f8c0 	bl	800276c <LoadValueIntoShiftRegister>

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200004f7 	.word	0x200004f7
 80025f4:	20000008 	.word	0x20000008

080025f8 <rot_get_state>:

uint8_t rot_old_state =0;
uint8_t rot_new_state=0;


uint8_t rot_get_state(RotaryEncoder_t* rotEncoder) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	return (uint8_t)( (HAL_GPIO_ReadPin(rotEncoder->portB, rotEncoder->pinB) << 1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8a1b      	ldrh	r3, [r3, #16]
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f001 fcda 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8002610:	4603      	mov	r3, r0
 8002612:	005b      	lsls	r3, r3, #1
                	| (HAL_GPIO_ReadPin(rotEncoder->portA, rotEncoder->pinA)) );
 8002614:	b25c      	sxtb	r4, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	891b      	ldrh	r3, [r3, #8]
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f001 fccf 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8002626:	4603      	mov	r3, r0
 8002628:	b25b      	sxtb	r3, r3
 800262a:	4323      	orrs	r3, r4
 800262c:	b25b      	sxtb	r3, r3
	return (uint8_t)( (HAL_GPIO_ReadPin(rotEncoder->portB, rotEncoder->pinB) << 1)
 800262e:	b2db      	uxtb	r3, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}

08002638 <rot_intrupt>:

//deze functie overloopt 4 fase van een rotery encoder, eerst stijgen de klokflank 1 van de 2 fase beide hoog
//3de fase de eerste die hoog was terug laag word en 4de fase allebei laag
void rot_intrupt(RotaryEncoder_t* rotEncoder){
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]

	  rot_new_state = rot_get_state(rotEncoder);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffd9 	bl	80025f8 <rot_get_state>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b40      	ldr	r3, [pc, #256]	; (800274c <rot_intrupt+0x114>)
 800264c:	701a      	strb	r2, [r3, #0]
	  		// Check transition
	  if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 800264e:	4b40      	ldr	r3, [pc, #256]	; (8002750 <rot_intrupt+0x118>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d10a      	bne.n	800266c <rot_intrupt+0x34>
 8002656:	4b3d      	ldr	r3, [pc, #244]	; (800274c <rot_intrupt+0x114>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d106      	bne.n	800266c <rot_intrupt+0x34>
		  rotEncoder->currentPos++;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	b2da      	uxtb	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e067      	b.n	800273c <rot_intrupt+0x104>
	  } else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <rot_intrupt+0x118>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d10a      	bne.n	800268a <rot_intrupt+0x52>
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <rot_intrupt+0x114>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d106      	bne.n	800268a <rot_intrupt+0x52>
		  rotEncoder->currentPos++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e058      	b.n	800273c <rot_intrupt+0x104>
	  } else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <rot_intrupt+0x118>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <rot_intrupt+0x70>
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <rot_intrupt+0x114>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d106      	bne.n	80026a8 <rot_intrupt+0x70>
		  rotEncoder->currentPos++;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e049      	b.n	800273c <rot_intrupt+0x104>
	  } else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <rot_intrupt+0x118>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10a      	bne.n	80026c6 <rot_intrupt+0x8e>
 80026b0:	4b26      	ldr	r3, [pc, #152]	; (800274c <rot_intrupt+0x114>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d106      	bne.n	80026c6 <rot_intrupt+0x8e>
		  rotEncoder->currentPos++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e03a      	b.n	800273c <rot_intrupt+0x104>
	  } else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <rot_intrupt+0x118>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d10a      	bne.n	80026e4 <rot_intrupt+0xac>
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <rot_intrupt+0x114>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <rot_intrupt+0xac>
		  rotEncoder->currentPos--;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	3b01      	subs	r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e02b      	b.n	800273c <rot_intrupt+0x104>
	  } else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <rot_intrupt+0x118>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10a      	bne.n	8002702 <rot_intrupt+0xca>
 80026ec:	4b17      	ldr	r3, [pc, #92]	; (800274c <rot_intrupt+0x114>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <rot_intrupt+0xca>
		  rotEncoder->currentPos--;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e01c      	b.n	800273c <rot_intrupt+0x104>
	  } else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <rot_intrupt+0x118>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <rot_intrupt+0xe8>
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <rot_intrupt+0x114>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d106      	bne.n	8002720 <rot_intrupt+0xe8>
		  rotEncoder->currentPos--;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	3b01      	subs	r3, #1
 8002718:	b2da      	uxtb	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e00d      	b.n	800273c <rot_intrupt+0x104>
	  } else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <rot_intrupt+0x118>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d109      	bne.n	800273c <rot_intrupt+0x104>
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <rot_intrupt+0x114>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d105      	bne.n	800273c <rot_intrupt+0x104>
		  rotEncoder->currentPos--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	b2da      	uxtb	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	701a      	strb	r2, [r3, #0]
	  }
	  rot_old_state = rot_new_state;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <rot_intrupt+0x114>)
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <rot_intrupt+0x118>)
 8002742:	701a      	strb	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200004f9 	.word	0x200004f9
 8002750:	200004f8 	.word	0x200004f8

08002754 <ResetShiftRegister>:
 */


#include "ShiftRegister.h"

void ResetShiftRegister(ShiftRegister_t *reg){
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	LoadValueIntoShiftRegister(reg, 0x00);		//steekt nullen in register dat alles uit staat
 800275c:	2100      	movs	r1, #0
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f804 	bl	800276c <LoadValueIntoShiftRegister>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <LoadValueIntoShiftRegister>:

void LoadValueIntoShiftRegister(ShiftRegister_t *reg, uint8_t num){
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 0; i < 8; i++) {	//gaat 8 keer shifte zodat de juiste waarde er instaat
 8002778:	2300      	movs	r3, #0
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	e02c      	b.n	80027d8 <LoadValueIntoShiftRegister+0x6c>
		GPIO_PinState bit_value = ((num >> i) & 1)  ? GPIO_PIN_SET : GPIO_PIN_RESET;  //gaat kijken of op die plaats 1 of 0 moet komen
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002784:	fa42 f303 	asr.w	r3, r2, r3
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(reg->dataPort, reg->dataPin, bit_value);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6898      	ldr	r0, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	899b      	ldrh	r3, [r3, #12]
 8002798:	7bba      	ldrb	r2, [r7, #14]
 800279a:	4619      	mov	r1, r3
 800279c:	f001 fc2a 	bl	8003ff4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 fdc5 	bl	8003330 <HAL_Delay>
		HAL_GPIO_WritePin(reg->clkPort, reg->clkPin, GPIO_PIN_SET); //gaat de klok het laten doorschuiven
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	889b      	ldrh	r3, [r3, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4619      	mov	r1, r3
 80027b2:	f001 fc1f 	bl	8003ff4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f000 fdba 	bl	8003330 <HAL_Delay>
		HAL_GPIO_WritePin(reg->clkPort, reg->clkPin, GPIO_PIN_RESET);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	889b      	ldrh	r3, [r3, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	f001 fc14 	bl	8003ff4 <HAL_GPIO_WritePin>
	for (int8_t i = 0; i < 8; i++) {	//gaat 8 keer shifte zodat de juiste waarde er instaat
 80027cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	73fb      	strb	r3, [r7, #15]
 80027d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027dc:	2b07      	cmp	r3, #7
 80027de:	ddce      	ble.n	800277e <LoadValueIntoShiftRegister+0x12>
	  }

	HAL_GPIO_WritePin(reg->enabledPort, reg->enabledPin, GPIO_PIN_SET);	//voor data te krijgen moet je de enabel op en af zetten zo krijg je de output buiten
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6918      	ldr	r0, [r3, #16]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8a9b      	ldrh	r3, [r3, #20]
 80027e8:	2201      	movs	r2, #1
 80027ea:	4619      	mov	r1, r3
 80027ec:	f001 fc02 	bl	8003ff4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80027f0:	2001      	movs	r0, #1
 80027f2:	f000 fd9d 	bl	8003330 <HAL_Delay>
	HAL_GPIO_WritePin(reg->enabledPort, reg->enabledPin, GPIO_PIN_RESET);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6918      	ldr	r0, [r3, #16]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8a9b      	ldrh	r3, [r3, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	4619      	mov	r1, r3
 8002802:	f001 fbf7 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002814:	f000 fd2f 	bl	8003276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002818:	f000 f826 	bl	8002868 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800281c:	f000 f892 	bl	8002944 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002820:	f000 f97a 	bl	8002b18 <MX_GPIO_Init>
  MX_DMA_Init();
 8002824:	f000 f946 	bl	8002ab4 <MX_DMA_Init>
  MX_I2C1_Init();
 8002828:	f000 f8ae 	bl	8002988 <MX_I2C1_Init>
  MX_I2S1_Init();
 800282c:	f000 f8ec 	bl	8002a08 <MX_I2S1_Init>
  MX_I2S2_Init();
 8002830:	f000 f916 	bl	8002a60 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  initSin();
 8002834:	f7ff fc3c 	bl	80020b0 <initSin>

  InitIO();
 8002838:	f7ff fd5e 	bl	80022f8 <InitIO>
  CodecInit(&hi2c1);
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <main+0x4c>)
 800283e:	f7fe fba1 	bl	8000f84 <CodecInit>

  InitDSP(44000, &hi2s1, &hi2s2); //44117 is in IOC file
 8002842:	4a07      	ldr	r2, [pc, #28]	; (8002860 <main+0x50>)
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <main+0x54>)
 8002846:	f64a 30e0 	movw	r0, #44000	; 0xabe0
 800284a:	f7fe fc63 	bl	8001114 <InitDSP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	IOUpdate();
 800284e:	f7ff fdef 	bl	8002430 <IOUpdate>
	DSPUpdate(&hi2s1);
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <main+0x54>)
 8002854:	f7fe fc7e 	bl	8001154 <DSPUpdate>
	IOUpdate();
 8002858:	e7f9      	b.n	800284e <main+0x3e>
 800285a:	bf00      	nop
 800285c:	200004fc 	.word	0x200004fc
 8002860:	20000590 	.word	0x20000590
 8002864:	20000550 	.word	0x20000550

08002868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b094      	sub	sp, #80	; 0x50
 800286c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800286e:	f107 0320 	add.w	r3, r7, #32
 8002872:	2230      	movs	r2, #48	; 0x30
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fdad 	bl	80063d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <SystemClock_Config+0xd4>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a2a      	ldr	r2, [pc, #168]	; (800293c <SystemClock_Config+0xd4>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <SystemClock_Config+0xd4>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <SystemClock_Config+0xd8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a25      	ldr	r2, [pc, #148]	; (8002940 <SystemClock_Config+0xd8>)
 80028aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <SystemClock_Config+0xd8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028bc:	2301      	movs	r3, #1
 80028be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c6:	2302      	movs	r3, #2
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80028d0:	2319      	movs	r3, #25
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80028d4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80028d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028da:	2302      	movs	r3, #2
 80028dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028de:	2302      	movs	r3, #2
 80028e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e2:	f107 0320 	add.w	r3, r7, #32
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 fbc0 	bl	800506c <HAL_RCC_OscConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80028f2:	f000 f9cf 	bl	8002c94 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028f6:	f002 fb69 	bl	8004fcc <HAL_PWREx_EnableOverDrive>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002900:	f000 f9c8 	bl	8002c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002904:	230f      	movs	r3, #15
 8002906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002908:	2302      	movs	r3, #2
 800290a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	2107      	movs	r1, #7
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fe46 	bl	80055b4 <HAL_RCC_ClockConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800292e:	f000 f9b1 	bl	8002c94 <Error_Handler>
  }
}
 8002932:	bf00      	nop
 8002934:	3750      	adds	r7, #80	; 0x50
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40007000 	.word	0x40007000

08002944 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b0a0      	sub	sp, #128	; 0x80
 8002948:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800294a:	463b      	mov	r3, r7
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	2100      	movs	r1, #0
 8002950:	4618      	mov	r0, r3
 8002952:	f003 fd40 	bl	80063d6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002956:	2301      	movs	r3, #1
 8002958:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800295a:	23c0      	movs	r3, #192	; 0xc0
 800295c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800295e:	2302      	movs	r3, #2
 8002960:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002962:	2302      	movs	r3, #2
 8002964:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800296a:	2300      	movs	r3, #0
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296e:	463b      	mov	r3, r7
 8002970:	4618      	mov	r0, r3
 8002972:	f002 ffd1 	bl	8005918 <HAL_RCCEx_PeriphCLKConfig>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <PeriphCommonClock_Config+0x3c>
  {
    Error_Handler();
 800297c:	f000 f98a 	bl	8002c94 <Error_Handler>
  }
}
 8002980:	bf00      	nop
 8002982:	3780      	adds	r7, #128	; 0x80
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <MX_I2C1_Init+0x74>)
 800298e:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <MX_I2C1_Init+0x78>)
 8002990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <MX_I2C1_Init+0x74>)
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <MX_I2C1_Init+0x7c>)
 8002996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <MX_I2C1_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <MX_I2C1_Init+0x74>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <MX_I2C1_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <MX_I2C1_Init+0x74>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <MX_I2C1_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <MX_I2C1_Init+0x74>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <MX_I2C1_Init+0x74>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029c2:	480e      	ldr	r0, [pc, #56]	; (80029fc <MX_I2C1_Init+0x74>)
 80029c4:	f001 fb48 	bl	8004058 <HAL_I2C_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029ce:	f000 f961 	bl	8002c94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029d2:	2100      	movs	r1, #0
 80029d4:	4809      	ldr	r0, [pc, #36]	; (80029fc <MX_I2C1_Init+0x74>)
 80029d6:	f001 ff29 	bl	800482c <HAL_I2CEx_ConfigAnalogFilter>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029e0:	f000 f958 	bl	8002c94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029e4:	2100      	movs	r1, #0
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <MX_I2C1_Init+0x74>)
 80029e8:	f001 ff6b 	bl	80048c2 <HAL_I2CEx_ConfigDigitalFilter>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029f2:	f000 f94f 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200004fc 	.word	0x200004fc
 8002a00:	40005400 	.word	0x40005400
 8002a04:	20404768 	.word	0x20404768

08002a08 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <MX_I2S1_Init+0x54>)
 8002a10:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a18:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a30:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002a34:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a3e:	2202      	movs	r2, #2
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_I2S1_Init+0x50>)
 8002a44:	f001 ff8a 	bl	800495c <HAL_I2S_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_I2S1_Init+0x4a>
  {
    Error_Handler();
 8002a4e:	f000 f921 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000550 	.word	0x20000550
 8002a5c:	40013000 	.word	0x40013000

08002a60 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <MX_I2S2_Init+0x50>)
 8002a68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a70:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a86:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002a8a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a94:	2202      	movs	r2, #2
 8002a96:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <MX_I2S2_Init+0x4c>)
 8002a9a:	f001 ff5f 	bl	800495c <HAL_I2S_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 8002aa4:	f000 f8f6 	bl	8002c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000590 	.word	0x20000590
 8002ab0:	40003800 	.word	0x40003800

08002ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <MX_DMA_Init+0x60>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a15      	ldr	r2, [pc, #84]	; (8002b14 <MX_DMA_Init+0x60>)
 8002ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <MX_DMA_Init+0x60>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <MX_DMA_Init+0x60>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <MX_DMA_Init+0x60>)
 8002ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <MX_DMA_Init+0x60>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	200e      	movs	r0, #14
 8002af0:	f000 fd1d 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002af4:	200e      	movs	r0, #14
 8002af6:	f000 fd36 	bl	8003566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2100      	movs	r1, #0
 8002afe:	203b      	movs	r0, #59	; 0x3b
 8002b00:	f000 fd15 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002b04:	203b      	movs	r0, #59	; 0x3b
 8002b06:	f000 fd2e 	bl	8003566 <HAL_NVIC_EnableIRQ>

}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2e:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a42      	ldr	r2, [pc, #264]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a3c      	ldr	r2, [pc, #240]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a36      	ldr	r2, [pc, #216]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b76:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a30      	ldr	r2, [pc, #192]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <MX_GPIO_Init+0x124>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ShiftRegFDat_Pin|ShiftRegFStoClk_Pin|ShiftRegFClk_Pin|ShiftRegLBarDat_Pin
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f24e 010d 	movw	r1, #57357	; 0xe00d
 8002b94:	482a      	ldr	r0, [pc, #168]	; (8002c40 <MX_GPIO_Init+0x128>)
 8002b96:	f001 fa2d 	bl	8003ff4 <HAL_GPIO_WritePin>
                          |ShiftRegLBarStoClk_Pin|ShiftRegLBarClk_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ShiftRegFDat_Pin ShiftRegFStoClk_Pin ShiftRegFClk_Pin ShiftRegLBarDat_Pin
                           ShiftRegLBarStoClk_Pin ShiftRegLBarClk_Pin */
  GPIO_InitStruct.Pin = ShiftRegFDat_Pin|ShiftRegFStoClk_Pin|ShiftRegFClk_Pin|ShiftRegLBarDat_Pin
 8002b9a:	f24e 030d 	movw	r3, #57357	; 0xe00d
 8002b9e:	617b      	str	r3, [r7, #20]
                          |ShiftRegLBarStoClk_Pin|ShiftRegLBarClk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4823      	ldr	r0, [pc, #140]	; (8002c40 <MX_GPIO_Init+0x128>)
 8002bb4:	f001 f86a 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RotEncoderInA_Pin RotEncoderButton_Pin */
  GPIO_InitStruct.Pin = RotEncoderInA_Pin|RotEncoderButton_Pin;
 8002bb8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4619      	mov	r1, r3
 8002bce:	481c      	ldr	r0, [pc, #112]	; (8002c40 <MX_GPIO_Init+0x128>)
 8002bd0:	f001 f85c 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RotEncoderInB_Pin */
  GPIO_InitStruct.Pin = RotEncoderInB_Pin;
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bd8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RotEncoderInB_GPIO_Port, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4815      	ldr	r0, [pc, #84]	; (8002c40 <MX_GPIO_Init+0x128>)
 8002bea:	f001 f84f 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ToggleInput4_Pin ToggleInput3_Pin ToggleInput2_Pin ToggleInput1_Pin
                           ToggleInput8_Pin */
  GPIO_InitStruct.Pin = ToggleInput4_Pin|ToggleInput3_Pin|ToggleInput2_Pin|ToggleInput1_Pin
 8002bee:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8002bf2:	617b      	str	r3, [r7, #20]
                          |ToggleInput8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4619      	mov	r1, r3
 8002c02:	4810      	ldr	r0, [pc, #64]	; (8002c44 <MX_GPIO_Init+0x12c>)
 8002c04:	f001 f842 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ToggleInput7_Pin ToggleInput6_Pin ToggleInput5_Pin */
  GPIO_InitStruct.Pin = ToggleInput7_Pin|ToggleInput6_Pin|ToggleInput5_Pin;
 8002c08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <MX_GPIO_Init+0x128>)
 8002c1e:	f001 f835 	bl	8003c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2017      	movs	r0, #23
 8002c28:	f000 fc81 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c2c:	2017      	movs	r0, #23
 8002c2e:	f000 fc9a 	bl	8003566 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c32:	bf00      	nop
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020800 	.word	0x40020800
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]

  /* Prevent unused argument(s) compilation warning */
  uint32_t currentMillis = HAL_GetTick();
 8002c52:	f000 fb61 	bl	8003318 <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]
  UNUSED(GPIO_Pin);


  if(GPIO_Pin == RotEncoderButton_Pin && (currentMillis - previousMillis > 100)){
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d107      	bne.n	8002c70 <HAL_GPIO_EXTI_Callback+0x28>
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_GPIO_EXTI_Callback+0x48>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b64      	cmp	r3, #100	; 0x64
 8002c6a:	d901      	bls.n	8002c70 <HAL_GPIO_EXTI_Callback+0x28>
	  ButtonInterrupt();
 8002c6c:	f7ff fbae 	bl	80023cc <ButtonInterrupt>
  }

  if(GPIO_Pin == RotEncoderInA_Pin || GPIO_Pin == RotEncoderInB_Pin){
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b40      	cmp	r3, #64	; 0x40
 8002c74:	d002      	beq.n	8002c7c <HAL_GPIO_EXTI_Callback+0x34>
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d101      	bne.n	8002c80 <HAL_GPIO_EXTI_Callback+0x38>
	  RotaryEncoderInterrupt();
 8002c7c:	f7ff fbce 	bl	800241c <RotaryEncoderInterrupt>
  }

  previousMillis = currentMillis;
 8002c80:	4a03      	ldr	r2, [pc, #12]	; (8002c90 <HAL_GPIO_EXTI_Callback+0x48>)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6013      	str	r3, [r2, #0]

}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000690 	.word	0x20000690

08002c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <Error_Handler+0x8>
	...

08002ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <HAL_MspInit+0x44>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <HAL_MspInit+0x44>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_MspInit+0x44>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_MspInit+0x44>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_MspInit+0x44>)
 8002cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_MspInit+0x44>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0aa      	sub	sp, #168	; 0xa8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fb64 	bl	80063d6 <memset>
  if(hi2c->Instance==I2C1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <HAL_I2C_MspInit+0xb0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d13b      	bne.n	8002d90 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d22:	f107 0314 	add.w	r3, r7, #20
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 fdf6 	bl	8005918 <HAL_RCCEx_PeriphCLKConfig>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d32:	f7ff ffaf 	bl	8002c94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_I2C_MspInit+0xb4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <HAL_I2C_MspInit+0xb4>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <HAL_I2C_MspInit+0xb4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d54:	2312      	movs	r3, #18
 8002d56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d66:	2304      	movs	r3, #4
 8002d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d70:	4619      	mov	r1, r3
 8002d72:	480b      	ldr	r0, [pc, #44]	; (8002da0 <HAL_I2C_MspInit+0xb8>)
 8002d74:	f000 ff8a 	bl	8003c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_I2C_MspInit+0xb4>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_I2C_MspInit+0xb4>)
 8002d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d82:	6413      	str	r3, [r2, #64]	; 0x40
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_I2C_MspInit+0xb4>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d90:	bf00      	nop
 8002d92:	37a8      	adds	r7, #168	; 0xa8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40005400 	.word	0x40005400
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020400 	.word	0x40020400

08002da4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08e      	sub	sp, #56	; 0x38
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7c      	ldr	r2, [pc, #496]	; (8002fb4 <HAL_I2S_MspInit+0x210>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d176      	bne.n	8002eb4 <HAL_I2S_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002dc6:	4b7c      	ldr	r3, [pc, #496]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	4a7b      	ldr	r2, [pc, #492]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd2:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dda:	623b      	str	r3, [r7, #32]
 8002ddc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a75      	ldr	r2, [pc, #468]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	4b70      	ldr	r3, [pc, #448]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a6f      	ldr	r2, [pc, #444]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002e0e:	23b0      	movs	r3, #176	; 0xb0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e1e:	2305      	movs	r3, #5
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e26:	4619      	mov	r1, r3
 8002e28:	4864      	ldr	r0, [pc, #400]	; (8002fbc <HAL_I2S_MspInit+0x218>)
 8002e2a:	f000 ff2f 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e2e:	2310      	movs	r3, #16
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e3e:	2305      	movs	r3, #5
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e46:	4619      	mov	r1, r3
 8002e48:	485d      	ldr	r0, [pc, #372]	; (8002fc0 <HAL_I2S_MspInit+0x21c>)
 8002e4a:	f000 ff1f 	bl	8003c8c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e50:	4a5d      	ldr	r2, [pc, #372]	; (8002fc8 <HAL_I2S_MspInit+0x224>)
 8002e52:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002e54:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e56:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e70:	4b54      	ldr	r3, [pc, #336]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e76:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e78:	4b52      	ldr	r3, [pc, #328]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002e80:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e86:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e88:	4b4e      	ldr	r3, [pc, #312]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e8a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e8e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e96:	484b      	ldr	r0, [pc, #300]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002e98:	f000 fb80 	bl	800359c <HAL_DMA_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2S_MspInit+0x102>
    {
      Error_Handler();
 8002ea2:	f7ff fef7 	bl	8002c94 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002eac:	4a45      	ldr	r2, [pc, #276]	; (8002fc4 <HAL_I2S_MspInit+0x220>)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002eb2:	e07a      	b.n	8002faa <HAL_I2S_MspInit+0x206>
  else if(hi2s->Instance==SPI2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a44      	ldr	r2, [pc, #272]	; (8002fcc <HAL_I2S_MspInit+0x228>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d175      	bne.n	8002faa <HAL_I2S_MspInit+0x206>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a3d      	ldr	r2, [pc, #244]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a37      	ldr	r2, [pc, #220]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	4a31      	ldr	r2, [pc, #196]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_I2S_MspInit+0x214>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f06:	2302      	movs	r3, #2
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f16:	2305      	movs	r3, #5
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4827      	ldr	r0, [pc, #156]	; (8002fc0 <HAL_I2S_MspInit+0x21c>)
 8002f22:	f000 feb3 	bl	8003c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f38:	2305      	movs	r3, #5
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f40:	4619      	mov	r1, r3
 8002f42:	4823      	ldr	r0, [pc, #140]	; (8002fd0 <HAL_I2S_MspInit+0x22c>)
 8002f44:	f000 fea2 	bl	8003c8c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002f48:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f4a:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_I2S_MspInit+0x234>)
 8002f4c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002f4e:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f54:	4b1f      	ldr	r3, [pc, #124]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f66:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f76:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002f78:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f86:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f88:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002f8e:	4811      	ldr	r0, [pc, #68]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002f90:	f000 fb04 	bl	800359c <HAL_DMA_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2S_MspInit+0x1fa>
      Error_Handler();
 8002f9a:	f7ff fe7b 	bl	8002c94 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002fa2:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa4:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <HAL_I2S_MspInit+0x230>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002faa:	bf00      	nop
 8002fac:	3738      	adds	r7, #56	; 0x38
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40013000 	.word	0x40013000
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020000 	.word	0x40020000
 8002fc0:	40020800 	.word	0x40020800
 8002fc4:	200005d0 	.word	0x200005d0
 8002fc8:	40026458 	.word	0x40026458
 8002fcc:	40003800 	.word	0x40003800
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	20000630 	.word	0x20000630
 8002fd8:	40026058 	.word	0x40026058

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <NMI_Handler+0x4>

08002fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe6:	e7fe      	b.n	8002fe6 <HardFault_Handler+0x4>

08002fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fec:	e7fe      	b.n	8002fec <MemManage_Handler+0x4>

08002fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff2:	e7fe      	b.n	8002ff2 <BusFault_Handler+0x4>

08002ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <UsageFault_Handler+0x4>

08002ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003028:	f000 f962 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}

08003030 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <DMA1_Stream3_IRQHandler+0x10>)
 8003036:	f000 fbbf 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000630 	.word	0x20000630

08003044 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RotEncoderInA_Pin);
 8003048:	2040      	movs	r0, #64	; 0x40
 800304a:	f000 ffed 	bl	8004028 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RotEncoderInB_Pin);
 800304e:	2080      	movs	r0, #128	; 0x80
 8003050:	f000 ffea 	bl	8004028 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RotEncoderButton_Pin);
 8003054:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003058:	f000 ffe6 	bl	8004028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}

08003060 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <DMA2_Stream3_IRQHandler+0x10>)
 8003066:	f000 fba7 	bl	80037b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200005d0 	.word	0x200005d0

08003074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return 1;
 8003078:	2301      	movs	r3, #1
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_kill>:

int _kill(int pid, int sig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800308e:	f003 fa01 	bl	8006494 <__errno>
 8003092:	4603      	mov	r3, r0
 8003094:	2216      	movs	r2, #22
 8003096:	601a      	str	r2, [r3, #0]
  return -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_exit>:

void _exit (int status)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ffe7 	bl	8003084 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030b6:	e7fe      	b.n	80030b6 <_exit+0x12>

080030b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e00a      	b.n	80030e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ca:	f3af 8000 	nop.w
 80030ce:	4601      	mov	r1, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	60ba      	str	r2, [r7, #8]
 80030d6:	b2ca      	uxtb	r2, r1
 80030d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbf0      	blt.n	80030ca <_read+0x12>
  }

  return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e009      	b.n	8003118 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	dbf1      	blt.n	8003104 <_write+0x12>
  }
  return len;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <_close>:

int _close(int file)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003152:	605a      	str	r2, [r3, #4]
  return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_isatty>:

int _isatty(int file)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800316a:	2301      	movs	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <_sbrk+0x5c>)
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <_sbrk+0x60>)
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <_sbrk+0x64>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <_sbrk+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d207      	bcs.n	80031d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c4:	f003 f966 	bl	8006494 <__errno>
 80031c8:	4603      	mov	r3, r0
 80031ca:	220c      	movs	r2, #12
 80031cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	e009      	b.n	80031e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <_sbrk+0x64>)
 80031e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20040000 	.word	0x20040000
 80031f4:	00000400 	.word	0x00000400
 80031f8:	20000694 	.word	0x20000694
 80031fc:	200007e8 	.word	0x200007e8

08003200 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SystemInit+0x20>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <SystemInit+0x20>)
 800320c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8003224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800325c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800322a:	490e      	ldr	r1, [pc, #56]	; (8003264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003230:	e002      	b.n	8003238 <LoopCopyDataInit>

08003232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003236:	3304      	adds	r3, #4

08003238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800323c:	d3f9      	bcc.n	8003232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003240:	4c0b      	ldr	r4, [pc, #44]	; (8003270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003244:	e001      	b.n	800324a <LoopFillZerobss>

08003246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003248:	3204      	adds	r2, #4

0800324a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800324c:	d3fb      	bcc.n	8003246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800324e:	f7ff ffd7 	bl	8003200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003252:	f003 f925 	bl	80064a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003256:	f7ff fadb 	bl	8002810 <main>
  bx  lr    
 800325a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800325c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003264:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8003268:	080091b0 	.word	0x080091b0
  ldr r2, =_sbss
 800326c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8003270:	200007e8 	.word	0x200007e8

08003274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <ADC_IRQHandler>

08003276 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800327a:	2003      	movs	r0, #3
 800327c:	f000 f94c 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003280:	200f      	movs	r0, #15
 8003282:	f000 f805 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003286:	f7ff fd0b 	bl	8002ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f967 	bl	8003582 <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f000 f92f 	bl	800352e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000054 	.word	0x20000054
 80032e8:	2000005c 	.word	0x2000005c
 80032ec:	20000058 	.word	0x20000058

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000005c 	.word	0x2000005c
 8003314:	20000698 	.word	0x20000698

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000698 	.word	0x20000698

08003330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff ffee 	bl	8003318 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d005      	beq.n	8003356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_Delay+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003356:	bf00      	nop
 8003358:	f7ff ffde 	bl	8003318 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d8f7      	bhi.n	8003358 <HAL_Delay+0x28>
  {
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000005c 	.word	0x2000005c

08003378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <__NVIC_SetPriorityGrouping+0x40>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <__NVIC_SetPriorityGrouping+0x44>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x40>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00
 80033bc:	05fa0000 	.word	0x05fa0000

080033c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c4:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <__NVIC_GetPriorityGrouping+0x18>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 0307 	and.w	r3, r3, #7
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0b      	blt.n	8003406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4907      	ldr	r1, [pc, #28]	; (8003414 <__NVIC_EnableIRQ+0x38>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
         );
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e4:	d301      	bcc.n	80034ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <SysTick_Config+0x40>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f2:	210f      	movs	r1, #15
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f7ff ff8e 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SysTick_Config+0x40>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <SysTick_Config+0x40>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	e000e010 	.word	0xe000e010

08003518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff29 	bl	8003378 <__NVIC_SetPriorityGrouping>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003540:	f7ff ff3e 	bl	80033c0 <__NVIC_GetPriorityGrouping>
 8003544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6978      	ldr	r0, [r7, #20]
 800354c:	f7ff ff8e 	bl	800346c <NVIC_EncodePriority>
 8003550:	4602      	mov	r2, r0
 8003552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff5d 	bl	8003418 <__NVIC_SetPriority>
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff31 	bl	80033dc <__NVIC_EnableIRQ>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ffa2 	bl	80034d4 <SysTick_Config>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff feb6 	bl	8003318 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e099      	b.n	80036ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d8:	e00f      	b.n	80035fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035da:	f7ff fe9d 	bl	8003318 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d908      	bls.n	80035fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2203      	movs	r2, #3
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e078      	b.n	80036ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e8      	bne.n	80035da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4b38      	ldr	r3, [pc, #224]	; (80036f4 <HAL_DMA_Init+0x158>)
 8003614:	4013      	ands	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003626:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	2b04      	cmp	r3, #4
 8003652:	d107      	bne.n	8003664 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	4313      	orrs	r3, r2
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0307 	bic.w	r3, r3, #7
 800367a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b04      	cmp	r3, #4
 800368c:	d117      	bne.n	80036be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fa77 	bl	8003b94 <DMA_CheckFifoParam>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2240      	movs	r2, #64	; 0x40
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036ba:	2301      	movs	r3, #1
 80036bc:	e016      	b.n	80036ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa2e 	bl	8003b28 <DMA_CalcBaseAndBitshift>
 80036cc:	4603      	mov	r3, r0
 80036ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	223f      	movs	r2, #63	; 0x3f
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	e010803f 	.word	0xe010803f

080036f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_DMA_Start_IT+0x26>
 800371a:	2302      	movs	r3, #2
 800371c:	e048      	b.n	80037b0 <HAL_DMA_Start_IT+0xb8>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d137      	bne.n	80037a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2202      	movs	r2, #2
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f9c0 	bl	8003acc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	223f      	movs	r2, #63	; 0x3f
 8003752:	409a      	lsls	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0216 	orr.w	r2, r2, #22
 8003766:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003776:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0208 	orr.w	r2, r2, #8
 800378e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e005      	b.n	80037ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
 80037ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037c4:	4b8e      	ldr	r3, [pc, #568]	; (8003a00 <HAL_DMA_IRQHandler+0x248>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a8e      	ldr	r2, [pc, #568]	; (8003a04 <HAL_DMA_IRQHandler+0x24c>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0a9b      	lsrs	r3, r3, #10
 80037d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	2208      	movs	r2, #8
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01a      	beq.n	8003824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	2208      	movs	r2, #8
 8003812:	409a      	lsls	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f043 0201 	orr.w	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	2201      	movs	r2, #1
 8003848:	409a      	lsls	r2, r3
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f043 0202 	orr.w	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	2204      	movs	r2, #4
 8003860:	409a      	lsls	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	2204      	movs	r2, #4
 800387e:	409a      	lsls	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	2210      	movs	r2, #16
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d043      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03c      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	2210      	movs	r2, #16
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d018      	beq.n	80038fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d024      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
 80038e6:	e01f      	b.n	8003928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	4798      	blx	r3
 80038f8:	e016      	b.n	8003928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d107      	bne.n	8003918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0208 	bic.w	r2, r2, #8
 8003916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392c:	2220      	movs	r2, #32
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 808f 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8087 	beq.w	8003a58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	2220      	movs	r2, #32
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b05      	cmp	r3, #5
 8003960:	d136      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0216 	bic.w	r2, r2, #22
 8003970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <HAL_DMA_IRQHandler+0x1da>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0208 	bic.w	r2, r2, #8
 80039a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	223f      	movs	r2, #63	; 0x3f
 80039a8:	409a      	lsls	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d07e      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
        }
        return;
 80039ce:	e079      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01d      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10d      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d031      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
 80039fc:	e02c      	b.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
 80039fe:	bf00      	nop
 8003a00:	20000054 	.word	0x20000054
 8003a04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d023      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e01e      	b.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10f      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0210 	bic.w	r2, r2, #16
 8003a36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d032      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d022      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	3301      	adds	r3, #1
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d307      	bcc.n	8003aa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f2      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x2cc>
 8003a9e:	e000      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003aa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ac4:	bf00      	nop
    }
  }
}
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ae8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d108      	bne.n	8003b0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b0a:	e007      	b.n	8003b1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	3b10      	subs	r3, #16
 8003b38:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <DMA_CalcBaseAndBitshift+0x60>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <DMA_CalcBaseAndBitshift+0x64>)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d908      	bls.n	8003b68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <DMA_CalcBaseAndBitshift+0x68>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	1d1a      	adds	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	; 0x58
 8003b66:	e006      	b.n	8003b76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <DMA_CalcBaseAndBitshift+0x68>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	aaaaaaab 	.word	0xaaaaaaab
 8003b8c:	08008c88 	.word	0x08008c88
 8003b90:	fffffc00 	.word	0xfffffc00

08003b94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d11f      	bne.n	8003bee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d856      	bhi.n	8003c62 <DMA_CheckFifoParam+0xce>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <DMA_CheckFifoParam+0x28>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bdf 	.word	0x08003bdf
 8003bc4:	08003bcd 	.word	0x08003bcd
 8003bc8:	08003c63 	.word	0x08003c63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d046      	beq.n	8003c66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bdc:	e043      	b.n	8003c66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003be6:	d140      	bne.n	8003c6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bec:	e03d      	b.n	8003c6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf6:	d121      	bne.n	8003c3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d837      	bhi.n	8003c6e <DMA_CheckFifoParam+0xda>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <DMA_CheckFifoParam+0x70>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c15 	.word	0x08003c15
 8003c08:	08003c1b 	.word	0x08003c1b
 8003c0c:	08003c15 	.word	0x08003c15
 8003c10:	08003c2d 	.word	0x08003c2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      break;
 8003c18:	e030      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d025      	beq.n	8003c72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2a:	e022      	b.n	8003c72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c34:	d11f      	bne.n	8003c76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c3a:	e01c      	b.n	8003c76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d903      	bls.n	8003c4a <DMA_CheckFifoParam+0xb6>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d003      	beq.n	8003c50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c48:	e018      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4e:	e015      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	e00b      	b.n	8003c7a <DMA_CheckFifoParam+0xe6>
      break;
 8003c62:	bf00      	nop
 8003c64:	e00a      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      break;
 8003c66:	bf00      	nop
 8003c68:	e008      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e006      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e004      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      break;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <DMA_CheckFifoParam+0xe8>
      break;
 8003c7a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop

08003c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e169      	b.n	8003f80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003cac:	2201      	movs	r2, #1
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	f040 8158 	bne.w	8003f7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d005      	beq.n	8003ce2 <HAL_GPIO_Init+0x56>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d130      	bne.n	8003d44 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 0201 	and.w	r2, r3, #1
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d017      	beq.n	8003d80 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d123      	bne.n	8003dd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	08da      	lsrs	r2, r3, #3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3208      	adds	r2, #8
 8003d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	220f      	movs	r2, #15
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	08da      	lsrs	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3208      	adds	r2, #8
 8003dce:	69b9      	ldr	r1, [r7, #24]
 8003dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0203 	and.w	r2, r3, #3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80b2 	beq.w	8003f7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e16:	4b60      	ldr	r3, [pc, #384]	; (8003f98 <HAL_GPIO_Init+0x30c>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	4a5f      	ldr	r2, [pc, #380]	; (8003f98 <HAL_GPIO_Init+0x30c>)
 8003e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e20:	6453      	str	r3, [r2, #68]	; 0x44
 8003e22:	4b5d      	ldr	r3, [pc, #372]	; (8003f98 <HAL_GPIO_Init+0x30c>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e2e:	4a5b      	ldr	r2, [pc, #364]	; (8003f9c <HAL_GPIO_Init+0x310>)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_GPIO_Init+0x314>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d02b      	beq.n	8003eb2 <HAL_GPIO_Init+0x226>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a51      	ldr	r2, [pc, #324]	; (8003fa4 <HAL_GPIO_Init+0x318>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d025      	beq.n	8003eae <HAL_GPIO_Init+0x222>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <HAL_GPIO_Init+0x31c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01f      	beq.n	8003eaa <HAL_GPIO_Init+0x21e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4f      	ldr	r2, [pc, #316]	; (8003fac <HAL_GPIO_Init+0x320>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d019      	beq.n	8003ea6 <HAL_GPIO_Init+0x21a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4e      	ldr	r2, [pc, #312]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <HAL_GPIO_Init+0x216>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4d      	ldr	r2, [pc, #308]	; (8003fb4 <HAL_GPIO_Init+0x328>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00d      	beq.n	8003e9e <HAL_GPIO_Init+0x212>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4c      	ldr	r2, [pc, #304]	; (8003fb8 <HAL_GPIO_Init+0x32c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d007      	beq.n	8003e9a <HAL_GPIO_Init+0x20e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <HAL_GPIO_Init+0x330>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_GPIO_Init+0x20a>
 8003e92:	2307      	movs	r3, #7
 8003e94:	e00e      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003e96:	2308      	movs	r3, #8
 8003e98:	e00c      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003e9a:	2306      	movs	r3, #6
 8003e9c:	e00a      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003e9e:	2305      	movs	r3, #5
 8003ea0:	e008      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	e006      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e004      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e002      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <HAL_GPIO_Init+0x228>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	f002 0203 	and.w	r2, r2, #3
 8003eba:	0092      	lsls	r2, r2, #2
 8003ebc:	4093      	lsls	r3, r2
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ec4:	4935      	ldr	r1, [pc, #212]	; (8003f9c <HAL_GPIO_Init+0x310>)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ef6:	4a32      	ldr	r2, [pc, #200]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003efc:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f74:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <HAL_GPIO_Init+0x334>)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	f67f ae92 	bls.w	8003cac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f88:	bf00      	nop
 8003f8a:	bf00      	nop
 8003f8c:	3724      	adds	r7, #36	; 0x24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40013800 	.word	0x40013800
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40020400 	.word	0x40020400
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	40020c00 	.word	0x40020c00
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40021400 	.word	0x40021400
 8003fb8:	40021800 	.word	0x40021800
 8003fbc:	40021c00 	.word	0x40021c00
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	e001      	b.n	8003fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004010:	e003      	b.n	800401a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	619a      	str	r2, [r3, #24]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fdfe 	bl	8002c48 <HAL_GPIO_EXTI_Callback>
  }
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40013c00 	.word	0x40013c00

08004058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07f      	b.n	800416a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe fe32 	bl	8002ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d107      	bne.n	80040d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ce:	609a      	str	r2, [r3, #8]
 80040d0:	e006      	b.n	80040e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d104      	bne.n	80040f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_I2C_Init+0x11c>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	02008000 	.word	0x02008000

08004178 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	4608      	mov	r0, r1
 8004182:	4611      	mov	r1, r2
 8004184:	461a      	mov	r2, r3
 8004186:	4603      	mov	r3, r0
 8004188:	817b      	strh	r3, [r7, #10]
 800418a:	460b      	mov	r3, r1
 800418c:	813b      	strh	r3, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b20      	cmp	r3, #32
 800419c:	f040 80f9 	bne.w	8004392 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_I2C_Mem_Write+0x34>
 80041a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0ed      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Mem_Write+0x4e>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0e6      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ce:	f7ff f8a3 	bl	8003318 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2319      	movs	r3, #25
 80041da:	2201      	movs	r2, #1
 80041dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f955 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0d1      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2221      	movs	r2, #33	; 0x21
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2240      	movs	r2, #64	; 0x40
 80041fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004218:	88f8      	ldrh	r0, [r7, #6]
 800421a:	893a      	ldrh	r2, [r7, #8]
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	4603      	mov	r3, r0
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8b9 	bl	80043a0 <I2C_RequestMemoryWrite>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0a9      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2bff      	cmp	r3, #255	; 0xff
 8004248:	d90e      	bls.n	8004268 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	22ff      	movs	r2, #255	; 0xff
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	b2da      	uxtb	r2, r3
 8004256:	8979      	ldrh	r1, [r7, #10]
 8004258:	2300      	movs	r3, #0
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fab1 	bl	80047c8 <I2C_TransferConfig>
 8004266:	e00f      	b.n	8004288 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	b2da      	uxtb	r2, r3
 8004278:	8979      	ldrh	r1, [r7, #10]
 800427a:	2300      	movs	r3, #0
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 faa0 	bl	80047c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f93f 	bl	8004510 <I2C_WaitOnTXISFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e07b      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d034      	beq.n	8004340 <HAL_I2C_Mem_Write+0x1c8>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d130      	bne.n	8004340 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	2200      	movs	r2, #0
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f8d1 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e04d      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2bff      	cmp	r3, #255	; 0xff
 8004300:	d90e      	bls.n	8004320 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	b2da      	uxtb	r2, r3
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fa55 	bl	80047c8 <I2C_TransferConfig>
 800431e:	e00f      	b.n	8004340 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432e:	b2da      	uxtb	r2, r3
 8004330:	8979      	ldrh	r1, [r7, #10]
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fa44 	bl	80047c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d19e      	bne.n	8004288 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f91e 	bl	8004590 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e01a      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2220      	movs	r2, #32
 8004364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_I2C_Mem_Write+0x224>)
 8004372:	400b      	ands	r3, r1
 8004374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	4608      	mov	r0, r1
 80043aa:	4611      	mov	r1, r2
 80043ac:	461a      	mov	r2, r3
 80043ae:	4603      	mov	r3, r0
 80043b0:	817b      	strh	r3, [r7, #10]
 80043b2:	460b      	mov	r3, r1
 80043b4:	813b      	strh	r3, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	4b20      	ldr	r3, [pc, #128]	; (8004444 <I2C_RequestMemoryWrite+0xa4>)
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f9fd 	bl	80047c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f89c 	bl	8004510 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e02c      	b.n	800443c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d105      	bne.n	80043f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043e8:	893b      	ldrh	r3, [r7, #8]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
 80043f2:	e015      	b.n	8004420 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f882 	bl	8004510 <I2C_WaitOnTXISFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e012      	b.n	800443c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004416:	893b      	ldrh	r3, [r7, #8]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2200      	movs	r2, #0
 8004428:	2180      	movs	r1, #128	; 0x80
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f830 	bl	8004490 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	80002000 	.word	0x80002000

08004448 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d103      	bne.n	8004466 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d007      	beq.n	8004484 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0201 	orr.w	r2, r2, #1
 8004482:	619a      	str	r2, [r3, #24]
  }
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a0:	e022      	b.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d01e      	beq.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044aa:	f7fe ff35 	bl	8003318 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d113      	bne.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e00f      	b.n	8004508 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	429a      	cmp	r2, r3
 8004504:	d0cd      	beq.n	80044a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800451c:	e02c      	b.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f870 	bl	8004608 <I2C_IsErrorOccurred>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e02a      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d01e      	beq.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fe feed 	bl	8003318 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d113      	bne.n	8004578 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e007      	b.n	8004588 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d1cb      	bne.n	800451e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459c:	e028      	b.n	80045f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f830 	bl	8004608 <I2C_IsErrorOccurred>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e026      	b.n	8004600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b2:	f7fe feb1 	bl	8003318 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d113      	bne.n	80045f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d1cf      	bne.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	2b00      	cmp	r3, #0
 8004632:	d068      	beq.n	8004706 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2210      	movs	r2, #16
 800463a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800463c:	e049      	b.n	80046d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d045      	beq.n	80046d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe fe67 	bl	8003318 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_IsErrorOccurred+0x54>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d13a      	bne.n	80046d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800466e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d121      	bne.n	80046c4 <I2C_IsErrorOccurred+0xbc>
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004686:	d01d      	beq.n	80046c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b20      	cmp	r3, #32
 800468c:	d01a      	beq.n	80046c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800469e:	f7fe fe3b 	bl	8003318 <HAL_GetTick>
 80046a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a4:	e00e      	b.n	80046c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046a6:	f7fe fe37 	bl	8003318 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b19      	cmp	r3, #25
 80046b2:	d907      	bls.n	80046c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80046c2:	e006      	b.n	80046d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d1e9      	bne.n	80046a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d003      	beq.n	80046e8 <I2C_IsErrorOccurred+0xe0>
 80046e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0aa      	beq.n	800463e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2220      	movs	r2, #32
 80046f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00b      	beq.n	8004730 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800474a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f043 0302 	orr.w	r3, r3, #2
 8004762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800476c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01c      	beq.n	80047b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fe63 	bl	8004448 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6859      	ldr	r1, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <I2C_IsErrorOccurred+0x1bc>)
 800478e:	400b      	ands	r3, r1
 8004790:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80047b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3728      	adds	r7, #40	; 0x28
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	fe00e800 	.word	0xfe00e800

080047c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	817b      	strh	r3, [r7, #10]
 80047d6:	4613      	mov	r3, r2
 80047d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047e0:	7a7b      	ldrb	r3, [r7, #9]
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	0d5b      	lsrs	r3, r3, #21
 8004802:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004806:	4b08      	ldr	r3, [pc, #32]	; (8004828 <I2C_TransferConfig+0x60>)
 8004808:	430b      	orrs	r3, r1
 800480a:	43db      	mvns	r3, r3
 800480c:	ea02 0103 	and.w	r1, r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	03ff63ff 	.word	0x03ff63ff

0800482c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d138      	bne.n	80048b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800484c:	2302      	movs	r3, #2
 800484e:	e032      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800487e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e000      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d139      	bne.n	800494c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e033      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2224      	movs	r2, #36	; 0x24
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0d2      	b.n	8004b14 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fe fa0e 	bl	8002da4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69d9      	ldr	r1, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b60      	ldr	r3, [pc, #384]	; (8004b1c <HAL_I2S_Init+0x1c0>)
 800499c:	400b      	ands	r3, r1
 800499e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2202      	movs	r2, #2
 80049a6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d067      	beq.n	8004a80 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d102      	bne.n	80049be <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049b8:	2310      	movs	r3, #16
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e001      	b.n	80049c2 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049be:	2320      	movs	r3, #32
 80049c0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d802      	bhi.n	80049d0 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 80049d8:	4b51      	ldr	r3, [pc, #324]	; (8004b20 <HAL_I2S_Init+0x1c4>)
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e003      	b.n	80049e6 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fa24 	bl	8004e2c <I2S_GetClockFreq>
 80049e4:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ee:	d125      	bne.n	8004a3c <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d010      	beq.n	8004a1a <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	3305      	adds	r3, #5
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e01f      	b.n	8004a5a <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	3305      	adds	r3, #5
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e00e      	b.n	8004a5a <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	3305      	adds	r3, #5
 8004a58:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	4a31      	ldr	r2, [pc, #196]	; (8004b24 <HAL_I2S_Init+0x1c8>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	e003      	b.n	8004a88 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a80:	2302      	movs	r3, #2
 8004a82:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d902      	bls.n	8004a94 <HAL_I2S_Init+0x138>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2bff      	cmp	r3, #255	; 0xff
 8004a92:	d907      	bls.n	8004aa4 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	f043 0210 	orr.w	r2, r3, #16
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e037      	b.n	8004b14 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	ea42 0103 	orr.w	r1, r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <HAL_I2S_Init+0x1c0>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6851      	ldr	r1, [r2, #4]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	4311      	orrs	r1, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68d2      	ldr	r2, [r2, #12]
 8004ad0:	4311      	orrs	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6992      	ldr	r2, [r2, #24]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b30      	cmp	r3, #48	; 0x30
 8004aea:	d003      	beq.n	8004af4 <HAL_I2S_Init+0x198>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2bb0      	cmp	r3, #176	; 0xb0
 8004af2:	d107      	bne.n	8004b04 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	fffff040 	.word	0xfffff040
 8004b20:	00bb8000 	.word	0x00bb8000
 8004b24:	cccccccd 	.word	0xcccccccd

08004b28 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_I2S_Transmit_DMA+0x1a>
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e08e      	b.n	8004c64 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_I2S_Transmit_DMA+0x2e>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e086      	b.n	8004c64 <HAL_I2S_Transmit_DMA+0x13c>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d005      	beq.n	8004b76 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8004b72:	2302      	movs	r3, #2
 8004b74:	e076      	b.n	8004c64 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d002      	beq.n	8004ba2 <HAL_I2S_Transmit_DMA+0x7a>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	84da      	strh	r2, [r3, #38]	; 0x26
 8004bb6:	e005      	b.n	8004bc4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	88fa      	ldrh	r2, [r7, #6]
 8004bc2:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	4a28      	ldr	r2, [pc, #160]	; (8004c6c <HAL_I2S_Transmit_DMA+0x144>)
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <HAL_I2S_Transmit_DMA+0x148>)
 8004bd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	4a26      	ldr	r2, [pc, #152]	; (8004c74 <HAL_I2S_Transmit_DMA+0x14c>)
 8004bda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004be4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004bec:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bf2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004bf4:	f7fe fd80 	bl	80036f8 <HAL_DMA_Start_IT>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00f      	beq.n	8004c1e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	f043 0208 	orr.w	r2, r3, #8
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e022      	b.n	8004c64 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c3a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d107      	bne.n	8004c5a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0202 	orr.w	r2, r2, #2
 8004c58:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	08004f07 	.word	0x08004f07
 8004c70:	08004ec5 	.word	0x08004ec5
 8004c74:	08004f81 	.word	0x08004f81

08004c78 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_I2S_Receive_DMA+0x1a>
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0a1      	b.n	8004dda <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2S_Receive_DMA+0x2e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e099      	b.n	8004dda <HAL_I2S_Receive_DMA+0x162>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d005      	beq.n	8004cc6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e089      	b.n	8004dda <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2204      	movs	r2, #4
 8004cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d002      	beq.n	8004cf2 <HAL_I2S_Receive_DMA+0x7a>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b05      	cmp	r3, #5
 8004cf0:	d10a      	bne.n	8004d08 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8004cfc:	88fb      	ldrh	r3, [r7, #6]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004d06:	e005      	b.n	8004d14 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	88fa      	ldrh	r2, [r7, #6]
 8004d12:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d18:	4a32      	ldr	r2, [pc, #200]	; (8004de4 <HAL_I2S_Receive_DMA+0x16c>)
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	4a31      	ldr	r2, [pc, #196]	; (8004de8 <HAL_I2S_Receive_DMA+0x170>)
 8004d22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	4a30      	ldr	r2, [pc, #192]	; (8004dec <HAL_I2S_Receive_DMA+0x174>)
 8004d2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3a:	d10a      	bne.n	8004d52 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004d6a:	f7fe fcc5 	bl	80036f8 <HAL_DMA_Start_IT>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00f      	beq.n	8004d94 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	f043 0208 	orr.w	r2, r3, #8
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e022      	b.n	8004dda <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d107      	bne.n	8004dd0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	08004f65 	.word	0x08004f65
 8004de8:	08004f23 	.word	0x08004f23
 8004dec:	08004f81 	.word	0x08004f81

08004df0 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b087      	sub	sp, #28
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d02d      	beq.n	8004e98 <I2S_GetClockFreq+0x6c>
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d12e      	bne.n	8004e9e <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e40:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <I2S_GetClockFreq+0x88>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d108      	bne.n	8004e5e <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e4c:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <I2S_GetClockFreq+0x88>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <I2S_GetClockFreq+0x8c>)
 8004e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e007      	b.n	8004e6e <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <I2S_GetClockFreq+0x88>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e66:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <I2S_GetClockFreq+0x90>)
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8004e6e:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <I2S_GetClockFreq+0x88>)
 8004e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e74:	0f1b      	lsrs	r3, r3, #28
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <I2S_GetClockFreq+0x88>)
 8004e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e82:	099b      	lsrs	r3, r3, #6
 8004e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	fb03 f202 	mul.w	r2, r3, r2
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	613b      	str	r3, [r7, #16]

      break;
 8004e96:	e005      	b.n	8004ea4 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8004e98:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <I2S_GetClockFreq+0x94>)
 8004e9a:	613b      	str	r3, [r7, #16]
      break;
 8004e9c:	e002      	b.n	8004ea4 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
      break;
 8004ea2:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8004ea4:	693b      	ldr	r3, [r7, #16]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	017d7840 	.word	0x017d7840
 8004ec0:	00bb8000 	.word	0x00bb8000

08004ec4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10e      	bne.n	8004ef8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0202 	bic.w	r2, r2, #2
 8004ee8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff ff83 	bl	8004e04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff ff6b 	bl	8004df0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10e      	bne.n	8004f56 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0201 	bic.w	r2, r2, #1
 8004f46:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7fc f984 	bl	8001264 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f5c:	bf00      	nop
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7fc f958 	bl	8001228 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0203 	bic.w	r2, r2, #3
 8004f9c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	f043 0208 	orr.w	r2, r3, #8
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff ff2a 	bl	8004e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004fc4:	bf00      	nop
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fd6:	4b23      	ldr	r3, [pc, #140]	; (8005064 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a22      	ldr	r2, [pc, #136]	; (8005064 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <HAL_PWREx_EnableOverDrive+0x98>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fee:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ffa:	f7fe f98d 	bl	8003318 <HAL_GetTick>
 8004ffe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005000:	e009      	b.n	8005016 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005002:	f7fe f989 	bl	8003318 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005010:	d901      	bls.n	8005016 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e022      	b.n	800505c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005022:	d1ee      	bne.n	8005002 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005024:	4b10      	ldr	r3, [pc, #64]	; (8005068 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a0f      	ldr	r2, [pc, #60]	; (8005068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800502a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005030:	f7fe f972 	bl	8003318 <HAL_GetTick>
 8005034:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005036:	e009      	b.n	800504c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005038:	f7fe f96e 	bl	8003318 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005046:	d901      	bls.n	800504c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e007      	b.n	800505c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <HAL_PWREx_EnableOverDrive+0x9c>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005058:	d1ee      	bne.n	8005038 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40023800 	.word	0x40023800
 8005068:	40007000 	.word	0x40007000

0800506c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005074:	2300      	movs	r3, #0
 8005076:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e291      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8087 	beq.w	800519e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005090:	4b96      	ldr	r3, [pc, #600]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b04      	cmp	r3, #4
 800509a:	d00c      	beq.n	80050b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509c:	4b93      	ldr	r3, [pc, #588]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d112      	bne.n	80050ce <HAL_RCC_OscConfig+0x62>
 80050a8:	4b90      	ldr	r3, [pc, #576]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050b4:	d10b      	bne.n	80050ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b6:	4b8d      	ldr	r3, [pc, #564]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06c      	beq.n	800519c <HAL_RCC_OscConfig+0x130>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d168      	bne.n	800519c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e26b      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x7a>
 80050d8:	4b84      	ldr	r3, [pc, #528]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a83      	ldr	r2, [pc, #524]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80050de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e02e      	b.n	8005144 <HAL_RCC_OscConfig+0xd8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x9c>
 80050ee:	4b7f      	ldr	r3, [pc, #508]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a7e      	ldr	r2, [pc, #504]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80050f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b7c      	ldr	r3, [pc, #496]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a7b      	ldr	r2, [pc, #492]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e01d      	b.n	8005144 <HAL_RCC_OscConfig+0xd8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0xc0>
 8005112:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a75      	ldr	r2, [pc, #468]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	4b73      	ldr	r3, [pc, #460]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a72      	ldr	r2, [pc, #456]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0xd8>
 800512c:	4b6f      	ldr	r3, [pc, #444]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a6e      	ldr	r2, [pc, #440]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b6c      	ldr	r3, [pc, #432]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6b      	ldr	r2, [pc, #428]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 800513e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fe f8e4 	bl	8003318 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005154:	f7fe f8e0 	bl	8003318 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e21f      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	4b61      	ldr	r3, [pc, #388]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0xe8>
 8005172:	e014      	b.n	800519e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fe f8d0 	bl	8003318 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fe f8cc 	bl	8003318 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e20b      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518e:	4b57      	ldr	r3, [pc, #348]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x110>
 800519a:	e000      	b.n	800519e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800519c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d069      	beq.n	800527e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051aa:	4b50      	ldr	r3, [pc, #320]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b6:	4b4d      	ldr	r3, [pc, #308]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d11c      	bne.n	80051fc <HAL_RCC_OscConfig+0x190>
 80051c2:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d116      	bne.n	80051fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ce:	4b47      	ldr	r3, [pc, #284]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_RCC_OscConfig+0x17a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d001      	beq.n	80051e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e1df      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e6:	4b41      	ldr	r3, [pc, #260]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	493d      	ldr	r1, [pc, #244]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051fa:	e040      	b.n	800527e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d023      	beq.n	800524c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005204:	4b39      	ldr	r3, [pc, #228]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a38      	ldr	r2, [pc, #224]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005210:	f7fe f882 	bl	8003318 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005218:	f7fe f87e 	bl	8003318 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e1bd      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b30      	ldr	r3, [pc, #192]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005236:	4b2d      	ldr	r3, [pc, #180]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4929      	ldr	r1, [pc, #164]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005246:	4313      	orrs	r3, r2
 8005248:	600b      	str	r3, [r1, #0]
 800524a:	e018      	b.n	800527e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005258:	f7fe f85e 	bl	8003318 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005260:	f7fe f85a 	bl	8003318 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e199      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d038      	beq.n	80052fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d019      	beq.n	80052c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005292:	4b16      	ldr	r3, [pc, #88]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005296:	4a15      	ldr	r2, [pc, #84]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fe f83b 	bl	8003318 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a6:	f7fe f837 	bl	8003318 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e176      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x23a>
 80052c4:	e01a      	b.n	80052fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	4a08      	ldr	r2, [pc, #32]	; (80052ec <HAL_RCC_OscConfig+0x280>)
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d2:	f7fe f821 	bl	8003318 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052da:	f7fe f81d 	bl	8003318 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d903      	bls.n	80052f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e15c      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
 80052ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f0:	4b91      	ldr	r3, [pc, #580]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80052f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1ee      	bne.n	80052da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80a4 	beq.w	8005452 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800530a:	4b8b      	ldr	r3, [pc, #556]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10d      	bne.n	8005332 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005316:	4b88      	ldr	r3, [pc, #544]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	4a87      	ldr	r2, [pc, #540]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800531c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005320:	6413      	str	r3, [r2, #64]	; 0x40
 8005322:	4b85      	ldr	r3, [pc, #532]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	60bb      	str	r3, [r7, #8]
 800532c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005332:	4b82      	ldr	r3, [pc, #520]	; (800553c <HAL_RCC_OscConfig+0x4d0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d118      	bne.n	8005370 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800533e:	4b7f      	ldr	r3, [pc, #508]	; (800553c <HAL_RCC_OscConfig+0x4d0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a7e      	ldr	r2, [pc, #504]	; (800553c <HAL_RCC_OscConfig+0x4d0>)
 8005344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534a:	f7fd ffe5 	bl	8003318 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005352:	f7fd ffe1 	bl	8003318 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b64      	cmp	r3, #100	; 0x64
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e120      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005364:	4b75      	ldr	r3, [pc, #468]	; (800553c <HAL_RCC_OscConfig+0x4d0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d106      	bne.n	8005386 <HAL_RCC_OscConfig+0x31a>
 8005378:	4b6f      	ldr	r3, [pc, #444]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	4a6e      	ldr	r2, [pc, #440]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	6713      	str	r3, [r2, #112]	; 0x70
 8005384:	e02d      	b.n	80053e2 <HAL_RCC_OscConfig+0x376>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10c      	bne.n	80053a8 <HAL_RCC_OscConfig+0x33c>
 800538e:	4b6a      	ldr	r3, [pc, #424]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	4a69      	ldr	r2, [pc, #420]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	6713      	str	r3, [r2, #112]	; 0x70
 800539a:	4b67      	ldr	r3, [pc, #412]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	4a66      	ldr	r2, [pc, #408]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	6713      	str	r3, [r2, #112]	; 0x70
 80053a6:	e01c      	b.n	80053e2 <HAL_RCC_OscConfig+0x376>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	d10c      	bne.n	80053ca <HAL_RCC_OscConfig+0x35e>
 80053b0:	4b61      	ldr	r3, [pc, #388]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b4:	4a60      	ldr	r2, [pc, #384]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053b6:	f043 0304 	orr.w	r3, r3, #4
 80053ba:	6713      	str	r3, [r2, #112]	; 0x70
 80053bc:	4b5e      	ldr	r3, [pc, #376]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	4a5d      	ldr	r2, [pc, #372]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	; 0x70
 80053c8:	e00b      	b.n	80053e2 <HAL_RCC_OscConfig+0x376>
 80053ca:	4b5b      	ldr	r3, [pc, #364]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	4a5a      	ldr	r2, [pc, #360]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053d0:	f023 0301 	bic.w	r3, r3, #1
 80053d4:	6713      	str	r3, [r2, #112]	; 0x70
 80053d6:	4b58      	ldr	r3, [pc, #352]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	4a57      	ldr	r2, [pc, #348]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80053dc:	f023 0304 	bic.w	r3, r3, #4
 80053e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d015      	beq.n	8005416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ea:	f7fd ff95 	bl	8003318 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f0:	e00a      	b.n	8005408 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f2:	f7fd ff91 	bl	8003318 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e0ce      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005408:	4b4b      	ldr	r3, [pc, #300]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0ee      	beq.n	80053f2 <HAL_RCC_OscConfig+0x386>
 8005414:	e014      	b.n	8005440 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005416:	f7fd ff7f 	bl	8003318 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800541c:	e00a      	b.n	8005434 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541e:	f7fd ff7b 	bl	8003318 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e0b8      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005434:	4b40      	ldr	r3, [pc, #256]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1ee      	bne.n	800541e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d105      	bne.n	8005452 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005446:	4b3c      	ldr	r3, [pc, #240]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	4a3b      	ldr	r2, [pc, #236]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800544c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005450:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80a4 	beq.w	80055a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	2b08      	cmp	r3, #8
 8005466:	d06b      	beq.n	8005540 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d149      	bne.n	8005504 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005470:	4b31      	ldr	r3, [pc, #196]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a30      	ldr	r2, [pc, #192]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800547a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547c:	f7fd ff4c 	bl	8003318 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fd ff48 	bl	8003318 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e087      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	4b28      	ldr	r3, [pc, #160]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f0      	bne.n	8005484 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69da      	ldr	r2, [r3, #28]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	3b01      	subs	r3, #1
 80054bc:	041b      	lsls	r3, r3, #16
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	4313      	orrs	r3, r2
 80054c8:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80054ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d0:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a18      	ldr	r2, [pc, #96]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80054d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fd ff1c 	bl	8003318 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fd ff18 	bl	8003318 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e057      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0f0      	beq.n	80054e4 <HAL_RCC_OscConfig+0x478>
 8005502:	e04f      	b.n	80055a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a0b      	ldr	r2, [pc, #44]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800550a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800550e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fd ff02 	bl	8003318 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005518:	f7fd fefe 	bl	8003318 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e03d      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552a:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_RCC_OscConfig+0x4cc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x4ac>
 8005536:	e035      	b.n	80055a4 <HAL_RCC_OscConfig+0x538>
 8005538:	40023800 	.word	0x40023800
 800553c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005540:	4b1b      	ldr	r3, [pc, #108]	; (80055b0 <HAL_RCC_OscConfig+0x544>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d028      	beq.n	80055a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d121      	bne.n	80055a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	429a      	cmp	r2, r3
 8005568:	d11a      	bne.n	80055a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005570:	4013      	ands	r3, r2
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005576:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005578:	4293      	cmp	r3, r2
 800557a:	d111      	bne.n	80055a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	3b01      	subs	r3, #1
 800558a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800558c:	429a      	cmp	r2, r3
 800558e:	d107      	bne.n	80055a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800

080055b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0d0      	b.n	800576e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055cc:	4b6a      	ldr	r3, [pc, #424]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d910      	bls.n	80055fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b67      	ldr	r3, [pc, #412]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f023 020f 	bic.w	r2, r3, #15
 80055e2:	4965      	ldr	r1, [pc, #404]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ea:	4b63      	ldr	r3, [pc, #396]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d001      	beq.n	80055fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0b8      	b.n	800576e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d020      	beq.n	800564a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005614:	4b59      	ldr	r3, [pc, #356]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a58      	ldr	r2, [pc, #352]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 800561a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800561e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800562c:	4b53      	ldr	r3, [pc, #332]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4a52      	ldr	r2, [pc, #328]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005638:	4b50      	ldr	r3, [pc, #320]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	494d      	ldr	r1, [pc, #308]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005646:	4313      	orrs	r3, r2
 8005648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d040      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565e:	4b47      	ldr	r3, [pc, #284]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d115      	bne.n	8005696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e07f      	b.n	800576e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005676:	4b41      	ldr	r3, [pc, #260]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e073      	b.n	800576e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005686:	4b3d      	ldr	r3, [pc, #244]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e06b      	b.n	800576e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f023 0203 	bic.w	r2, r3, #3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4936      	ldr	r1, [pc, #216]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a8:	f7fd fe36 	bl	8003318 <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b0:	f7fd fe32 	bl	8003318 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e053      	b.n	800576e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	4b2d      	ldr	r3, [pc, #180]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 020c 	and.w	r2, r3, #12
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d1eb      	bne.n	80056b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056d8:	4b27      	ldr	r3, [pc, #156]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d210      	bcs.n	8005708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056e6:	4b24      	ldr	r3, [pc, #144]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f023 020f 	bic.w	r2, r3, #15
 80056ee:	4922      	ldr	r1, [pc, #136]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f6:	4b20      	ldr	r3, [pc, #128]	; (8005778 <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d001      	beq.n	8005708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e032      	b.n	800576e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005714:	4b19      	ldr	r3, [pc, #100]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4916      	ldr	r1, [pc, #88]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005732:	4b12      	ldr	r3, [pc, #72]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	490e      	ldr	r1, [pc, #56]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 8005742:	4313      	orrs	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005746:	f000 f821 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800574a:	4602      	mov	r2, r0
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_ClockConfig+0x1c8>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	490a      	ldr	r1, [pc, #40]	; (8005780 <HAL_RCC_ClockConfig+0x1cc>)
 8005758:	5ccb      	ldrb	r3, [r1, r3]
 800575a:	fa22 f303 	lsr.w	r3, r2, r3
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <HAL_RCC_ClockConfig+0x1d0>)
 8005760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005762:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCC_ClockConfig+0x1d4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fd fd92 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40023c00 	.word	0x40023c00
 800577c:	40023800 	.word	0x40023800
 8005780:	08008c78 	.word	0x08008c78
 8005784:	20000054 	.word	0x20000054
 8005788:	20000058 	.word	0x20000058

0800578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005790:	b090      	sub	sp, #64	; 0x40
 8005792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	2300      	movs	r3, #0
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800579c:	2300      	movs	r3, #0
 800579e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d00d      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0x40>
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	f200 80a1 	bhi.w	80058f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x34>
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80057be:	e09b      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057c0:	4b53      	ldr	r3, [pc, #332]	; (8005910 <HAL_RCC_GetSysClockFreq+0x184>)
 80057c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057c4:	e09b      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057c6:	4b53      	ldr	r3, [pc, #332]	; (8005914 <HAL_RCC_GetSysClockFreq+0x188>)
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057ca:	e098      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057cc:	4b4f      	ldr	r3, [pc, #316]	; (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80057d6:	4b4d      	ldr	r3, [pc, #308]	; (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d028      	beq.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057e2:	4b4a      	ldr	r3, [pc, #296]	; (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	2200      	movs	r2, #0
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	627a      	str	r2, [r7, #36]	; 0x24
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80057f4:	2100      	movs	r1, #0
 80057f6:	4b47      	ldr	r3, [pc, #284]	; (8005914 <HAL_RCC_GetSysClockFreq+0x188>)
 80057f8:	fb03 f201 	mul.w	r2, r3, r1
 80057fc:	2300      	movs	r3, #0
 80057fe:	fb00 f303 	mul.w	r3, r0, r3
 8005802:	4413      	add	r3, r2
 8005804:	4a43      	ldr	r2, [pc, #268]	; (8005914 <HAL_RCC_GetSysClockFreq+0x188>)
 8005806:	fba0 1202 	umull	r1, r2, r0, r2
 800580a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800580c:	460a      	mov	r2, r1
 800580e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005812:	4413      	add	r3, r2
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	2200      	movs	r2, #0
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	61fa      	str	r2, [r7, #28]
 800581e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005822:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005826:	f7fb fa2f 	bl	8000c88 <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4613      	mov	r3, r2
 8005830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005832:	e053      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005834:	4b35      	ldr	r3, [pc, #212]	; (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	2200      	movs	r2, #0
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	617a      	str	r2, [r7, #20]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005846:	f04f 0b00 	mov.w	fp, #0
 800584a:	4652      	mov	r2, sl
 800584c:	465b      	mov	r3, fp
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	0159      	lsls	r1, r3, #5
 8005858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800585c:	0150      	lsls	r0, r2, #5
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	ebb2 080a 	subs.w	r8, r2, sl
 8005866:	eb63 090b 	sbc.w	r9, r3, fp
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005876:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800587a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800587e:	ebb2 0408 	subs.w	r4, r2, r8
 8005882:	eb63 0509 	sbc.w	r5, r3, r9
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	00eb      	lsls	r3, r5, #3
 8005890:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005894:	00e2      	lsls	r2, r4, #3
 8005896:	4614      	mov	r4, r2
 8005898:	461d      	mov	r5, r3
 800589a:	eb14 030a 	adds.w	r3, r4, sl
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	eb45 030b 	adc.w	r3, r5, fp
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058b2:	4629      	mov	r1, r5
 80058b4:	028b      	lsls	r3, r1, #10
 80058b6:	4621      	mov	r1, r4
 80058b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058bc:	4621      	mov	r1, r4
 80058be:	028a      	lsls	r2, r1, #10
 80058c0:	4610      	mov	r0, r2
 80058c2:	4619      	mov	r1, r3
 80058c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c6:	2200      	movs	r2, #0
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	60fa      	str	r2, [r7, #12]
 80058cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d0:	f7fb f9da 	bl	8000c88 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4613      	mov	r3, r2
 80058da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_GetSysClockFreq+0x180>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	3301      	adds	r3, #1
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80058ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058f6:	e002      	b.n	80058fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <HAL_RCC_GetSysClockFreq+0x184>)
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005900:	4618      	mov	r0, r3
 8005902:	3740      	adds	r7, #64	; 0x40
 8005904:	46bd      	mov	sp, r7
 8005906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	00f42400 	.word	0x00f42400
 8005914:	017d7840 	.word	0x017d7840

08005918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d012      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800593c:	4b65      	ldr	r3, [pc, #404]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4a64      	ldr	r2, [pc, #400]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005942:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005946:	6093      	str	r3, [r2, #8]
 8005948:	4b62      	ldr	r3, [pc, #392]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	4960      	ldr	r1, [pc, #384]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800595e:	2301      	movs	r3, #1
 8005960:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d017      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800596e:	4b59      	ldr	r3, [pc, #356]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597c:	4955      	ldr	r1, [pc, #340]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800598c:	d101      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800598e:	2301      	movs	r3, #1
 8005990:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800599a:	2301      	movs	r3, #1
 800599c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80059aa:	4b4a      	ldr	r3, [pc, #296]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	4946      	ldr	r1, [pc, #280]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c8:	d101      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80059ca:	2301      	movs	r3, #1
 80059cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80059d6:	2301      	movs	r3, #1
 80059d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 808b 	beq.w	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059e8:	4b3a      	ldr	r3, [pc, #232]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	4a39      	ldr	r2, [pc, #228]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6413      	str	r3, [r2, #64]	; 0x40
 80059f4:	4b37      	ldr	r3, [pc, #220]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a00:	4b35      	ldr	r3, [pc, #212]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a34      	ldr	r2, [pc, #208]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a0c:	f7fd fc84 	bl	8003318 <HAL_GetTick>
 8005a10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a14:	f7fd fc80 	bl	8003318 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e2bc      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005a26:	4b2c      	ldr	r3, [pc, #176]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a32:	4b28      	ldr	r3, [pc, #160]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d035      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d02e      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a50:	4b20      	ldr	r3, [pc, #128]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a5a:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a66:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a72:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a78:	4b16      	ldr	r3, [pc, #88]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d114      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fc48 	bl	8003318 <HAL_GetTick>
 8005a88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f7fd fc44 	bl	8003318 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e27e      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0ee      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aba:	d111      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005ac8:	4b04      	ldr	r3, [pc, #16]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005aca:	400b      	ands	r3, r1
 8005acc:	4901      	ldr	r1, [pc, #4]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
 8005ad2:	e00b      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40007000 	.word	0x40007000
 8005adc:	0ffffcff 	.word	0x0ffffcff
 8005ae0:	4ba4      	ldr	r3, [pc, #656]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	4aa3      	ldr	r2, [pc, #652]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ae6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005aea:	6093      	str	r3, [r2, #8]
 8005aec:	4ba1      	ldr	r3, [pc, #644]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af8:	499e      	ldr	r1, [pc, #632]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d010      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b0a:	4b9a      	ldr	r3, [pc, #616]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b10:	4a98      	ldr	r2, [pc, #608]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005b1a:	4b96      	ldr	r3, [pc, #600]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	4993      	ldr	r1, [pc, #588]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b38:	4b8e      	ldr	r3, [pc, #568]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	498b      	ldr	r1, [pc, #556]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b5a:	4b86      	ldr	r3, [pc, #536]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	4982      	ldr	r1, [pc, #520]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b7c:	4b7d      	ldr	r3, [pc, #500]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b8a:	497a      	ldr	r1, [pc, #488]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b9e:	4b75      	ldr	r3, [pc, #468]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f023 0203 	bic.w	r2, r3, #3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bac:	4971      	ldr	r1, [pc, #452]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bc0:	4b6c      	ldr	r3, [pc, #432]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	f023 020c 	bic.w	r2, r3, #12
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	4969      	ldr	r1, [pc, #420]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005be2:	4b64      	ldr	r3, [pc, #400]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	4960      	ldr	r1, [pc, #384]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c04:	4b5b      	ldr	r3, [pc, #364]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c12:	4958      	ldr	r1, [pc, #352]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c26:	4b53      	ldr	r3, [pc, #332]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c34:	494f      	ldr	r1, [pc, #316]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c48:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c56:	4947      	ldr	r1, [pc, #284]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c6a:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	493e      	ldr	r1, [pc, #248]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c8c:	4b39      	ldr	r3, [pc, #228]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9a:	4936      	ldr	r1, [pc, #216]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cbc:	492d      	ldr	r1, [pc, #180]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cde:	4b25      	ldr	r3, [pc, #148]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cec:	4921      	ldr	r1, [pc, #132]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d0e:	4919      	ldr	r1, [pc, #100]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d30:	4910      	ldr	r1, [pc, #64]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d006      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 809d 	beq.w	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d58:	f7fd fade 	bl	8003318 <HAL_GetTick>
 8005d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d60:	f7fd fada 	bl	8003318 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d904      	bls.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e116      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d78:	4b8b      	ldr	r3, [pc, #556]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ed      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d113      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d98:	4b83      	ldr	r3, [pc, #524]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d9e:	0e1b      	lsrs	r3, r3, #24
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	019a      	lsls	r2, r3, #6
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	061b      	lsls	r3, r3, #24
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	071b      	lsls	r3, r3, #28
 8005db8:	497b      	ldr	r1, [pc, #492]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd4:	d00a      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d024      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dea:	d11f      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dec:	4b6e      	ldr	r3, [pc, #440]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df2:	0f1b      	lsrs	r3, r3, #28
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	019a      	lsls	r2, r3, #6
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	431a      	orrs	r2, r3
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	071b      	lsls	r3, r3, #28
 8005e0c:	4966      	ldr	r1, [pc, #408]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e14:	4b64      	ldr	r3, [pc, #400]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e1a:	f023 021f 	bic.w	r2, r3, #31
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	4960      	ldr	r1, [pc, #384]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	019a      	lsls	r2, r3, #6
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	061b      	lsls	r3, r3, #24
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	071b      	lsls	r3, r3, #28
 8005e4c:	4956      	ldr	r1, [pc, #344]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e54:	4b54      	ldr	r3, [pc, #336]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a53      	ldr	r2, [pc, #332]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e60:	f7fd fa5a 	bl	8003318 <HAL_GetTick>
 8005e64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e68:	f7fd fa56 	bl	8003318 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b64      	cmp	r3, #100	; 0x64
 8005e74:	d901      	bls.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e092      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e7a:	4b4b      	ldr	r3, [pc, #300]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0f0      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	f040 8088 	bne.w	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e8e:	4b46      	ldr	r3, [pc, #280]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a45      	ldr	r2, [pc, #276]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e9a:	f7fd fa3d 	bl	8003318 <HAL_GetTick>
 8005e9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ea2:	f7fd fa39 	bl	8003318 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b64      	cmp	r3, #100	; 0x64
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e075      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eb4:	4b3c      	ldr	r3, [pc, #240]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec0:	d0ef      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d024      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d120      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eea:	4b2f      	ldr	r3, [pc, #188]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef0:	0c1b      	lsrs	r3, r3, #16
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	019a      	lsls	r2, r3, #6
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	061b      	lsls	r3, r3, #24
 8005f0a:	4927      	ldr	r1, [pc, #156]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f12:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4920      	ldr	r1, [pc, #128]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d018      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f40:	d113      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f48:	0e1b      	lsrs	r3, r3, #24
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	019a      	lsls	r2, r3, #6
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	041b      	lsls	r3, r3, #16
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	061b      	lsls	r3, r3, #24
 8005f62:	4911      	ldr	r1, [pc, #68]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f76:	f7fd f9cf 	bl	8003318 <HAL_GetTick>
 8005f7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f7e:	f7fd f9cb 	bl	8003318 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b64      	cmp	r3, #100	; 0x64
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e007      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9c:	d1ef      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3720      	adds	r7, #32
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40023800 	.word	0x40023800

08005fac <calloc>:
 8005fac:	4b02      	ldr	r3, [pc, #8]	; (8005fb8 <calloc+0xc>)
 8005fae:	460a      	mov	r2, r1
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	f000 b802 	b.w	8005fbc <_calloc_r>
 8005fb8:	200000b8 	.word	0x200000b8

08005fbc <_calloc_r>:
 8005fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fbe:	fba1 2402 	umull	r2, r4, r1, r2
 8005fc2:	b94c      	cbnz	r4, 8005fd8 <_calloc_r+0x1c>
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	9201      	str	r2, [sp, #4]
 8005fc8:	f000 f836 	bl	8006038 <_malloc_r>
 8005fcc:	9a01      	ldr	r2, [sp, #4]
 8005fce:	4605      	mov	r5, r0
 8005fd0:	b930      	cbnz	r0, 8005fe0 <_calloc_r+0x24>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	b003      	add	sp, #12
 8005fd6:	bd30      	pop	{r4, r5, pc}
 8005fd8:	220c      	movs	r2, #12
 8005fda:	6002      	str	r2, [r0, #0]
 8005fdc:	2500      	movs	r5, #0
 8005fde:	e7f8      	b.n	8005fd2 <_calloc_r+0x16>
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f000 f9f8 	bl	80063d6 <memset>
 8005fe6:	e7f4      	b.n	8005fd2 <_calloc_r+0x16>

08005fe8 <malloc>:
 8005fe8:	4b02      	ldr	r3, [pc, #8]	; (8005ff4 <malloc+0xc>)
 8005fea:	4601      	mov	r1, r0
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	f000 b823 	b.w	8006038 <_malloc_r>
 8005ff2:	bf00      	nop
 8005ff4:	200000b8 	.word	0x200000b8

08005ff8 <sbrk_aligned>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	4e0e      	ldr	r6, [pc, #56]	; (8006034 <sbrk_aligned+0x3c>)
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	6831      	ldr	r1, [r6, #0]
 8006000:	4605      	mov	r5, r0
 8006002:	b911      	cbnz	r1, 800600a <sbrk_aligned+0x12>
 8006004:	f000 fa24 	bl	8006450 <_sbrk_r>
 8006008:	6030      	str	r0, [r6, #0]
 800600a:	4621      	mov	r1, r4
 800600c:	4628      	mov	r0, r5
 800600e:	f000 fa1f 	bl	8006450 <_sbrk_r>
 8006012:	1c43      	adds	r3, r0, #1
 8006014:	d00a      	beq.n	800602c <sbrk_aligned+0x34>
 8006016:	1cc4      	adds	r4, r0, #3
 8006018:	f024 0403 	bic.w	r4, r4, #3
 800601c:	42a0      	cmp	r0, r4
 800601e:	d007      	beq.n	8006030 <sbrk_aligned+0x38>
 8006020:	1a21      	subs	r1, r4, r0
 8006022:	4628      	mov	r0, r5
 8006024:	f000 fa14 	bl	8006450 <_sbrk_r>
 8006028:	3001      	adds	r0, #1
 800602a:	d101      	bne.n	8006030 <sbrk_aligned+0x38>
 800602c:	f04f 34ff 	mov.w	r4, #4294967295
 8006030:	4620      	mov	r0, r4
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	200006a0 	.word	0x200006a0

08006038 <_malloc_r>:
 8006038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800603c:	1ccd      	adds	r5, r1, #3
 800603e:	f025 0503 	bic.w	r5, r5, #3
 8006042:	3508      	adds	r5, #8
 8006044:	2d0c      	cmp	r5, #12
 8006046:	bf38      	it	cc
 8006048:	250c      	movcc	r5, #12
 800604a:	2d00      	cmp	r5, #0
 800604c:	4607      	mov	r7, r0
 800604e:	db01      	blt.n	8006054 <_malloc_r+0x1c>
 8006050:	42a9      	cmp	r1, r5
 8006052:	d905      	bls.n	8006060 <_malloc_r+0x28>
 8006054:	230c      	movs	r3, #12
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	2600      	movs	r6, #0
 800605a:	4630      	mov	r0, r6
 800605c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006060:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006134 <_malloc_r+0xfc>
 8006064:	f000 f868 	bl	8006138 <__malloc_lock>
 8006068:	f8d8 3000 	ldr.w	r3, [r8]
 800606c:	461c      	mov	r4, r3
 800606e:	bb5c      	cbnz	r4, 80060c8 <_malloc_r+0x90>
 8006070:	4629      	mov	r1, r5
 8006072:	4638      	mov	r0, r7
 8006074:	f7ff ffc0 	bl	8005ff8 <sbrk_aligned>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	4604      	mov	r4, r0
 800607c:	d155      	bne.n	800612a <_malloc_r+0xf2>
 800607e:	f8d8 4000 	ldr.w	r4, [r8]
 8006082:	4626      	mov	r6, r4
 8006084:	2e00      	cmp	r6, #0
 8006086:	d145      	bne.n	8006114 <_malloc_r+0xdc>
 8006088:	2c00      	cmp	r4, #0
 800608a:	d048      	beq.n	800611e <_malloc_r+0xe6>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	4631      	mov	r1, r6
 8006090:	4638      	mov	r0, r7
 8006092:	eb04 0903 	add.w	r9, r4, r3
 8006096:	f000 f9db 	bl	8006450 <_sbrk_r>
 800609a:	4581      	cmp	r9, r0
 800609c:	d13f      	bne.n	800611e <_malloc_r+0xe6>
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	1a6d      	subs	r5, r5, r1
 80060a2:	4629      	mov	r1, r5
 80060a4:	4638      	mov	r0, r7
 80060a6:	f7ff ffa7 	bl	8005ff8 <sbrk_aligned>
 80060aa:	3001      	adds	r0, #1
 80060ac:	d037      	beq.n	800611e <_malloc_r+0xe6>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	442b      	add	r3, r5
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	f8d8 3000 	ldr.w	r3, [r8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d038      	beq.n	800612e <_malloc_r+0xf6>
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	42a2      	cmp	r2, r4
 80060c0:	d12b      	bne.n	800611a <_malloc_r+0xe2>
 80060c2:	2200      	movs	r2, #0
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	e00f      	b.n	80060e8 <_malloc_r+0xb0>
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	1b52      	subs	r2, r2, r5
 80060cc:	d41f      	bmi.n	800610e <_malloc_r+0xd6>
 80060ce:	2a0b      	cmp	r2, #11
 80060d0:	d917      	bls.n	8006102 <_malloc_r+0xca>
 80060d2:	1961      	adds	r1, r4, r5
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	6025      	str	r5, [r4, #0]
 80060d8:	bf18      	it	ne
 80060da:	6059      	strne	r1, [r3, #4]
 80060dc:	6863      	ldr	r3, [r4, #4]
 80060de:	bf08      	it	eq
 80060e0:	f8c8 1000 	streq.w	r1, [r8]
 80060e4:	5162      	str	r2, [r4, r5]
 80060e6:	604b      	str	r3, [r1, #4]
 80060e8:	4638      	mov	r0, r7
 80060ea:	f104 060b 	add.w	r6, r4, #11
 80060ee:	f000 f829 	bl	8006144 <__malloc_unlock>
 80060f2:	f026 0607 	bic.w	r6, r6, #7
 80060f6:	1d23      	adds	r3, r4, #4
 80060f8:	1af2      	subs	r2, r6, r3
 80060fa:	d0ae      	beq.n	800605a <_malloc_r+0x22>
 80060fc:	1b9b      	subs	r3, r3, r6
 80060fe:	50a3      	str	r3, [r4, r2]
 8006100:	e7ab      	b.n	800605a <_malloc_r+0x22>
 8006102:	42a3      	cmp	r3, r4
 8006104:	6862      	ldr	r2, [r4, #4]
 8006106:	d1dd      	bne.n	80060c4 <_malloc_r+0x8c>
 8006108:	f8c8 2000 	str.w	r2, [r8]
 800610c:	e7ec      	b.n	80060e8 <_malloc_r+0xb0>
 800610e:	4623      	mov	r3, r4
 8006110:	6864      	ldr	r4, [r4, #4]
 8006112:	e7ac      	b.n	800606e <_malloc_r+0x36>
 8006114:	4634      	mov	r4, r6
 8006116:	6876      	ldr	r6, [r6, #4]
 8006118:	e7b4      	b.n	8006084 <_malloc_r+0x4c>
 800611a:	4613      	mov	r3, r2
 800611c:	e7cc      	b.n	80060b8 <_malloc_r+0x80>
 800611e:	230c      	movs	r3, #12
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	4638      	mov	r0, r7
 8006124:	f000 f80e 	bl	8006144 <__malloc_unlock>
 8006128:	e797      	b.n	800605a <_malloc_r+0x22>
 800612a:	6025      	str	r5, [r4, #0]
 800612c:	e7dc      	b.n	80060e8 <_malloc_r+0xb0>
 800612e:	605b      	str	r3, [r3, #4]
 8006130:	deff      	udf	#255	; 0xff
 8006132:	bf00      	nop
 8006134:	2000069c 	.word	0x2000069c

08006138 <__malloc_lock>:
 8006138:	4801      	ldr	r0, [pc, #4]	; (8006140 <__malloc_lock+0x8>)
 800613a:	f000 b9d6 	b.w	80064ea <__retarget_lock_acquire_recursive>
 800613e:	bf00      	nop
 8006140:	200007e4 	.word	0x200007e4

08006144 <__malloc_unlock>:
 8006144:	4801      	ldr	r0, [pc, #4]	; (800614c <__malloc_unlock+0x8>)
 8006146:	f000 b9d1 	b.w	80064ec <__retarget_lock_release_recursive>
 800614a:	bf00      	nop
 800614c:	200007e4 	.word	0x200007e4

08006150 <rand>:
 8006150:	4b16      	ldr	r3, [pc, #88]	; (80061ac <rand+0x5c>)
 8006152:	b510      	push	{r4, lr}
 8006154:	681c      	ldr	r4, [r3, #0]
 8006156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006158:	b9b3      	cbnz	r3, 8006188 <rand+0x38>
 800615a:	2018      	movs	r0, #24
 800615c:	f7ff ff44 	bl	8005fe8 <malloc>
 8006160:	4602      	mov	r2, r0
 8006162:	6320      	str	r0, [r4, #48]	; 0x30
 8006164:	b920      	cbnz	r0, 8006170 <rand+0x20>
 8006166:	4b12      	ldr	r3, [pc, #72]	; (80061b0 <rand+0x60>)
 8006168:	4812      	ldr	r0, [pc, #72]	; (80061b4 <rand+0x64>)
 800616a:	2152      	movs	r1, #82	; 0x52
 800616c:	f000 f9c0 	bl	80064f0 <__assert_func>
 8006170:	4911      	ldr	r1, [pc, #68]	; (80061b8 <rand+0x68>)
 8006172:	4b12      	ldr	r3, [pc, #72]	; (80061bc <rand+0x6c>)
 8006174:	e9c0 1300 	strd	r1, r3, [r0]
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <rand+0x70>)
 800617a:	6083      	str	r3, [r0, #8]
 800617c:	230b      	movs	r3, #11
 800617e:	8183      	strh	r3, [r0, #12]
 8006180:	2100      	movs	r1, #0
 8006182:	2001      	movs	r0, #1
 8006184:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006188:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800618a:	480e      	ldr	r0, [pc, #56]	; (80061c4 <rand+0x74>)
 800618c:	690b      	ldr	r3, [r1, #16]
 800618e:	694c      	ldr	r4, [r1, #20]
 8006190:	4a0d      	ldr	r2, [pc, #52]	; (80061c8 <rand+0x78>)
 8006192:	4358      	muls	r0, r3
 8006194:	fb02 0004 	mla	r0, r2, r4, r0
 8006198:	fba3 3202 	umull	r3, r2, r3, r2
 800619c:	3301      	adds	r3, #1
 800619e:	eb40 0002 	adc.w	r0, r0, r2
 80061a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80061a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	200000b8 	.word	0x200000b8
 80061b0:	08008c90 	.word	0x08008c90
 80061b4:	08008ca7 	.word	0x08008ca7
 80061b8:	abcd330e 	.word	0xabcd330e
 80061bc:	e66d1234 	.word	0xe66d1234
 80061c0:	0005deec 	.word	0x0005deec
 80061c4:	5851f42d 	.word	0x5851f42d
 80061c8:	4c957f2d 	.word	0x4c957f2d

080061cc <std>:
 80061cc:	2300      	movs	r3, #0
 80061ce:	b510      	push	{r4, lr}
 80061d0:	4604      	mov	r4, r0
 80061d2:	e9c0 3300 	strd	r3, r3, [r0]
 80061d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061da:	6083      	str	r3, [r0, #8]
 80061dc:	8181      	strh	r1, [r0, #12]
 80061de:	6643      	str	r3, [r0, #100]	; 0x64
 80061e0:	81c2      	strh	r2, [r0, #14]
 80061e2:	6183      	str	r3, [r0, #24]
 80061e4:	4619      	mov	r1, r3
 80061e6:	2208      	movs	r2, #8
 80061e8:	305c      	adds	r0, #92	; 0x5c
 80061ea:	f000 f8f4 	bl	80063d6 <memset>
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <std+0x58>)
 80061f0:	6263      	str	r3, [r4, #36]	; 0x24
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <std+0x5c>)
 80061f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80061f6:	4b0d      	ldr	r3, [pc, #52]	; (800622c <std+0x60>)
 80061f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061fa:	4b0d      	ldr	r3, [pc, #52]	; (8006230 <std+0x64>)
 80061fc:	6323      	str	r3, [r4, #48]	; 0x30
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <std+0x68>)
 8006200:	6224      	str	r4, [r4, #32]
 8006202:	429c      	cmp	r4, r3
 8006204:	d006      	beq.n	8006214 <std+0x48>
 8006206:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800620a:	4294      	cmp	r4, r2
 800620c:	d002      	beq.n	8006214 <std+0x48>
 800620e:	33d0      	adds	r3, #208	; 0xd0
 8006210:	429c      	cmp	r4, r3
 8006212:	d105      	bne.n	8006220 <std+0x54>
 8006214:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800621c:	f000 b964 	b.w	80064e8 <__retarget_lock_init_recursive>
 8006220:	bd10      	pop	{r4, pc}
 8006222:	bf00      	nop
 8006224:	08006351 	.word	0x08006351
 8006228:	08006373 	.word	0x08006373
 800622c:	080063ab 	.word	0x080063ab
 8006230:	080063cf 	.word	0x080063cf
 8006234:	200006a4 	.word	0x200006a4

08006238 <stdio_exit_handler>:
 8006238:	4a02      	ldr	r2, [pc, #8]	; (8006244 <stdio_exit_handler+0xc>)
 800623a:	4903      	ldr	r1, [pc, #12]	; (8006248 <stdio_exit_handler+0x10>)
 800623c:	4803      	ldr	r0, [pc, #12]	; (800624c <stdio_exit_handler+0x14>)
 800623e:	f000 b869 	b.w	8006314 <_fwalk_sglue>
 8006242:	bf00      	nop
 8006244:	20000060 	.word	0x20000060
 8006248:	080066d1 	.word	0x080066d1
 800624c:	2000006c 	.word	0x2000006c

08006250 <cleanup_stdio>:
 8006250:	6841      	ldr	r1, [r0, #4]
 8006252:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <cleanup_stdio+0x34>)
 8006254:	4299      	cmp	r1, r3
 8006256:	b510      	push	{r4, lr}
 8006258:	4604      	mov	r4, r0
 800625a:	d001      	beq.n	8006260 <cleanup_stdio+0x10>
 800625c:	f000 fa38 	bl	80066d0 <_fflush_r>
 8006260:	68a1      	ldr	r1, [r4, #8]
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <cleanup_stdio+0x38>)
 8006264:	4299      	cmp	r1, r3
 8006266:	d002      	beq.n	800626e <cleanup_stdio+0x1e>
 8006268:	4620      	mov	r0, r4
 800626a:	f000 fa31 	bl	80066d0 <_fflush_r>
 800626e:	68e1      	ldr	r1, [r4, #12]
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <cleanup_stdio+0x3c>)
 8006272:	4299      	cmp	r1, r3
 8006274:	d004      	beq.n	8006280 <cleanup_stdio+0x30>
 8006276:	4620      	mov	r0, r4
 8006278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800627c:	f000 ba28 	b.w	80066d0 <_fflush_r>
 8006280:	bd10      	pop	{r4, pc}
 8006282:	bf00      	nop
 8006284:	200006a4 	.word	0x200006a4
 8006288:	2000070c 	.word	0x2000070c
 800628c:	20000774 	.word	0x20000774

08006290 <global_stdio_init.part.0>:
 8006290:	b510      	push	{r4, lr}
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <global_stdio_init.part.0+0x30>)
 8006294:	4c0b      	ldr	r4, [pc, #44]	; (80062c4 <global_stdio_init.part.0+0x34>)
 8006296:	4a0c      	ldr	r2, [pc, #48]	; (80062c8 <global_stdio_init.part.0+0x38>)
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	4620      	mov	r0, r4
 800629c:	2200      	movs	r2, #0
 800629e:	2104      	movs	r1, #4
 80062a0:	f7ff ff94 	bl	80061cc <std>
 80062a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80062a8:	2201      	movs	r2, #1
 80062aa:	2109      	movs	r1, #9
 80062ac:	f7ff ff8e 	bl	80061cc <std>
 80062b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80062b4:	2202      	movs	r2, #2
 80062b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ba:	2112      	movs	r1, #18
 80062bc:	f7ff bf86 	b.w	80061cc <std>
 80062c0:	200007dc 	.word	0x200007dc
 80062c4:	200006a4 	.word	0x200006a4
 80062c8:	08006239 	.word	0x08006239

080062cc <__sfp_lock_acquire>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__sfp_lock_acquire+0x8>)
 80062ce:	f000 b90c 	b.w	80064ea <__retarget_lock_acquire_recursive>
 80062d2:	bf00      	nop
 80062d4:	200007e5 	.word	0x200007e5

080062d8 <__sfp_lock_release>:
 80062d8:	4801      	ldr	r0, [pc, #4]	; (80062e0 <__sfp_lock_release+0x8>)
 80062da:	f000 b907 	b.w	80064ec <__retarget_lock_release_recursive>
 80062de:	bf00      	nop
 80062e0:	200007e5 	.word	0x200007e5

080062e4 <__sinit>:
 80062e4:	b510      	push	{r4, lr}
 80062e6:	4604      	mov	r4, r0
 80062e8:	f7ff fff0 	bl	80062cc <__sfp_lock_acquire>
 80062ec:	6a23      	ldr	r3, [r4, #32]
 80062ee:	b11b      	cbz	r3, 80062f8 <__sinit+0x14>
 80062f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f4:	f7ff bff0 	b.w	80062d8 <__sfp_lock_release>
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <__sinit+0x28>)
 80062fa:	6223      	str	r3, [r4, #32]
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <__sinit+0x2c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f5      	bne.n	80062f0 <__sinit+0xc>
 8006304:	f7ff ffc4 	bl	8006290 <global_stdio_init.part.0>
 8006308:	e7f2      	b.n	80062f0 <__sinit+0xc>
 800630a:	bf00      	nop
 800630c:	08006251 	.word	0x08006251
 8006310:	200007dc 	.word	0x200007dc

08006314 <_fwalk_sglue>:
 8006314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006318:	4607      	mov	r7, r0
 800631a:	4688      	mov	r8, r1
 800631c:	4614      	mov	r4, r2
 800631e:	2600      	movs	r6, #0
 8006320:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006324:	f1b9 0901 	subs.w	r9, r9, #1
 8006328:	d505      	bpl.n	8006336 <_fwalk_sglue+0x22>
 800632a:	6824      	ldr	r4, [r4, #0]
 800632c:	2c00      	cmp	r4, #0
 800632e:	d1f7      	bne.n	8006320 <_fwalk_sglue+0xc>
 8006330:	4630      	mov	r0, r6
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006336:	89ab      	ldrh	r3, [r5, #12]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d907      	bls.n	800634c <_fwalk_sglue+0x38>
 800633c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006340:	3301      	adds	r3, #1
 8006342:	d003      	beq.n	800634c <_fwalk_sglue+0x38>
 8006344:	4629      	mov	r1, r5
 8006346:	4638      	mov	r0, r7
 8006348:	47c0      	blx	r8
 800634a:	4306      	orrs	r6, r0
 800634c:	3568      	adds	r5, #104	; 0x68
 800634e:	e7e9      	b.n	8006324 <_fwalk_sglue+0x10>

08006350 <__sread>:
 8006350:	b510      	push	{r4, lr}
 8006352:	460c      	mov	r4, r1
 8006354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006358:	f000 f868 	bl	800642c <_read_r>
 800635c:	2800      	cmp	r0, #0
 800635e:	bfab      	itete	ge
 8006360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006362:	89a3      	ldrhlt	r3, [r4, #12]
 8006364:	181b      	addge	r3, r3, r0
 8006366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800636a:	bfac      	ite	ge
 800636c:	6563      	strge	r3, [r4, #84]	; 0x54
 800636e:	81a3      	strhlt	r3, [r4, #12]
 8006370:	bd10      	pop	{r4, pc}

08006372 <__swrite>:
 8006372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006376:	461f      	mov	r7, r3
 8006378:	898b      	ldrh	r3, [r1, #12]
 800637a:	05db      	lsls	r3, r3, #23
 800637c:	4605      	mov	r5, r0
 800637e:	460c      	mov	r4, r1
 8006380:	4616      	mov	r6, r2
 8006382:	d505      	bpl.n	8006390 <__swrite+0x1e>
 8006384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006388:	2302      	movs	r3, #2
 800638a:	2200      	movs	r2, #0
 800638c:	f000 f83c 	bl	8006408 <_lseek_r>
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639a:	81a3      	strh	r3, [r4, #12]
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	4628      	mov	r0, r5
 80063a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a6:	f000 b863 	b.w	8006470 <_write_r>

080063aa <__sseek>:
 80063aa:	b510      	push	{r4, lr}
 80063ac:	460c      	mov	r4, r1
 80063ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b2:	f000 f829 	bl	8006408 <_lseek_r>
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	bf15      	itete	ne
 80063bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063c6:	81a3      	strheq	r3, [r4, #12]
 80063c8:	bf18      	it	ne
 80063ca:	81a3      	strhne	r3, [r4, #12]
 80063cc:	bd10      	pop	{r4, pc}

080063ce <__sclose>:
 80063ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d2:	f000 b809 	b.w	80063e8 <_close_r>

080063d6 <memset>:
 80063d6:	4402      	add	r2, r0
 80063d8:	4603      	mov	r3, r0
 80063da:	4293      	cmp	r3, r2
 80063dc:	d100      	bne.n	80063e0 <memset+0xa>
 80063de:	4770      	bx	lr
 80063e0:	f803 1b01 	strb.w	r1, [r3], #1
 80063e4:	e7f9      	b.n	80063da <memset+0x4>
	...

080063e8 <_close_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d06      	ldr	r5, [pc, #24]	; (8006404 <_close_r+0x1c>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fc fe99 	bl	800312a <_close>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_close_r+0x1a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_close_r+0x1a>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	200007e0 	.word	0x200007e0

08006408 <_lseek_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d07      	ldr	r5, [pc, #28]	; (8006428 <_lseek_r+0x20>)
 800640c:	4604      	mov	r4, r0
 800640e:	4608      	mov	r0, r1
 8006410:	4611      	mov	r1, r2
 8006412:	2200      	movs	r2, #0
 8006414:	602a      	str	r2, [r5, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	f7fc feae 	bl	8003178 <_lseek>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_lseek_r+0x1e>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_lseek_r+0x1e>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	200007e0 	.word	0x200007e0

0800642c <_read_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	; (800644c <_read_r+0x20>)
 8006430:	4604      	mov	r4, r0
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	2200      	movs	r2, #0
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f7fc fe3c 	bl	80030b8 <_read>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_read_r+0x1e>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_read_r+0x1e>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	200007e0 	.word	0x200007e0

08006450 <_sbrk_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d06      	ldr	r5, [pc, #24]	; (800646c <_sbrk_r+0x1c>)
 8006454:	2300      	movs	r3, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	602b      	str	r3, [r5, #0]
 800645c:	f7fc fe9a 	bl	8003194 <_sbrk>
 8006460:	1c43      	adds	r3, r0, #1
 8006462:	d102      	bne.n	800646a <_sbrk_r+0x1a>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b103      	cbz	r3, 800646a <_sbrk_r+0x1a>
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	bd38      	pop	{r3, r4, r5, pc}
 800646c:	200007e0 	.word	0x200007e0

08006470 <_write_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d07      	ldr	r5, [pc, #28]	; (8006490 <_write_r+0x20>)
 8006474:	4604      	mov	r4, r0
 8006476:	4608      	mov	r0, r1
 8006478:	4611      	mov	r1, r2
 800647a:	2200      	movs	r2, #0
 800647c:	602a      	str	r2, [r5, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f7fc fe37 	bl	80030f2 <_write>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_write_r+0x1e>
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	b103      	cbz	r3, 800648e <_write_r+0x1e>
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	200007e0 	.word	0x200007e0

08006494 <__errno>:
 8006494:	4b01      	ldr	r3, [pc, #4]	; (800649c <__errno+0x8>)
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200000b8 	.word	0x200000b8

080064a0 <__libc_init_array>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4d0d      	ldr	r5, [pc, #52]	; (80064d8 <__libc_init_array+0x38>)
 80064a4:	4c0d      	ldr	r4, [pc, #52]	; (80064dc <__libc_init_array+0x3c>)
 80064a6:	1b64      	subs	r4, r4, r5
 80064a8:	10a4      	asrs	r4, r4, #2
 80064aa:	2600      	movs	r6, #0
 80064ac:	42a6      	cmp	r6, r4
 80064ae:	d109      	bne.n	80064c4 <__libc_init_array+0x24>
 80064b0:	4d0b      	ldr	r5, [pc, #44]	; (80064e0 <__libc_init_array+0x40>)
 80064b2:	4c0c      	ldr	r4, [pc, #48]	; (80064e4 <__libc_init_array+0x44>)
 80064b4:	f002 fbc2 	bl	8008c3c <_init>
 80064b8:	1b64      	subs	r4, r4, r5
 80064ba:	10a4      	asrs	r4, r4, #2
 80064bc:	2600      	movs	r6, #0
 80064be:	42a6      	cmp	r6, r4
 80064c0:	d105      	bne.n	80064ce <__libc_init_array+0x2e>
 80064c2:	bd70      	pop	{r4, r5, r6, pc}
 80064c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c8:	4798      	blx	r3
 80064ca:	3601      	adds	r6, #1
 80064cc:	e7ee      	b.n	80064ac <__libc_init_array+0xc>
 80064ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d2:	4798      	blx	r3
 80064d4:	3601      	adds	r6, #1
 80064d6:	e7f2      	b.n	80064be <__libc_init_array+0x1e>
 80064d8:	080091a8 	.word	0x080091a8
 80064dc:	080091a8 	.word	0x080091a8
 80064e0:	080091a8 	.word	0x080091a8
 80064e4:	080091ac 	.word	0x080091ac

080064e8 <__retarget_lock_init_recursive>:
 80064e8:	4770      	bx	lr

080064ea <__retarget_lock_acquire_recursive>:
 80064ea:	4770      	bx	lr

080064ec <__retarget_lock_release_recursive>:
 80064ec:	4770      	bx	lr
	...

080064f0 <__assert_func>:
 80064f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064f2:	4614      	mov	r4, r2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <__assert_func+0x2c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4605      	mov	r5, r0
 80064fc:	68d8      	ldr	r0, [r3, #12]
 80064fe:	b14c      	cbz	r4, 8006514 <__assert_func+0x24>
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <__assert_func+0x30>)
 8006502:	9100      	str	r1, [sp, #0]
 8006504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006508:	4906      	ldr	r1, [pc, #24]	; (8006524 <__assert_func+0x34>)
 800650a:	462b      	mov	r3, r5
 800650c:	f000 f908 	bl	8006720 <fiprintf>
 8006510:	f000 f918 	bl	8006744 <abort>
 8006514:	4b04      	ldr	r3, [pc, #16]	; (8006528 <__assert_func+0x38>)
 8006516:	461c      	mov	r4, r3
 8006518:	e7f3      	b.n	8006502 <__assert_func+0x12>
 800651a:	bf00      	nop
 800651c:	200000b8 	.word	0x200000b8
 8006520:	08008cff 	.word	0x08008cff
 8006524:	08008d0c 	.word	0x08008d0c
 8006528:	08008d3a 	.word	0x08008d3a

0800652c <_free_r>:
 800652c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800652e:	2900      	cmp	r1, #0
 8006530:	d044      	beq.n	80065bc <_free_r+0x90>
 8006532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006536:	9001      	str	r0, [sp, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f1a1 0404 	sub.w	r4, r1, #4
 800653e:	bfb8      	it	lt
 8006540:	18e4      	addlt	r4, r4, r3
 8006542:	f7ff fdf9 	bl	8006138 <__malloc_lock>
 8006546:	4a1e      	ldr	r2, [pc, #120]	; (80065c0 <_free_r+0x94>)
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	b933      	cbnz	r3, 800655c <_free_r+0x30>
 800654e:	6063      	str	r3, [r4, #4]
 8006550:	6014      	str	r4, [r2, #0]
 8006552:	b003      	add	sp, #12
 8006554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006558:	f7ff bdf4 	b.w	8006144 <__malloc_unlock>
 800655c:	42a3      	cmp	r3, r4
 800655e:	d908      	bls.n	8006572 <_free_r+0x46>
 8006560:	6825      	ldr	r5, [r4, #0]
 8006562:	1961      	adds	r1, r4, r5
 8006564:	428b      	cmp	r3, r1
 8006566:	bf01      	itttt	eq
 8006568:	6819      	ldreq	r1, [r3, #0]
 800656a:	685b      	ldreq	r3, [r3, #4]
 800656c:	1949      	addeq	r1, r1, r5
 800656e:	6021      	streq	r1, [r4, #0]
 8006570:	e7ed      	b.n	800654e <_free_r+0x22>
 8006572:	461a      	mov	r2, r3
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b10b      	cbz	r3, 800657c <_free_r+0x50>
 8006578:	42a3      	cmp	r3, r4
 800657a:	d9fa      	bls.n	8006572 <_free_r+0x46>
 800657c:	6811      	ldr	r1, [r2, #0]
 800657e:	1855      	adds	r5, r2, r1
 8006580:	42a5      	cmp	r5, r4
 8006582:	d10b      	bne.n	800659c <_free_r+0x70>
 8006584:	6824      	ldr	r4, [r4, #0]
 8006586:	4421      	add	r1, r4
 8006588:	1854      	adds	r4, r2, r1
 800658a:	42a3      	cmp	r3, r4
 800658c:	6011      	str	r1, [r2, #0]
 800658e:	d1e0      	bne.n	8006552 <_free_r+0x26>
 8006590:	681c      	ldr	r4, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	6053      	str	r3, [r2, #4]
 8006596:	440c      	add	r4, r1
 8006598:	6014      	str	r4, [r2, #0]
 800659a:	e7da      	b.n	8006552 <_free_r+0x26>
 800659c:	d902      	bls.n	80065a4 <_free_r+0x78>
 800659e:	230c      	movs	r3, #12
 80065a0:	6003      	str	r3, [r0, #0]
 80065a2:	e7d6      	b.n	8006552 <_free_r+0x26>
 80065a4:	6825      	ldr	r5, [r4, #0]
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf04      	itt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	bf04      	itt	eq
 80065b4:	1949      	addeq	r1, r1, r5
 80065b6:	6021      	streq	r1, [r4, #0]
 80065b8:	6054      	str	r4, [r2, #4]
 80065ba:	e7ca      	b.n	8006552 <_free_r+0x26>
 80065bc:	b003      	add	sp, #12
 80065be:	bd30      	pop	{r4, r5, pc}
 80065c0:	2000069c 	.word	0x2000069c

080065c4 <__sflush_r>:
 80065c4:	898a      	ldrh	r2, [r1, #12]
 80065c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	4605      	mov	r5, r0
 80065cc:	0710      	lsls	r0, r2, #28
 80065ce:	460c      	mov	r4, r1
 80065d0:	d458      	bmi.n	8006684 <__sflush_r+0xc0>
 80065d2:	684b      	ldr	r3, [r1, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dc05      	bgt.n	80065e4 <__sflush_r+0x20>
 80065d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dc02      	bgt.n	80065e4 <__sflush_r+0x20>
 80065de:	2000      	movs	r0, #0
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d0f9      	beq.n	80065de <__sflush_r+0x1a>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065f0:	682f      	ldr	r7, [r5, #0]
 80065f2:	6a21      	ldr	r1, [r4, #32]
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	d032      	beq.n	800665e <__sflush_r+0x9a>
 80065f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	075a      	lsls	r2, r3, #29
 80065fe:	d505      	bpl.n	800660c <__sflush_r+0x48>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	1ac0      	subs	r0, r0, r3
 8006604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006606:	b10b      	cbz	r3, 800660c <__sflush_r+0x48>
 8006608:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800660a:	1ac0      	subs	r0, r0, r3
 800660c:	2300      	movs	r3, #0
 800660e:	4602      	mov	r2, r0
 8006610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006612:	6a21      	ldr	r1, [r4, #32]
 8006614:	4628      	mov	r0, r5
 8006616:	47b0      	blx	r6
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	d106      	bne.n	800662c <__sflush_r+0x68>
 800661e:	6829      	ldr	r1, [r5, #0]
 8006620:	291d      	cmp	r1, #29
 8006622:	d82b      	bhi.n	800667c <__sflush_r+0xb8>
 8006624:	4a29      	ldr	r2, [pc, #164]	; (80066cc <__sflush_r+0x108>)
 8006626:	410a      	asrs	r2, r1
 8006628:	07d6      	lsls	r6, r2, #31
 800662a:	d427      	bmi.n	800667c <__sflush_r+0xb8>
 800662c:	2200      	movs	r2, #0
 800662e:	6062      	str	r2, [r4, #4]
 8006630:	04d9      	lsls	r1, r3, #19
 8006632:	6922      	ldr	r2, [r4, #16]
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	d504      	bpl.n	8006642 <__sflush_r+0x7e>
 8006638:	1c42      	adds	r2, r0, #1
 800663a:	d101      	bne.n	8006640 <__sflush_r+0x7c>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b903      	cbnz	r3, 8006642 <__sflush_r+0x7e>
 8006640:	6560      	str	r0, [r4, #84]	; 0x54
 8006642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006644:	602f      	str	r7, [r5, #0]
 8006646:	2900      	cmp	r1, #0
 8006648:	d0c9      	beq.n	80065de <__sflush_r+0x1a>
 800664a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800664e:	4299      	cmp	r1, r3
 8006650:	d002      	beq.n	8006658 <__sflush_r+0x94>
 8006652:	4628      	mov	r0, r5
 8006654:	f7ff ff6a 	bl	800652c <_free_r>
 8006658:	2000      	movs	r0, #0
 800665a:	6360      	str	r0, [r4, #52]	; 0x34
 800665c:	e7c0      	b.n	80065e0 <__sflush_r+0x1c>
 800665e:	2301      	movs	r3, #1
 8006660:	4628      	mov	r0, r5
 8006662:	47b0      	blx	r6
 8006664:	1c41      	adds	r1, r0, #1
 8006666:	d1c8      	bne.n	80065fa <__sflush_r+0x36>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0c5      	beq.n	80065fa <__sflush_r+0x36>
 800666e:	2b1d      	cmp	r3, #29
 8006670:	d001      	beq.n	8006676 <__sflush_r+0xb2>
 8006672:	2b16      	cmp	r3, #22
 8006674:	d101      	bne.n	800667a <__sflush_r+0xb6>
 8006676:	602f      	str	r7, [r5, #0]
 8006678:	e7b1      	b.n	80065de <__sflush_r+0x1a>
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7ad      	b.n	80065e0 <__sflush_r+0x1c>
 8006684:	690f      	ldr	r7, [r1, #16]
 8006686:	2f00      	cmp	r7, #0
 8006688:	d0a9      	beq.n	80065de <__sflush_r+0x1a>
 800668a:	0793      	lsls	r3, r2, #30
 800668c:	680e      	ldr	r6, [r1, #0]
 800668e:	bf08      	it	eq
 8006690:	694b      	ldreq	r3, [r1, #20]
 8006692:	600f      	str	r7, [r1, #0]
 8006694:	bf18      	it	ne
 8006696:	2300      	movne	r3, #0
 8006698:	eba6 0807 	sub.w	r8, r6, r7
 800669c:	608b      	str	r3, [r1, #8]
 800669e:	f1b8 0f00 	cmp.w	r8, #0
 80066a2:	dd9c      	ble.n	80065de <__sflush_r+0x1a>
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066a8:	4643      	mov	r3, r8
 80066aa:	463a      	mov	r2, r7
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b0      	blx	r6
 80066b0:	2800      	cmp	r0, #0
 80066b2:	dc06      	bgt.n	80066c2 <__sflush_r+0xfe>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	e78e      	b.n	80065e0 <__sflush_r+0x1c>
 80066c2:	4407      	add	r7, r0
 80066c4:	eba8 0800 	sub.w	r8, r8, r0
 80066c8:	e7e9      	b.n	800669e <__sflush_r+0xda>
 80066ca:	bf00      	nop
 80066cc:	dfbffffe 	.word	0xdfbffffe

080066d0 <_fflush_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b913      	cbnz	r3, 80066e0 <_fflush_r+0x10>
 80066da:	2500      	movs	r5, #0
 80066dc:	4628      	mov	r0, r5
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	b118      	cbz	r0, 80066ea <_fflush_r+0x1a>
 80066e2:	6a03      	ldr	r3, [r0, #32]
 80066e4:	b90b      	cbnz	r3, 80066ea <_fflush_r+0x1a>
 80066e6:	f7ff fdfd 	bl	80062e4 <__sinit>
 80066ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f3      	beq.n	80066da <_fflush_r+0xa>
 80066f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066f4:	07d0      	lsls	r0, r2, #31
 80066f6:	d404      	bmi.n	8006702 <_fflush_r+0x32>
 80066f8:	0599      	lsls	r1, r3, #22
 80066fa:	d402      	bmi.n	8006702 <_fflush_r+0x32>
 80066fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066fe:	f7ff fef4 	bl	80064ea <__retarget_lock_acquire_recursive>
 8006702:	4628      	mov	r0, r5
 8006704:	4621      	mov	r1, r4
 8006706:	f7ff ff5d 	bl	80065c4 <__sflush_r>
 800670a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800670c:	07da      	lsls	r2, r3, #31
 800670e:	4605      	mov	r5, r0
 8006710:	d4e4      	bmi.n	80066dc <_fflush_r+0xc>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	059b      	lsls	r3, r3, #22
 8006716:	d4e1      	bmi.n	80066dc <_fflush_r+0xc>
 8006718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671a:	f7ff fee7 	bl	80064ec <__retarget_lock_release_recursive>
 800671e:	e7dd      	b.n	80066dc <_fflush_r+0xc>

08006720 <fiprintf>:
 8006720:	b40e      	push	{r1, r2, r3}
 8006722:	b503      	push	{r0, r1, lr}
 8006724:	4601      	mov	r1, r0
 8006726:	ab03      	add	r3, sp, #12
 8006728:	4805      	ldr	r0, [pc, #20]	; (8006740 <fiprintf+0x20>)
 800672a:	f853 2b04 	ldr.w	r2, [r3], #4
 800672e:	6800      	ldr	r0, [r0, #0]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	f000 f837 	bl	80067a4 <_vfiprintf_r>
 8006736:	b002      	add	sp, #8
 8006738:	f85d eb04 	ldr.w	lr, [sp], #4
 800673c:	b003      	add	sp, #12
 800673e:	4770      	bx	lr
 8006740:	200000b8 	.word	0x200000b8

08006744 <abort>:
 8006744:	b508      	push	{r3, lr}
 8006746:	2006      	movs	r0, #6
 8006748:	f000 fb94 	bl	8006e74 <raise>
 800674c:	2001      	movs	r0, #1
 800674e:	f7fc fca9 	bl	80030a4 <_exit>

08006752 <__sfputc_r>:
 8006752:	6893      	ldr	r3, [r2, #8]
 8006754:	3b01      	subs	r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	b410      	push	{r4}
 800675a:	6093      	str	r3, [r2, #8]
 800675c:	da08      	bge.n	8006770 <__sfputc_r+0x1e>
 800675e:	6994      	ldr	r4, [r2, #24]
 8006760:	42a3      	cmp	r3, r4
 8006762:	db01      	blt.n	8006768 <__sfputc_r+0x16>
 8006764:	290a      	cmp	r1, #10
 8006766:	d103      	bne.n	8006770 <__sfputc_r+0x1e>
 8006768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800676c:	f000 bac4 	b.w	8006cf8 <__swbuf_r>
 8006770:	6813      	ldr	r3, [r2, #0]
 8006772:	1c58      	adds	r0, r3, #1
 8006774:	6010      	str	r0, [r2, #0]
 8006776:	7019      	strb	r1, [r3, #0]
 8006778:	4608      	mov	r0, r1
 800677a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800677e:	4770      	bx	lr

08006780 <__sfputs_r>:
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	4606      	mov	r6, r0
 8006784:	460f      	mov	r7, r1
 8006786:	4614      	mov	r4, r2
 8006788:	18d5      	adds	r5, r2, r3
 800678a:	42ac      	cmp	r4, r5
 800678c:	d101      	bne.n	8006792 <__sfputs_r+0x12>
 800678e:	2000      	movs	r0, #0
 8006790:	e007      	b.n	80067a2 <__sfputs_r+0x22>
 8006792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006796:	463a      	mov	r2, r7
 8006798:	4630      	mov	r0, r6
 800679a:	f7ff ffda 	bl	8006752 <__sfputc_r>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d1f3      	bne.n	800678a <__sfputs_r+0xa>
 80067a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067a4 <_vfiprintf_r>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	460d      	mov	r5, r1
 80067aa:	b09d      	sub	sp, #116	; 0x74
 80067ac:	4614      	mov	r4, r2
 80067ae:	4698      	mov	r8, r3
 80067b0:	4606      	mov	r6, r0
 80067b2:	b118      	cbz	r0, 80067bc <_vfiprintf_r+0x18>
 80067b4:	6a03      	ldr	r3, [r0, #32]
 80067b6:	b90b      	cbnz	r3, 80067bc <_vfiprintf_r+0x18>
 80067b8:	f7ff fd94 	bl	80062e4 <__sinit>
 80067bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067be:	07d9      	lsls	r1, r3, #31
 80067c0:	d405      	bmi.n	80067ce <_vfiprintf_r+0x2a>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	059a      	lsls	r2, r3, #22
 80067c6:	d402      	bmi.n	80067ce <_vfiprintf_r+0x2a>
 80067c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ca:	f7ff fe8e 	bl	80064ea <__retarget_lock_acquire_recursive>
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	d501      	bpl.n	80067d8 <_vfiprintf_r+0x34>
 80067d4:	692b      	ldr	r3, [r5, #16]
 80067d6:	b99b      	cbnz	r3, 8006800 <_vfiprintf_r+0x5c>
 80067d8:	4629      	mov	r1, r5
 80067da:	4630      	mov	r0, r6
 80067dc:	f000 faca 	bl	8006d74 <__swsetup_r>
 80067e0:	b170      	cbz	r0, 8006800 <_vfiprintf_r+0x5c>
 80067e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e4:	07dc      	lsls	r4, r3, #31
 80067e6:	d504      	bpl.n	80067f2 <_vfiprintf_r+0x4e>
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	b01d      	add	sp, #116	; 0x74
 80067ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	0598      	lsls	r0, r3, #22
 80067f6:	d4f7      	bmi.n	80067e8 <_vfiprintf_r+0x44>
 80067f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067fa:	f7ff fe77 	bl	80064ec <__retarget_lock_release_recursive>
 80067fe:	e7f3      	b.n	80067e8 <_vfiprintf_r+0x44>
 8006800:	2300      	movs	r3, #0
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	2320      	movs	r3, #32
 8006806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800680a:	f8cd 800c 	str.w	r8, [sp, #12]
 800680e:	2330      	movs	r3, #48	; 0x30
 8006810:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80069c4 <_vfiprintf_r+0x220>
 8006814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006818:	f04f 0901 	mov.w	r9, #1
 800681c:	4623      	mov	r3, r4
 800681e:	469a      	mov	sl, r3
 8006820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006824:	b10a      	cbz	r2, 800682a <_vfiprintf_r+0x86>
 8006826:	2a25      	cmp	r2, #37	; 0x25
 8006828:	d1f9      	bne.n	800681e <_vfiprintf_r+0x7a>
 800682a:	ebba 0b04 	subs.w	fp, sl, r4
 800682e:	d00b      	beq.n	8006848 <_vfiprintf_r+0xa4>
 8006830:	465b      	mov	r3, fp
 8006832:	4622      	mov	r2, r4
 8006834:	4629      	mov	r1, r5
 8006836:	4630      	mov	r0, r6
 8006838:	f7ff ffa2 	bl	8006780 <__sfputs_r>
 800683c:	3001      	adds	r0, #1
 800683e:	f000 80a9 	beq.w	8006994 <_vfiprintf_r+0x1f0>
 8006842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006844:	445a      	add	r2, fp
 8006846:	9209      	str	r2, [sp, #36]	; 0x24
 8006848:	f89a 3000 	ldrb.w	r3, [sl]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a1 	beq.w	8006994 <_vfiprintf_r+0x1f0>
 8006852:	2300      	movs	r3, #0
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800685c:	f10a 0a01 	add.w	sl, sl, #1
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	9307      	str	r3, [sp, #28]
 8006864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006868:	931a      	str	r3, [sp, #104]	; 0x68
 800686a:	4654      	mov	r4, sl
 800686c:	2205      	movs	r2, #5
 800686e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006872:	4854      	ldr	r0, [pc, #336]	; (80069c4 <_vfiprintf_r+0x220>)
 8006874:	f7f9 fcd4 	bl	8000220 <memchr>
 8006878:	9a04      	ldr	r2, [sp, #16]
 800687a:	b9d8      	cbnz	r0, 80068b4 <_vfiprintf_r+0x110>
 800687c:	06d1      	lsls	r1, r2, #27
 800687e:	bf44      	itt	mi
 8006880:	2320      	movmi	r3, #32
 8006882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006886:	0713      	lsls	r3, r2, #28
 8006888:	bf44      	itt	mi
 800688a:	232b      	movmi	r3, #43	; 0x2b
 800688c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006890:	f89a 3000 	ldrb.w	r3, [sl]
 8006894:	2b2a      	cmp	r3, #42	; 0x2a
 8006896:	d015      	beq.n	80068c4 <_vfiprintf_r+0x120>
 8006898:	9a07      	ldr	r2, [sp, #28]
 800689a:	4654      	mov	r4, sl
 800689c:	2000      	movs	r0, #0
 800689e:	f04f 0c0a 	mov.w	ip, #10
 80068a2:	4621      	mov	r1, r4
 80068a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a8:	3b30      	subs	r3, #48	; 0x30
 80068aa:	2b09      	cmp	r3, #9
 80068ac:	d94d      	bls.n	800694a <_vfiprintf_r+0x1a6>
 80068ae:	b1b0      	cbz	r0, 80068de <_vfiprintf_r+0x13a>
 80068b0:	9207      	str	r2, [sp, #28]
 80068b2:	e014      	b.n	80068de <_vfiprintf_r+0x13a>
 80068b4:	eba0 0308 	sub.w	r3, r0, r8
 80068b8:	fa09 f303 	lsl.w	r3, r9, r3
 80068bc:	4313      	orrs	r3, r2
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	46a2      	mov	sl, r4
 80068c2:	e7d2      	b.n	800686a <_vfiprintf_r+0xc6>
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	1d19      	adds	r1, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfbb      	ittet	lt
 80068d0:	425b      	neglt	r3, r3
 80068d2:	f042 0202 	orrlt.w	r2, r2, #2
 80068d6:	9307      	strge	r3, [sp, #28]
 80068d8:	9307      	strlt	r3, [sp, #28]
 80068da:	bfb8      	it	lt
 80068dc:	9204      	strlt	r2, [sp, #16]
 80068de:	7823      	ldrb	r3, [r4, #0]
 80068e0:	2b2e      	cmp	r3, #46	; 0x2e
 80068e2:	d10c      	bne.n	80068fe <_vfiprintf_r+0x15a>
 80068e4:	7863      	ldrb	r3, [r4, #1]
 80068e6:	2b2a      	cmp	r3, #42	; 0x2a
 80068e8:	d134      	bne.n	8006954 <_vfiprintf_r+0x1b0>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	1d1a      	adds	r2, r3, #4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	9203      	str	r2, [sp, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bfb8      	it	lt
 80068f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80068fa:	3402      	adds	r4, #2
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80069d4 <_vfiprintf_r+0x230>
 8006902:	7821      	ldrb	r1, [r4, #0]
 8006904:	2203      	movs	r2, #3
 8006906:	4650      	mov	r0, sl
 8006908:	f7f9 fc8a 	bl	8000220 <memchr>
 800690c:	b138      	cbz	r0, 800691e <_vfiprintf_r+0x17a>
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	eba0 000a 	sub.w	r0, r0, sl
 8006914:	2240      	movs	r2, #64	; 0x40
 8006916:	4082      	lsls	r2, r0
 8006918:	4313      	orrs	r3, r2
 800691a:	3401      	adds	r4, #1
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006922:	4829      	ldr	r0, [pc, #164]	; (80069c8 <_vfiprintf_r+0x224>)
 8006924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006928:	2206      	movs	r2, #6
 800692a:	f7f9 fc79 	bl	8000220 <memchr>
 800692e:	2800      	cmp	r0, #0
 8006930:	d03f      	beq.n	80069b2 <_vfiprintf_r+0x20e>
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <_vfiprintf_r+0x228>)
 8006934:	bb1b      	cbnz	r3, 800697e <_vfiprintf_r+0x1da>
 8006936:	9b03      	ldr	r3, [sp, #12]
 8006938:	3307      	adds	r3, #7
 800693a:	f023 0307 	bic.w	r3, r3, #7
 800693e:	3308      	adds	r3, #8
 8006940:	9303      	str	r3, [sp, #12]
 8006942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006944:	443b      	add	r3, r7
 8006946:	9309      	str	r3, [sp, #36]	; 0x24
 8006948:	e768      	b.n	800681c <_vfiprintf_r+0x78>
 800694a:	fb0c 3202 	mla	r2, ip, r2, r3
 800694e:	460c      	mov	r4, r1
 8006950:	2001      	movs	r0, #1
 8006952:	e7a6      	b.n	80068a2 <_vfiprintf_r+0xfe>
 8006954:	2300      	movs	r3, #0
 8006956:	3401      	adds	r4, #1
 8006958:	9305      	str	r3, [sp, #20]
 800695a:	4619      	mov	r1, r3
 800695c:	f04f 0c0a 	mov.w	ip, #10
 8006960:	4620      	mov	r0, r4
 8006962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006966:	3a30      	subs	r2, #48	; 0x30
 8006968:	2a09      	cmp	r2, #9
 800696a:	d903      	bls.n	8006974 <_vfiprintf_r+0x1d0>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0c6      	beq.n	80068fe <_vfiprintf_r+0x15a>
 8006970:	9105      	str	r1, [sp, #20]
 8006972:	e7c4      	b.n	80068fe <_vfiprintf_r+0x15a>
 8006974:	fb0c 2101 	mla	r1, ip, r1, r2
 8006978:	4604      	mov	r4, r0
 800697a:	2301      	movs	r3, #1
 800697c:	e7f0      	b.n	8006960 <_vfiprintf_r+0x1bc>
 800697e:	ab03      	add	r3, sp, #12
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	462a      	mov	r2, r5
 8006984:	4b12      	ldr	r3, [pc, #72]	; (80069d0 <_vfiprintf_r+0x22c>)
 8006986:	a904      	add	r1, sp, #16
 8006988:	4630      	mov	r0, r6
 800698a:	f3af 8000 	nop.w
 800698e:	4607      	mov	r7, r0
 8006990:	1c78      	adds	r0, r7, #1
 8006992:	d1d6      	bne.n	8006942 <_vfiprintf_r+0x19e>
 8006994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	d405      	bmi.n	80069a6 <_vfiprintf_r+0x202>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	059a      	lsls	r2, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_vfiprintf_r+0x202>
 80069a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a2:	f7ff fda3 	bl	80064ec <__retarget_lock_release_recursive>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	065b      	lsls	r3, r3, #25
 80069aa:	f53f af1d 	bmi.w	80067e8 <_vfiprintf_r+0x44>
 80069ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b0:	e71c      	b.n	80067ec <_vfiprintf_r+0x48>
 80069b2:	ab03      	add	r3, sp, #12
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	462a      	mov	r2, r5
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <_vfiprintf_r+0x22c>)
 80069ba:	a904      	add	r1, sp, #16
 80069bc:	4630      	mov	r0, r6
 80069be:	f000 f879 	bl	8006ab4 <_printf_i>
 80069c2:	e7e4      	b.n	800698e <_vfiprintf_r+0x1ea>
 80069c4:	08008d3b 	.word	0x08008d3b
 80069c8:	08008d45 	.word	0x08008d45
 80069cc:	00000000 	.word	0x00000000
 80069d0:	08006781 	.word	0x08006781
 80069d4:	08008d41 	.word	0x08008d41

080069d8 <_printf_common>:
 80069d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	4616      	mov	r6, r2
 80069de:	4699      	mov	r9, r3
 80069e0:	688a      	ldr	r2, [r1, #8]
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bfb8      	it	lt
 80069ec:	4613      	movlt	r3, r2
 80069ee:	6033      	str	r3, [r6, #0]
 80069f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069f4:	4607      	mov	r7, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b10a      	cbz	r2, 80069fe <_printf_common+0x26>
 80069fa:	3301      	adds	r3, #1
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	0699      	lsls	r1, r3, #26
 8006a02:	bf42      	ittt	mi
 8006a04:	6833      	ldrmi	r3, [r6, #0]
 8006a06:	3302      	addmi	r3, #2
 8006a08:	6033      	strmi	r3, [r6, #0]
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f015 0506 	ands.w	r5, r5, #6
 8006a10:	d106      	bne.n	8006a20 <_printf_common+0x48>
 8006a12:	f104 0a19 	add.w	sl, r4, #25
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	6832      	ldr	r2, [r6, #0]
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	dc26      	bgt.n	8006a6e <_printf_common+0x96>
 8006a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a24:	1e13      	subs	r3, r2, #0
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	bf18      	it	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	0692      	lsls	r2, r2, #26
 8006a2e:	d42b      	bmi.n	8006a88 <_printf_common+0xb0>
 8006a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a34:	4649      	mov	r1, r9
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c0      	blx	r8
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d01e      	beq.n	8006a7c <_printf_common+0xa4>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	f003 0306 	and.w	r3, r3, #6
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf02      	ittt	eq
 8006a4a:	68e5      	ldreq	r5, [r4, #12]
 8006a4c:	6833      	ldreq	r3, [r6, #0]
 8006a4e:	1aed      	subeq	r5, r5, r3
 8006a50:	68a3      	ldr	r3, [r4, #8]
 8006a52:	bf0c      	ite	eq
 8006a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a58:	2500      	movne	r5, #0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bfc4      	itt	gt
 8006a5e:	1a9b      	subgt	r3, r3, r2
 8006a60:	18ed      	addgt	r5, r5, r3
 8006a62:	2600      	movs	r6, #0
 8006a64:	341a      	adds	r4, #26
 8006a66:	42b5      	cmp	r5, r6
 8006a68:	d11a      	bne.n	8006aa0 <_printf_common+0xc8>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e008      	b.n	8006a80 <_printf_common+0xa8>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4649      	mov	r1, r9
 8006a74:	4638      	mov	r0, r7
 8006a76:	47c0      	blx	r8
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d103      	bne.n	8006a84 <_printf_common+0xac>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a84:	3501      	adds	r5, #1
 8006a86:	e7c6      	b.n	8006a16 <_printf_common+0x3e>
 8006a88:	18e1      	adds	r1, r4, r3
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	2030      	movs	r0, #48	; 0x30
 8006a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a92:	4422      	add	r2, r4
 8006a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	e7c7      	b.n	8006a30 <_printf_common+0x58>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c0      	blx	r8
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d0e6      	beq.n	8006a7c <_printf_common+0xa4>
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7d9      	b.n	8006a66 <_printf_common+0x8e>
	...

08006ab4 <_printf_i>:
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	7e0f      	ldrb	r7, [r1, #24]
 8006aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006abc:	2f78      	cmp	r7, #120	; 0x78
 8006abe:	4691      	mov	r9, r2
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	469a      	mov	sl, r3
 8006ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aca:	d807      	bhi.n	8006adc <_printf_i+0x28>
 8006acc:	2f62      	cmp	r7, #98	; 0x62
 8006ace:	d80a      	bhi.n	8006ae6 <_printf_i+0x32>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	f000 80d4 	beq.w	8006c7e <_printf_i+0x1ca>
 8006ad6:	2f58      	cmp	r7, #88	; 0x58
 8006ad8:	f000 80c0 	beq.w	8006c5c <_printf_i+0x1a8>
 8006adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ae4:	e03a      	b.n	8006b5c <_printf_i+0xa8>
 8006ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aea:	2b15      	cmp	r3, #21
 8006aec:	d8f6      	bhi.n	8006adc <_printf_i+0x28>
 8006aee:	a101      	add	r1, pc, #4	; (adr r1, 8006af4 <_printf_i+0x40>)
 8006af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b61 	.word	0x08006b61
 8006afc:	08006add 	.word	0x08006add
 8006b00:	08006add 	.word	0x08006add
 8006b04:	08006add 	.word	0x08006add
 8006b08:	08006add 	.word	0x08006add
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006add 	.word	0x08006add
 8006b14:	08006add 	.word	0x08006add
 8006b18:	08006add 	.word	0x08006add
 8006b1c:	08006add 	.word	0x08006add
 8006b20:	08006c65 	.word	0x08006c65
 8006b24:	08006b8d 	.word	0x08006b8d
 8006b28:	08006c1f 	.word	0x08006c1f
 8006b2c:	08006add 	.word	0x08006add
 8006b30:	08006add 	.word	0x08006add
 8006b34:	08006c87 	.word	0x08006c87
 8006b38:	08006add 	.word	0x08006add
 8006b3c:	08006b8d 	.word	0x08006b8d
 8006b40:	08006add 	.word	0x08006add
 8006b44:	08006add 	.word	0x08006add
 8006b48:	08006c27 	.word	0x08006c27
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	1d1a      	adds	r2, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	602a      	str	r2, [r5, #0]
 8006b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e09f      	b.n	8006ca0 <_printf_i+0x1ec>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	682b      	ldr	r3, [r5, #0]
 8006b64:	0607      	lsls	r7, r0, #24
 8006b66:	f103 0104 	add.w	r1, r3, #4
 8006b6a:	6029      	str	r1, [r5, #0]
 8006b6c:	d501      	bpl.n	8006b72 <_printf_i+0xbe>
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	e003      	b.n	8006b7a <_printf_i+0xc6>
 8006b72:	0646      	lsls	r6, r0, #25
 8006b74:	d5fb      	bpl.n	8006b6e <_printf_i+0xba>
 8006b76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	da03      	bge.n	8006b86 <_printf_i+0xd2>
 8006b7e:	232d      	movs	r3, #45	; 0x2d
 8006b80:	4276      	negs	r6, r6
 8006b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b86:	485a      	ldr	r0, [pc, #360]	; (8006cf0 <_printf_i+0x23c>)
 8006b88:	230a      	movs	r3, #10
 8006b8a:	e012      	b.n	8006bb2 <_printf_i+0xfe>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	1d19      	adds	r1, r3, #4
 8006b92:	6029      	str	r1, [r5, #0]
 8006b94:	0605      	lsls	r5, r0, #24
 8006b96:	d501      	bpl.n	8006b9c <_printf_i+0xe8>
 8006b98:	681e      	ldr	r6, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <_printf_i+0xee>
 8006b9c:	0641      	lsls	r1, r0, #25
 8006b9e:	d5fb      	bpl.n	8006b98 <_printf_i+0xe4>
 8006ba0:	881e      	ldrh	r6, [r3, #0]
 8006ba2:	4853      	ldr	r0, [pc, #332]	; (8006cf0 <_printf_i+0x23c>)
 8006ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2308      	moveq	r3, #8
 8006baa:	230a      	movne	r3, #10
 8006bac:	2100      	movs	r1, #0
 8006bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bb2:	6865      	ldr	r5, [r4, #4]
 8006bb4:	60a5      	str	r5, [r4, #8]
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	bfa2      	ittt	ge
 8006bba:	6821      	ldrge	r1, [r4, #0]
 8006bbc:	f021 0104 	bicge.w	r1, r1, #4
 8006bc0:	6021      	strge	r1, [r4, #0]
 8006bc2:	b90e      	cbnz	r6, 8006bc8 <_printf_i+0x114>
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	d04b      	beq.n	8006c60 <_printf_i+0x1ac>
 8006bc8:	4615      	mov	r5, r2
 8006bca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bce:	fb03 6711 	mls	r7, r3, r1, r6
 8006bd2:	5dc7      	ldrb	r7, [r0, r7]
 8006bd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bd8:	4637      	mov	r7, r6
 8006bda:	42bb      	cmp	r3, r7
 8006bdc:	460e      	mov	r6, r1
 8006bde:	d9f4      	bls.n	8006bca <_printf_i+0x116>
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d10b      	bne.n	8006bfc <_printf_i+0x148>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	07de      	lsls	r6, r3, #31
 8006be8:	d508      	bpl.n	8006bfc <_printf_i+0x148>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	6861      	ldr	r1, [r4, #4]
 8006bee:	4299      	cmp	r1, r3
 8006bf0:	bfde      	ittt	le
 8006bf2:	2330      	movle	r3, #48	; 0x30
 8006bf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bfc:	1b52      	subs	r2, r2, r5
 8006bfe:	6122      	str	r2, [r4, #16]
 8006c00:	f8cd a000 	str.w	sl, [sp]
 8006c04:	464b      	mov	r3, r9
 8006c06:	aa03      	add	r2, sp, #12
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f7ff fee4 	bl	80069d8 <_printf_common>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d14a      	bne.n	8006caa <_printf_i+0x1f6>
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	b004      	add	sp, #16
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f043 0320 	orr.w	r3, r3, #32
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	4833      	ldr	r0, [pc, #204]	; (8006cf4 <_printf_i+0x240>)
 8006c28:	2778      	movs	r7, #120	; 0x78
 8006c2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	6829      	ldr	r1, [r5, #0]
 8006c32:	061f      	lsls	r7, r3, #24
 8006c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c38:	d402      	bmi.n	8006c40 <_printf_i+0x18c>
 8006c3a:	065f      	lsls	r7, r3, #25
 8006c3c:	bf48      	it	mi
 8006c3e:	b2b6      	uxthmi	r6, r6
 8006c40:	07df      	lsls	r7, r3, #31
 8006c42:	bf48      	it	mi
 8006c44:	f043 0320 	orrmi.w	r3, r3, #32
 8006c48:	6029      	str	r1, [r5, #0]
 8006c4a:	bf48      	it	mi
 8006c4c:	6023      	strmi	r3, [r4, #0]
 8006c4e:	b91e      	cbnz	r6, 8006c58 <_printf_i+0x1a4>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	f023 0320 	bic.w	r3, r3, #32
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	2310      	movs	r3, #16
 8006c5a:	e7a7      	b.n	8006bac <_printf_i+0xf8>
 8006c5c:	4824      	ldr	r0, [pc, #144]	; (8006cf0 <_printf_i+0x23c>)
 8006c5e:	e7e4      	b.n	8006c2a <_printf_i+0x176>
 8006c60:	4615      	mov	r5, r2
 8006c62:	e7bd      	b.n	8006be0 <_printf_i+0x12c>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	6826      	ldr	r6, [r4, #0]
 8006c68:	6961      	ldr	r1, [r4, #20]
 8006c6a:	1d18      	adds	r0, r3, #4
 8006c6c:	6028      	str	r0, [r5, #0]
 8006c6e:	0635      	lsls	r5, r6, #24
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	d501      	bpl.n	8006c78 <_printf_i+0x1c4>
 8006c74:	6019      	str	r1, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <_printf_i+0x1ca>
 8006c78:	0670      	lsls	r0, r6, #25
 8006c7a:	d5fb      	bpl.n	8006c74 <_printf_i+0x1c0>
 8006c7c:	8019      	strh	r1, [r3, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	4615      	mov	r5, r2
 8006c84:	e7bc      	b.n	8006c00 <_printf_i+0x14c>
 8006c86:	682b      	ldr	r3, [r5, #0]
 8006c88:	1d1a      	adds	r2, r3, #4
 8006c8a:	602a      	str	r2, [r5, #0]
 8006c8c:	681d      	ldr	r5, [r3, #0]
 8006c8e:	6862      	ldr	r2, [r4, #4]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f7f9 fac4 	bl	8000220 <memchr>
 8006c98:	b108      	cbz	r0, 8006c9e <_printf_i+0x1ea>
 8006c9a:	1b40      	subs	r0, r0, r5
 8006c9c:	6060      	str	r0, [r4, #4]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca8:	e7aa      	b.n	8006c00 <_printf_i+0x14c>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	462a      	mov	r2, r5
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	47d0      	blx	sl
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d0ad      	beq.n	8006c14 <_printf_i+0x160>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	d413      	bmi.n	8006ce6 <_printf_i+0x232>
 8006cbe:	68e0      	ldr	r0, [r4, #12]
 8006cc0:	9b03      	ldr	r3, [sp, #12]
 8006cc2:	4298      	cmp	r0, r3
 8006cc4:	bfb8      	it	lt
 8006cc6:	4618      	movlt	r0, r3
 8006cc8:	e7a6      	b.n	8006c18 <_printf_i+0x164>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	4632      	mov	r2, r6
 8006cce:	4649      	mov	r1, r9
 8006cd0:	4640      	mov	r0, r8
 8006cd2:	47d0      	blx	sl
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d09d      	beq.n	8006c14 <_printf_i+0x160>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	1a5b      	subs	r3, r3, r1
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dcf2      	bgt.n	8006cca <_printf_i+0x216>
 8006ce4:	e7eb      	b.n	8006cbe <_printf_i+0x20a>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	f104 0619 	add.w	r6, r4, #25
 8006cec:	e7f5      	b.n	8006cda <_printf_i+0x226>
 8006cee:	bf00      	nop
 8006cf0:	08008d4c 	.word	0x08008d4c
 8006cf4:	08008d5d 	.word	0x08008d5d

08006cf8 <__swbuf_r>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	460e      	mov	r6, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	4605      	mov	r5, r0
 8006d00:	b118      	cbz	r0, 8006d0a <__swbuf_r+0x12>
 8006d02:	6a03      	ldr	r3, [r0, #32]
 8006d04:	b90b      	cbnz	r3, 8006d0a <__swbuf_r+0x12>
 8006d06:	f7ff faed 	bl	80062e4 <__sinit>
 8006d0a:	69a3      	ldr	r3, [r4, #24]
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	071a      	lsls	r2, r3, #28
 8006d12:	d525      	bpl.n	8006d60 <__swbuf_r+0x68>
 8006d14:	6923      	ldr	r3, [r4, #16]
 8006d16:	b31b      	cbz	r3, 8006d60 <__swbuf_r+0x68>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	6922      	ldr	r2, [r4, #16]
 8006d1c:	1a98      	subs	r0, r3, r2
 8006d1e:	6963      	ldr	r3, [r4, #20]
 8006d20:	b2f6      	uxtb	r6, r6
 8006d22:	4283      	cmp	r3, r0
 8006d24:	4637      	mov	r7, r6
 8006d26:	dc04      	bgt.n	8006d32 <__swbuf_r+0x3a>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f7ff fcd0 	bl	80066d0 <_fflush_r>
 8006d30:	b9e0      	cbnz	r0, 8006d6c <__swbuf_r+0x74>
 8006d32:	68a3      	ldr	r3, [r4, #8]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	6022      	str	r2, [r4, #0]
 8006d3e:	701e      	strb	r6, [r3, #0]
 8006d40:	6962      	ldr	r2, [r4, #20]
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d004      	beq.n	8006d52 <__swbuf_r+0x5a>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d506      	bpl.n	8006d5c <__swbuf_r+0x64>
 8006d4e:	2e0a      	cmp	r6, #10
 8006d50:	d104      	bne.n	8006d5c <__swbuf_r+0x64>
 8006d52:	4621      	mov	r1, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f7ff fcbb 	bl	80066d0 <_fflush_r>
 8006d5a:	b938      	cbnz	r0, 8006d6c <__swbuf_r+0x74>
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d60:	4621      	mov	r1, r4
 8006d62:	4628      	mov	r0, r5
 8006d64:	f000 f806 	bl	8006d74 <__swsetup_r>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d0d5      	beq.n	8006d18 <__swbuf_r+0x20>
 8006d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d70:	e7f4      	b.n	8006d5c <__swbuf_r+0x64>
	...

08006d74 <__swsetup_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <__swsetup_r+0xac>)
 8006d78:	4605      	mov	r5, r0
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	b118      	cbz	r0, 8006d88 <__swsetup_r+0x14>
 8006d80:	6a03      	ldr	r3, [r0, #32]
 8006d82:	b90b      	cbnz	r3, 8006d88 <__swsetup_r+0x14>
 8006d84:	f7ff faae 	bl	80062e4 <__sinit>
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d8e:	0718      	lsls	r0, r3, #28
 8006d90:	d422      	bmi.n	8006dd8 <__swsetup_r+0x64>
 8006d92:	06d9      	lsls	r1, r3, #27
 8006d94:	d407      	bmi.n	8006da6 <__swsetup_r+0x32>
 8006d96:	2309      	movs	r3, #9
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	e034      	b.n	8006e10 <__swsetup_r+0x9c>
 8006da6:	0758      	lsls	r0, r3, #29
 8006da8:	d512      	bpl.n	8006dd0 <__swsetup_r+0x5c>
 8006daa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dac:	b141      	cbz	r1, 8006dc0 <__swsetup_r+0x4c>
 8006dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d002      	beq.n	8006dbc <__swsetup_r+0x48>
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7ff fbb8 	bl	800652c <_free_r>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dc6:	81a3      	strh	r3, [r4, #12]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6063      	str	r3, [r4, #4]
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f043 0308 	orr.w	r3, r3, #8
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	b94b      	cbnz	r3, 8006df0 <__swsetup_r+0x7c>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de6:	d003      	beq.n	8006df0 <__swsetup_r+0x7c>
 8006de8:	4621      	mov	r1, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 f884 	bl	8006ef8 <__smakebuf_r>
 8006df0:	89a0      	ldrh	r0, [r4, #12]
 8006df2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006df6:	f010 0301 	ands.w	r3, r0, #1
 8006dfa:	d00a      	beq.n	8006e12 <__swsetup_r+0x9e>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60a3      	str	r3, [r4, #8]
 8006e00:	6963      	ldr	r3, [r4, #20]
 8006e02:	425b      	negs	r3, r3
 8006e04:	61a3      	str	r3, [r4, #24]
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	b943      	cbnz	r3, 8006e1c <__swsetup_r+0xa8>
 8006e0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e0e:	d1c4      	bne.n	8006d9a <__swsetup_r+0x26>
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	0781      	lsls	r1, r0, #30
 8006e14:	bf58      	it	pl
 8006e16:	6963      	ldrpl	r3, [r4, #20]
 8006e18:	60a3      	str	r3, [r4, #8]
 8006e1a:	e7f4      	b.n	8006e06 <__swsetup_r+0x92>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e7f7      	b.n	8006e10 <__swsetup_r+0x9c>
 8006e20:	200000b8 	.word	0x200000b8

08006e24 <_raise_r>:
 8006e24:	291f      	cmp	r1, #31
 8006e26:	b538      	push	{r3, r4, r5, lr}
 8006e28:	4604      	mov	r4, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	d904      	bls.n	8006e38 <_raise_r+0x14>
 8006e2e:	2316      	movs	r3, #22
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	f04f 30ff 	mov.w	r0, #4294967295
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006e3a:	b112      	cbz	r2, 8006e42 <_raise_r+0x1e>
 8006e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e40:	b94b      	cbnz	r3, 8006e56 <_raise_r+0x32>
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 f830 	bl	8006ea8 <_getpid_r>
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e52:	f000 b817 	b.w	8006e84 <_kill_r>
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d00a      	beq.n	8006e70 <_raise_r+0x4c>
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	d103      	bne.n	8006e66 <_raise_r+0x42>
 8006e5e:	2316      	movs	r3, #22
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	2001      	movs	r0, #1
 8006e64:	e7e7      	b.n	8006e36 <_raise_r+0x12>
 8006e66:	2400      	movs	r4, #0
 8006e68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	4798      	blx	r3
 8006e70:	2000      	movs	r0, #0
 8006e72:	e7e0      	b.n	8006e36 <_raise_r+0x12>

08006e74 <raise>:
 8006e74:	4b02      	ldr	r3, [pc, #8]	; (8006e80 <raise+0xc>)
 8006e76:	4601      	mov	r1, r0
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	f7ff bfd3 	b.w	8006e24 <_raise_r>
 8006e7e:	bf00      	nop
 8006e80:	200000b8 	.word	0x200000b8

08006e84 <_kill_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d07      	ldr	r5, [pc, #28]	; (8006ea4 <_kill_r+0x20>)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	f7fc f8f7 	bl	8003084 <_kill>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	d102      	bne.n	8006ea0 <_kill_r+0x1c>
 8006e9a:	682b      	ldr	r3, [r5, #0]
 8006e9c:	b103      	cbz	r3, 8006ea0 <_kill_r+0x1c>
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200007e0 	.word	0x200007e0

08006ea8 <_getpid_r>:
 8006ea8:	f7fc b8e4 	b.w	8003074 <_getpid>

08006eac <__swhatbuf_r>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	460c      	mov	r4, r1
 8006eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	b096      	sub	sp, #88	; 0x58
 8006eb8:	4615      	mov	r5, r2
 8006eba:	461e      	mov	r6, r3
 8006ebc:	da0d      	bge.n	8006eda <__swhatbuf_r+0x2e>
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ec4:	f04f 0100 	mov.w	r1, #0
 8006ec8:	bf0c      	ite	eq
 8006eca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ece:	2340      	movne	r3, #64	; 0x40
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	6031      	str	r1, [r6, #0]
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	b016      	add	sp, #88	; 0x58
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
 8006eda:	466a      	mov	r2, sp
 8006edc:	f000 f848 	bl	8006f70 <_fstat_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	dbec      	blt.n	8006ebe <__swhatbuf_r+0x12>
 8006ee4:	9901      	ldr	r1, [sp, #4]
 8006ee6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006eea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006eee:	4259      	negs	r1, r3
 8006ef0:	4159      	adcs	r1, r3
 8006ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ef6:	e7eb      	b.n	8006ed0 <__swhatbuf_r+0x24>

08006ef8 <__smakebuf_r>:
 8006ef8:	898b      	ldrh	r3, [r1, #12]
 8006efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006efc:	079d      	lsls	r5, r3, #30
 8006efe:	4606      	mov	r6, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	d507      	bpl.n	8006f14 <__smakebuf_r+0x1c>
 8006f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	6123      	str	r3, [r4, #16]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	6163      	str	r3, [r4, #20]
 8006f10:	b002      	add	sp, #8
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	ab01      	add	r3, sp, #4
 8006f16:	466a      	mov	r2, sp
 8006f18:	f7ff ffc8 	bl	8006eac <__swhatbuf_r>
 8006f1c:	9900      	ldr	r1, [sp, #0]
 8006f1e:	4605      	mov	r5, r0
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff f889 	bl	8006038 <_malloc_r>
 8006f26:	b948      	cbnz	r0, 8006f3c <__smakebuf_r+0x44>
 8006f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2c:	059a      	lsls	r2, r3, #22
 8006f2e:	d4ef      	bmi.n	8006f10 <__smakebuf_r+0x18>
 8006f30:	f023 0303 	bic.w	r3, r3, #3
 8006f34:	f043 0302 	orr.w	r3, r3, #2
 8006f38:	81a3      	strh	r3, [r4, #12]
 8006f3a:	e7e3      	b.n	8006f04 <__smakebuf_r+0xc>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	6020      	str	r0, [r4, #0]
 8006f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	6163      	str	r3, [r4, #20]
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	6120      	str	r0, [r4, #16]
 8006f4e:	b15b      	cbz	r3, 8006f68 <__smakebuf_r+0x70>
 8006f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 f81d 	bl	8006f94 <_isatty_r>
 8006f5a:	b128      	cbz	r0, 8006f68 <__smakebuf_r+0x70>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	431d      	orrs	r5, r3
 8006f6c:	81a5      	strh	r5, [r4, #12]
 8006f6e:	e7cf      	b.n	8006f10 <__smakebuf_r+0x18>

08006f70 <_fstat_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	; (8006f90 <_fstat_r+0x20>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	f7fc f8e0 	bl	8003142 <_fstat>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	d102      	bne.n	8006f8c <_fstat_r+0x1c>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	b103      	cbz	r3, 8006f8c <_fstat_r+0x1c>
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
 8006f8e:	bf00      	nop
 8006f90:	200007e0 	.word	0x200007e0

08006f94 <_isatty_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d06      	ldr	r5, [pc, #24]	; (8006fb0 <_isatty_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fc f8df 	bl	8003162 <_isatty>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_isatty_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_isatty_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200007e0 	.word	0x200007e0
 8006fb4:	00000000 	.word	0x00000000

08006fb8 <exp>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	ed2d 8b02 	vpush	{d8}
 8006fbe:	ec55 4b10 	vmov	r4, r5, d0
 8006fc2:	f000 f905 	bl	80071d0 <__ieee754_exp>
 8006fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8006fca:	eef0 8a60 	vmov.f32	s17, s1
 8006fce:	ec45 4b10 	vmov	d0, r4, r5
 8006fd2:	f000 f8ef 	bl	80071b4 <finite>
 8006fd6:	b168      	cbz	r0, 8006ff4 <exp+0x3c>
 8006fd8:	a317      	add	r3, pc, #92	; (adr r3, 8007038 <exp+0x80>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fdb9 	bl	8000b58 <__aeabi_dcmpgt>
 8006fe6:	b160      	cbz	r0, 8007002 <exp+0x4a>
 8006fe8:	f7ff fa54 	bl	8006494 <__errno>
 8006fec:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8007028 <exp+0x70>
 8006ff0:	2322      	movs	r3, #34	; 0x22
 8006ff2:	6003      	str	r3, [r0, #0]
 8006ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ff8:	eef0 0a68 	vmov.f32	s1, s17
 8006ffc:	ecbd 8b02 	vpop	{d8}
 8007000:	bd38      	pop	{r3, r4, r5, pc}
 8007002:	a30f      	add	r3, pc, #60	; (adr r3, 8007040 <exp+0x88>)
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	4620      	mov	r0, r4
 800700a:	4629      	mov	r1, r5
 800700c:	f7f9 fd86 	bl	8000b1c <__aeabi_dcmplt>
 8007010:	2800      	cmp	r0, #0
 8007012:	d0ef      	beq.n	8006ff4 <exp+0x3c>
 8007014:	f7ff fa3e 	bl	8006494 <__errno>
 8007018:	2322      	movs	r3, #34	; 0x22
 800701a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8007030 <exp+0x78>
 800701e:	6003      	str	r3, [r0, #0]
 8007020:	e7e8      	b.n	8006ff4 <exp+0x3c>
 8007022:	bf00      	nop
 8007024:	f3af 8000 	nop.w
 8007028:	00000000 	.word	0x00000000
 800702c:	7ff00000 	.word	0x7ff00000
	...
 8007038:	fefa39ef 	.word	0xfefa39ef
 800703c:	40862e42 	.word	0x40862e42
 8007040:	d52d3051 	.word	0xd52d3051
 8007044:	c0874910 	.word	0xc0874910

08007048 <pow>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	ed2d 8b02 	vpush	{d8}
 800704e:	eeb0 8a40 	vmov.f32	s16, s0
 8007052:	eef0 8a60 	vmov.f32	s17, s1
 8007056:	ec55 4b11 	vmov	r4, r5, d1
 800705a:	f000 fa3d 	bl	80074d8 <__ieee754_pow>
 800705e:	4622      	mov	r2, r4
 8007060:	462b      	mov	r3, r5
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	ec57 6b10 	vmov	r6, r7, d0
 800706a:	f7f9 fd7f 	bl	8000b6c <__aeabi_dcmpun>
 800706e:	2800      	cmp	r0, #0
 8007070:	d13b      	bne.n	80070ea <pow+0xa2>
 8007072:	ec51 0b18 	vmov	r0, r1, d8
 8007076:	2200      	movs	r2, #0
 8007078:	2300      	movs	r3, #0
 800707a:	f7f9 fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800707e:	b1b8      	cbz	r0, 80070b0 <pow+0x68>
 8007080:	2200      	movs	r2, #0
 8007082:	2300      	movs	r3, #0
 8007084:	4620      	mov	r0, r4
 8007086:	4629      	mov	r1, r5
 8007088:	f7f9 fd3e 	bl	8000b08 <__aeabi_dcmpeq>
 800708c:	2800      	cmp	r0, #0
 800708e:	d146      	bne.n	800711e <pow+0xd6>
 8007090:	ec45 4b10 	vmov	d0, r4, r5
 8007094:	f000 f88e 	bl	80071b4 <finite>
 8007098:	b338      	cbz	r0, 80070ea <pow+0xa2>
 800709a:	2200      	movs	r2, #0
 800709c:	2300      	movs	r3, #0
 800709e:	4620      	mov	r0, r4
 80070a0:	4629      	mov	r1, r5
 80070a2:	f7f9 fd3b 	bl	8000b1c <__aeabi_dcmplt>
 80070a6:	b300      	cbz	r0, 80070ea <pow+0xa2>
 80070a8:	f7ff f9f4 	bl	8006494 <__errno>
 80070ac:	2322      	movs	r3, #34	; 0x22
 80070ae:	e01b      	b.n	80070e8 <pow+0xa0>
 80070b0:	ec47 6b10 	vmov	d0, r6, r7
 80070b4:	f000 f87e 	bl	80071b4 <finite>
 80070b8:	b9e0      	cbnz	r0, 80070f4 <pow+0xac>
 80070ba:	eeb0 0a48 	vmov.f32	s0, s16
 80070be:	eef0 0a68 	vmov.f32	s1, s17
 80070c2:	f000 f877 	bl	80071b4 <finite>
 80070c6:	b1a8      	cbz	r0, 80070f4 <pow+0xac>
 80070c8:	ec45 4b10 	vmov	d0, r4, r5
 80070cc:	f000 f872 	bl	80071b4 <finite>
 80070d0:	b180      	cbz	r0, 80070f4 <pow+0xac>
 80070d2:	4632      	mov	r2, r6
 80070d4:	463b      	mov	r3, r7
 80070d6:	4630      	mov	r0, r6
 80070d8:	4639      	mov	r1, r7
 80070da:	f7f9 fd47 	bl	8000b6c <__aeabi_dcmpun>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d0e2      	beq.n	80070a8 <pow+0x60>
 80070e2:	f7ff f9d7 	bl	8006494 <__errno>
 80070e6:	2321      	movs	r3, #33	; 0x21
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	ecbd 8b02 	vpop	{d8}
 80070ee:	ec47 6b10 	vmov	d0, r6, r7
 80070f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f4:	2200      	movs	r2, #0
 80070f6:	2300      	movs	r3, #0
 80070f8:	4630      	mov	r0, r6
 80070fa:	4639      	mov	r1, r7
 80070fc:	f7f9 fd04 	bl	8000b08 <__aeabi_dcmpeq>
 8007100:	2800      	cmp	r0, #0
 8007102:	d0f2      	beq.n	80070ea <pow+0xa2>
 8007104:	eeb0 0a48 	vmov.f32	s0, s16
 8007108:	eef0 0a68 	vmov.f32	s1, s17
 800710c:	f000 f852 	bl	80071b4 <finite>
 8007110:	2800      	cmp	r0, #0
 8007112:	d0ea      	beq.n	80070ea <pow+0xa2>
 8007114:	ec45 4b10 	vmov	d0, r4, r5
 8007118:	f000 f84c 	bl	80071b4 <finite>
 800711c:	e7c3      	b.n	80070a6 <pow+0x5e>
 800711e:	4f01      	ldr	r7, [pc, #4]	; (8007124 <pow+0xdc>)
 8007120:	2600      	movs	r6, #0
 8007122:	e7e2      	b.n	80070ea <pow+0xa2>
 8007124:	3ff00000 	.word	0x3ff00000

08007128 <sinf>:
 8007128:	ee10 3a10 	vmov	r3, s0
 800712c:	b507      	push	{r0, r1, r2, lr}
 800712e:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <sinf+0x84>)
 8007130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007134:	4293      	cmp	r3, r2
 8007136:	dc07      	bgt.n	8007148 <sinf+0x20>
 8007138:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80071b0 <sinf+0x88>
 800713c:	2000      	movs	r0, #0
 800713e:	b003      	add	sp, #12
 8007140:	f85d eb04 	ldr.w	lr, [sp], #4
 8007144:	f000 bf5a 	b.w	8007ffc <__kernel_sinf>
 8007148:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800714c:	db04      	blt.n	8007158 <sinf+0x30>
 800714e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007152:	b003      	add	sp, #12
 8007154:	f85d fb04 	ldr.w	pc, [sp], #4
 8007158:	4668      	mov	r0, sp
 800715a:	f000 ff97 	bl	800808c <__ieee754_rem_pio2f>
 800715e:	f000 0003 	and.w	r0, r0, #3
 8007162:	2801      	cmp	r0, #1
 8007164:	d00a      	beq.n	800717c <sinf+0x54>
 8007166:	2802      	cmp	r0, #2
 8007168:	d00f      	beq.n	800718a <sinf+0x62>
 800716a:	b9c0      	cbnz	r0, 800719e <sinf+0x76>
 800716c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007170:	ed9d 0a00 	vldr	s0, [sp]
 8007174:	2001      	movs	r0, #1
 8007176:	f000 ff41 	bl	8007ffc <__kernel_sinf>
 800717a:	e7ea      	b.n	8007152 <sinf+0x2a>
 800717c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007180:	ed9d 0a00 	vldr	s0, [sp]
 8007184:	f000 fedc 	bl	8007f40 <__kernel_cosf>
 8007188:	e7e3      	b.n	8007152 <sinf+0x2a>
 800718a:	eddd 0a01 	vldr	s1, [sp, #4]
 800718e:	ed9d 0a00 	vldr	s0, [sp]
 8007192:	2001      	movs	r0, #1
 8007194:	f000 ff32 	bl	8007ffc <__kernel_sinf>
 8007198:	eeb1 0a40 	vneg.f32	s0, s0
 800719c:	e7d9      	b.n	8007152 <sinf+0x2a>
 800719e:	eddd 0a01 	vldr	s1, [sp, #4]
 80071a2:	ed9d 0a00 	vldr	s0, [sp]
 80071a6:	f000 fecb 	bl	8007f40 <__kernel_cosf>
 80071aa:	e7f5      	b.n	8007198 <sinf+0x70>
 80071ac:	3f490fd8 	.word	0x3f490fd8
 80071b0:	00000000 	.word	0x00000000

080071b4 <finite>:
 80071b4:	b082      	sub	sp, #8
 80071b6:	ed8d 0b00 	vstr	d0, [sp]
 80071ba:	9801      	ldr	r0, [sp, #4]
 80071bc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80071c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80071c4:	0fc0      	lsrs	r0, r0, #31
 80071c6:	b002      	add	sp, #8
 80071c8:	4770      	bx	lr
 80071ca:	0000      	movs	r0, r0
 80071cc:	0000      	movs	r0, r0
	...

080071d0 <__ieee754_exp>:
 80071d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	ec55 4b10 	vmov	r4, r5, d0
 80071d8:	49b5      	ldr	r1, [pc, #724]	; (80074b0 <__ieee754_exp+0x2e0>)
 80071da:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80071de:	428a      	cmp	r2, r1
 80071e0:	ed2d 8b04 	vpush	{d8-d9}
 80071e4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80071e8:	d93b      	bls.n	8007262 <__ieee754_exp+0x92>
 80071ea:	49b2      	ldr	r1, [pc, #712]	; (80074b4 <__ieee754_exp+0x2e4>)
 80071ec:	428a      	cmp	r2, r1
 80071ee:	d916      	bls.n	800721e <__ieee754_exp+0x4e>
 80071f0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80071f4:	4323      	orrs	r3, r4
 80071f6:	ee10 2a10 	vmov	r2, s0
 80071fa:	d007      	beq.n	800720c <__ieee754_exp+0x3c>
 80071fc:	462b      	mov	r3, r5
 80071fe:	4620      	mov	r0, r4
 8007200:	4629      	mov	r1, r5
 8007202:	f7f9 f863 	bl	80002cc <__adddf3>
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
 800720a:	e002      	b.n	8007212 <__ieee754_exp+0x42>
 800720c:	b10e      	cbz	r6, 8007212 <__ieee754_exp+0x42>
 800720e:	2400      	movs	r4, #0
 8007210:	2500      	movs	r5, #0
 8007212:	ecbd 8b04 	vpop	{d8-d9}
 8007216:	ec45 4b10 	vmov	d0, r4, r5
 800721a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721e:	a38e      	add	r3, pc, #568	; (adr r3, 8007458 <__ieee754_exp+0x288>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	ee10 0a10 	vmov	r0, s0
 8007228:	4629      	mov	r1, r5
 800722a:	f7f9 fc95 	bl	8000b58 <__aeabi_dcmpgt>
 800722e:	4607      	mov	r7, r0
 8007230:	b130      	cbz	r0, 8007240 <__ieee754_exp+0x70>
 8007232:	ecbd 8b04 	vpop	{d8-d9}
 8007236:	2000      	movs	r0, #0
 8007238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	f001 b901 	b.w	8008442 <__math_oflow>
 8007240:	a387      	add	r3, pc, #540	; (adr r3, 8007460 <__ieee754_exp+0x290>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800724e:	2800      	cmp	r0, #0
 8007250:	f000 808b 	beq.w	800736a <__ieee754_exp+0x19a>
 8007254:	ecbd 8b04 	vpop	{d8-d9}
 8007258:	4638      	mov	r0, r7
 800725a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725e:	f001 b8e7 	b.w	8008430 <__math_uflow>
 8007262:	4b95      	ldr	r3, [pc, #596]	; (80074b8 <__ieee754_exp+0x2e8>)
 8007264:	429a      	cmp	r2, r3
 8007266:	f240 80ac 	bls.w	80073c2 <__ieee754_exp+0x1f2>
 800726a:	4b94      	ldr	r3, [pc, #592]	; (80074bc <__ieee754_exp+0x2ec>)
 800726c:	429a      	cmp	r2, r3
 800726e:	d87c      	bhi.n	800736a <__ieee754_exp+0x19a>
 8007270:	4b93      	ldr	r3, [pc, #588]	; (80074c0 <__ieee754_exp+0x2f0>)
 8007272:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727a:	ee10 0a10 	vmov	r0, s0
 800727e:	4629      	mov	r1, r5
 8007280:	f7f9 f822 	bl	80002c8 <__aeabi_dsub>
 8007284:	4b8f      	ldr	r3, [pc, #572]	; (80074c4 <__ieee754_exp+0x2f4>)
 8007286:	00f7      	lsls	r7, r6, #3
 8007288:	443b      	add	r3, r7
 800728a:	ed93 7b00 	vldr	d7, [r3]
 800728e:	f1c6 0a01 	rsb	sl, r6, #1
 8007292:	4680      	mov	r8, r0
 8007294:	4689      	mov	r9, r1
 8007296:	ebaa 0a06 	sub.w	sl, sl, r6
 800729a:	eeb0 8a47 	vmov.f32	s16, s14
 800729e:	eef0 8a67 	vmov.f32	s17, s15
 80072a2:	ec53 2b18 	vmov	r2, r3, d8
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	f7f9 f80d 	bl	80002c8 <__aeabi_dsub>
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f9 f9bd 	bl	8000638 <__aeabi_dmul>
 80072be:	a36a      	add	r3, pc, #424	; (adr r3, 8007468 <__ieee754_exp+0x298>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	4606      	mov	r6, r0
 80072c6:	460f      	mov	r7, r1
 80072c8:	f7f9 f9b6 	bl	8000638 <__aeabi_dmul>
 80072cc:	a368      	add	r3, pc, #416	; (adr r3, 8007470 <__ieee754_exp+0x2a0>)
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f7f8 fff9 	bl	80002c8 <__aeabi_dsub>
 80072d6:	4632      	mov	r2, r6
 80072d8:	463b      	mov	r3, r7
 80072da:	f7f9 f9ad 	bl	8000638 <__aeabi_dmul>
 80072de:	a366      	add	r3, pc, #408	; (adr r3, 8007478 <__ieee754_exp+0x2a8>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f7f8 fff2 	bl	80002cc <__adddf3>
 80072e8:	4632      	mov	r2, r6
 80072ea:	463b      	mov	r3, r7
 80072ec:	f7f9 f9a4 	bl	8000638 <__aeabi_dmul>
 80072f0:	a363      	add	r3, pc, #396	; (adr r3, 8007480 <__ieee754_exp+0x2b0>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f8 ffe7 	bl	80002c8 <__aeabi_dsub>
 80072fa:	4632      	mov	r2, r6
 80072fc:	463b      	mov	r3, r7
 80072fe:	f7f9 f99b 	bl	8000638 <__aeabi_dmul>
 8007302:	a361      	add	r3, pc, #388	; (adr r3, 8007488 <__ieee754_exp+0x2b8>)
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f7f8 ffe0 	bl	80002cc <__adddf3>
 800730c:	4632      	mov	r2, r6
 800730e:	463b      	mov	r3, r7
 8007310:	f7f9 f992 	bl	8000638 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4620      	mov	r0, r4
 800731a:	4629      	mov	r1, r5
 800731c:	f7f8 ffd4 	bl	80002c8 <__aeabi_dsub>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	4620      	mov	r0, r4
 800732a:	4629      	mov	r1, r5
 800732c:	f7f9 f984 	bl	8000638 <__aeabi_dmul>
 8007330:	ec41 0b19 	vmov	d9, r0, r1
 8007334:	f1ba 0f00 	cmp.w	sl, #0
 8007338:	d15d      	bne.n	80073f6 <__ieee754_exp+0x226>
 800733a:	2200      	movs	r2, #0
 800733c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007340:	4630      	mov	r0, r6
 8007342:	4639      	mov	r1, r7
 8007344:	f7f8 ffc0 	bl	80002c8 <__aeabi_dsub>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	ec51 0b19 	vmov	r0, r1, d9
 8007350:	f7f9 fa9c 	bl	800088c <__aeabi_ddiv>
 8007354:	4622      	mov	r2, r4
 8007356:	462b      	mov	r3, r5
 8007358:	f7f8 ffb6 	bl	80002c8 <__aeabi_dsub>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	2000      	movs	r0, #0
 8007362:	4959      	ldr	r1, [pc, #356]	; (80074c8 <__ieee754_exp+0x2f8>)
 8007364:	f7f8 ffb0 	bl	80002c8 <__aeabi_dsub>
 8007368:	e74d      	b.n	8007206 <__ieee754_exp+0x36>
 800736a:	4b58      	ldr	r3, [pc, #352]	; (80074cc <__ieee754_exp+0x2fc>)
 800736c:	4620      	mov	r0, r4
 800736e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007372:	4629      	mov	r1, r5
 8007374:	a346      	add	r3, pc, #280	; (adr r3, 8007490 <__ieee754_exp+0x2c0>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f9 f95d 	bl	8000638 <__aeabi_dmul>
 800737e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007382:	f7f8 ffa3 	bl	80002cc <__adddf3>
 8007386:	f7f9 fc07 	bl	8000b98 <__aeabi_d2iz>
 800738a:	4682      	mov	sl, r0
 800738c:	f7f9 f8ea 	bl	8000564 <__aeabi_i2d>
 8007390:	a341      	add	r3, pc, #260	; (adr r3, 8007498 <__ieee754_exp+0x2c8>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	4606      	mov	r6, r0
 8007398:	460f      	mov	r7, r1
 800739a:	f7f9 f94d 	bl	8000638 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4620      	mov	r0, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	f7f8 ff8f 	bl	80002c8 <__aeabi_dsub>
 80073aa:	a33d      	add	r3, pc, #244	; (adr r3, 80074a0 <__ieee754_exp+0x2d0>)
 80073ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b0:	4680      	mov	r8, r0
 80073b2:	4689      	mov	r9, r1
 80073b4:	4630      	mov	r0, r6
 80073b6:	4639      	mov	r1, r7
 80073b8:	f7f9 f93e 	bl	8000638 <__aeabi_dmul>
 80073bc:	ec41 0b18 	vmov	d8, r0, r1
 80073c0:	e76f      	b.n	80072a2 <__ieee754_exp+0xd2>
 80073c2:	4b43      	ldr	r3, [pc, #268]	; (80074d0 <__ieee754_exp+0x300>)
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d811      	bhi.n	80073ec <__ieee754_exp+0x21c>
 80073c8:	a337      	add	r3, pc, #220	; (adr r3, 80074a8 <__ieee754_exp+0x2d8>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	ee10 0a10 	vmov	r0, s0
 80073d2:	4629      	mov	r1, r5
 80073d4:	f7f8 ff7a 	bl	80002cc <__adddf3>
 80073d8:	4b3b      	ldr	r3, [pc, #236]	; (80074c8 <__ieee754_exp+0x2f8>)
 80073da:	2200      	movs	r2, #0
 80073dc:	f7f9 fbbc 	bl	8000b58 <__aeabi_dcmpgt>
 80073e0:	b138      	cbz	r0, 80073f2 <__ieee754_exp+0x222>
 80073e2:	4b39      	ldr	r3, [pc, #228]	; (80074c8 <__ieee754_exp+0x2f8>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	e70a      	b.n	8007202 <__ieee754_exp+0x32>
 80073ec:	f04f 0a00 	mov.w	sl, #0
 80073f0:	e75f      	b.n	80072b2 <__ieee754_exp+0xe2>
 80073f2:	4682      	mov	sl, r0
 80073f4:	e75d      	b.n	80072b2 <__ieee754_exp+0xe2>
 80073f6:	4632      	mov	r2, r6
 80073f8:	463b      	mov	r3, r7
 80073fa:	2000      	movs	r0, #0
 80073fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007400:	f7f8 ff62 	bl	80002c8 <__aeabi_dsub>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	ec51 0b19 	vmov	r0, r1, d9
 800740c:	f7f9 fa3e 	bl	800088c <__aeabi_ddiv>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	ec51 0b18 	vmov	r0, r1, d8
 8007418:	f7f8 ff56 	bl	80002c8 <__aeabi_dsub>
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	f7f8 ff52 	bl	80002c8 <__aeabi_dsub>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	2000      	movs	r0, #0
 800742a:	4927      	ldr	r1, [pc, #156]	; (80074c8 <__ieee754_exp+0x2f8>)
 800742c:	f7f8 ff4c 	bl	80002c8 <__aeabi_dsub>
 8007430:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007434:	4592      	cmp	sl, r2
 8007436:	db02      	blt.n	800743e <__ieee754_exp+0x26e>
 8007438:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800743c:	e6e3      	b.n	8007206 <__ieee754_exp+0x36>
 800743e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007442:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007446:	2200      	movs	r2, #0
 8007448:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800744c:	f7f9 f8f4 	bl	8000638 <__aeabi_dmul>
 8007450:	e6d9      	b.n	8007206 <__ieee754_exp+0x36>
 8007452:	bf00      	nop
 8007454:	f3af 8000 	nop.w
 8007458:	fefa39ef 	.word	0xfefa39ef
 800745c:	40862e42 	.word	0x40862e42
 8007460:	d52d3051 	.word	0xd52d3051
 8007464:	c0874910 	.word	0xc0874910
 8007468:	72bea4d0 	.word	0x72bea4d0
 800746c:	3e663769 	.word	0x3e663769
 8007470:	c5d26bf1 	.word	0xc5d26bf1
 8007474:	3ebbbd41 	.word	0x3ebbbd41
 8007478:	af25de2c 	.word	0xaf25de2c
 800747c:	3f11566a 	.word	0x3f11566a
 8007480:	16bebd93 	.word	0x16bebd93
 8007484:	3f66c16c 	.word	0x3f66c16c
 8007488:	5555553e 	.word	0x5555553e
 800748c:	3fc55555 	.word	0x3fc55555
 8007490:	652b82fe 	.word	0x652b82fe
 8007494:	3ff71547 	.word	0x3ff71547
 8007498:	fee00000 	.word	0xfee00000
 800749c:	3fe62e42 	.word	0x3fe62e42
 80074a0:	35793c76 	.word	0x35793c76
 80074a4:	3dea39ef 	.word	0x3dea39ef
 80074a8:	8800759c 	.word	0x8800759c
 80074ac:	7e37e43c 	.word	0x7e37e43c
 80074b0:	40862e41 	.word	0x40862e41
 80074b4:	7fefffff 	.word	0x7fefffff
 80074b8:	3fd62e42 	.word	0x3fd62e42
 80074bc:	3ff0a2b1 	.word	0x3ff0a2b1
 80074c0:	08008d80 	.word	0x08008d80
 80074c4:	08008d90 	.word	0x08008d90
 80074c8:	3ff00000 	.word	0x3ff00000
 80074cc:	08008d70 	.word	0x08008d70
 80074d0:	3defffff 	.word	0x3defffff
 80074d4:	00000000 	.word	0x00000000

080074d8 <__ieee754_pow>:
 80074d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074dc:	ed2d 8b06 	vpush	{d8-d10}
 80074e0:	b089      	sub	sp, #36	; 0x24
 80074e2:	ed8d 1b00 	vstr	d1, [sp]
 80074e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80074ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80074ee:	ea58 0102 	orrs.w	r1, r8, r2
 80074f2:	ec57 6b10 	vmov	r6, r7, d0
 80074f6:	d115      	bne.n	8007524 <__ieee754_pow+0x4c>
 80074f8:	19b3      	adds	r3, r6, r6
 80074fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80074fe:	4152      	adcs	r2, r2
 8007500:	4299      	cmp	r1, r3
 8007502:	4b89      	ldr	r3, [pc, #548]	; (8007728 <__ieee754_pow+0x250>)
 8007504:	4193      	sbcs	r3, r2
 8007506:	f080 84d1 	bcs.w	8007eac <__ieee754_pow+0x9d4>
 800750a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f8 fedb 	bl	80002cc <__adddf3>
 8007516:	ec41 0b10 	vmov	d0, r0, r1
 800751a:	b009      	add	sp, #36	; 0x24
 800751c:	ecbd 8b06 	vpop	{d8-d10}
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	4b81      	ldr	r3, [pc, #516]	; (800772c <__ieee754_pow+0x254>)
 8007526:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800752a:	429c      	cmp	r4, r3
 800752c:	ee10 aa10 	vmov	sl, s0
 8007530:	463d      	mov	r5, r7
 8007532:	dc06      	bgt.n	8007542 <__ieee754_pow+0x6a>
 8007534:	d101      	bne.n	800753a <__ieee754_pow+0x62>
 8007536:	2e00      	cmp	r6, #0
 8007538:	d1e7      	bne.n	800750a <__ieee754_pow+0x32>
 800753a:	4598      	cmp	r8, r3
 800753c:	dc01      	bgt.n	8007542 <__ieee754_pow+0x6a>
 800753e:	d10f      	bne.n	8007560 <__ieee754_pow+0x88>
 8007540:	b172      	cbz	r2, 8007560 <__ieee754_pow+0x88>
 8007542:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007546:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800754a:	ea55 050a 	orrs.w	r5, r5, sl
 800754e:	d1dc      	bne.n	800750a <__ieee754_pow+0x32>
 8007550:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007554:	18db      	adds	r3, r3, r3
 8007556:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800755a:	4152      	adcs	r2, r2
 800755c:	429d      	cmp	r5, r3
 800755e:	e7d0      	b.n	8007502 <__ieee754_pow+0x2a>
 8007560:	2d00      	cmp	r5, #0
 8007562:	da3b      	bge.n	80075dc <__ieee754_pow+0x104>
 8007564:	4b72      	ldr	r3, [pc, #456]	; (8007730 <__ieee754_pow+0x258>)
 8007566:	4598      	cmp	r8, r3
 8007568:	dc51      	bgt.n	800760e <__ieee754_pow+0x136>
 800756a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800756e:	4598      	cmp	r8, r3
 8007570:	f340 84ab 	ble.w	8007eca <__ieee754_pow+0x9f2>
 8007574:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007578:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800757c:	2b14      	cmp	r3, #20
 800757e:	dd0f      	ble.n	80075a0 <__ieee754_pow+0xc8>
 8007580:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007584:	fa22 f103 	lsr.w	r1, r2, r3
 8007588:	fa01 f303 	lsl.w	r3, r1, r3
 800758c:	4293      	cmp	r3, r2
 800758e:	f040 849c 	bne.w	8007eca <__ieee754_pow+0x9f2>
 8007592:	f001 0101 	and.w	r1, r1, #1
 8007596:	f1c1 0302 	rsb	r3, r1, #2
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	b182      	cbz	r2, 80075c0 <__ieee754_pow+0xe8>
 800759e:	e05f      	b.n	8007660 <__ieee754_pow+0x188>
 80075a0:	2a00      	cmp	r2, #0
 80075a2:	d15b      	bne.n	800765c <__ieee754_pow+0x184>
 80075a4:	f1c3 0314 	rsb	r3, r3, #20
 80075a8:	fa48 f103 	asr.w	r1, r8, r3
 80075ac:	fa01 f303 	lsl.w	r3, r1, r3
 80075b0:	4543      	cmp	r3, r8
 80075b2:	f040 8487 	bne.w	8007ec4 <__ieee754_pow+0x9ec>
 80075b6:	f001 0101 	and.w	r1, r1, #1
 80075ba:	f1c1 0302 	rsb	r3, r1, #2
 80075be:	9304      	str	r3, [sp, #16]
 80075c0:	4b5c      	ldr	r3, [pc, #368]	; (8007734 <__ieee754_pow+0x25c>)
 80075c2:	4598      	cmp	r8, r3
 80075c4:	d132      	bne.n	800762c <__ieee754_pow+0x154>
 80075c6:	f1b9 0f00 	cmp.w	r9, #0
 80075ca:	f280 8477 	bge.w	8007ebc <__ieee754_pow+0x9e4>
 80075ce:	4959      	ldr	r1, [pc, #356]	; (8007734 <__ieee754_pow+0x25c>)
 80075d0:	4632      	mov	r2, r6
 80075d2:	463b      	mov	r3, r7
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7f9 f959 	bl	800088c <__aeabi_ddiv>
 80075da:	e79c      	b.n	8007516 <__ieee754_pow+0x3e>
 80075dc:	2300      	movs	r3, #0
 80075de:	9304      	str	r3, [sp, #16]
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d13d      	bne.n	8007660 <__ieee754_pow+0x188>
 80075e4:	4b51      	ldr	r3, [pc, #324]	; (800772c <__ieee754_pow+0x254>)
 80075e6:	4598      	cmp	r8, r3
 80075e8:	d1ea      	bne.n	80075c0 <__ieee754_pow+0xe8>
 80075ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80075ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80075f2:	ea53 030a 	orrs.w	r3, r3, sl
 80075f6:	f000 8459 	beq.w	8007eac <__ieee754_pow+0x9d4>
 80075fa:	4b4f      	ldr	r3, [pc, #316]	; (8007738 <__ieee754_pow+0x260>)
 80075fc:	429c      	cmp	r4, r3
 80075fe:	dd08      	ble.n	8007612 <__ieee754_pow+0x13a>
 8007600:	f1b9 0f00 	cmp.w	r9, #0
 8007604:	f2c0 8456 	blt.w	8007eb4 <__ieee754_pow+0x9dc>
 8007608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800760c:	e783      	b.n	8007516 <__ieee754_pow+0x3e>
 800760e:	2302      	movs	r3, #2
 8007610:	e7e5      	b.n	80075de <__ieee754_pow+0x106>
 8007612:	f1b9 0f00 	cmp.w	r9, #0
 8007616:	f04f 0000 	mov.w	r0, #0
 800761a:	f04f 0100 	mov.w	r1, #0
 800761e:	f6bf af7a 	bge.w	8007516 <__ieee754_pow+0x3e>
 8007622:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007626:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800762a:	e774      	b.n	8007516 <__ieee754_pow+0x3e>
 800762c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007630:	d106      	bne.n	8007640 <__ieee754_pow+0x168>
 8007632:	4632      	mov	r2, r6
 8007634:	463b      	mov	r3, r7
 8007636:	4630      	mov	r0, r6
 8007638:	4639      	mov	r1, r7
 800763a:	f7f8 fffd 	bl	8000638 <__aeabi_dmul>
 800763e:	e76a      	b.n	8007516 <__ieee754_pow+0x3e>
 8007640:	4b3e      	ldr	r3, [pc, #248]	; (800773c <__ieee754_pow+0x264>)
 8007642:	4599      	cmp	r9, r3
 8007644:	d10c      	bne.n	8007660 <__ieee754_pow+0x188>
 8007646:	2d00      	cmp	r5, #0
 8007648:	db0a      	blt.n	8007660 <__ieee754_pow+0x188>
 800764a:	ec47 6b10 	vmov	d0, r6, r7
 800764e:	b009      	add	sp, #36	; 0x24
 8007650:	ecbd 8b06 	vpop	{d8-d10}
 8007654:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007658:	f000 befc 	b.w	8008454 <__ieee754_sqrt>
 800765c:	2300      	movs	r3, #0
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	ec47 6b10 	vmov	d0, r6, r7
 8007664:	f000 fc62 	bl	8007f2c <fabs>
 8007668:	ec51 0b10 	vmov	r0, r1, d0
 800766c:	f1ba 0f00 	cmp.w	sl, #0
 8007670:	d129      	bne.n	80076c6 <__ieee754_pow+0x1ee>
 8007672:	b124      	cbz	r4, 800767e <__ieee754_pow+0x1a6>
 8007674:	4b2f      	ldr	r3, [pc, #188]	; (8007734 <__ieee754_pow+0x25c>)
 8007676:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800767a:	429a      	cmp	r2, r3
 800767c:	d123      	bne.n	80076c6 <__ieee754_pow+0x1ee>
 800767e:	f1b9 0f00 	cmp.w	r9, #0
 8007682:	da05      	bge.n	8007690 <__ieee754_pow+0x1b8>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	2000      	movs	r0, #0
 800768a:	492a      	ldr	r1, [pc, #168]	; (8007734 <__ieee754_pow+0x25c>)
 800768c:	f7f9 f8fe 	bl	800088c <__aeabi_ddiv>
 8007690:	2d00      	cmp	r5, #0
 8007692:	f6bf af40 	bge.w	8007516 <__ieee754_pow+0x3e>
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800769c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80076a0:	431c      	orrs	r4, r3
 80076a2:	d108      	bne.n	80076b6 <__ieee754_pow+0x1de>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4610      	mov	r0, r2
 80076aa:	4619      	mov	r1, r3
 80076ac:	f7f8 fe0c 	bl	80002c8 <__aeabi_dsub>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	e78f      	b.n	80075d6 <__ieee754_pow+0xfe>
 80076b6:	9b04      	ldr	r3, [sp, #16]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	f47f af2c 	bne.w	8007516 <__ieee754_pow+0x3e>
 80076be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076c2:	4619      	mov	r1, r3
 80076c4:	e727      	b.n	8007516 <__ieee754_pow+0x3e>
 80076c6:	0feb      	lsrs	r3, r5, #31
 80076c8:	3b01      	subs	r3, #1
 80076ca:	9306      	str	r3, [sp, #24]
 80076cc:	9a06      	ldr	r2, [sp, #24]
 80076ce:	9b04      	ldr	r3, [sp, #16]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	d102      	bne.n	80076da <__ieee754_pow+0x202>
 80076d4:	4632      	mov	r2, r6
 80076d6:	463b      	mov	r3, r7
 80076d8:	e7e6      	b.n	80076a8 <__ieee754_pow+0x1d0>
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <__ieee754_pow+0x268>)
 80076dc:	4598      	cmp	r8, r3
 80076de:	f340 80fb 	ble.w	80078d8 <__ieee754_pow+0x400>
 80076e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80076e6:	4598      	cmp	r8, r3
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <__ieee754_pow+0x260>)
 80076ea:	dd0c      	ble.n	8007706 <__ieee754_pow+0x22e>
 80076ec:	429c      	cmp	r4, r3
 80076ee:	dc0f      	bgt.n	8007710 <__ieee754_pow+0x238>
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	da0f      	bge.n	8007716 <__ieee754_pow+0x23e>
 80076f6:	2000      	movs	r0, #0
 80076f8:	b009      	add	sp, #36	; 0x24
 80076fa:	ecbd 8b06 	vpop	{d8-d10}
 80076fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007702:	f000 be9e 	b.w	8008442 <__math_oflow>
 8007706:	429c      	cmp	r4, r3
 8007708:	dbf2      	blt.n	80076f0 <__ieee754_pow+0x218>
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <__ieee754_pow+0x25c>)
 800770c:	429c      	cmp	r4, r3
 800770e:	dd19      	ble.n	8007744 <__ieee754_pow+0x26c>
 8007710:	f1b9 0f00 	cmp.w	r9, #0
 8007714:	dcef      	bgt.n	80076f6 <__ieee754_pow+0x21e>
 8007716:	2000      	movs	r0, #0
 8007718:	b009      	add	sp, #36	; 0x24
 800771a:	ecbd 8b06 	vpop	{d8-d10}
 800771e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007722:	f000 be85 	b.w	8008430 <__math_uflow>
 8007726:	bf00      	nop
 8007728:	fff00000 	.word	0xfff00000
 800772c:	7ff00000 	.word	0x7ff00000
 8007730:	433fffff 	.word	0x433fffff
 8007734:	3ff00000 	.word	0x3ff00000
 8007738:	3fefffff 	.word	0x3fefffff
 800773c:	3fe00000 	.word	0x3fe00000
 8007740:	41e00000 	.word	0x41e00000
 8007744:	4b60      	ldr	r3, [pc, #384]	; (80078c8 <__ieee754_pow+0x3f0>)
 8007746:	2200      	movs	r2, #0
 8007748:	f7f8 fdbe 	bl	80002c8 <__aeabi_dsub>
 800774c:	a354      	add	r3, pc, #336	; (adr r3, 80078a0 <__ieee754_pow+0x3c8>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	4604      	mov	r4, r0
 8007754:	460d      	mov	r5, r1
 8007756:	f7f8 ff6f 	bl	8000638 <__aeabi_dmul>
 800775a:	a353      	add	r3, pc, #332	; (adr r3, 80078a8 <__ieee754_pow+0x3d0>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	4606      	mov	r6, r0
 8007762:	460f      	mov	r7, r1
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 ff66 	bl	8000638 <__aeabi_dmul>
 800776c:	4b57      	ldr	r3, [pc, #348]	; (80078cc <__ieee754_pow+0x3f4>)
 800776e:	4682      	mov	sl, r0
 8007770:	468b      	mov	fp, r1
 8007772:	2200      	movs	r2, #0
 8007774:	4620      	mov	r0, r4
 8007776:	4629      	mov	r1, r5
 8007778:	f7f8 ff5e 	bl	8000638 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	a14b      	add	r1, pc, #300	; (adr r1, 80078b0 <__ieee754_pow+0x3d8>)
 8007782:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007786:	f7f8 fd9f 	bl	80002c8 <__aeabi_dsub>
 800778a:	4622      	mov	r2, r4
 800778c:	462b      	mov	r3, r5
 800778e:	f7f8 ff53 	bl	8000638 <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	2000      	movs	r0, #0
 8007798:	494d      	ldr	r1, [pc, #308]	; (80078d0 <__ieee754_pow+0x3f8>)
 800779a:	f7f8 fd95 	bl	80002c8 <__aeabi_dsub>
 800779e:	4622      	mov	r2, r4
 80077a0:	4680      	mov	r8, r0
 80077a2:	4689      	mov	r9, r1
 80077a4:	462b      	mov	r3, r5
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 ff45 	bl	8000638 <__aeabi_dmul>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f8 ff3f 	bl	8000638 <__aeabi_dmul>
 80077ba:	a33f      	add	r3, pc, #252	; (adr r3, 80078b8 <__ieee754_pow+0x3e0>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 ff3a 	bl	8000638 <__aeabi_dmul>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4650      	mov	r0, sl
 80077ca:	4659      	mov	r1, fp
 80077cc:	f7f8 fd7c 	bl	80002c8 <__aeabi_dsub>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4680      	mov	r8, r0
 80077d6:	4689      	mov	r9, r1
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f8 fd76 	bl	80002cc <__adddf3>
 80077e0:	2000      	movs	r0, #0
 80077e2:	4632      	mov	r2, r6
 80077e4:	463b      	mov	r3, r7
 80077e6:	4604      	mov	r4, r0
 80077e8:	460d      	mov	r5, r1
 80077ea:	f7f8 fd6d 	bl	80002c8 <__aeabi_dsub>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4640      	mov	r0, r8
 80077f4:	4649      	mov	r1, r9
 80077f6:	f7f8 fd67 	bl	80002c8 <__aeabi_dsub>
 80077fa:	9b04      	ldr	r3, [sp, #16]
 80077fc:	9a06      	ldr	r2, [sp, #24]
 80077fe:	3b01      	subs	r3, #1
 8007800:	4313      	orrs	r3, r2
 8007802:	4682      	mov	sl, r0
 8007804:	468b      	mov	fp, r1
 8007806:	f040 81e7 	bne.w	8007bd8 <__ieee754_pow+0x700>
 800780a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80078c0 <__ieee754_pow+0x3e8>
 800780e:	eeb0 8a47 	vmov.f32	s16, s14
 8007812:	eef0 8a67 	vmov.f32	s17, s15
 8007816:	e9dd 6700 	ldrd	r6, r7, [sp]
 800781a:	2600      	movs	r6, #0
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007824:	f7f8 fd50 	bl	80002c8 <__aeabi_dsub>
 8007828:	4622      	mov	r2, r4
 800782a:	462b      	mov	r3, r5
 800782c:	f7f8 ff04 	bl	8000638 <__aeabi_dmul>
 8007830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007834:	4680      	mov	r8, r0
 8007836:	4689      	mov	r9, r1
 8007838:	4650      	mov	r0, sl
 800783a:	4659      	mov	r1, fp
 800783c:	f7f8 fefc 	bl	8000638 <__aeabi_dmul>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f8 fd40 	bl	80002cc <__adddf3>
 800784c:	4632      	mov	r2, r6
 800784e:	463b      	mov	r3, r7
 8007850:	4680      	mov	r8, r0
 8007852:	4689      	mov	r9, r1
 8007854:	4620      	mov	r0, r4
 8007856:	4629      	mov	r1, r5
 8007858:	f7f8 feee 	bl	8000638 <__aeabi_dmul>
 800785c:	460b      	mov	r3, r1
 800785e:	4604      	mov	r4, r0
 8007860:	460d      	mov	r5, r1
 8007862:	4602      	mov	r2, r0
 8007864:	4649      	mov	r1, r9
 8007866:	4640      	mov	r0, r8
 8007868:	f7f8 fd30 	bl	80002cc <__adddf3>
 800786c:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <__ieee754_pow+0x3fc>)
 800786e:	4299      	cmp	r1, r3
 8007870:	ec45 4b19 	vmov	d9, r4, r5
 8007874:	4606      	mov	r6, r0
 8007876:	460f      	mov	r7, r1
 8007878:	468b      	mov	fp, r1
 800787a:	f340 82f0 	ble.w	8007e5e <__ieee754_pow+0x986>
 800787e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007882:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007886:	4303      	orrs	r3, r0
 8007888:	f000 81e4 	beq.w	8007c54 <__ieee754_pow+0x77c>
 800788c:	ec51 0b18 	vmov	r0, r1, d8
 8007890:	2200      	movs	r2, #0
 8007892:	2300      	movs	r3, #0
 8007894:	f7f9 f942 	bl	8000b1c <__aeabi_dcmplt>
 8007898:	3800      	subs	r0, #0
 800789a:	bf18      	it	ne
 800789c:	2001      	movne	r0, #1
 800789e:	e72b      	b.n	80076f8 <__ieee754_pow+0x220>
 80078a0:	60000000 	.word	0x60000000
 80078a4:	3ff71547 	.word	0x3ff71547
 80078a8:	f85ddf44 	.word	0xf85ddf44
 80078ac:	3e54ae0b 	.word	0x3e54ae0b
 80078b0:	55555555 	.word	0x55555555
 80078b4:	3fd55555 	.word	0x3fd55555
 80078b8:	652b82fe 	.word	0x652b82fe
 80078bc:	3ff71547 	.word	0x3ff71547
 80078c0:	00000000 	.word	0x00000000
 80078c4:	bff00000 	.word	0xbff00000
 80078c8:	3ff00000 	.word	0x3ff00000
 80078cc:	3fd00000 	.word	0x3fd00000
 80078d0:	3fe00000 	.word	0x3fe00000
 80078d4:	408fffff 	.word	0x408fffff
 80078d8:	4bd5      	ldr	r3, [pc, #852]	; (8007c30 <__ieee754_pow+0x758>)
 80078da:	402b      	ands	r3, r5
 80078dc:	2200      	movs	r2, #0
 80078de:	b92b      	cbnz	r3, 80078ec <__ieee754_pow+0x414>
 80078e0:	4bd4      	ldr	r3, [pc, #848]	; (8007c34 <__ieee754_pow+0x75c>)
 80078e2:	f7f8 fea9 	bl	8000638 <__aeabi_dmul>
 80078e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80078ea:	460c      	mov	r4, r1
 80078ec:	1523      	asrs	r3, r4, #20
 80078ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80078f2:	4413      	add	r3, r2
 80078f4:	9305      	str	r3, [sp, #20]
 80078f6:	4bd0      	ldr	r3, [pc, #832]	; (8007c38 <__ieee754_pow+0x760>)
 80078f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80078fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007900:	429c      	cmp	r4, r3
 8007902:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007906:	dd08      	ble.n	800791a <__ieee754_pow+0x442>
 8007908:	4bcc      	ldr	r3, [pc, #816]	; (8007c3c <__ieee754_pow+0x764>)
 800790a:	429c      	cmp	r4, r3
 800790c:	f340 8162 	ble.w	8007bd4 <__ieee754_pow+0x6fc>
 8007910:	9b05      	ldr	r3, [sp, #20]
 8007912:	3301      	adds	r3, #1
 8007914:	9305      	str	r3, [sp, #20]
 8007916:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800791a:	2400      	movs	r4, #0
 800791c:	00e3      	lsls	r3, r4, #3
 800791e:	9307      	str	r3, [sp, #28]
 8007920:	4bc7      	ldr	r3, [pc, #796]	; (8007c40 <__ieee754_pow+0x768>)
 8007922:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007926:	ed93 7b00 	vldr	d7, [r3]
 800792a:	4629      	mov	r1, r5
 800792c:	ec53 2b17 	vmov	r2, r3, d7
 8007930:	eeb0 9a47 	vmov.f32	s18, s14
 8007934:	eef0 9a67 	vmov.f32	s19, s15
 8007938:	4682      	mov	sl, r0
 800793a:	f7f8 fcc5 	bl	80002c8 <__aeabi_dsub>
 800793e:	4652      	mov	r2, sl
 8007940:	4606      	mov	r6, r0
 8007942:	460f      	mov	r7, r1
 8007944:	462b      	mov	r3, r5
 8007946:	ec51 0b19 	vmov	r0, r1, d9
 800794a:	f7f8 fcbf 	bl	80002cc <__adddf3>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	2000      	movs	r0, #0
 8007954:	49bb      	ldr	r1, [pc, #748]	; (8007c44 <__ieee754_pow+0x76c>)
 8007956:	f7f8 ff99 	bl	800088c <__aeabi_ddiv>
 800795a:	ec41 0b1a 	vmov	d10, r0, r1
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7f8 fe67 	bl	8000638 <__aeabi_dmul>
 800796a:	2300      	movs	r3, #0
 800796c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007970:	9302      	str	r3, [sp, #8]
 8007972:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007976:	46ab      	mov	fp, r5
 8007978:	106d      	asrs	r5, r5, #1
 800797a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800797e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007982:	ec41 0b18 	vmov	d8, r0, r1
 8007986:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800798a:	2200      	movs	r2, #0
 800798c:	4640      	mov	r0, r8
 800798e:	4649      	mov	r1, r9
 8007990:	4614      	mov	r4, r2
 8007992:	461d      	mov	r5, r3
 8007994:	f7f8 fe50 	bl	8000638 <__aeabi_dmul>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4630      	mov	r0, r6
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f8 fc92 	bl	80002c8 <__aeabi_dsub>
 80079a4:	ec53 2b19 	vmov	r2, r3, d9
 80079a8:	4606      	mov	r6, r0
 80079aa:	460f      	mov	r7, r1
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f8 fc8a 	bl	80002c8 <__aeabi_dsub>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4650      	mov	r0, sl
 80079ba:	4659      	mov	r1, fp
 80079bc:	f7f8 fc84 	bl	80002c8 <__aeabi_dsub>
 80079c0:	4642      	mov	r2, r8
 80079c2:	464b      	mov	r3, r9
 80079c4:	f7f8 fe38 	bl	8000638 <__aeabi_dmul>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4630      	mov	r0, r6
 80079ce:	4639      	mov	r1, r7
 80079d0:	f7f8 fc7a 	bl	80002c8 <__aeabi_dsub>
 80079d4:	ec53 2b1a 	vmov	r2, r3, d10
 80079d8:	f7f8 fe2e 	bl	8000638 <__aeabi_dmul>
 80079dc:	ec53 2b18 	vmov	r2, r3, d8
 80079e0:	ec41 0b19 	vmov	d9, r0, r1
 80079e4:	ec51 0b18 	vmov	r0, r1, d8
 80079e8:	f7f8 fe26 	bl	8000638 <__aeabi_dmul>
 80079ec:	a37c      	add	r3, pc, #496	; (adr r3, 8007be0 <__ieee754_pow+0x708>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	4604      	mov	r4, r0
 80079f4:	460d      	mov	r5, r1
 80079f6:	f7f8 fe1f 	bl	8000638 <__aeabi_dmul>
 80079fa:	a37b      	add	r3, pc, #492	; (adr r3, 8007be8 <__ieee754_pow+0x710>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 fc64 	bl	80002cc <__adddf3>
 8007a04:	4622      	mov	r2, r4
 8007a06:	462b      	mov	r3, r5
 8007a08:	f7f8 fe16 	bl	8000638 <__aeabi_dmul>
 8007a0c:	a378      	add	r3, pc, #480	; (adr r3, 8007bf0 <__ieee754_pow+0x718>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fc5b 	bl	80002cc <__adddf3>
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f7f8 fe0d 	bl	8000638 <__aeabi_dmul>
 8007a1e:	a376      	add	r3, pc, #472	; (adr r3, 8007bf8 <__ieee754_pow+0x720>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fc52 	bl	80002cc <__adddf3>
 8007a28:	4622      	mov	r2, r4
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	f7f8 fe04 	bl	8000638 <__aeabi_dmul>
 8007a30:	a373      	add	r3, pc, #460	; (adr r3, 8007c00 <__ieee754_pow+0x728>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fc49 	bl	80002cc <__adddf3>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	f7f8 fdfb 	bl	8000638 <__aeabi_dmul>
 8007a42:	a371      	add	r3, pc, #452	; (adr r3, 8007c08 <__ieee754_pow+0x730>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fc40 	bl	80002cc <__adddf3>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	4606      	mov	r6, r0
 8007a50:	460f      	mov	r7, r1
 8007a52:	462b      	mov	r3, r5
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fdee 	bl	8000638 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 fde8 	bl	8000638 <__aeabi_dmul>
 8007a68:	4642      	mov	r2, r8
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	460d      	mov	r5, r1
 8007a6e:	464b      	mov	r3, r9
 8007a70:	ec51 0b18 	vmov	r0, r1, d8
 8007a74:	f7f8 fc2a 	bl	80002cc <__adddf3>
 8007a78:	ec53 2b19 	vmov	r2, r3, d9
 8007a7c:	f7f8 fddc 	bl	8000638 <__aeabi_dmul>
 8007a80:	4622      	mov	r2, r4
 8007a82:	462b      	mov	r3, r5
 8007a84:	f7f8 fc22 	bl	80002cc <__adddf3>
 8007a88:	4642      	mov	r2, r8
 8007a8a:	4682      	mov	sl, r0
 8007a8c:	468b      	mov	fp, r1
 8007a8e:	464b      	mov	r3, r9
 8007a90:	4640      	mov	r0, r8
 8007a92:	4649      	mov	r1, r9
 8007a94:	f7f8 fdd0 	bl	8000638 <__aeabi_dmul>
 8007a98:	4b6b      	ldr	r3, [pc, #428]	; (8007c48 <__ieee754_pow+0x770>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	460f      	mov	r7, r1
 8007aa0:	f7f8 fc14 	bl	80002cc <__adddf3>
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	465b      	mov	r3, fp
 8007aa8:	f7f8 fc10 	bl	80002cc <__adddf3>
 8007aac:	2000      	movs	r0, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	f7f8 fdbd 	bl	8000638 <__aeabi_dmul>
 8007abe:	4b62      	ldr	r3, [pc, #392]	; (8007c48 <__ieee754_pow+0x770>)
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	4689      	mov	r9, r1
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f8 fbfd 	bl	80002c8 <__aeabi_dsub>
 8007ace:	4632      	mov	r2, r6
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	f7f8 fbf9 	bl	80002c8 <__aeabi_dsub>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4650      	mov	r0, sl
 8007adc:	4659      	mov	r1, fp
 8007ade:	f7f8 fbf3 	bl	80002c8 <__aeabi_dsub>
 8007ae2:	ec53 2b18 	vmov	r2, r3, d8
 8007ae6:	f7f8 fda7 	bl	8000638 <__aeabi_dmul>
 8007aea:	4622      	mov	r2, r4
 8007aec:	4606      	mov	r6, r0
 8007aee:	460f      	mov	r7, r1
 8007af0:	462b      	mov	r3, r5
 8007af2:	ec51 0b19 	vmov	r0, r1, d9
 8007af6:	f7f8 fd9f 	bl	8000638 <__aeabi_dmul>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4630      	mov	r0, r6
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f8 fbe3 	bl	80002cc <__adddf3>
 8007b06:	4606      	mov	r6, r0
 8007b08:	460f      	mov	r7, r1
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f7f8 fbdb 	bl	80002cc <__adddf3>
 8007b16:	a33e      	add	r3, pc, #248	; (adr r3, 8007c10 <__ieee754_pow+0x738>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	460d      	mov	r5, r1
 8007b22:	f7f8 fd89 	bl	8000638 <__aeabi_dmul>
 8007b26:	4642      	mov	r2, r8
 8007b28:	ec41 0b18 	vmov	d8, r0, r1
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fbc9 	bl	80002c8 <__aeabi_dsub>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 fbc3 	bl	80002c8 <__aeabi_dsub>
 8007b42:	a335      	add	r3, pc, #212	; (adr r3, 8007c18 <__ieee754_pow+0x740>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	f7f8 fd76 	bl	8000638 <__aeabi_dmul>
 8007b4c:	a334      	add	r3, pc, #208	; (adr r3, 8007c20 <__ieee754_pow+0x748>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	4606      	mov	r6, r0
 8007b54:	460f      	mov	r7, r1
 8007b56:	4620      	mov	r0, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	f7f8 fd6d 	bl	8000638 <__aeabi_dmul>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4630      	mov	r0, r6
 8007b64:	4639      	mov	r1, r7
 8007b66:	f7f8 fbb1 	bl	80002cc <__adddf3>
 8007b6a:	9a07      	ldr	r2, [sp, #28]
 8007b6c:	4b37      	ldr	r3, [pc, #220]	; (8007c4c <__ieee754_pow+0x774>)
 8007b6e:	4413      	add	r3, r2
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	f7f8 fbaa 	bl	80002cc <__adddf3>
 8007b78:	4682      	mov	sl, r0
 8007b7a:	9805      	ldr	r0, [sp, #20]
 8007b7c:	468b      	mov	fp, r1
 8007b7e:	f7f8 fcf1 	bl	8000564 <__aeabi_i2d>
 8007b82:	9a07      	ldr	r2, [sp, #28]
 8007b84:	4b32      	ldr	r3, [pc, #200]	; (8007c50 <__ieee754_pow+0x778>)
 8007b86:	4413      	add	r3, r2
 8007b88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	460f      	mov	r7, r1
 8007b90:	4652      	mov	r2, sl
 8007b92:	465b      	mov	r3, fp
 8007b94:	ec51 0b18 	vmov	r0, r1, d8
 8007b98:	f7f8 fb98 	bl	80002cc <__adddf3>
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	f7f8 fb94 	bl	80002cc <__adddf3>
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	f7f8 fb90 	bl	80002cc <__adddf3>
 8007bac:	2000      	movs	r0, #0
 8007bae:	4632      	mov	r2, r6
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	f7f8 fb87 	bl	80002c8 <__aeabi_dsub>
 8007bba:	4642      	mov	r2, r8
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	f7f8 fb83 	bl	80002c8 <__aeabi_dsub>
 8007bc2:	ec53 2b18 	vmov	r2, r3, d8
 8007bc6:	f7f8 fb7f 	bl	80002c8 <__aeabi_dsub>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4650      	mov	r0, sl
 8007bd0:	4659      	mov	r1, fp
 8007bd2:	e610      	b.n	80077f6 <__ieee754_pow+0x31e>
 8007bd4:	2401      	movs	r4, #1
 8007bd6:	e6a1      	b.n	800791c <__ieee754_pow+0x444>
 8007bd8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007c28 <__ieee754_pow+0x750>
 8007bdc:	e617      	b.n	800780e <__ieee754_pow+0x336>
 8007bde:	bf00      	nop
 8007be0:	4a454eef 	.word	0x4a454eef
 8007be4:	3fca7e28 	.word	0x3fca7e28
 8007be8:	93c9db65 	.word	0x93c9db65
 8007bec:	3fcd864a 	.word	0x3fcd864a
 8007bf0:	a91d4101 	.word	0xa91d4101
 8007bf4:	3fd17460 	.word	0x3fd17460
 8007bf8:	518f264d 	.word	0x518f264d
 8007bfc:	3fd55555 	.word	0x3fd55555
 8007c00:	db6fabff 	.word	0xdb6fabff
 8007c04:	3fdb6db6 	.word	0x3fdb6db6
 8007c08:	33333303 	.word	0x33333303
 8007c0c:	3fe33333 	.word	0x3fe33333
 8007c10:	e0000000 	.word	0xe0000000
 8007c14:	3feec709 	.word	0x3feec709
 8007c18:	dc3a03fd 	.word	0xdc3a03fd
 8007c1c:	3feec709 	.word	0x3feec709
 8007c20:	145b01f5 	.word	0x145b01f5
 8007c24:	be3e2fe0 	.word	0xbe3e2fe0
 8007c28:	00000000 	.word	0x00000000
 8007c2c:	3ff00000 	.word	0x3ff00000
 8007c30:	7ff00000 	.word	0x7ff00000
 8007c34:	43400000 	.word	0x43400000
 8007c38:	0003988e 	.word	0x0003988e
 8007c3c:	000bb679 	.word	0x000bb679
 8007c40:	08008da0 	.word	0x08008da0
 8007c44:	3ff00000 	.word	0x3ff00000
 8007c48:	40080000 	.word	0x40080000
 8007c4c:	08008dc0 	.word	0x08008dc0
 8007c50:	08008db0 	.word	0x08008db0
 8007c54:	a3b3      	add	r3, pc, #716	; (adr r3, 8007f24 <__ieee754_pow+0xa4c>)
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	f7f8 fb35 	bl	80002cc <__adddf3>
 8007c62:	4622      	mov	r2, r4
 8007c64:	ec41 0b1a 	vmov	d10, r0, r1
 8007c68:	462b      	mov	r3, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	f7f8 fb2b 	bl	80002c8 <__aeabi_dsub>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	ec51 0b1a 	vmov	r0, r1, d10
 8007c7a:	f7f8 ff6d 	bl	8000b58 <__aeabi_dcmpgt>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f47f ae04 	bne.w	800788c <__ieee754_pow+0x3b4>
 8007c84:	4aa2      	ldr	r2, [pc, #648]	; (8007f10 <__ieee754_pow+0xa38>)
 8007c86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	f340 8107 	ble.w	8007e9e <__ieee754_pow+0x9c6>
 8007c90:	151b      	asrs	r3, r3, #20
 8007c92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007c96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007c9a:	fa4a fa03 	asr.w	sl, sl, r3
 8007c9e:	44da      	add	sl, fp
 8007ca0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007ca4:	489b      	ldr	r0, [pc, #620]	; (8007f14 <__ieee754_pow+0xa3c>)
 8007ca6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007caa:	4108      	asrs	r0, r1
 8007cac:	ea00 030a 	and.w	r3, r0, sl
 8007cb0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007cb4:	f1c1 0114 	rsb	r1, r1, #20
 8007cb8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007cbc:	fa4a fa01 	asr.w	sl, sl, r1
 8007cc0:	f1bb 0f00 	cmp.w	fp, #0
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	4620      	mov	r0, r4
 8007cca:	4629      	mov	r1, r5
 8007ccc:	bfb8      	it	lt
 8007cce:	f1ca 0a00 	rsblt	sl, sl, #0
 8007cd2:	f7f8 faf9 	bl	80002c8 <__aeabi_dsub>
 8007cd6:	ec41 0b19 	vmov	d9, r0, r1
 8007cda:	4642      	mov	r2, r8
 8007cdc:	464b      	mov	r3, r9
 8007cde:	ec51 0b19 	vmov	r0, r1, d9
 8007ce2:	f7f8 faf3 	bl	80002cc <__adddf3>
 8007ce6:	a37a      	add	r3, pc, #488	; (adr r3, 8007ed0 <__ieee754_pow+0x9f8>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	2000      	movs	r0, #0
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	f7f8 fca1 	bl	8000638 <__aeabi_dmul>
 8007cf6:	ec53 2b19 	vmov	r2, r3, d9
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	f7f8 fae1 	bl	80002c8 <__aeabi_dsub>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	f7f8 fadb 	bl	80002c8 <__aeabi_dsub>
 8007d12:	a371      	add	r3, pc, #452	; (adr r3, 8007ed8 <__ieee754_pow+0xa00>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	f7f8 fc8e 	bl	8000638 <__aeabi_dmul>
 8007d1c:	a370      	add	r3, pc, #448	; (adr r3, 8007ee0 <__ieee754_pow+0xa08>)
 8007d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d22:	4680      	mov	r8, r0
 8007d24:	4689      	mov	r9, r1
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fc85 	bl	8000638 <__aeabi_dmul>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f8 fac9 	bl	80002cc <__adddf3>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4630      	mov	r0, r6
 8007d44:	4639      	mov	r1, r7
 8007d46:	f7f8 fac1 	bl	80002cc <__adddf3>
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	463b      	mov	r3, r7
 8007d4e:	4680      	mov	r8, r0
 8007d50:	4689      	mov	r9, r1
 8007d52:	f7f8 fab9 	bl	80002c8 <__aeabi_dsub>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	4629      	mov	r1, r5
 8007d5e:	f7f8 fab3 	bl	80002c8 <__aeabi_dsub>
 8007d62:	4642      	mov	r2, r8
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	464b      	mov	r3, r9
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	f7f8 fc63 	bl	8000638 <__aeabi_dmul>
 8007d72:	a35d      	add	r3, pc, #372	; (adr r3, 8007ee8 <__ieee754_pow+0xa10>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	f7f8 fc5c 	bl	8000638 <__aeabi_dmul>
 8007d80:	a35b      	add	r3, pc, #364	; (adr r3, 8007ef0 <__ieee754_pow+0xa18>)
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f7f8 fa9f 	bl	80002c8 <__aeabi_dsub>
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	f7f8 fc53 	bl	8000638 <__aeabi_dmul>
 8007d92:	a359      	add	r3, pc, #356	; (adr r3, 8007ef8 <__ieee754_pow+0xa20>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fa98 	bl	80002cc <__adddf3>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	462b      	mov	r3, r5
 8007da0:	f7f8 fc4a 	bl	8000638 <__aeabi_dmul>
 8007da4:	a356      	add	r3, pc, #344	; (adr r3, 8007f00 <__ieee754_pow+0xa28>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fa8d 	bl	80002c8 <__aeabi_dsub>
 8007dae:	4622      	mov	r2, r4
 8007db0:	462b      	mov	r3, r5
 8007db2:	f7f8 fc41 	bl	8000638 <__aeabi_dmul>
 8007db6:	a354      	add	r3, pc, #336	; (adr r3, 8007f08 <__ieee754_pow+0xa30>)
 8007db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbc:	f7f8 fa86 	bl	80002cc <__adddf3>
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	f7f8 fc38 	bl	8000638 <__aeabi_dmul>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4649      	mov	r1, r9
 8007dd0:	f7f8 fa7a 	bl	80002c8 <__aeabi_dsub>
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	460d      	mov	r5, r1
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 fc2a 	bl	8000638 <__aeabi_dmul>
 8007de4:	2200      	movs	r2, #0
 8007de6:	ec41 0b19 	vmov	d9, r0, r1
 8007dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dee:	4620      	mov	r0, r4
 8007df0:	4629      	mov	r1, r5
 8007df2:	f7f8 fa69 	bl	80002c8 <__aeabi_dsub>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	ec51 0b19 	vmov	r0, r1, d9
 8007dfe:	f7f8 fd45 	bl	800088c <__aeabi_ddiv>
 8007e02:	4632      	mov	r2, r6
 8007e04:	4604      	mov	r4, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	463b      	mov	r3, r7
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	f7f8 fc13 	bl	8000638 <__aeabi_dmul>
 8007e12:	4632      	mov	r2, r6
 8007e14:	463b      	mov	r3, r7
 8007e16:	f7f8 fa59 	bl	80002cc <__adddf3>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7f8 fa51 	bl	80002c8 <__aeabi_dsub>
 8007e26:	4642      	mov	r2, r8
 8007e28:	464b      	mov	r3, r9
 8007e2a:	f7f8 fa4d 	bl	80002c8 <__aeabi_dsub>
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4602      	mov	r2, r0
 8007e32:	4939      	ldr	r1, [pc, #228]	; (8007f18 <__ieee754_pow+0xa40>)
 8007e34:	2000      	movs	r0, #0
 8007e36:	f7f8 fa47 	bl	80002c8 <__aeabi_dsub>
 8007e3a:	ec41 0b10 	vmov	d0, r0, r1
 8007e3e:	ee10 3a90 	vmov	r3, s1
 8007e42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e4a:	da2b      	bge.n	8007ea4 <__ieee754_pow+0x9cc>
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f000 fa53 	bl	80082f8 <scalbn>
 8007e52:	ec51 0b10 	vmov	r0, r1, d0
 8007e56:	ec53 2b18 	vmov	r2, r3, d8
 8007e5a:	f7ff bbee 	b.w	800763a <__ieee754_pow+0x162>
 8007e5e:	4b2f      	ldr	r3, [pc, #188]	; (8007f1c <__ieee754_pow+0xa44>)
 8007e60:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007e64:	429e      	cmp	r6, r3
 8007e66:	f77f af0d 	ble.w	8007c84 <__ieee754_pow+0x7ac>
 8007e6a:	4b2d      	ldr	r3, [pc, #180]	; (8007f20 <__ieee754_pow+0xa48>)
 8007e6c:	440b      	add	r3, r1
 8007e6e:	4303      	orrs	r3, r0
 8007e70:	d009      	beq.n	8007e86 <__ieee754_pow+0x9ae>
 8007e72:	ec51 0b18 	vmov	r0, r1, d8
 8007e76:	2200      	movs	r2, #0
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f7f8 fe4f 	bl	8000b1c <__aeabi_dcmplt>
 8007e7e:	3800      	subs	r0, #0
 8007e80:	bf18      	it	ne
 8007e82:	2001      	movne	r0, #1
 8007e84:	e448      	b.n	8007718 <__ieee754_pow+0x240>
 8007e86:	4622      	mov	r2, r4
 8007e88:	462b      	mov	r3, r5
 8007e8a:	f7f8 fa1d 	bl	80002c8 <__aeabi_dsub>
 8007e8e:	4642      	mov	r2, r8
 8007e90:	464b      	mov	r3, r9
 8007e92:	f7f8 fe57 	bl	8000b44 <__aeabi_dcmpge>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f43f aef4 	beq.w	8007c84 <__ieee754_pow+0x7ac>
 8007e9c:	e7e9      	b.n	8007e72 <__ieee754_pow+0x99a>
 8007e9e:	f04f 0a00 	mov.w	sl, #0
 8007ea2:	e71a      	b.n	8007cda <__ieee754_pow+0x802>
 8007ea4:	ec51 0b10 	vmov	r0, r1, d0
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	e7d4      	b.n	8007e56 <__ieee754_pow+0x97e>
 8007eac:	491a      	ldr	r1, [pc, #104]	; (8007f18 <__ieee754_pow+0xa40>)
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f7ff bb31 	b.w	8007516 <__ieee754_pow+0x3e>
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	f7ff bb2d 	b.w	8007516 <__ieee754_pow+0x3e>
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	f7ff bb29 	b.w	8007516 <__ieee754_pow+0x3e>
 8007ec4:	9204      	str	r2, [sp, #16]
 8007ec6:	f7ff bb7b 	b.w	80075c0 <__ieee754_pow+0xe8>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f7ff bb65 	b.w	800759a <__ieee754_pow+0xc2>
 8007ed0:	00000000 	.word	0x00000000
 8007ed4:	3fe62e43 	.word	0x3fe62e43
 8007ed8:	fefa39ef 	.word	0xfefa39ef
 8007edc:	3fe62e42 	.word	0x3fe62e42
 8007ee0:	0ca86c39 	.word	0x0ca86c39
 8007ee4:	be205c61 	.word	0xbe205c61
 8007ee8:	72bea4d0 	.word	0x72bea4d0
 8007eec:	3e663769 	.word	0x3e663769
 8007ef0:	c5d26bf1 	.word	0xc5d26bf1
 8007ef4:	3ebbbd41 	.word	0x3ebbbd41
 8007ef8:	af25de2c 	.word	0xaf25de2c
 8007efc:	3f11566a 	.word	0x3f11566a
 8007f00:	16bebd93 	.word	0x16bebd93
 8007f04:	3f66c16c 	.word	0x3f66c16c
 8007f08:	5555553e 	.word	0x5555553e
 8007f0c:	3fc55555 	.word	0x3fc55555
 8007f10:	3fe00000 	.word	0x3fe00000
 8007f14:	fff00000 	.word	0xfff00000
 8007f18:	3ff00000 	.word	0x3ff00000
 8007f1c:	4090cbff 	.word	0x4090cbff
 8007f20:	3f6f3400 	.word	0x3f6f3400
 8007f24:	652b82fe 	.word	0x652b82fe
 8007f28:	3c971547 	.word	0x3c971547

08007f2c <fabs>:
 8007f2c:	ec51 0b10 	vmov	r0, r1, d0
 8007f30:	ee10 2a10 	vmov	r2, s0
 8007f34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f38:	ec43 2b10 	vmov	d0, r2, r3
 8007f3c:	4770      	bx	lr
	...

08007f40 <__kernel_cosf>:
 8007f40:	ee10 3a10 	vmov	r3, s0
 8007f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f48:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007f4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f50:	da05      	bge.n	8007f5e <__kernel_cosf+0x1e>
 8007f52:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007f56:	ee17 2a90 	vmov	r2, s15
 8007f5a:	2a00      	cmp	r2, #0
 8007f5c:	d03b      	beq.n	8007fd6 <__kernel_cosf+0x96>
 8007f5e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007f62:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007fdc <__kernel_cosf+0x9c>
 8007f66:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8007fe0 <__kernel_cosf+0xa0>
 8007f6a:	4a1e      	ldr	r2, [pc, #120]	; (8007fe4 <__kernel_cosf+0xa4>)
 8007f6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f70:	4293      	cmp	r3, r2
 8007f72:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8007fe8 <__kernel_cosf+0xa8>
 8007f76:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f7a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8007fec <__kernel_cosf+0xac>
 8007f7e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007f82:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007ff0 <__kernel_cosf+0xb0>
 8007f86:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f8a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8007ff4 <__kernel_cosf+0xb4>
 8007f8e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007f92:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007f96:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007f9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007f9e:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa6:	dc04      	bgt.n	8007fb2 <__kernel_cosf+0x72>
 8007fa8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007fac:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8007fb0:	4770      	bx	lr
 8007fb2:	4a11      	ldr	r2, [pc, #68]	; (8007ff8 <__kernel_cosf+0xb8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	bfda      	itte	le
 8007fb8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007fbc:	ee07 3a10 	vmovle	s14, r3
 8007fc0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007fc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fc8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007fcc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007fd0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007fd4:	4770      	bx	lr
 8007fd6:	eeb0 0a66 	vmov.f32	s0, s13
 8007fda:	4770      	bx	lr
 8007fdc:	ad47d74e 	.word	0xad47d74e
 8007fe0:	310f74f6 	.word	0x310f74f6
 8007fe4:	3e999999 	.word	0x3e999999
 8007fe8:	b493f27c 	.word	0xb493f27c
 8007fec:	37d00d01 	.word	0x37d00d01
 8007ff0:	bab60b61 	.word	0xbab60b61
 8007ff4:	3d2aaaab 	.word	0x3d2aaaab
 8007ff8:	3f480000 	.word	0x3f480000

08007ffc <__kernel_sinf>:
 8007ffc:	ee10 3a10 	vmov	r3, s0
 8008000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008004:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008008:	da04      	bge.n	8008014 <__kernel_sinf+0x18>
 800800a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800800e:	ee17 3a90 	vmov	r3, s15
 8008012:	b35b      	cbz	r3, 800806c <__kernel_sinf+0x70>
 8008014:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008018:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008070 <__kernel_sinf+0x74>
 800801c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008074 <__kernel_sinf+0x78>
 8008020:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008024:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008078 <__kernel_sinf+0x7c>
 8008028:	eee6 7a07 	vfma.f32	s15, s12, s14
 800802c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800807c <__kernel_sinf+0x80>
 8008030:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008034:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008080 <__kernel_sinf+0x84>
 8008038:	ee60 6a07 	vmul.f32	s13, s0, s14
 800803c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008040:	b930      	cbnz	r0, 8008050 <__kernel_sinf+0x54>
 8008042:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008084 <__kernel_sinf+0x88>
 8008046:	eea7 6a27 	vfma.f32	s12, s14, s15
 800804a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800804e:	4770      	bx	lr
 8008050:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008054:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008058:	eee0 7a86 	vfma.f32	s15, s1, s12
 800805c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008060:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008088 <__kernel_sinf+0x8c>
 8008064:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008068:	ee30 0a60 	vsub.f32	s0, s0, s1
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2f2ec9d3 	.word	0x2f2ec9d3
 8008074:	b2d72f34 	.word	0xb2d72f34
 8008078:	3638ef1b 	.word	0x3638ef1b
 800807c:	b9500d01 	.word	0xb9500d01
 8008080:	3c088889 	.word	0x3c088889
 8008084:	be2aaaab 	.word	0xbe2aaaab
 8008088:	3e2aaaab 	.word	0x3e2aaaab

0800808c <__ieee754_rem_pio2f>:
 800808c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800808e:	ee10 6a10 	vmov	r6, s0
 8008092:	4b86      	ldr	r3, [pc, #536]	; (80082ac <__ieee754_rem_pio2f+0x220>)
 8008094:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8008098:	429d      	cmp	r5, r3
 800809a:	b087      	sub	sp, #28
 800809c:	4604      	mov	r4, r0
 800809e:	dc05      	bgt.n	80080ac <__ieee754_rem_pio2f+0x20>
 80080a0:	2300      	movs	r3, #0
 80080a2:	ed80 0a00 	vstr	s0, [r0]
 80080a6:	6043      	str	r3, [r0, #4]
 80080a8:	2000      	movs	r0, #0
 80080aa:	e020      	b.n	80080ee <__ieee754_rem_pio2f+0x62>
 80080ac:	4b80      	ldr	r3, [pc, #512]	; (80082b0 <__ieee754_rem_pio2f+0x224>)
 80080ae:	429d      	cmp	r5, r3
 80080b0:	dc38      	bgt.n	8008124 <__ieee754_rem_pio2f+0x98>
 80080b2:	2e00      	cmp	r6, #0
 80080b4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80082b4 <__ieee754_rem_pio2f+0x228>
 80080b8:	4b7f      	ldr	r3, [pc, #508]	; (80082b8 <__ieee754_rem_pio2f+0x22c>)
 80080ba:	f025 050f 	bic.w	r5, r5, #15
 80080be:	dd18      	ble.n	80080f2 <__ieee754_rem_pio2f+0x66>
 80080c0:	429d      	cmp	r5, r3
 80080c2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80080c6:	bf09      	itett	eq
 80080c8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80082bc <__ieee754_rem_pio2f+0x230>
 80080cc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80082c0 <__ieee754_rem_pio2f+0x234>
 80080d0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80080d4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80082c4 <__ieee754_rem_pio2f+0x238>
 80080d8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80080dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080e0:	edc0 6a00 	vstr	s13, [r0]
 80080e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080e8:	edc0 7a01 	vstr	s15, [r0, #4]
 80080ec:	2001      	movs	r0, #1
 80080ee:	b007      	add	sp, #28
 80080f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f2:	429d      	cmp	r5, r3
 80080f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80080f8:	bf09      	itett	eq
 80080fa:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80082bc <__ieee754_rem_pio2f+0x230>
 80080fe:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80082c0 <__ieee754_rem_pio2f+0x234>
 8008102:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008106:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80082c4 <__ieee754_rem_pio2f+0x238>
 800810a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800810e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008112:	edc0 6a00 	vstr	s13, [r0]
 8008116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800811a:	edc0 7a01 	vstr	s15, [r0, #4]
 800811e:	f04f 30ff 	mov.w	r0, #4294967295
 8008122:	e7e4      	b.n	80080ee <__ieee754_rem_pio2f+0x62>
 8008124:	4b68      	ldr	r3, [pc, #416]	; (80082c8 <__ieee754_rem_pio2f+0x23c>)
 8008126:	429d      	cmp	r5, r3
 8008128:	dc71      	bgt.n	800820e <__ieee754_rem_pio2f+0x182>
 800812a:	f000 f8db 	bl	80082e4 <fabsf>
 800812e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80082cc <__ieee754_rem_pio2f+0x240>
 8008132:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008136:	eee0 7a07 	vfma.f32	s15, s0, s14
 800813a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800813e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008142:	ee17 0a90 	vmov	r0, s15
 8008146:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80082b4 <__ieee754_rem_pio2f+0x228>
 800814a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800814e:	281f      	cmp	r0, #31
 8008150:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80082c0 <__ieee754_rem_pio2f+0x234>
 8008154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008158:	eeb1 6a47 	vneg.f32	s12, s14
 800815c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008160:	ee16 2a90 	vmov	r2, s13
 8008164:	dc1c      	bgt.n	80081a0 <__ieee754_rem_pio2f+0x114>
 8008166:	495a      	ldr	r1, [pc, #360]	; (80082d0 <__ieee754_rem_pio2f+0x244>)
 8008168:	1e47      	subs	r7, r0, #1
 800816a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800816e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008172:	428b      	cmp	r3, r1
 8008174:	d014      	beq.n	80081a0 <__ieee754_rem_pio2f+0x114>
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	ed94 7a00 	vldr	s14, [r4]
 800817c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008180:	2e00      	cmp	r6, #0
 8008182:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008186:	ed84 0a01 	vstr	s0, [r4, #4]
 800818a:	dab0      	bge.n	80080ee <__ieee754_rem_pio2f+0x62>
 800818c:	eeb1 7a47 	vneg.f32	s14, s14
 8008190:	eeb1 0a40 	vneg.f32	s0, s0
 8008194:	ed84 7a00 	vstr	s14, [r4]
 8008198:	ed84 0a01 	vstr	s0, [r4, #4]
 800819c:	4240      	negs	r0, r0
 800819e:	e7a6      	b.n	80080ee <__ieee754_rem_pio2f+0x62>
 80081a0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80081a4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80081a8:	2908      	cmp	r1, #8
 80081aa:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80081ae:	dde2      	ble.n	8008176 <__ieee754_rem_pio2f+0xea>
 80081b0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80082bc <__ieee754_rem_pio2f+0x230>
 80081b4:	eef0 6a40 	vmov.f32	s13, s0
 80081b8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80081bc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80081c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80081c4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80082c4 <__ieee754_rem_pio2f+0x238>
 80081c8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80081cc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80081d0:	ee15 2a90 	vmov	r2, s11
 80081d4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80081d8:	1a5b      	subs	r3, r3, r1
 80081da:	2b19      	cmp	r3, #25
 80081dc:	dc04      	bgt.n	80081e8 <__ieee754_rem_pio2f+0x15c>
 80081de:	edc4 5a00 	vstr	s11, [r4]
 80081e2:	eeb0 0a66 	vmov.f32	s0, s13
 80081e6:	e7c7      	b.n	8008178 <__ieee754_rem_pio2f+0xec>
 80081e8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80082d4 <__ieee754_rem_pio2f+0x248>
 80081ec:	eeb0 0a66 	vmov.f32	s0, s13
 80081f0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80081f4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80081f8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80082d8 <__ieee754_rem_pio2f+0x24c>
 80081fc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008200:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008204:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008208:	ed84 7a00 	vstr	s14, [r4]
 800820c:	e7b4      	b.n	8008178 <__ieee754_rem_pio2f+0xec>
 800820e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008212:	db06      	blt.n	8008222 <__ieee754_rem_pio2f+0x196>
 8008214:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008218:	edc0 7a01 	vstr	s15, [r0, #4]
 800821c:	edc0 7a00 	vstr	s15, [r0]
 8008220:	e742      	b.n	80080a8 <__ieee754_rem_pio2f+0x1c>
 8008222:	15ea      	asrs	r2, r5, #23
 8008224:	3a86      	subs	r2, #134	; 0x86
 8008226:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008232:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80082dc <__ieee754_rem_pio2f+0x250>
 8008236:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800823a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800823e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008242:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008246:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800824a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800824e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008252:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008256:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800825a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800825e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008262:	edcd 7a05 	vstr	s15, [sp, #20]
 8008266:	d11e      	bne.n	80082a6 <__ieee754_rem_pio2f+0x21a>
 8008268:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	bf14      	ite	ne
 8008272:	2302      	movne	r3, #2
 8008274:	2301      	moveq	r3, #1
 8008276:	491a      	ldr	r1, [pc, #104]	; (80082e0 <__ieee754_rem_pio2f+0x254>)
 8008278:	9101      	str	r1, [sp, #4]
 800827a:	2102      	movs	r1, #2
 800827c:	9100      	str	r1, [sp, #0]
 800827e:	a803      	add	r0, sp, #12
 8008280:	4621      	mov	r1, r4
 8008282:	f000 f9c1 	bl	8008608 <__kernel_rem_pio2f>
 8008286:	2e00      	cmp	r6, #0
 8008288:	f6bf af31 	bge.w	80080ee <__ieee754_rem_pio2f+0x62>
 800828c:	edd4 7a00 	vldr	s15, [r4]
 8008290:	eef1 7a67 	vneg.f32	s15, s15
 8008294:	edc4 7a00 	vstr	s15, [r4]
 8008298:	edd4 7a01 	vldr	s15, [r4, #4]
 800829c:	eef1 7a67 	vneg.f32	s15, s15
 80082a0:	edc4 7a01 	vstr	s15, [r4, #4]
 80082a4:	e77a      	b.n	800819c <__ieee754_rem_pio2f+0x110>
 80082a6:	2303      	movs	r3, #3
 80082a8:	e7e5      	b.n	8008276 <__ieee754_rem_pio2f+0x1ea>
 80082aa:	bf00      	nop
 80082ac:	3f490fd8 	.word	0x3f490fd8
 80082b0:	4016cbe3 	.word	0x4016cbe3
 80082b4:	3fc90f80 	.word	0x3fc90f80
 80082b8:	3fc90fd0 	.word	0x3fc90fd0
 80082bc:	37354400 	.word	0x37354400
 80082c0:	37354443 	.word	0x37354443
 80082c4:	2e85a308 	.word	0x2e85a308
 80082c8:	43490f80 	.word	0x43490f80
 80082cc:	3f22f984 	.word	0x3f22f984
 80082d0:	08008dd0 	.word	0x08008dd0
 80082d4:	2e85a300 	.word	0x2e85a300
 80082d8:	248d3132 	.word	0x248d3132
 80082dc:	43800000 	.word	0x43800000
 80082e0:	08008e50 	.word	0x08008e50

080082e4 <fabsf>:
 80082e4:	ee10 3a10 	vmov	r3, s0
 80082e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082ec:	ee00 3a10 	vmov	s0, r3
 80082f0:	4770      	bx	lr
 80082f2:	0000      	movs	r0, r0
 80082f4:	0000      	movs	r0, r0
	...

080082f8 <scalbn>:
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	ec55 4b10 	vmov	r4, r5, d0
 80082fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008302:	4606      	mov	r6, r0
 8008304:	462b      	mov	r3, r5
 8008306:	b999      	cbnz	r1, 8008330 <scalbn+0x38>
 8008308:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800830c:	4323      	orrs	r3, r4
 800830e:	d03f      	beq.n	8008390 <scalbn+0x98>
 8008310:	4b35      	ldr	r3, [pc, #212]	; (80083e8 <scalbn+0xf0>)
 8008312:	4629      	mov	r1, r5
 8008314:	ee10 0a10 	vmov	r0, s0
 8008318:	2200      	movs	r2, #0
 800831a:	f7f8 f98d 	bl	8000638 <__aeabi_dmul>
 800831e:	4b33      	ldr	r3, [pc, #204]	; (80083ec <scalbn+0xf4>)
 8008320:	429e      	cmp	r6, r3
 8008322:	4604      	mov	r4, r0
 8008324:	460d      	mov	r5, r1
 8008326:	da10      	bge.n	800834a <scalbn+0x52>
 8008328:	a327      	add	r3, pc, #156	; (adr r3, 80083c8 <scalbn+0xd0>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	e01f      	b.n	8008370 <scalbn+0x78>
 8008330:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008334:	4291      	cmp	r1, r2
 8008336:	d10c      	bne.n	8008352 <scalbn+0x5a>
 8008338:	ee10 2a10 	vmov	r2, s0
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f7 ffc4 	bl	80002cc <__adddf3>
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	e022      	b.n	8008390 <scalbn+0x98>
 800834a:	460b      	mov	r3, r1
 800834c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008350:	3936      	subs	r1, #54	; 0x36
 8008352:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008356:	4296      	cmp	r6, r2
 8008358:	dd0d      	ble.n	8008376 <scalbn+0x7e>
 800835a:	2d00      	cmp	r5, #0
 800835c:	a11c      	add	r1, pc, #112	; (adr r1, 80083d0 <scalbn+0xd8>)
 800835e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008362:	da02      	bge.n	800836a <scalbn+0x72>
 8008364:	a11c      	add	r1, pc, #112	; (adr r1, 80083d8 <scalbn+0xe0>)
 8008366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800836a:	a319      	add	r3, pc, #100	; (adr r3, 80083d0 <scalbn+0xd8>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f7f8 f962 	bl	8000638 <__aeabi_dmul>
 8008374:	e7e6      	b.n	8008344 <scalbn+0x4c>
 8008376:	1872      	adds	r2, r6, r1
 8008378:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800837c:	428a      	cmp	r2, r1
 800837e:	dcec      	bgt.n	800835a <scalbn+0x62>
 8008380:	2a00      	cmp	r2, #0
 8008382:	dd08      	ble.n	8008396 <scalbn+0x9e>
 8008384:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008388:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800838c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008390:	ec45 4b10 	vmov	d0, r4, r5
 8008394:	bd70      	pop	{r4, r5, r6, pc}
 8008396:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800839a:	da08      	bge.n	80083ae <scalbn+0xb6>
 800839c:	2d00      	cmp	r5, #0
 800839e:	a10a      	add	r1, pc, #40	; (adr r1, 80083c8 <scalbn+0xd0>)
 80083a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a4:	dac0      	bge.n	8008328 <scalbn+0x30>
 80083a6:	a10e      	add	r1, pc, #56	; (adr r1, 80083e0 <scalbn+0xe8>)
 80083a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ac:	e7bc      	b.n	8008328 <scalbn+0x30>
 80083ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083b2:	3236      	adds	r2, #54	; 0x36
 80083b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80083b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80083bc:	4620      	mov	r0, r4
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <scalbn+0xf8>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	e7d5      	b.n	8008370 <scalbn+0x78>
 80083c4:	f3af 8000 	nop.w
 80083c8:	c2f8f359 	.word	0xc2f8f359
 80083cc:	01a56e1f 	.word	0x01a56e1f
 80083d0:	8800759c 	.word	0x8800759c
 80083d4:	7e37e43c 	.word	0x7e37e43c
 80083d8:	8800759c 	.word	0x8800759c
 80083dc:	fe37e43c 	.word	0xfe37e43c
 80083e0:	c2f8f359 	.word	0xc2f8f359
 80083e4:	81a56e1f 	.word	0x81a56e1f
 80083e8:	43500000 	.word	0x43500000
 80083ec:	ffff3cb0 	.word	0xffff3cb0
 80083f0:	3c900000 	.word	0x3c900000

080083f4 <with_errno>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	4616      	mov	r6, r2
 80083fc:	f7fe f84a 	bl	8006494 <__errno>
 8008400:	4629      	mov	r1, r5
 8008402:	6006      	str	r6, [r0, #0]
 8008404:	4620      	mov	r0, r4
 8008406:	bd70      	pop	{r4, r5, r6, pc}

08008408 <xflow>:
 8008408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800840a:	4614      	mov	r4, r2
 800840c:	461d      	mov	r5, r3
 800840e:	b108      	cbz	r0, 8008414 <xflow+0xc>
 8008410:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008414:	e9cd 2300 	strd	r2, r3, [sp]
 8008418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f7f8 f90a 	bl	8000638 <__aeabi_dmul>
 8008424:	2222      	movs	r2, #34	; 0x22
 8008426:	b003      	add	sp, #12
 8008428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800842c:	f7ff bfe2 	b.w	80083f4 <with_errno>

08008430 <__math_uflow>:
 8008430:	b508      	push	{r3, lr}
 8008432:	2200      	movs	r2, #0
 8008434:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008438:	f7ff ffe6 	bl	8008408 <xflow>
 800843c:	ec41 0b10 	vmov	d0, r0, r1
 8008440:	bd08      	pop	{r3, pc}

08008442 <__math_oflow>:
 8008442:	b508      	push	{r3, lr}
 8008444:	2200      	movs	r2, #0
 8008446:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800844a:	f7ff ffdd 	bl	8008408 <xflow>
 800844e:	ec41 0b10 	vmov	d0, r0, r1
 8008452:	bd08      	pop	{r3, pc}

08008454 <__ieee754_sqrt>:
 8008454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008458:	ec55 4b10 	vmov	r4, r5, d0
 800845c:	4e67      	ldr	r6, [pc, #412]	; (80085fc <__ieee754_sqrt+0x1a8>)
 800845e:	43ae      	bics	r6, r5
 8008460:	ee10 0a10 	vmov	r0, s0
 8008464:	ee10 2a10 	vmov	r2, s0
 8008468:	4629      	mov	r1, r5
 800846a:	462b      	mov	r3, r5
 800846c:	d10d      	bne.n	800848a <__ieee754_sqrt+0x36>
 800846e:	f7f8 f8e3 	bl	8000638 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4620      	mov	r0, r4
 8008478:	4629      	mov	r1, r5
 800847a:	f7f7 ff27 	bl	80002cc <__adddf3>
 800847e:	4604      	mov	r4, r0
 8008480:	460d      	mov	r5, r1
 8008482:	ec45 4b10 	vmov	d0, r4, r5
 8008486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	2d00      	cmp	r5, #0
 800848c:	dc0b      	bgt.n	80084a6 <__ieee754_sqrt+0x52>
 800848e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008492:	4326      	orrs	r6, r4
 8008494:	d0f5      	beq.n	8008482 <__ieee754_sqrt+0x2e>
 8008496:	b135      	cbz	r5, 80084a6 <__ieee754_sqrt+0x52>
 8008498:	f7f7 ff16 	bl	80002c8 <__aeabi_dsub>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	f7f8 f9f4 	bl	800088c <__aeabi_ddiv>
 80084a4:	e7eb      	b.n	800847e <__ieee754_sqrt+0x2a>
 80084a6:	1509      	asrs	r1, r1, #20
 80084a8:	f000 808d 	beq.w	80085c6 <__ieee754_sqrt+0x172>
 80084ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80084b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084b8:	07c9      	lsls	r1, r1, #31
 80084ba:	bf5c      	itt	pl
 80084bc:	005b      	lslpl	r3, r3, #1
 80084be:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80084c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084c6:	bf58      	it	pl
 80084c8:	0052      	lslpl	r2, r2, #1
 80084ca:	2500      	movs	r5, #0
 80084cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80084d0:	1076      	asrs	r6, r6, #1
 80084d2:	0052      	lsls	r2, r2, #1
 80084d4:	f04f 0e16 	mov.w	lr, #22
 80084d8:	46ac      	mov	ip, r5
 80084da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084de:	eb0c 0001 	add.w	r0, ip, r1
 80084e2:	4298      	cmp	r0, r3
 80084e4:	bfde      	ittt	le
 80084e6:	1a1b      	suble	r3, r3, r0
 80084e8:	eb00 0c01 	addle.w	ip, r0, r1
 80084ec:	186d      	addle	r5, r5, r1
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	f1be 0e01 	subs.w	lr, lr, #1
 80084f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80084f8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80084fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008500:	d1ed      	bne.n	80084de <__ieee754_sqrt+0x8a>
 8008502:	4674      	mov	r4, lr
 8008504:	2720      	movs	r7, #32
 8008506:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800850a:	4563      	cmp	r3, ip
 800850c:	eb01 000e 	add.w	r0, r1, lr
 8008510:	dc02      	bgt.n	8008518 <__ieee754_sqrt+0xc4>
 8008512:	d113      	bne.n	800853c <__ieee754_sqrt+0xe8>
 8008514:	4290      	cmp	r0, r2
 8008516:	d811      	bhi.n	800853c <__ieee754_sqrt+0xe8>
 8008518:	2800      	cmp	r0, #0
 800851a:	eb00 0e01 	add.w	lr, r0, r1
 800851e:	da57      	bge.n	80085d0 <__ieee754_sqrt+0x17c>
 8008520:	f1be 0f00 	cmp.w	lr, #0
 8008524:	db54      	blt.n	80085d0 <__ieee754_sqrt+0x17c>
 8008526:	f10c 0801 	add.w	r8, ip, #1
 800852a:	eba3 030c 	sub.w	r3, r3, ip
 800852e:	4290      	cmp	r0, r2
 8008530:	bf88      	it	hi
 8008532:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008536:	1a12      	subs	r2, r2, r0
 8008538:	440c      	add	r4, r1
 800853a:	46c4      	mov	ip, r8
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	3f01      	subs	r7, #1
 8008540:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008544:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008548:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800854c:	d1dd      	bne.n	800850a <__ieee754_sqrt+0xb6>
 800854e:	4313      	orrs	r3, r2
 8008550:	d01b      	beq.n	800858a <__ieee754_sqrt+0x136>
 8008552:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008600 <__ieee754_sqrt+0x1ac>
 8008556:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008604 <__ieee754_sqrt+0x1b0>
 800855a:	e9da 0100 	ldrd	r0, r1, [sl]
 800855e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008562:	f7f7 feb1 	bl	80002c8 <__aeabi_dsub>
 8008566:	e9da 8900 	ldrd	r8, r9, [sl]
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f8 fadd 	bl	8000b30 <__aeabi_dcmple>
 8008576:	b140      	cbz	r0, 800858a <__ieee754_sqrt+0x136>
 8008578:	f1b4 3fff 	cmp.w	r4, #4294967295
 800857c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008580:	e9db 2300 	ldrd	r2, r3, [fp]
 8008584:	d126      	bne.n	80085d4 <__ieee754_sqrt+0x180>
 8008586:	3501      	adds	r5, #1
 8008588:	463c      	mov	r4, r7
 800858a:	106a      	asrs	r2, r5, #1
 800858c:	0863      	lsrs	r3, r4, #1
 800858e:	07e9      	lsls	r1, r5, #31
 8008590:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008594:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008598:	bf48      	it	mi
 800859a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800859e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80085a2:	461c      	mov	r4, r3
 80085a4:	e76d      	b.n	8008482 <__ieee754_sqrt+0x2e>
 80085a6:	0ad3      	lsrs	r3, r2, #11
 80085a8:	3815      	subs	r0, #21
 80085aa:	0552      	lsls	r2, r2, #21
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0fa      	beq.n	80085a6 <__ieee754_sqrt+0x152>
 80085b0:	02dc      	lsls	r4, r3, #11
 80085b2:	d50a      	bpl.n	80085ca <__ieee754_sqrt+0x176>
 80085b4:	f1c1 0420 	rsb	r4, r1, #32
 80085b8:	fa22 f404 	lsr.w	r4, r2, r4
 80085bc:	1e4d      	subs	r5, r1, #1
 80085be:	408a      	lsls	r2, r1
 80085c0:	4323      	orrs	r3, r4
 80085c2:	1b41      	subs	r1, r0, r5
 80085c4:	e772      	b.n	80084ac <__ieee754_sqrt+0x58>
 80085c6:	4608      	mov	r0, r1
 80085c8:	e7f0      	b.n	80085ac <__ieee754_sqrt+0x158>
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	3101      	adds	r1, #1
 80085ce:	e7ef      	b.n	80085b0 <__ieee754_sqrt+0x15c>
 80085d0:	46e0      	mov	r8, ip
 80085d2:	e7aa      	b.n	800852a <__ieee754_sqrt+0xd6>
 80085d4:	f7f7 fe7a 	bl	80002cc <__adddf3>
 80085d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4640      	mov	r0, r8
 80085e2:	4649      	mov	r1, r9
 80085e4:	f7f8 fa9a 	bl	8000b1c <__aeabi_dcmplt>
 80085e8:	b120      	cbz	r0, 80085f4 <__ieee754_sqrt+0x1a0>
 80085ea:	1ca0      	adds	r0, r4, #2
 80085ec:	bf08      	it	eq
 80085ee:	3501      	addeq	r5, #1
 80085f0:	3402      	adds	r4, #2
 80085f2:	e7ca      	b.n	800858a <__ieee754_sqrt+0x136>
 80085f4:	3401      	adds	r4, #1
 80085f6:	f024 0401 	bic.w	r4, r4, #1
 80085fa:	e7c6      	b.n	800858a <__ieee754_sqrt+0x136>
 80085fc:	7ff00000 	.word	0x7ff00000
 8008600:	200000c0 	.word	0x200000c0
 8008604:	200000c8 	.word	0x200000c8

08008608 <__kernel_rem_pio2f>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	ed2d 8b04 	vpush	{d8-d9}
 8008610:	b0d9      	sub	sp, #356	; 0x164
 8008612:	4688      	mov	r8, r1
 8008614:	9002      	str	r0, [sp, #8]
 8008616:	49b8      	ldr	r1, [pc, #736]	; (80088f8 <__kernel_rem_pio2f+0x2f0>)
 8008618:	9866      	ldr	r0, [sp, #408]	; 0x198
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008620:	9901      	ldr	r1, [sp, #4]
 8008622:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8008624:	f101 3bff 	add.w	fp, r1, #4294967295
 8008628:	1d11      	adds	r1, r2, #4
 800862a:	db25      	blt.n	8008678 <__kernel_rem_pio2f+0x70>
 800862c:	1ed0      	subs	r0, r2, #3
 800862e:	bf48      	it	mi
 8008630:	1d10      	addmi	r0, r2, #4
 8008632:	10c0      	asrs	r0, r0, #3
 8008634:	1c45      	adds	r5, r0, #1
 8008636:	00e9      	lsls	r1, r5, #3
 8008638:	eba0 070b 	sub.w	r7, r0, fp
 800863c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008908 <__kernel_rem_pio2f+0x300>
 8008640:	9103      	str	r1, [sp, #12]
 8008642:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008646:	eb0a 0c0b 	add.w	ip, sl, fp
 800864a:	ae1c      	add	r6, sp, #112	; 0x70
 800864c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8008650:	2400      	movs	r4, #0
 8008652:	4564      	cmp	r4, ip
 8008654:	dd12      	ble.n	800867c <__kernel_rem_pio2f+0x74>
 8008656:	9901      	ldr	r1, [sp, #4]
 8008658:	ac1c      	add	r4, sp, #112	; 0x70
 800865a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800865e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8008662:	f04f 0c00 	mov.w	ip, #0
 8008666:	45d4      	cmp	ip, sl
 8008668:	dc27      	bgt.n	80086ba <__kernel_rem_pio2f+0xb2>
 800866a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800866e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8008908 <__kernel_rem_pio2f+0x300>
 8008672:	4627      	mov	r7, r4
 8008674:	2600      	movs	r6, #0
 8008676:	e016      	b.n	80086a6 <__kernel_rem_pio2f+0x9e>
 8008678:	2000      	movs	r0, #0
 800867a:	e7db      	b.n	8008634 <__kernel_rem_pio2f+0x2c>
 800867c:	42e7      	cmn	r7, r4
 800867e:	bf5d      	ittte	pl
 8008680:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8008684:	ee07 1a90 	vmovpl	s15, r1
 8008688:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800868c:	eef0 7a47 	vmovmi.f32	s15, s14
 8008690:	ece6 7a01 	vstmia	r6!, {s15}
 8008694:	3401      	adds	r4, #1
 8008696:	e7dc      	b.n	8008652 <__kernel_rem_pio2f+0x4a>
 8008698:	ecfe 6a01 	vldmia	lr!, {s13}
 800869c:	ed97 7a00 	vldr	s14, [r7]
 80086a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80086a4:	3601      	adds	r6, #1
 80086a6:	455e      	cmp	r6, fp
 80086a8:	f1a7 0704 	sub.w	r7, r7, #4
 80086ac:	ddf4      	ble.n	8008698 <__kernel_rem_pio2f+0x90>
 80086ae:	ece9 7a01 	vstmia	r9!, {s15}
 80086b2:	f10c 0c01 	add.w	ip, ip, #1
 80086b6:	3404      	adds	r4, #4
 80086b8:	e7d5      	b.n	8008666 <__kernel_rem_pio2f+0x5e>
 80086ba:	a908      	add	r1, sp, #32
 80086bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80086c4:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8008904 <__kernel_rem_pio2f+0x2fc>
 80086c8:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8008900 <__kernel_rem_pio2f+0x2f8>
 80086cc:	9105      	str	r1, [sp, #20]
 80086ce:	9304      	str	r3, [sp, #16]
 80086d0:	4656      	mov	r6, sl
 80086d2:	00b3      	lsls	r3, r6, #2
 80086d4:	9306      	str	r3, [sp, #24]
 80086d6:	ab58      	add	r3, sp, #352	; 0x160
 80086d8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80086dc:	ac08      	add	r4, sp, #32
 80086de:	ab44      	add	r3, sp, #272	; 0x110
 80086e0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80086e4:	46a4      	mov	ip, r4
 80086e6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80086ea:	4637      	mov	r7, r6
 80086ec:	2f00      	cmp	r7, #0
 80086ee:	f1a0 0004 	sub.w	r0, r0, #4
 80086f2:	dc4a      	bgt.n	800878a <__kernel_rem_pio2f+0x182>
 80086f4:	4628      	mov	r0, r5
 80086f6:	9207      	str	r2, [sp, #28]
 80086f8:	f000 f9f8 	bl	8008aec <scalbnf>
 80086fc:	eeb0 8a40 	vmov.f32	s16, s0
 8008700:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008704:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008708:	f000 fa56 	bl	8008bb8 <floorf>
 800870c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008710:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008714:	2d00      	cmp	r5, #0
 8008716:	9a07      	ldr	r2, [sp, #28]
 8008718:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800871c:	ee17 9a90 	vmov	r9, s15
 8008720:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008724:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008728:	dd41      	ble.n	80087ae <__kernel_rem_pio2f+0x1a6>
 800872a:	f106 3cff 	add.w	ip, r6, #4294967295
 800872e:	ab08      	add	r3, sp, #32
 8008730:	f1c5 0e08 	rsb	lr, r5, #8
 8008734:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008738:	fa47 f00e 	asr.w	r0, r7, lr
 800873c:	4481      	add	r9, r0
 800873e:	fa00 f00e 	lsl.w	r0, r0, lr
 8008742:	1a3f      	subs	r7, r7, r0
 8008744:	f1c5 0007 	rsb	r0, r5, #7
 8008748:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800874c:	4107      	asrs	r7, r0
 800874e:	2f00      	cmp	r7, #0
 8008750:	dd3c      	ble.n	80087cc <__kernel_rem_pio2f+0x1c4>
 8008752:	f04f 0e00 	mov.w	lr, #0
 8008756:	f109 0901 	add.w	r9, r9, #1
 800875a:	4671      	mov	r1, lr
 800875c:	4576      	cmp	r6, lr
 800875e:	dc67      	bgt.n	8008830 <__kernel_rem_pio2f+0x228>
 8008760:	2d00      	cmp	r5, #0
 8008762:	dd03      	ble.n	800876c <__kernel_rem_pio2f+0x164>
 8008764:	2d01      	cmp	r5, #1
 8008766:	d074      	beq.n	8008852 <__kernel_rem_pio2f+0x24a>
 8008768:	2d02      	cmp	r5, #2
 800876a:	d07b      	beq.n	8008864 <__kernel_rem_pio2f+0x25c>
 800876c:	2f02      	cmp	r7, #2
 800876e:	d12d      	bne.n	80087cc <__kernel_rem_pio2f+0x1c4>
 8008770:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008774:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008778:	b341      	cbz	r1, 80087cc <__kernel_rem_pio2f+0x1c4>
 800877a:	4628      	mov	r0, r5
 800877c:	9207      	str	r2, [sp, #28]
 800877e:	f000 f9b5 	bl	8008aec <scalbnf>
 8008782:	9a07      	ldr	r2, [sp, #28]
 8008784:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008788:	e020      	b.n	80087cc <__kernel_rem_pio2f+0x1c4>
 800878a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800878e:	3f01      	subs	r7, #1
 8008790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008798:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800879c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80087a0:	ecac 0a01 	vstmia	ip!, {s0}
 80087a4:	ed90 0a00 	vldr	s0, [r0]
 80087a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80087ac:	e79e      	b.n	80086ec <__kernel_rem_pio2f+0xe4>
 80087ae:	d105      	bne.n	80087bc <__kernel_rem_pio2f+0x1b4>
 80087b0:	1e70      	subs	r0, r6, #1
 80087b2:	ab08      	add	r3, sp, #32
 80087b4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80087b8:	11ff      	asrs	r7, r7, #7
 80087ba:	e7c8      	b.n	800874e <__kernel_rem_pio2f+0x146>
 80087bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80087c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80087c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c8:	da30      	bge.n	800882c <__kernel_rem_pio2f+0x224>
 80087ca:	2700      	movs	r7, #0
 80087cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80087d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d4:	f040 809a 	bne.w	800890c <__kernel_rem_pio2f+0x304>
 80087d8:	1e74      	subs	r4, r6, #1
 80087da:	46a4      	mov	ip, r4
 80087dc:	2100      	movs	r1, #0
 80087de:	45d4      	cmp	ip, sl
 80087e0:	da47      	bge.n	8008872 <__kernel_rem_pio2f+0x26a>
 80087e2:	2900      	cmp	r1, #0
 80087e4:	d063      	beq.n	80088ae <__kernel_rem_pio2f+0x2a6>
 80087e6:	ab08      	add	r3, sp, #32
 80087e8:	3d08      	subs	r5, #8
 80087ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d07f      	beq.n	80088f2 <__kernel_rem_pio2f+0x2ea>
 80087f2:	4628      	mov	r0, r5
 80087f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087f8:	f000 f978 	bl	8008aec <scalbnf>
 80087fc:	1c63      	adds	r3, r4, #1
 80087fe:	aa44      	add	r2, sp, #272	; 0x110
 8008800:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008904 <__kernel_rem_pio2f+0x2fc>
 8008804:	0099      	lsls	r1, r3, #2
 8008806:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800880a:	4623      	mov	r3, r4
 800880c:	2b00      	cmp	r3, #0
 800880e:	f280 80ad 	bge.w	800896c <__kernel_rem_pio2f+0x364>
 8008812:	4623      	mov	r3, r4
 8008814:	2b00      	cmp	r3, #0
 8008816:	f2c0 80cb 	blt.w	80089b0 <__kernel_rem_pio2f+0x3a8>
 800881a:	aa44      	add	r2, sp, #272	; 0x110
 800881c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008820:	4e36      	ldr	r6, [pc, #216]	; (80088fc <__kernel_rem_pio2f+0x2f4>)
 8008822:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008908 <__kernel_rem_pio2f+0x300>
 8008826:	2000      	movs	r0, #0
 8008828:	1ae2      	subs	r2, r4, r3
 800882a:	e0b6      	b.n	800899a <__kernel_rem_pio2f+0x392>
 800882c:	2702      	movs	r7, #2
 800882e:	e790      	b.n	8008752 <__kernel_rem_pio2f+0x14a>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	b949      	cbnz	r1, 8008848 <__kernel_rem_pio2f+0x240>
 8008834:	b118      	cbz	r0, 800883e <__kernel_rem_pio2f+0x236>
 8008836:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800883a:	6020      	str	r0, [r4, #0]
 800883c:	2001      	movs	r0, #1
 800883e:	f10e 0e01 	add.w	lr, lr, #1
 8008842:	3404      	adds	r4, #4
 8008844:	4601      	mov	r1, r0
 8008846:	e789      	b.n	800875c <__kernel_rem_pio2f+0x154>
 8008848:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800884c:	6020      	str	r0, [r4, #0]
 800884e:	4608      	mov	r0, r1
 8008850:	e7f5      	b.n	800883e <__kernel_rem_pio2f+0x236>
 8008852:	1e74      	subs	r4, r6, #1
 8008854:	ab08      	add	r3, sp, #32
 8008856:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800885a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800885e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008862:	e783      	b.n	800876c <__kernel_rem_pio2f+0x164>
 8008864:	1e74      	subs	r4, r6, #1
 8008866:	ab08      	add	r3, sp, #32
 8008868:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800886c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008870:	e7f5      	b.n	800885e <__kernel_rem_pio2f+0x256>
 8008872:	ab08      	add	r3, sp, #32
 8008874:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8008878:	f10c 3cff 	add.w	ip, ip, #4294967295
 800887c:	4301      	orrs	r1, r0
 800887e:	e7ae      	b.n	80087de <__kernel_rem_pio2f+0x1d6>
 8008880:	3001      	adds	r0, #1
 8008882:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8008886:	2f00      	cmp	r7, #0
 8008888:	d0fa      	beq.n	8008880 <__kernel_rem_pio2f+0x278>
 800888a:	9b06      	ldr	r3, [sp, #24]
 800888c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008890:	eb0d 0403 	add.w	r4, sp, r3
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	18f7      	adds	r7, r6, r3
 8008898:	ab1c      	add	r3, sp, #112	; 0x70
 800889a:	f106 0c01 	add.w	ip, r6, #1
 800889e:	3c4c      	subs	r4, #76	; 0x4c
 80088a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088a4:	4430      	add	r0, r6
 80088a6:	4560      	cmp	r0, ip
 80088a8:	da04      	bge.n	80088b4 <__kernel_rem_pio2f+0x2ac>
 80088aa:	4606      	mov	r6, r0
 80088ac:	e711      	b.n	80086d2 <__kernel_rem_pio2f+0xca>
 80088ae:	9c05      	ldr	r4, [sp, #20]
 80088b0:	2001      	movs	r0, #1
 80088b2:	e7e6      	b.n	8008882 <__kernel_rem_pio2f+0x27a>
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80088ba:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80088be:	9306      	str	r3, [sp, #24]
 80088c0:	ee07 3a90 	vmov	s15, r3
 80088c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088c8:	2600      	movs	r6, #0
 80088ca:	ece7 7a01 	vstmia	r7!, {s15}
 80088ce:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008908 <__kernel_rem_pio2f+0x300>
 80088d2:	46b9      	mov	r9, r7
 80088d4:	455e      	cmp	r6, fp
 80088d6:	dd04      	ble.n	80088e2 <__kernel_rem_pio2f+0x2da>
 80088d8:	ece4 7a01 	vstmia	r4!, {s15}
 80088dc:	f10c 0c01 	add.w	ip, ip, #1
 80088e0:	e7e1      	b.n	80088a6 <__kernel_rem_pio2f+0x29e>
 80088e2:	ecfe 6a01 	vldmia	lr!, {s13}
 80088e6:	ed39 7a01 	vldmdb	r9!, {s14}
 80088ea:	3601      	adds	r6, #1
 80088ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80088f0:	e7f0      	b.n	80088d4 <__kernel_rem_pio2f+0x2cc>
 80088f2:	3c01      	subs	r4, #1
 80088f4:	e777      	b.n	80087e6 <__kernel_rem_pio2f+0x1de>
 80088f6:	bf00      	nop
 80088f8:	08009194 	.word	0x08009194
 80088fc:	08009168 	.word	0x08009168
 8008900:	43800000 	.word	0x43800000
 8008904:	3b800000 	.word	0x3b800000
 8008908:	00000000 	.word	0x00000000
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	eeb0 0a48 	vmov.f32	s0, s16
 8008912:	1a98      	subs	r0, r3, r2
 8008914:	f000 f8ea 	bl	8008aec <scalbnf>
 8008918:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008900 <__kernel_rem_pio2f+0x2f8>
 800891c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008924:	db19      	blt.n	800895a <__kernel_rem_pio2f+0x352>
 8008926:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008904 <__kernel_rem_pio2f+0x2fc>
 800892a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800892e:	aa08      	add	r2, sp, #32
 8008930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008934:	1c74      	adds	r4, r6, #1
 8008936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800893a:	3508      	adds	r5, #8
 800893c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008944:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008948:	ee10 3a10 	vmov	r3, s0
 800894c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008950:	ee17 3a90 	vmov	r3, s15
 8008954:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008958:	e74b      	b.n	80087f2 <__kernel_rem_pio2f+0x1ea>
 800895a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800895e:	aa08      	add	r2, sp, #32
 8008960:	ee10 3a10 	vmov	r3, s0
 8008964:	4634      	mov	r4, r6
 8008966:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800896a:	e742      	b.n	80087f2 <__kernel_rem_pio2f+0x1ea>
 800896c:	a808      	add	r0, sp, #32
 800896e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008972:	9001      	str	r0, [sp, #4]
 8008974:	ee07 0a90 	vmov	s15, r0
 8008978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800897c:	3b01      	subs	r3, #1
 800897e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008982:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008986:	ed62 7a01 	vstmdb	r2!, {s15}
 800898a:	e73f      	b.n	800880c <__kernel_rem_pio2f+0x204>
 800898c:	ecf6 6a01 	vldmia	r6!, {s13}
 8008990:	ecb5 7a01 	vldmia	r5!, {s14}
 8008994:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008998:	3001      	adds	r0, #1
 800899a:	4550      	cmp	r0, sl
 800899c:	dc01      	bgt.n	80089a2 <__kernel_rem_pio2f+0x39a>
 800899e:	4290      	cmp	r0, r2
 80089a0:	ddf4      	ble.n	800898c <__kernel_rem_pio2f+0x384>
 80089a2:	a858      	add	r0, sp, #352	; 0x160
 80089a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80089a8:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80089ac:	3b01      	subs	r3, #1
 80089ae:	e731      	b.n	8008814 <__kernel_rem_pio2f+0x20c>
 80089b0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	dc09      	bgt.n	80089ca <__kernel_rem_pio2f+0x3c2>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc2b      	bgt.n	8008a12 <__kernel_rem_pio2f+0x40a>
 80089ba:	d044      	beq.n	8008a46 <__kernel_rem_pio2f+0x43e>
 80089bc:	f009 0007 	and.w	r0, r9, #7
 80089c0:	b059      	add	sp, #356	; 0x164
 80089c2:	ecbd 8b04 	vpop	{d8-d9}
 80089c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ca:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d1f5      	bne.n	80089bc <__kernel_rem_pio2f+0x3b4>
 80089d0:	aa30      	add	r2, sp, #192	; 0xc0
 80089d2:	1f0b      	subs	r3, r1, #4
 80089d4:	4413      	add	r3, r2
 80089d6:	461a      	mov	r2, r3
 80089d8:	4620      	mov	r0, r4
 80089da:	2800      	cmp	r0, #0
 80089dc:	f1a2 0204 	sub.w	r2, r2, #4
 80089e0:	dc52      	bgt.n	8008a88 <__kernel_rem_pio2f+0x480>
 80089e2:	4622      	mov	r2, r4
 80089e4:	2a01      	cmp	r2, #1
 80089e6:	f1a3 0304 	sub.w	r3, r3, #4
 80089ea:	dc5d      	bgt.n	8008aa8 <__kernel_rem_pio2f+0x4a0>
 80089ec:	ab30      	add	r3, sp, #192	; 0xc0
 80089ee:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008908 <__kernel_rem_pio2f+0x300>
 80089f2:	440b      	add	r3, r1
 80089f4:	2c01      	cmp	r4, #1
 80089f6:	dc67      	bgt.n	8008ac8 <__kernel_rem_pio2f+0x4c0>
 80089f8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80089fc:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008a00:	2f00      	cmp	r7, #0
 8008a02:	d167      	bne.n	8008ad4 <__kernel_rem_pio2f+0x4cc>
 8008a04:	edc8 6a00 	vstr	s13, [r8]
 8008a08:	ed88 7a01 	vstr	s14, [r8, #4]
 8008a0c:	edc8 7a02 	vstr	s15, [r8, #8]
 8008a10:	e7d4      	b.n	80089bc <__kernel_rem_pio2f+0x3b4>
 8008a12:	ab30      	add	r3, sp, #192	; 0xc0
 8008a14:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8008908 <__kernel_rem_pio2f+0x300>
 8008a18:	440b      	add	r3, r1
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	da24      	bge.n	8008a6a <__kernel_rem_pio2f+0x462>
 8008a20:	b34f      	cbz	r7, 8008a76 <__kernel_rem_pio2f+0x46e>
 8008a22:	eef1 7a47 	vneg.f32	s15, s14
 8008a26:	edc8 7a00 	vstr	s15, [r8]
 8008a2a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008a2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a32:	aa31      	add	r2, sp, #196	; 0xc4
 8008a34:	2301      	movs	r3, #1
 8008a36:	429c      	cmp	r4, r3
 8008a38:	da20      	bge.n	8008a7c <__kernel_rem_pio2f+0x474>
 8008a3a:	b10f      	cbz	r7, 8008a40 <__kernel_rem_pio2f+0x438>
 8008a3c:	eef1 7a67 	vneg.f32	s15, s15
 8008a40:	edc8 7a01 	vstr	s15, [r8, #4]
 8008a44:	e7ba      	b.n	80089bc <__kernel_rem_pio2f+0x3b4>
 8008a46:	ab30      	add	r3, sp, #192	; 0xc0
 8008a48:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8008908 <__kernel_rem_pio2f+0x300>
 8008a4c:	440b      	add	r3, r1
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	da05      	bge.n	8008a5e <__kernel_rem_pio2f+0x456>
 8008a52:	b10f      	cbz	r7, 8008a58 <__kernel_rem_pio2f+0x450>
 8008a54:	eef1 7a67 	vneg.f32	s15, s15
 8008a58:	edc8 7a00 	vstr	s15, [r8]
 8008a5c:	e7ae      	b.n	80089bc <__kernel_rem_pio2f+0x3b4>
 8008a5e:	ed33 7a01 	vldmdb	r3!, {s14}
 8008a62:	3c01      	subs	r4, #1
 8008a64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a68:	e7f1      	b.n	8008a4e <__kernel_rem_pio2f+0x446>
 8008a6a:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a6e:	3a01      	subs	r2, #1
 8008a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a74:	e7d2      	b.n	8008a1c <__kernel_rem_pio2f+0x414>
 8008a76:	eef0 7a47 	vmov.f32	s15, s14
 8008a7a:	e7d4      	b.n	8008a26 <__kernel_rem_pio2f+0x41e>
 8008a7c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008a80:	3301      	adds	r3, #1
 8008a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a86:	e7d6      	b.n	8008a36 <__kernel_rem_pio2f+0x42e>
 8008a88:	edd2 7a00 	vldr	s15, [r2]
 8008a8c:	edd2 6a01 	vldr	s13, [r2, #4]
 8008a90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a94:	3801      	subs	r0, #1
 8008a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a9a:	ed82 7a00 	vstr	s14, [r2]
 8008a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa2:	edc2 7a01 	vstr	s15, [r2, #4]
 8008aa6:	e798      	b.n	80089da <__kernel_rem_pio2f+0x3d2>
 8008aa8:	edd3 7a00 	vldr	s15, [r3]
 8008aac:	edd3 6a01 	vldr	s13, [r3, #4]
 8008ab0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008ab4:	3a01      	subs	r2, #1
 8008ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aba:	ed83 7a00 	vstr	s14, [r3]
 8008abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac2:	edc3 7a01 	vstr	s15, [r3, #4]
 8008ac6:	e78d      	b.n	80089e4 <__kernel_rem_pio2f+0x3dc>
 8008ac8:	ed33 7a01 	vldmdb	r3!, {s14}
 8008acc:	3c01      	subs	r4, #1
 8008ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ad2:	e78f      	b.n	80089f4 <__kernel_rem_pio2f+0x3ec>
 8008ad4:	eef1 6a66 	vneg.f32	s13, s13
 8008ad8:	eeb1 7a47 	vneg.f32	s14, s14
 8008adc:	edc8 6a00 	vstr	s13, [r8]
 8008ae0:	ed88 7a01 	vstr	s14, [r8, #4]
 8008ae4:	eef1 7a67 	vneg.f32	s15, s15
 8008ae8:	e790      	b.n	8008a0c <__kernel_rem_pio2f+0x404>
 8008aea:	bf00      	nop

08008aec <scalbnf>:
 8008aec:	ee10 3a10 	vmov	r3, s0
 8008af0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008af4:	d02b      	beq.n	8008b4e <scalbnf+0x62>
 8008af6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008afa:	d302      	bcc.n	8008b02 <scalbnf+0x16>
 8008afc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008b00:	4770      	bx	lr
 8008b02:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008b06:	d123      	bne.n	8008b50 <scalbnf+0x64>
 8008b08:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <scalbnf+0xb0>)
 8008b0a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8008ba0 <scalbnf+0xb4>
 8008b0e:	4298      	cmp	r0, r3
 8008b10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008b14:	db17      	blt.n	8008b46 <scalbnf+0x5a>
 8008b16:	ee10 3a10 	vmov	r3, s0
 8008b1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b1e:	3a19      	subs	r2, #25
 8008b20:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008b24:	4288      	cmp	r0, r1
 8008b26:	dd15      	ble.n	8008b54 <scalbnf+0x68>
 8008b28:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008ba4 <scalbnf+0xb8>
 8008b2c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008ba8 <scalbnf+0xbc>
 8008b30:	ee10 3a10 	vmov	r3, s0
 8008b34:	eeb0 7a67 	vmov.f32	s14, s15
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bfb8      	it	lt
 8008b3c:	eef0 7a66 	vmovlt.f32	s15, s13
 8008b40:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008b44:	4770      	bx	lr
 8008b46:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008bac <scalbnf+0xc0>
 8008b4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008b4e:	4770      	bx	lr
 8008b50:	0dd2      	lsrs	r2, r2, #23
 8008b52:	e7e5      	b.n	8008b20 <scalbnf+0x34>
 8008b54:	4410      	add	r0, r2
 8008b56:	28fe      	cmp	r0, #254	; 0xfe
 8008b58:	dce6      	bgt.n	8008b28 <scalbnf+0x3c>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	dd06      	ble.n	8008b6c <scalbnf+0x80>
 8008b5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b62:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008b66:	ee00 3a10 	vmov	s0, r3
 8008b6a:	4770      	bx	lr
 8008b6c:	f110 0f16 	cmn.w	r0, #22
 8008b70:	da09      	bge.n	8008b86 <scalbnf+0x9a>
 8008b72:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008bac <scalbnf+0xc0>
 8008b76:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008bb0 <scalbnf+0xc4>
 8008b7a:	ee10 3a10 	vmov	r3, s0
 8008b7e:	eeb0 7a67 	vmov.f32	s14, s15
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	e7d9      	b.n	8008b3a <scalbnf+0x4e>
 8008b86:	3019      	adds	r0, #25
 8008b88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b8c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008b90:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008bb4 <scalbnf+0xc8>
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	e7d7      	b.n	8008b4a <scalbnf+0x5e>
 8008b9a:	bf00      	nop
 8008b9c:	ffff3cb0 	.word	0xffff3cb0
 8008ba0:	4c000000 	.word	0x4c000000
 8008ba4:	7149f2ca 	.word	0x7149f2ca
 8008ba8:	f149f2ca 	.word	0xf149f2ca
 8008bac:	0da24260 	.word	0x0da24260
 8008bb0:	8da24260 	.word	0x8da24260
 8008bb4:	33000000 	.word	0x33000000

08008bb8 <floorf>:
 8008bb8:	ee10 3a10 	vmov	r3, s0
 8008bbc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008bc0:	3a7f      	subs	r2, #127	; 0x7f
 8008bc2:	2a16      	cmp	r2, #22
 8008bc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008bc8:	dc2a      	bgt.n	8008c20 <floorf+0x68>
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	da11      	bge.n	8008bf2 <floorf+0x3a>
 8008bce:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008c30 <floorf+0x78>
 8008bd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008bd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bde:	dd05      	ble.n	8008bec <floorf+0x34>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da23      	bge.n	8008c2c <floorf+0x74>
 8008be4:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <floorf+0x7c>)
 8008be6:	2900      	cmp	r1, #0
 8008be8:	bf18      	it	ne
 8008bea:	4613      	movne	r3, r2
 8008bec:	ee00 3a10 	vmov	s0, r3
 8008bf0:	4770      	bx	lr
 8008bf2:	4911      	ldr	r1, [pc, #68]	; (8008c38 <floorf+0x80>)
 8008bf4:	4111      	asrs	r1, r2
 8008bf6:	420b      	tst	r3, r1
 8008bf8:	d0fa      	beq.n	8008bf0 <floorf+0x38>
 8008bfa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008c30 <floorf+0x78>
 8008bfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008c02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0a:	ddef      	ble.n	8008bec <floorf+0x34>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfbe      	ittt	lt
 8008c10:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008c14:	fa40 f202 	asrlt.w	r2, r0, r2
 8008c18:	189b      	addlt	r3, r3, r2
 8008c1a:	ea23 0301 	bic.w	r3, r3, r1
 8008c1e:	e7e5      	b.n	8008bec <floorf+0x34>
 8008c20:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008c24:	d3e4      	bcc.n	8008bf0 <floorf+0x38>
 8008c26:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008c2a:	4770      	bx	lr
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e7dd      	b.n	8008bec <floorf+0x34>
 8008c30:	7149f2ca 	.word	0x7149f2ca
 8008c34:	bf800000 	.word	0xbf800000
 8008c38:	007fffff 	.word	0x007fffff

08008c3c <_init>:
 8008c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3e:	bf00      	nop
 8008c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c42:	bc08      	pop	{r3}
 8008c44:	469e      	mov	lr, r3
 8008c46:	4770      	bx	lr

08008c48 <_fini>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr
