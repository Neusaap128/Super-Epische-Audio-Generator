
SEAG_F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004448  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004660  08004660  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08004668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  200000b4  0800471c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800471c  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ceaa  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b5e  00000000  00000000  0002cfd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088b  00000000  00000000  000306b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b8a  00000000  00000000  00030f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001305b  00000000  00000000  00054ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d02ad  00000000  00000000  00067b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ec8  00000000  00000000  00137dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0013ac98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000b4 	.word	0x200000b4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004610 	.word	0x08004610

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000b8 	.word	0x200000b8
 800021c:	08004610 	.word	0x08004610

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

	ResetCodec(hi2c1);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f88c 	bl	8000642 <ResetCodec>

	HAL_Delay(25);
 800052a:	2019      	movs	r0, #25
 800052c:	f001 f91c 	bl	8001768 <HAL_Delay>

	//Connect Linput1 to inverting input of left input PGA, 0db gain, connecting Left input PGA to input booster
	//WriteCodecRegister(hi2c1, 0x20, 0b100001000);

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000530:	f240 1279 	movw	r2, #377	; 0x179
 8000534:	2102      	movs	r1, #2
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 f890 	bl	800065c <WriteCodecRegister>

	//un mute left channel, LINVOL = +0DB [5:0]
	WriteCodecRegister(hi2c1, 0x00, 0b100010111);
 800053c:	f240 1217 	movw	r2, #279	; 0x117
 8000540:	2100      	movs	r1, #0
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 f88a 	bl	800065c <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 0b100000000);
 8000548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800054c:	2101      	movs	r1, #1
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f000 f884 	bl	800065c <WriteCodecRegister>

	//Enable LB2LO
	WriteCodecRegister(hi2c1, 0x2D, 0b011010000);
 8000554:	22d0      	movs	r2, #208	; 0xd0
 8000556:	212d      	movs	r1, #45	; 0x2d
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f87f 	bl	800065c <WriteCodecRegister>


	// ----- Power Management -----

	// outdated R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b011111100);
 800055e:	22fc      	movs	r2, #252	; 0xfc
 8000560:	2119      	movs	r1, #25
 8000562:	6878      	ldr	r0, [r7, #4]
 8000564:	f000 f87a 	bl	800065c <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b111010000);
 8000568:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 800056c:	211a      	movs	r1, #26
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f000 f874 	bl	800065c <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000111100);
 8000574:	223c      	movs	r2, #60	; 0x3c
 8000576:	212f      	movs	r1, #47	; 0x2f
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f000 f86f 	bl	800065c <WriteCodecRegister>
	//WriteCodecRegister(hi2c1, 0x02, 0b100000000);

	//-----------------------

	// Disable master mode codec, I²S format
	WriteCodecRegister(hi2c1, 0x07, 0b000001010);
 800057e:	220a      	movs	r2, #10
 8000580:	2107      	movs	r1, #7
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f86a 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000588:	f44f 7284 	mov.w	r2, #264	; 0x108
 800058c:	2120      	movs	r1, #32
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 f864 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x21, 0b000000000);
 8000594:	2200      	movs	r2, #0
 8000596:	2121      	movs	r1, #33	; 0x21
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f85f 	bl	800065c <WriteCodecRegister>

	//WriteCodecRegister(hi2c1, 0x2D, 0b000000000);

	WriteCodecRegister(hi2c1, 0x2E, 0b000000000);
 800059e:	2200      	movs	r2, #0
 80005a0:	212e      	movs	r1, #46	; 0x2e
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f000 f85a 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x22, 0b101010000);
 80005a8:	f44f 72a8 	mov.w	r2, #336	; 0x150
 80005ac:	2122      	movs	r1, #34	; 0x22
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f854 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x25, 0b001010000);
 80005b4:	2250      	movs	r2, #80	; 0x50
 80005b6:	2125      	movs	r1, #37	; 0x25
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f84f 	bl	800065c <WriteCodecRegister>

	//Write speaker L volume
	WriteCodecRegister(hi2c1, 0x28, 0b101111001);
 80005be:	f240 1279 	movw	r2, #377	; 0x179
 80005c2:	2128      	movs	r1, #40	; 0x28
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f849 	bl	800065c <WriteCodecRegister>
	//Write speaker R volume
	WriteCodecRegister(hi2c1, 0x29, 0b101111001);
 80005ca:	f240 1279 	movw	r2, #377	; 0x179
 80005ce:	2129      	movs	r1, #41	; 0x29
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f843 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x34, 0b000000000);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2134      	movs	r1, #52	; 0x34
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 f83e 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x04, 0b000000000);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2104      	movs	r1, #4
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f839 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x08, 0b111000000);
 80005ea:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80005ee:	2108      	movs	r1, #8
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f833 	bl	800065c <WriteCodecRegister>

	// Disabled high pass filter
	WriteCodecRegister(hi2c1, 0x05, 0b000000001);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2105      	movs	r1, #5
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f82e 	bl	800065c <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x09, 0b000000001);
 8000600:	2201      	movs	r2, #1
 8000602:	2109      	movs	r1, #9
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f829 	bl	800065c <WriteCodecRegister>

	//Writing ADC and DAC volume
	WriteCodecRegister(hi2c1, 0x15, 0b111000011);
 800060a:	f240 12c3 	movw	r2, #451	; 0x1c3
 800060e:	2115      	movs	r1, #21
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f000 f823 	bl	800065c <WriteCodecRegister>
	WriteCodecRegister(hi2c1, 0x16, 0b111000011);
 8000616:	f240 12c3 	movw	r2, #451	; 0x1c3
 800061a:	2116      	movs	r1, #22
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 f81d 	bl	800065c <WriteCodecRegister>

	//Writing ADC and DAC volume
	WriteCodecRegister(hi2c1, 0x0A, 0b111111111);
 8000622:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000626:	210a      	movs	r1, #10
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f817 	bl	800065c <WriteCodecRegister>
	WriteCodecRegister(hi2c1, 0x0B, 0b111111111);
 800062e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000632:	210b      	movs	r1, #11
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f811 	bl	800065c <WriteCodecRegister>
	buf[0]=0x55;
	HAL_I2C_Master_Transmit(hi2c1, codecAddr, buf, 1 , HAL_MAX_DELAY);

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	210f      	movs	r1, #15
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f804 	bl	800065c <WriteCodecRegister>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint8_t reg, uint16_t pData){
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af04      	add	r7, sp, #16
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
 8000668:	4613      	mov	r3, r2
 800066a:	803b      	strh	r3, [r7, #0]
	uint8_t regAddrWDataBit = (uint8_t)(reg << 1) | (pData >> 8);
 800066c:	78fb      	ldrb	r3, [r7, #3]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	b29b      	uxth	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4313      	orrs	r3, r2
 800067c:	73fb      	strb	r3, [r7, #15]
	uint8_t lowByte = (uint8_t)(pData & 0xFF);
 800067e:	883b      	ldrh	r3, [r7, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, regAddrWDataBit, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 8000684:	2334      	movs	r3, #52	; 0x34
 8000686:	b299      	uxth	r1, r3
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	b29a      	uxth	r2, r3
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9302      	str	r3, [sp, #8]
 8000692:	2301      	movs	r3, #1
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	f107 030e 	add.w	r3, r7, #14
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f001 ff86 	bl	80025b0 <HAL_I2C_Mem_Write>
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <InitDSP>:
//0 -> Reverb
//1 -> Low pass
//Etc
uint8_t selectedFilters = 0b00000101;

void InitDSP(uint32_t sampleFrequency, I2S_HandleTypeDef *hi2s1, I2S_HandleTypeDef *hi2s2){
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b08d      	sub	sp, #52	; 0x34
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]

	//Init I²S

	HAL_I2S_Receive_DMA(hi2s2, (uint16_t*)&inputData[0], BUFFER_SIZE/2);
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	4913      	ldr	r1, [pc, #76]	; (8000708 <InitDSP+0x5c>)
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f002 fcf7 	bl	80030b0 <HAL_I2S_Receive_DMA>
	HAL_I2S_Transmit_DMA(hi2s1, (uint16_t*)&outputData[0], BUFFER_SIZE/2);
 80006c2:	2240      	movs	r2, #64	; 0x40
 80006c4:	4911      	ldr	r1, [pc, #68]	; (800070c <InitDSP+0x60>)
 80006c6:	68b8      	ldr	r0, [r7, #8]
 80006c8:	f002 fc4a 	bl	8002f60 <HAL_I2S_Transmit_DMA>

    float delayCombS[4] = {0.0297, 0.0371, 0.411, 0.437};
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <InitDSP+0x64>)
 80006ce:	f107 0418 	add.w	r4, r7, #24
 80006d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float delayAllS[2] = {0.005, 0.0017};
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <InitDSP+0x68>)
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e2:	e883 0003 	stmia.w	r3, {r0, r1}
	reverb = initializeReverb(sampleFrequency, 4, delayCombS, 2, delayAllS);
 80006e6:	f107 0218 	add.w	r2, r7, #24
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2302      	movs	r3, #2
 80006f2:	2104      	movs	r1, #4
 80006f4:	68f8      	ldr	r0, [r7, #12]
 80006f6:	f000 f907 	bl	8000908 <initializeReverb>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <InitDSP+0x6c>)
 80006fe:	6013      	str	r3, [r2, #0]

}
 8000700:	bf00      	nop
 8000702:	372c      	adds	r7, #44	; 0x2c
 8000704:	46bd      	mov	sp, r7
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	200000d0 	.word	0x200000d0
 800070c:	200002d0 	.word	0x200002d0
 8000710:	08004628 	.word	0x08004628
 8000714:	08004638 	.word	0x08004638
 8000718:	200004d4 	.word	0x200004d4

0800071c <DSPUpdate>:


void DSPUpdate(){
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0

	if(dataReadyFlag){
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <DSPUpdate+0x50>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d01b      	beq.n	8000762 <DSPUpdate+0x46>

		for(uint8_t i = 0; i < BUFFER_SIZE/2; i++){
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e012      	b.n	8000756 <DSPUpdate+0x3a>
			*(outputBufPtr+i) = AppendSample( *(inputBufPtr+i) );
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <DSPUpdate+0x54>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <DSPUpdate+0x58>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	18d4      	adds	r4, r2, r3
 8000746:	4608      	mov	r0, r1
 8000748:	f000 f816 	bl	8000778 <AppendSample>
 800074c:	4603      	mov	r3, r0
 800074e:	6023      	str	r3, [r4, #0]
		for(uint8_t i = 0; i < BUFFER_SIZE/2; i++){
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	3301      	adds	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b3f      	cmp	r3, #63	; 0x3f
 800075a:	d9e9      	bls.n	8000730 <DSPUpdate+0x14>
		}


		dataReadyFlag = 0;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <DSPUpdate+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	}

}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	200004d0 	.word	0x200004d0
 8000770:	20000000 	.word	0x20000000
 8000774:	20000004 	.word	0x20000004

08000778 <AppendSample>:

SampleType AppendSample(SampleType sample){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

	//Filter everything

	return sample;
 8000780:	687b      	ldr	r3, [r7, #4]

}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <GetEnabledFilters>:
	}else{
		selectedFilters &= 0 << filterIndex;
	}
}

uint8_t GetEnabledFilters(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	return selectedFilters;
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <GetEnabledFilters+0x14>)
 8000796:	781b      	ldrb	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008

080007a8 <HAL_I2S_RxHalfCpltCallback>:



void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	inputBufPtr = &inputData[0];
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <HAL_I2S_RxHalfCpltCallback+0x28>)
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 80007b4:	601a      	str	r2, [r3, #0]
	outputBufPtr = &outputData[0];
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_I2S_RxHalfCpltCallback+0x30>)
 80007b8:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_I2S_RxHalfCpltCallback+0x34>)
 80007ba:	601a      	str	r2, [r3, #0]


	dataReadyFlag = 1;
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_I2S_RxHalfCpltCallback+0x38>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]

}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000000 	.word	0x20000000
 80007d4:	200000d0 	.word	0x200000d0
 80007d8:	20000004 	.word	0x20000004
 80007dc:	200002d0 	.word	0x200002d0
 80007e0:	200004d0 	.word	0x200004d0

080007e4 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

	inputBufPtr = &inputData[BUFFER_SIZE/2];
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_I2S_RxCpltCallback+0x28>)
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_I2S_RxCpltCallback+0x2c>)
 80007f0:	601a      	str	r2, [r3, #0]
	outputBufPtr = &outputData[BUFFER_SIZE/2];
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_I2S_RxCpltCallback+0x30>)
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_I2S_RxCpltCallback+0x34>)
 80007f6:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_I2S_RxCpltCallback+0x38>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]

}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000000 	.word	0x20000000
 8000810:	200001d0 	.word	0x200001d0
 8000814:	20000004 	.word	0x20000004
 8000818:	200003d0 	.word	0x200003d0
 800081c:	200004d0 	.word	0x200004d0

08000820 <initializeAllPass>:

#include "AllPass.h"

AllPass* initializeAllPass(uint32_t sampleRate, float delayS){
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	ed87 0a00 	vstr	s0, [r7]

    AllPass* allPass = malloc(sizeof(AllPass));
 800082c:	2008      	movs	r0, #8
 800082e:	f003 fdf7 	bl	8004420 <malloc>
 8000832:	4603      	mov	r3, r0
 8000834:	617b      	str	r3, [r7, #20]

    CombFeedforward *combFeedforward = initializeCombFeedforward(sampleRate, delayS);
 8000836:	ed97 0a00 	vldr	s0, [r7]
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f000 f83b 	bl	80008b6 <initializeCombFeedforward>
 8000840:	6138      	str	r0, [r7, #16]
    CombFeedback *combFeedback = initializeCombFeedback(sampleRate, delayS);
 8000842:	ed97 0a00 	vldr	s0, [r7]
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f80c 	bl	8000864 <initializeCombFeedback>
 800084c:	60f8      	str	r0, [r7, #12]

    allPass->combFeedforward = combFeedforward;
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	601a      	str	r2, [r3, #0]
    allPass->combFeedback = combFeedback;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	605a      	str	r2, [r3, #4]

    return allPass;
 800085a:	697b      	ldr	r3, [r7, #20]

}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <initializeCombFeedback>:

#include "CombFeedback.h"

CombFeedback* initializeCombFeedback(uint32_t sampleRate, float delayS){
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	ed87 0a00 	vstr	s0, [r7]

    CombFeedback *filter = malloc(sizeof(CombFeedback));
 8000870:	2008      	movs	r0, #8
 8000872:	f003 fdd5 	bl	8004420 <malloc>
 8000876:	4603      	mov	r3, r0
 8000878:	60fb      	str	r3, [r7, #12]

    filter->M = delayS*sampleRate;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000884:	edd7 7a00 	vldr	s15, [r7]
 8000888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800088c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000890:	ee17 2a90 	vmov	r2, s15
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	601a      	str	r2, [r3, #0]

    filter->outputSamples = calloc(filter->M, sizeof(int16_t));
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2102      	movs	r1, #2
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fda0 	bl	80043e4 <calloc>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	605a      	str	r2, [r3, #4]

    return filter;
 80008ac:	68fb      	ldr	r3, [r7, #12]

}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <initializeCombFeedforward>:

#include "CombFeedforward.h"

CombFeedforward* initializeCombFeedforward(uint32_t sampleRate, float delayS){
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
 80008be:	ed87 0a00 	vstr	s0, [r7]

    CombFeedforward *filter = malloc(sizeof(CombFeedforward));
 80008c2:	2008      	movs	r0, #8
 80008c4:	f003 fdac 	bl	8004420 <malloc>
 80008c8:	4603      	mov	r3, r0
 80008ca:	60fb      	str	r3, [r7, #12]

    filter->M = delayS*sampleRate;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	ee07 3a90 	vmov	s15, r3
 80008d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008d6:	edd7 7a00 	vldr	s15, [r7]
 80008da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e2:	ee17 2a90 	vmov	r2, s15
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	601a      	str	r2, [r3, #0]

    filter->inputSamples = calloc(filter->M, sizeof(int32_t));
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fd77 	bl	80043e4 <calloc>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	605a      	str	r2, [r3, #4]

    return filter;
 80008fe:	68fb      	ldr	r3, [r7, #12]

}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <initializeReverb>:

#include "Reverb.h"

//Order delayS smallest to largest
Reverb* initializeReverb(uint32_t sampleRate, uint8_t amountOfCombFilters, float *delayCombS, uint8_t amountOfAllPassFilters, float *delayAllS){
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	461a      	mov	r2, r3
 8000914:	460b      	mov	r3, r1
 8000916:	72fb      	strb	r3, [r7, #11]
 8000918:	4613      	mov	r3, r2
 800091a:	72bb      	strb	r3, [r7, #10]

	Reverb *reverb = malloc(sizeof(Reverb));
 800091c:	2010      	movs	r0, #16
 800091e:	f003 fd7f 	bl	8004420 <malloc>
 8000922:	4603      	mov	r3, r0
 8000924:	617b      	str	r3, [r7, #20]


    //Comb
    reverb->amountOfCombFilters = amountOfCombFilters;
 8000926:	7afa      	ldrb	r2, [r7, #11]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	601a      	str	r2, [r3, #0]

    reverb->combFilters = malloc(reverb->amountOfCombFilters*sizeof(CombFeedforward));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	4618      	mov	r0, r3
 8000934:	f003 fd74 	bl	8004420 <malloc>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	605a      	str	r2, [r3, #4]

    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
 8000944:	e014      	b.n	8000970 <initializeReverb+0x68>
        reverb->combFilters[i] = initializeCombFeedforward(sampleRate, delayCombS[i]);
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	685a      	ldr	r2, [r3, #4]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	18d4      	adds	r4, r2, r3
 800095c:	eeb0 0a67 	vmov.f32	s0, s15
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff ffa8 	bl	80008b6 <initializeCombFeedforward>
 8000966:	4603      	mov	r3, r0
 8000968:	6023      	str	r3, [r4, #0]
    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3301      	adds	r3, #1
 800096e:	61fb      	str	r3, [r7, #28]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbe5      	blt.n	8000946 <initializeReverb+0x3e>
    }
    
    
    //AllPass
    reverb->amountOfAllPassFilters = amountOfAllPassFilters;
 800097a:	7aba      	ldrb	r2, [r7, #10]
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	609a      	str	r2, [r3, #8]
    reverb->allPassFilters = malloc(reverb->amountOfAllPassFilters*sizeof(AllPass));
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	4618      	mov	r0, r3
 8000988:	f003 fd4a 	bl	8004420 <malloc>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	60da      	str	r2, [r3, #12]

    for(int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	e014      	b.n	80009c4 <initializeReverb+0xbc>
        reverb->allPassFilters[i] = initializeAllPass(sampleRate, delayAllS[i]);
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009a0:	4413      	add	r3, r2
 80009a2:	edd3 7a00 	vldr	s15, [r3]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	68da      	ldr	r2, [r3, #12]
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	18d4      	adds	r4, r2, r3
 80009b0:	eeb0 0a67 	vmov.f32	s0, s15
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff ff33 	bl	8000820 <initializeAllPass>
 80009ba:	4603      	mov	r3, r0
 80009bc:	6023      	str	r3, [r4, #0]
    for(int i = 0; i < reverb->amountOfAllPassFilters; i++){
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	3301      	adds	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dbe5      	blt.n	800099a <initializeReverb+0x92>
    }

    return reverb;
 80009ce:	697b      	ldr	r3, [r7, #20]

}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3724      	adds	r7, #36	; 0x24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}

080009d8 <InitIO>:
// 1, SelectingValue -> Disabled
// 2, Disabled -> SelectingFilter
// 3, SelectingFilter -> SelectingValue
uint8_t switchedStateFlag;

void InitIO(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
 80009dc:	f7ff fed8 	bl	8000790 <GetEnabledFilters>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <InitIO+0x1c>)
 80009e6:	f000 f971 	bl	8000ccc <LoadValueIntoShiftRegister>
	ResetShiftRegister(&shiftRegLedbar);
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <InitIO+0x20>)
 80009ec:	f000 f962 	bl	8000cb4 <ResetShiftRegister>
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000000c 	.word	0x2000000c
 80009f8:	20000024 	.word	0x20000024

080009fc <HandleSelectingFilter>:

void HandleSelectingFilter(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

	selectedFilter = (uint16_t)(rotaryEncoder.currentPos/4) % AMOUNT_OF_FILTERS;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HandleSelectingFilter+0x30>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HandleSelectingFilter+0x34>)
 8000a10:	701a      	strb	r2, [r3, #0]
	LoadValueIntoShiftRegister(&shiftRegFilterSelect, 1 << selectedFilter);
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HandleSelectingFilter+0x34>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4093      	lsls	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <HandleSelectingFilter+0x38>)
 8000a22:	f000 f953 	bl	8000ccc <LoadValueIntoShiftRegister>

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000003c 	.word	0x2000003c
 8000a30:	200004d9 	.word	0x200004d9
 8000a34:	2000000c 	.word	0x2000000c

08000a38 <HandleSelectingValue>:

void HandleSelectingValue(){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

	uint8_t led_bar = (rotaryEncoder.currentPos/4);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HandleSelectingValue+0x30>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	71fb      	strb	r3, [r7, #7]
	uint8_t ledbar_array = (1 << led_bar) - 1;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	3b01      	subs	r3, #1
 8000a52:	71bb      	strb	r3, [r7, #6]

	LoadValueIntoShiftRegister(&shiftRegLedbar, ledbar_array);
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <HandleSelectingValue+0x34>)
 8000a5a:	f000 f937 	bl	8000ccc <LoadValueIntoShiftRegister>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000003c 	.word	0x2000003c
 8000a6c:	20000024 	.word	0x20000024

08000a70 <ButtonInterrupt>:

void ButtonInterrupt(uint32_t time){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

	IOState = (IOState + 1)%3;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <ButtonInterrupt+0x44>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <ButtonInterrupt+0x48>)
 8000a80:	fb83 3102 	smull	r3, r1, r3, r2
 8000a84:	17d3      	asrs	r3, r2, #31
 8000a86:	1ac9      	subs	r1, r1, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	440b      	add	r3, r1
 8000a8e:	1ad1      	subs	r1, r2, r3
 8000a90:	b2ca      	uxtb	r2, r1
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <ButtonInterrupt+0x44>)
 8000a94:	701a      	strb	r2, [r3, #0]

	rotaryEncoder.currentPos = 0;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <ButtonInterrupt+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

	switchedStateFlag = IOState + 1;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <ButtonInterrupt+0x44>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <ButtonInterrupt+0x50>)
 8000aa6:	701a      	strb	r2, [r3, #0]


}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	200004d8 	.word	0x200004d8
 8000ab8:	55555556 	.word	0x55555556
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	200004da 	.word	0x200004da

08000ac4 <RotaryEncoderInterrupt>:

void RotaryEncoderInterrupt(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	rot_intrupt(&rotaryEncoder);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <RotaryEncoderInterrupt+0x10>)
 8000aca:	f000 f865 	bl	8000b98 <rot_intrupt>
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000003c 	.word	0x2000003c

08000ad8 <IOUpdate>:


void IOUpdate(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

	//Handling Transistions
	if(switchedStateFlag > 0){
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <IOUpdate+0x6c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d01b      	beq.n	8000b1c <IOUpdate+0x44>

		switch(switchedStateFlag){
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <IOUpdate+0x6c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d010      	beq.n	8000b0e <IOUpdate+0x36>
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	dc12      	bgt.n	8000b16 <IOUpdate+0x3e>
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d001      	beq.n	8000af8 <IOUpdate+0x20>
 8000af4:	2b02      	cmp	r3, #2
				LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
				ResetShiftRegister(&shiftRegLedbar);
				break;
			case 2:
				// Nothing needs to be reset
				break;
 8000af6:	e00e      	b.n	8000b16 <IOUpdate+0x3e>
				LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
 8000af8:	f7ff fe4a 	bl	8000790 <GetEnabledFilters>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4619      	mov	r1, r3
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <IOUpdate+0x70>)
 8000b02:	f000 f8e3 	bl	8000ccc <LoadValueIntoShiftRegister>
				ResetShiftRegister(&shiftRegLedbar);
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <IOUpdate+0x74>)
 8000b08:	f000 f8d4 	bl	8000cb4 <ResetShiftRegister>
				break;
 8000b0c:	e003      	b.n	8000b16 <IOUpdate+0x3e>
			case 3:
				// Nothing needs to be reset
				rotaryEncoder.currentPos = 4; // At least one led on, at start
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <IOUpdate+0x78>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	701a      	strb	r2, [r3, #0]
				break;
 8000b14:	bf00      	nop
		}

		switchedStateFlag = 0;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <IOUpdate+0x6c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

	}

	//Handling states
	switch (IOState) {
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <IOUpdate+0x7c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d009      	beq.n	8000b38 <IOUpdate+0x60>
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	dc0b      	bgt.n	8000b40 <IOUpdate+0x68>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <IOUpdate+0x66>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d000      	beq.n	8000b32 <IOUpdate+0x5a>
	    	break;
	  }



}
 8000b30:	e006      	b.n	8000b40 <IOUpdate+0x68>
	    	HandleSelectingFilter();
 8000b32:	f7ff ff63 	bl	80009fc <HandleSelectingFilter>
	    	break;
 8000b36:	e003      	b.n	8000b40 <IOUpdate+0x68>
	    	HandleSelectingValue();
 8000b38:	f7ff ff7e 	bl	8000a38 <HandleSelectingValue>
	    	break;
 8000b3c:	e000      	b.n	8000b40 <IOUpdate+0x68>
	    	break;
 8000b3e:	bf00      	nop
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200004da 	.word	0x200004da
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000024 	.word	0x20000024
 8000b50:	2000003c 	.word	0x2000003c
 8000b54:	200004d8 	.word	0x200004d8

08000b58 <rot_get_state>:

uint8_t rot_old_state =0;
uint8_t rot_new_state=0;


uint8_t rot_get_state(RotaryEncoder_t* rotEncoder) {
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	return (uint8_t)( (HAL_GPIO_ReadPin(rotEncoder->portB, rotEncoder->pinB) << 1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	8a1b      	ldrh	r3, [r3, #16]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	f001 fc46 	bl	80023fc <HAL_GPIO_ReadPin>
 8000b70:	4603      	mov	r3, r0
 8000b72:	005b      	lsls	r3, r3, #1
                	| (HAL_GPIO_ReadPin(rotEncoder->portA, rotEncoder->pinA)) );
 8000b74:	b25c      	sxtb	r4, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	891b      	ldrh	r3, [r3, #8]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4610      	mov	r0, r2
 8000b82:	f001 fc3b 	bl	80023fc <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	4323      	orrs	r3, r4
 8000b8c:	b25b      	sxtb	r3, r3
	return (uint8_t)( (HAL_GPIO_ReadPin(rotEncoder->portB, rotEncoder->pinB) << 1)
 8000b8e:	b2db      	uxtb	r3, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd90      	pop	{r4, r7, pc}

08000b98 <rot_intrupt>:

void rot_intrupt(RotaryEncoder_t* rotEncoder){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

	  rot_new_state = rot_get_state(rotEncoder);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ffd9 	bl	8000b58 <rot_get_state>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b40      	ldr	r3, [pc, #256]	; (8000cac <rot_intrupt+0x114>)
 8000bac:	701a      	strb	r2, [r3, #0]
	  		// Check transition
	  if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 8000bae:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <rot_intrupt+0x118>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d10a      	bne.n	8000bcc <rot_intrupt+0x34>
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <rot_intrupt+0x114>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d106      	bne.n	8000bcc <rot_intrupt+0x34>
		  rotEncoder->currentPos++;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e067      	b.n	8000c9c <rot_intrupt+0x104>
	  } else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 8000bcc:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <rot_intrupt+0x118>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d10a      	bne.n	8000bea <rot_intrupt+0x52>
 8000bd4:	4b35      	ldr	r3, [pc, #212]	; (8000cac <rot_intrupt+0x114>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <rot_intrupt+0x52>
		  rotEncoder->currentPos++;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e058      	b.n	8000c9c <rot_intrupt+0x104>
	  } else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <rot_intrupt+0x118>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <rot_intrupt+0x70>
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <rot_intrupt+0x114>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d106      	bne.n	8000c08 <rot_intrupt+0x70>
		  rotEncoder->currentPos++;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e049      	b.n	8000c9c <rot_intrupt+0x104>
	  } else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 8000c08:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <rot_intrupt+0x118>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10a      	bne.n	8000c26 <rot_intrupt+0x8e>
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <rot_intrupt+0x114>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d106      	bne.n	8000c26 <rot_intrupt+0x8e>
		  rotEncoder->currentPos++;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e03a      	b.n	8000c9c <rot_intrupt+0x104>
	  } else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 8000c26:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <rot_intrupt+0x118>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d10a      	bne.n	8000c44 <rot_intrupt+0xac>
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <rot_intrupt+0x114>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d106      	bne.n	8000c44 <rot_intrupt+0xac>
		  rotEncoder->currentPos--;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	e02b      	b.n	8000c9c <rot_intrupt+0x104>
	  } else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 8000c44:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <rot_intrupt+0x118>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10a      	bne.n	8000c62 <rot_intrupt+0xca>
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <rot_intrupt+0x114>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d106      	bne.n	8000c62 <rot_intrupt+0xca>
		  rotEncoder->currentPos--;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e01c      	b.n	8000c9c <rot_intrupt+0x104>
	  } else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <rot_intrupt+0x118>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10a      	bne.n	8000c80 <rot_intrupt+0xe8>
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <rot_intrupt+0x114>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d106      	bne.n	8000c80 <rot_intrupt+0xe8>
		  rotEncoder->currentPos--;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	e00d      	b.n	8000c9c <rot_intrupt+0x104>
	  } else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <rot_intrupt+0x118>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d109      	bne.n	8000c9c <rot_intrupt+0x104>
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <rot_intrupt+0x114>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d105      	bne.n	8000c9c <rot_intrupt+0x104>
		  rotEncoder->currentPos--;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	701a      	strb	r2, [r3, #0]
	  }
	  rot_old_state = rot_new_state;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <rot_intrupt+0x114>)
 8000c9e:	781a      	ldrb	r2, [r3, #0]
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <rot_intrupt+0x118>)
 8000ca2:	701a      	strb	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200004dc 	.word	0x200004dc
 8000cb0:	200004db 	.word	0x200004db

08000cb4 <ResetShiftRegister>:
 */


#include "ShiftRegister.h"

void ResetShiftRegister(ShiftRegister_t *reg){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	LoadValueIntoShiftRegister(reg, 0x00);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f804 	bl	8000ccc <LoadValueIntoShiftRegister>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <LoadValueIntoShiftRegister>:

void LoadValueIntoShiftRegister(ShiftRegister_t *reg, uint8_t num){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 7; i >= 0; i--) {
 8000cd8:	2307      	movs	r3, #7
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e02c      	b.n	8000d38 <LoadValueIntoShiftRegister+0x6c>
		GPIO_PinState bit_value = ((num >> i) & 1)  ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000cde:	78fa      	ldrb	r2, [r7, #3]
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	fa42 f303 	asr.w	r3, r2, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(reg->dataPort, reg->dataPin, bit_value);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6898      	ldr	r0, [r3, #8]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	899b      	ldrh	r3, [r3, #12]
 8000cf8:	7bba      	ldrb	r2, [r7, #14]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f001 fb96 	bl	800242c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fd31 	bl	8001768 <HAL_Delay>
		HAL_GPIO_WritePin(reg->clkPort, reg->clkPin, GPIO_PIN_SET);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	889b      	ldrh	r3, [r3, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4619      	mov	r1, r3
 8000d12:	f001 fb8b 	bl	800242c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f000 fd26 	bl	8001768 <HAL_Delay>
		HAL_GPIO_WritePin(reg->clkPort, reg->clkPin, GPIO_PIN_RESET);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	889b      	ldrh	r3, [r3, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	f001 fb80 	bl	800242c <HAL_GPIO_WritePin>
	for (int8_t i = 7; i >= 0; i--) {
 8000d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3b01      	subs	r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dace      	bge.n	8000cde <LoadValueIntoShiftRegister+0x12>
	  }

	HAL_GPIO_WritePin(reg->enabledPort, reg->enabledPin, GPIO_PIN_SET);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6918      	ldr	r0, [r3, #16]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	8a9b      	ldrh	r3, [r3, #20]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f001 fb6e 	bl	800242c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 fd09 	bl	8001768 <HAL_Delay>
	HAL_GPIO_WritePin(reg->enabledPort, reg->enabledPin, GPIO_PIN_RESET);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6918      	ldr	r0, [r3, #16]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	8a9b      	ldrh	r3, [r3, #20]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	f001 fb63 	bl	800242c <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d74:	f000 fc9b 	bl	80016ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f822 	bl	8000dc0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d7c:	f000 f88e 	bl	8000e9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d80:	f000 f976 	bl	8001070 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d84:	f000 f942 	bl	800100c <MX_DMA_Init>
  MX_I2C1_Init();
 8000d88:	f000 f8aa 	bl	8000ee0 <MX_I2C1_Init>
  MX_I2S1_Init();
 8000d8c:	f000 f8e8 	bl	8000f60 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000d90:	f000 f912 	bl	8000fb8 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  InitIO();
 8000d94:	f7ff fe20 	bl	80009d8 <InitIO>
  CodecInit(&hi2c1);
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <main+0x44>)
 8000d9a:	f7ff fbbf 	bl	800051c <CodecInit>

  InitDSP(44117, &hi2s1, &hi2s2); //44117 is in IOC file
 8000d9e:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <main+0x48>)
 8000da0:	4906      	ldr	r1, [pc, #24]	; (8000dbc <main+0x4c>)
 8000da2:	f64a 4055 	movw	r0, #44117	; 0xac55
 8000da6:	f7ff fc81 	bl	80006ac <InitDSP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	IOUpdate();
 8000daa:	f7ff fe95 	bl	8000ad8 <IOUpdate>
	DSPUpdate();
 8000dae:	f7ff fcb5 	bl	800071c <DSPUpdate>
	IOUpdate();
 8000db2:	e7fa      	b.n	8000daa <main+0x3a>
 8000db4:	200004e0 	.word	0x200004e0
 8000db8:	20000574 	.word	0x20000574
 8000dbc:	20000534 	.word	0x20000534

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	; 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f003 fbda 	bl	8004588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <SystemClock_Config+0xd4>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <SystemClock_Config+0xd4>)
 8000dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <SystemClock_Config+0xd4>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <SystemClock_Config+0xd8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a25      	ldr	r2, [pc, #148]	; (8000e98 <SystemClock_Config+0xd8>)
 8000e02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <SystemClock_Config+0xd8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e28:	2319      	movs	r3, #25
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e2c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fb30 	bl	80034a4 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e4a:	f000 f9cf 	bl	80011ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e4e:	f002 fad9 	bl	8003404 <HAL_PWREx_EnableOverDrive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e58:	f000 f9c8 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2107      	movs	r1, #7
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 fdb6 	bl	80039ec <HAL_RCC_ClockConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e86:	f000 f9b1 	bl	80011ec <Error_Handler>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3750      	adds	r7, #80	; 0x50
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40007000 	.word	0x40007000

08000e9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0a0      	sub	sp, #128	; 0x80
 8000ea0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fb6d 	bl	8004588 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000eb2:	23c0      	movs	r3, #192	; 0xc0
 8000eb4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f002 ff41 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <PeriphCommonClock_Config+0x3c>
  {
    Error_Handler();
 8000ed4:	f000 f98a 	bl	80011ec <Error_Handler>
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3780      	adds	r7, #128	; 0x80
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <MX_I2C1_Init+0x78>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <MX_I2C1_Init+0x7c>)
 8000eee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000f1c:	f001 fab8 	bl	8002490 <HAL_I2C_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f26:	f000 f961 	bl	80011ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000f2e:	f001 fe99 	bl	8002c64 <HAL_I2CEx_ConfigAnalogFilter>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f38:	f000 f958 	bl	80011ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_I2C1_Init+0x74>)
 8000f40:	f001 fedb 	bl	8002cfa <HAL_I2CEx_ConfigDigitalFilter>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 f94f 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200004e0 	.word	0x200004e0
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	20404768 	.word	0x20404768

08000f60 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f66:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <MX_I2S1_Init+0x54>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f70:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f84:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f88:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f8c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_I2S1_Init+0x50>)
 8000f9c:	f001 fefa 	bl	8002d94 <HAL_I2S_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2S1_Init+0x4a>
  {
    Error_Handler();
 8000fa6:	f000 f921 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000534 	.word	0x20000534
 8000fb4:	40013000 	.word	0x40013000

08000fb8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_I2S2_Init+0x50>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fde:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000fe2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000fec:	2202      	movs	r2, #2
 8000fee:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_I2S2_Init+0x4c>)
 8000ff2:	f001 fecf 	bl	8002d94 <HAL_I2S_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 8000ffc:	f000 f8f6 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000574 	.word	0x20000574
 8001008:	40003800 	.word	0x40003800

0800100c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_DMA_Init+0x60>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <MX_DMA_Init+0x60>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_DMA_Init+0x60>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_DMA_Init+0x60>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <MX_DMA_Init+0x60>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <MX_DMA_Init+0x60>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200e      	movs	r0, #14
 8001048:	f000 fc8d 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800104c:	200e      	movs	r0, #14
 800104e:	f000 fca6 	bl	800199e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	203b      	movs	r0, #59	; 0x3b
 8001058:	f000 fc85 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800105c:	203b      	movs	r0, #59	; 0x3b
 800105e:	f000 fc9e 	bl	800199e <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b43      	ldr	r3, [pc, #268]	; (8001194 <MX_GPIO_Init+0x124>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a42      	ldr	r2, [pc, #264]	; (8001194 <MX_GPIO_Init+0x124>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b40      	ldr	r3, [pc, #256]	; (8001194 <MX_GPIO_Init+0x124>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <MX_GPIO_Init+0x124>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a3c      	ldr	r2, [pc, #240]	; (8001194 <MX_GPIO_Init+0x124>)
 80010a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <MX_GPIO_Init+0x124>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b37      	ldr	r3, [pc, #220]	; (8001194 <MX_GPIO_Init+0x124>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a36      	ldr	r2, [pc, #216]	; (8001194 <MX_GPIO_Init+0x124>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b34      	ldr	r3, [pc, #208]	; (8001194 <MX_GPIO_Init+0x124>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_GPIO_Init+0x124>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a30      	ldr	r2, [pc, #192]	; (8001194 <MX_GPIO_Init+0x124>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <MX_GPIO_Init+0x124>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ShiftRegFDat_Pin|ShiftRegFStoClk_Pin|ShiftRegFClk_Pin|ShiftRegLBarDat_Pin
 80010e6:	2200      	movs	r2, #0
 80010e8:	f24e 010d 	movw	r1, #57357	; 0xe00d
 80010ec:	482a      	ldr	r0, [pc, #168]	; (8001198 <MX_GPIO_Init+0x128>)
 80010ee:	f001 f99d 	bl	800242c <HAL_GPIO_WritePin>
                          |ShiftRegLBarStoClk_Pin|ShiftRegLBarClk_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ShiftRegFDat_Pin ShiftRegFStoClk_Pin ShiftRegFClk_Pin ShiftRegLBarDat_Pin
                           ShiftRegLBarStoClk_Pin ShiftRegLBarClk_Pin */
  GPIO_InitStruct.Pin = ShiftRegFDat_Pin|ShiftRegFStoClk_Pin|ShiftRegFClk_Pin|ShiftRegLBarDat_Pin
 80010f2:	f24e 030d 	movw	r3, #57357	; 0xe00d
 80010f6:	617b      	str	r3, [r7, #20]
                          |ShiftRegLBarStoClk_Pin|ShiftRegLBarClk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4619      	mov	r1, r3
 800110a:	4823      	ldr	r0, [pc, #140]	; (8001198 <MX_GPIO_Init+0x128>)
 800110c:	f000 ffda 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RotEncoderInA_Pin RotEncoderButton_Pin */
  GPIO_InitStruct.Pin = RotEncoderInA_Pin|RotEncoderButton_Pin;
 8001110:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001116:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_GPIO_Init+0x128>)
 8001128:	f000 ffcc 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RotEncoderInB_Pin */
  GPIO_InitStruct.Pin = RotEncoderInB_Pin;
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001130:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RotEncoderInB_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4815      	ldr	r0, [pc, #84]	; (8001198 <MX_GPIO_Init+0x128>)
 8001142:	f000 ffbf 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToggleInput4_Pin ToggleInput3_Pin ToggleInput2_Pin ToggleInput1_Pin
                           ToggleInput8_Pin */
  GPIO_InitStruct.Pin = ToggleInput4_Pin|ToggleInput3_Pin|ToggleInput2_Pin|ToggleInput1_Pin
 8001146:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 800114a:	617b      	str	r3, [r7, #20]
                          |ToggleInput8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <MX_GPIO_Init+0x12c>)
 800115c:	f000 ffb2 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToggleInput7_Pin ToggleInput6_Pin ToggleInput5_Pin */
  GPIO_InitStruct.Pin = ToggleInput7_Pin|ToggleInput6_Pin|ToggleInput5_Pin;
 8001160:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <MX_GPIO_Init+0x128>)
 8001176:	f000 ffa5 	bl	80020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2017      	movs	r0, #23
 8001180:	f000 fbf1 	bl	8001966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001184:	2017      	movs	r0, #23
 8001186:	f000 fc0a 	bl	800199e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40020800 	.word	0x40020800
 800119c:	40020000 	.word	0x40020000

080011a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]

  /* Prevent unused argument(s) compilation warning */
  uint32_t currentMillis = HAL_GetTick();
 80011aa:	f000 fad1 	bl	8001750 <HAL_GetTick>
 80011ae:	60f8      	str	r0, [r7, #12]
  UNUSED(GPIO_Pin);


  if(GPIO_Pin == RotEncoderButton_Pin && (currentMillis - previousMillis > 100)){
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b6:	d108      	bne.n	80011ca <HAL_GPIO_EXTI_Callback+0x2a>
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b64      	cmp	r3, #100	; 0x64
 80011c2:	d902      	bls.n	80011ca <HAL_GPIO_EXTI_Callback+0x2a>
	  ButtonInterrupt(currentMillis);
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff fc53 	bl	8000a70 <ButtonInterrupt>
  }

  if(GPIO_Pin == RotEncoderInA_Pin || GPIO_Pin == RotEncoderInB_Pin){
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	2b40      	cmp	r3, #64	; 0x40
 80011ce:	d002      	beq.n	80011d6 <HAL_GPIO_EXTI_Callback+0x36>
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	2b80      	cmp	r3, #128	; 0x80
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_EXTI_Callback+0x3a>
	  RotaryEncoderInterrupt();
 80011d6:	f7ff fc75 	bl	8000ac4 <RotaryEncoderInterrupt>
  }

  previousMillis = currentMillis;
 80011da:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6013      	str	r3, [r2, #0]

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000674 	.word	0x20000674

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_MspInit+0x44>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_MspInit+0x44>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_MspInit+0x44>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_MspInit+0x44>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x44>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x44>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0aa      	sub	sp, #168	; 0xa8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f991 	bl	8004588 <memset>
  if(hi2c->Instance==I2C1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <HAL_I2C_MspInit+0xb0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d13b      	bne.n	80012e8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001274:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001276:	2300      	movs	r3, #0
 8001278:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fd66 	bl	8003d50 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800128a:	f7ff ffaf 	bl	80011ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ac:	2312      	movs	r3, #18
 80012ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012be:	2304      	movs	r3, #4
 80012c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c8:	4619      	mov	r1, r3
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <HAL_I2C_MspInit+0xb8>)
 80012cc:	f000 fefa 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_I2C_MspInit+0xb4>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	37a8      	adds	r7, #168	; 0xa8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a7c      	ldr	r2, [pc, #496]	; (800150c <HAL_I2S_MspInit+0x210>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d176      	bne.n	800140c <HAL_I2S_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131e:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a7b      	ldr	r2, [pc, #492]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001324:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b79      	ldr	r3, [pc, #484]	; (8001510 <HAL_I2S_MspInit+0x214>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	623b      	str	r3, [r7, #32]
 8001334:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_I2S_MspInit+0x214>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b73      	ldr	r3, [pc, #460]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b70      	ldr	r3, [pc, #448]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a6f      	ldr	r2, [pc, #444]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_I2S_MspInit+0x214>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001366:	23b0      	movs	r3, #176	; 0xb0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001376:	2305      	movs	r3, #5
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4864      	ldr	r0, [pc, #400]	; (8001514 <HAL_I2S_MspInit+0x218>)
 8001382:	f000 fe9f 	bl	80020c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001386:	2310      	movs	r3, #16
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001396:	2305      	movs	r3, #5
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	485d      	ldr	r0, [pc, #372]	; (8001518 <HAL_I2S_MspInit+0x21c>)
 80013a2:	f000 fe8f 	bl	80020c4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013a6:	4b5d      	ldr	r3, [pc, #372]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013a8:	4a5d      	ldr	r2, [pc, #372]	; (8001520 <HAL_I2S_MspInit+0x224>)
 80013aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013ac:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013ae:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b4:	4b59      	ldr	r3, [pc, #356]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ba:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c0:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013c8:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d0:	4b52      	ldr	r3, [pc, #328]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013de:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013e0:	4b4e      	ldr	r3, [pc, #312]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013e6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e8:	4b4c      	ldr	r3, [pc, #304]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013ee:	484b      	ldr	r0, [pc, #300]	; (800151c <HAL_I2S_MspInit+0x220>)
 80013f0:	f000 faf0 	bl	80019d4 <HAL_DMA_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2S_MspInit+0x102>
    {
      Error_Handler();
 80013fa:	f7ff fef7 	bl	80011ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a46      	ldr	r2, [pc, #280]	; (800151c <HAL_I2S_MspInit+0x220>)
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
 8001404:	4a45      	ldr	r2, [pc, #276]	; (800151c <HAL_I2S_MspInit+0x220>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800140a:	e07a      	b.n	8001502 <HAL_I2S_MspInit+0x206>
  else if(hi2s->Instance==SPI2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a44      	ldr	r2, [pc, #272]	; (8001524 <HAL_I2S_MspInit+0x228>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d175      	bne.n	8001502 <HAL_I2S_MspInit+0x206>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001416:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a3d      	ldr	r2, [pc, #244]	; (8001510 <HAL_I2S_MspInit+0x214>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a37      	ldr	r2, [pc, #220]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b35      	ldr	r3, [pc, #212]	; (8001510 <HAL_I2S_MspInit+0x214>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a31      	ldr	r2, [pc, #196]	; (8001510 <HAL_I2S_MspInit+0x214>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <HAL_I2S_MspInit+0x214>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145e:	2302      	movs	r3, #2
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800146e:	2305      	movs	r3, #5
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4827      	ldr	r0, [pc, #156]	; (8001518 <HAL_I2S_MspInit+0x21c>)
 800147a:	f000 fe23 	bl	80020c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800147e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001490:	2305      	movs	r3, #5
 8001492:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <HAL_I2S_MspInit+0x22c>)
 800149c:	f000 fe12 	bl	80020c4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014a2:	4a23      	ldr	r2, [pc, #140]	; (8001530 <HAL_I2S_MspInit+0x234>)
 80014a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014be:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014de:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014e8:	f000 fa74 	bl	80019d4 <HAL_DMA_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2S_MspInit+0x1fa>
      Error_Handler();
 80014f2:	f7ff fe7b 	bl	80011ec <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
 80014fc:	4a0b      	ldr	r2, [pc, #44]	; (800152c <HAL_I2S_MspInit+0x230>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001502:	bf00      	nop
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40013000 	.word	0x40013000
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020800 	.word	0x40020800
 800151c:	200005b4 	.word	0x200005b4
 8001520:	40026458 	.word	0x40026458
 8001524:	40003800 	.word	0x40003800
 8001528:	40020400 	.word	0x40020400
 800152c:	20000614 	.word	0x20000614
 8001530:	40026058 	.word	0x40026058

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <MemManage_Handler+0x4>

08001546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <UsageFault_Handler+0x4>

08001552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001580:	f000 f8d2 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA1_Stream3_IRQHandler+0x10>)
 800158e:	f000 fb2f 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000614 	.word	0x20000614

0800159c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RotEncoderInA_Pin);
 80015a0:	2040      	movs	r0, #64	; 0x40
 80015a2:	f000 ff5d 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RotEncoderInB_Pin);
 80015a6:	2080      	movs	r0, #128	; 0x80
 80015a8:	f000 ff5a 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RotEncoderButton_Pin);
 80015ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015b0:	f000 ff56 	bl	8002460 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <DMA2_Stream3_IRQHandler+0x10>)
 80015be:	f000 fb17 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200005b4 	.word	0x200005b4

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f002 ffdc 	bl	80045b8 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20040000 	.word	0x20040000
 800162c:	00000400 	.word	0x00000400
 8001630:	20000678 	.word	0x20000678
 8001634:	200007c8 	.word	0x200007c8

08001638 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f002 ff9b 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fb6f 	bl	8000d70 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80016a0:	08004668 	.word	0x08004668
  ldr r2, =_sbss
 80016a4:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80016a8:	200007c8 	.word	0x200007c8

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>

080016ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b2:	2003      	movs	r0, #3
 80016b4:	f000 f94c 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b8:	200f      	movs	r0, #15
 80016ba:	f000 f805 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016be:	f7ff fd9b 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f967 	bl	80019ba <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f92f 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000058 	.word	0x20000058
 8001720:	20000060 	.word	0x20000060
 8001724:	2000005c 	.word	0x2000005c

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000060 	.word	0x20000060
 800174c:	2000067c 	.word	0x2000067c

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	2000067c 	.word	0x2000067c

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000060 	.word	0x20000060

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <__NVIC_SetPriorityGrouping+0x40>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x40>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00
 80017f4:	05fa0000 	.word	0x05fa0000

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_EnableIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff29 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff3e 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff31 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffa2 	bl	800190c <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019e0:	f7ff feb6 	bl	8001750 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e099      	b.n	8001b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a10:	e00f      	b.n	8001a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a12:	f7ff fe9d 	bl	8001750 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d908      	bls.n	8001a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2203      	movs	r2, #3
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e078      	b.n	8001b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e8      	bne.n	8001a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_DMA_Init+0x158>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d107      	bne.n	8001a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4313      	orrs	r3, r2
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f023 0307 	bic.w	r3, r3, #7
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d117      	bne.n	8001af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fa77 	bl	8001fcc <DMA_CheckFifoParam>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001af2:	2301      	movs	r3, #1
 8001af4:	e016      	b.n	8001b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 fa2e 	bl	8001f60 <DMA_CalcBaseAndBitshift>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	223f      	movs	r2, #63	; 0x3f
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	e010803f 	.word	0xe010803f

08001b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_DMA_Start_IT+0x26>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e048      	b.n	8001be8 <HAL_DMA_Start_IT+0xb8>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d137      	bne.n	8001bda <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f9c0 	bl	8001f04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	223f      	movs	r2, #63	; 0x3f
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0216 	orr.w	r2, r2, #22
 8001b9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0208 	orr.w	r2, r2, #8
 8001bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e005      	b.n	8001be6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001bfc:	4b8e      	ldr	r3, [pc, #568]	; (8001e38 <HAL_DMA_IRQHandler+0x248>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a8e      	ldr	r2, [pc, #568]	; (8001e3c <HAL_DMA_IRQHandler+0x24c>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0a9b      	lsrs	r3, r3, #10
 8001c08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01a      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0204 	bic.w	r2, r2, #4
 8001c42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2208      	movs	r2, #8
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	2201      	movs	r2, #1
 8001c62:	409a      	lsls	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d012      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	2201      	movs	r2, #1
 8001c80:	409a      	lsls	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f043 0202 	orr.w	r2, r3, #2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	2204      	movs	r2, #4
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00b      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2210      	movs	r2, #16
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d043      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03c      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2210      	movs	r2, #16
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d018      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d108      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d024      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
 8001d1e:	e01f      	b.n	8001d60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
 8001d30:	e016      	b.n	8001d60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0208 	bic.w	r2, r2, #8
 8001d4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	2220      	movs	r2, #32
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 808f 	beq.w	8001e90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8087 	beq.w	8001e90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	2220      	movs	r2, #32
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d136      	bne.n	8001e08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0216 	bic.w	r2, r2, #22
 8001da8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_DMA_IRQHandler+0x1da>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0208 	bic.w	r2, r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	223f      	movs	r2, #63	; 0x3f
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d07e      	beq.n	8001efc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
        }
        return;
 8001e06:	e079      	b.n	8001efc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01d      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10d      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d031      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
 8001e34:	e02c      	b.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
 8001e36:	bf00      	nop
 8001e38:	20000058 	.word	0x20000058
 8001e3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
 8001e50:	e01e      	b.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10f      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0210 	bic.w	r2, r2, #16
 8001e6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d032      	beq.n	8001efe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d022      	beq.n	8001eea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2205      	movs	r2, #5
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d307      	bcc.n	8001ed8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f2      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x2cc>
 8001ed6:	e000      	b.n	8001eda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ed8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e000      	b.n	8001efe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001efc:	bf00      	nop
    }
  }
}
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b40      	cmp	r3, #64	; 0x40
 8001f30:	d108      	bne.n	8001f44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f42:	e007      	b.n	8001f54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	3b10      	subs	r3, #16
 8001f70:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x60>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <DMA_CalcBaseAndBitshift+0x64>)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d908      	bls.n	8001fa0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	1d1a      	adds	r2, r3, #4
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f9e:	e006      	b.n	8001fae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	aaaaaaab 	.word	0xaaaaaaab
 8001fc4:	08004650 	.word	0x08004650
 8001fc8:	fffffc00 	.word	0xfffffc00

08001fcc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11f      	bne.n	8002026 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d856      	bhi.n	800209a <DMA_CheckFifoParam+0xce>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <DMA_CheckFifoParam+0x28>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	08002005 	.word	0x08002005
 8001ff8:	08002017 	.word	0x08002017
 8001ffc:	08002005 	.word	0x08002005
 8002000:	0800209b 	.word	0x0800209b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d046      	beq.n	800209e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002014:	e043      	b.n	800209e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800201e:	d140      	bne.n	80020a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002024:	e03d      	b.n	80020a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202e:	d121      	bne.n	8002074 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d837      	bhi.n	80020a6 <DMA_CheckFifoParam+0xda>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <DMA_CheckFifoParam+0x70>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	0800204d 	.word	0x0800204d
 8002040:	08002053 	.word	0x08002053
 8002044:	0800204d 	.word	0x0800204d
 8002048:	08002065 	.word	0x08002065
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      break;
 8002050:	e030      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d025      	beq.n	80020aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002062:	e022      	b.n	80020aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800206c:	d11f      	bne.n	80020ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002072:	e01c      	b.n	80020ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d903      	bls.n	8002082 <DMA_CheckFifoParam+0xb6>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d003      	beq.n	8002088 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002080:	e018      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
      break;
 8002086:	e015      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00e      	beq.n	80020b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      break;
 8002098:	e00b      	b.n	80020b2 <DMA_CheckFifoParam+0xe6>
      break;
 800209a:	bf00      	nop
 800209c:	e00a      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
 80020a0:	e008      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
 80020a4:	e006      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
 80020a8:	e004      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      break;
 80020aa:	bf00      	nop
 80020ac:	e002      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80020ae:	bf00      	nop
 80020b0:	e000      	b.n	80020b4 <DMA_CheckFifoParam+0xe8>
      break;
 80020b2:	bf00      	nop
    }
  } 
  
  return status; 
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e169      	b.n	80023b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 8158 	bne.w	80023b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_GPIO_Init+0x56>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b03      	cmp	r3, #3
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d123      	bne.n	800220c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80b2 	beq.w	80023b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4b60      	ldr	r3, [pc, #384]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a5f      	ldr	r2, [pc, #380]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <HAL_GPIO_Init+0x30c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_GPIO_Init+0x310>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_GPIO_Init+0x314>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <HAL_GPIO_Init+0x226>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a51      	ldr	r2, [pc, #324]	; (80023dc <HAL_GPIO_Init+0x318>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d025      	beq.n	80022e6 <HAL_GPIO_Init+0x222>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a50      	ldr	r2, [pc, #320]	; (80023e0 <HAL_GPIO_Init+0x31c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01f      	beq.n	80022e2 <HAL_GPIO_Init+0x21e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a4f      	ldr	r2, [pc, #316]	; (80023e4 <HAL_GPIO_Init+0x320>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d019      	beq.n	80022de <HAL_GPIO_Init+0x21a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a4e      	ldr	r2, [pc, #312]	; (80023e8 <HAL_GPIO_Init+0x324>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0x216>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4d      	ldr	r2, [pc, #308]	; (80023ec <HAL_GPIO_Init+0x328>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00d      	beq.n	80022d6 <HAL_GPIO_Init+0x212>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4c      	ldr	r2, [pc, #304]	; (80023f0 <HAL_GPIO_Init+0x32c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <HAL_GPIO_Init+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <HAL_GPIO_Init+0x330>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_GPIO_Init+0x20a>
 80022ca:	2307      	movs	r3, #7
 80022cc:	e00e      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ce:	2308      	movs	r3, #8
 80022d0:	e00c      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d2:	2306      	movs	r3, #6
 80022d4:	e00a      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022d6:	2305      	movs	r3, #5
 80022d8:	e008      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022da:	2304      	movs	r3, #4
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022de:	2303      	movs	r3, #3
 80022e0:	e004      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e002      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_GPIO_Init+0x228>
 80022ea:	2300      	movs	r3, #0
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f002 0203 	and.w	r2, r2, #3
 80022f2:	0092      	lsls	r2, r2, #2
 80022f4:	4093      	lsls	r3, r2
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022fc:	4935      	ldr	r1, [pc, #212]	; (80023d4 <HAL_GPIO_Init+0x310>)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002358:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_GPIO_Init+0x334>)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b0f      	cmp	r3, #15
 80023bc:	f67f ae92 	bls.w	80020e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	40020000 	.word	0x40020000
 80023dc:	40020400 	.word	0x40020400
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020c00 	.word	0x40020c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40021800 	.word	0x40021800
 80023f4:	40021c00 	.word	0x40021c00
 80023f8:	40013c00 	.word	0x40013c00

080023fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e001      	b.n	800241e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002478:	88fb      	ldrh	r3, [r7, #6]
 800247a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fe8e 	bl	80011a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002484:	bf00      	nop
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e07f      	b.n	80025a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fec2 	bl	8001240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	e006      	b.n	8002518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d104      	bne.n	800252a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6859      	ldr	r1, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_I2C_Init+0x11c>)
 8002536:	430b      	orrs	r3, r1
 8002538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69d9      	ldr	r1, [r3, #28]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	02008000 	.word	0x02008000

080025b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	f040 80f9 	bne.w	80027ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_I2C_Mem_Write+0x34>
 80025de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0ed      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Mem_Write+0x4e>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e0e6      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002606:	f7ff f8a3 	bl	8001750 <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2319      	movs	r3, #25
 8002612:	2201      	movs	r2, #1
 8002614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f955 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0d1      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2221      	movs	r2, #33	; 0x21
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a3a      	ldr	r2, [r7, #32]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002650:	88f8      	ldrh	r0, [r7, #6]
 8002652:	893a      	ldrh	r2, [r7, #8]
 8002654:	8979      	ldrh	r1, [r7, #10]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	4603      	mov	r3, r0
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f8b9 	bl	80027d8 <I2C_RequestMemoryWrite>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0a9      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2bff      	cmp	r3, #255	; 0xff
 8002680:	d90e      	bls.n	80026a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	2300      	movs	r3, #0
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fab1 	bl	8002c00 <I2C_TransferConfig>
 800269e:	e00f      	b.n	80026c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	8979      	ldrh	r1, [r7, #10]
 80026b2:	2300      	movs	r3, #0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 faa0 	bl	8002c00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f93f 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e07b      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d034      	beq.n	8002778 <HAL_I2C_Mem_Write+0x1c8>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	d130      	bne.n	8002778 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	2200      	movs	r2, #0
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f8d1 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e04d      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2bff      	cmp	r3, #255	; 0xff
 8002738:	d90e      	bls.n	8002758 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	22ff      	movs	r2, #255	; 0xff
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002744:	b2da      	uxtb	r2, r3
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fa55 	bl	8002c00 <I2C_TransferConfig>
 8002756:	e00f      	b.n	8002778 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	b2da      	uxtb	r2, r3
 8002768:	8979      	ldrh	r1, [r7, #10]
 800276a:	2300      	movs	r3, #0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fa44 	bl	8002c00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d19e      	bne.n	80026c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f91e 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e01a      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2220      	movs	r2, #32
 800279c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_I2C_Mem_Write+0x224>)
 80027aa:	400b      	ands	r3, r1
 80027ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
  }
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	fe00e800 	.word	0xfe00e800

080027d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	8979      	ldrh	r1, [r7, #10]
 80027f8:	4b20      	ldr	r3, [pc, #128]	; (800287c <I2C_RequestMemoryWrite+0xa4>)
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f9fd 	bl	8002c00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	69b9      	ldr	r1, [r7, #24]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f89c 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e02c      	b.n	8002874 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002820:	893b      	ldrh	r3, [r7, #8]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
 800282a:	e015      	b.n	8002858 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800282c:	893b      	ldrh	r3, [r7, #8]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29b      	uxth	r3, r3
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	69b9      	ldr	r1, [r7, #24]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f882 	bl	8002948 <I2C_WaitOnTXISFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e012      	b.n	8002874 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800284e:	893b      	ldrh	r3, [r7, #8]
 8002850:	b2da      	uxtb	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f830 	bl	80028c8 <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	80002000 	.word	0x80002000

08002880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d103      	bne.n	800289e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d007      	beq.n	80028bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	619a      	str	r2, [r3, #24]
  }
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d8:	e022      	b.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d01e      	beq.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e2:	f7fe ff35 	bl	8001750 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d302      	bcc.n	80028f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d113      	bne.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e00f      	b.n	8002940 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	429a      	cmp	r2, r3
 800293c:	d0cd      	beq.n	80028da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002954:	e02c      	b.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f870 	bl	8002a40 <I2C_IsErrorOccurred>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e02a      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d01e      	beq.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002972:	f7fe feed 	bl	8001750 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d113      	bne.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d1cb      	bne.n	8002956 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d4:	e028      	b.n	8002a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f830 	bl	8002a40 <I2C_IsErrorOccurred>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e026      	b.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe feb1 	bl	8001750 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d113      	bne.n	8002a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d1cf      	bne.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d068      	beq.n	8002b3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2210      	movs	r2, #16
 8002a72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a74:	e049      	b.n	8002b0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d045      	beq.n	8002b0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fe fe67 	bl	8001750 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_IsErrorOccurred+0x54>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d13a      	bne.n	8002b0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab6:	d121      	bne.n	8002afc <I2C_IsErrorOccurred+0xbc>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002abe:	d01d      	beq.n	8002afc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d01a      	beq.n	8002afc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ad6:	f7fe fe3b 	bl	8001750 <HAL_GetTick>
 8002ada:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002adc:	e00e      	b.n	8002afc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ade:	f7fe fe37 	bl	8001750 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b19      	cmp	r3, #25
 8002aea:	d907      	bls.n	8002afc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f043 0320 	orr.w	r3, r3, #32
 8002af2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002afa:	e006      	b.n	8002b0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d1e9      	bne.n	8002ade <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d003      	beq.n	8002b20 <I2C_IsErrorOccurred+0xe0>
 8002b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0aa      	beq.n	8002a76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d103      	bne.n	8002b30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f043 0308 	orr.w	r3, r3, #8
 8002b78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f043 0302 	orr.w	r3, r3, #2
 8002b9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01c      	beq.n	8002bee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff fe63 	bl	8002880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <I2C_IsErrorOccurred+0x1bc>)
 8002bc6:	400b      	ands	r3, r1
 8002bc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3728      	adds	r7, #40	; 0x28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	fe00e800 	.word	0xfe00e800

08002c00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c12:	897b      	ldrh	r3, [r7, #10]
 8002c14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c18:	7a7b      	ldrb	r3, [r7, #9]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	0d5b      	lsrs	r3, r3, #21
 8002c3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <I2C_TransferConfig+0x60>)
 8002c40:	430b      	orrs	r3, r1
 8002c42:	43db      	mvns	r3, r3
 8002c44:	ea02 0103 	and.w	r1, r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	03ff63ff 	.word	0x03ff63ff

08002c64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	d138      	bne.n	8002cec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e032      	b.n	8002cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d139      	bne.n	8002d84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e033      	b.n	8002d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2224      	movs	r2, #36	; 0x24
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0d2      	b.n	8002f4c <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fa9e 	bl	80012fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	69d9      	ldr	r1, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b60      	ldr	r3, [pc, #384]	; (8002f54 <HAL_I2S_Init+0x1c0>)
 8002dd4:	400b      	ands	r3, r1
 8002dd6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d067      	beq.n	8002eb8 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002df0:	2310      	movs	r3, #16
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e001      	b.n	8002dfa <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d102      	bne.n	8002e16 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8002e10:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <HAL_I2S_Init+0x1c4>)
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e003      	b.n	8002e1e <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa24 	bl	8003264 <I2S_GetClockFreq>
 8002e1c:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e26:	d125      	bne.n	8002e74 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	3305      	adds	r3, #5
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e01f      	b.n	8002e92 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	461a      	mov	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	3305      	adds	r3, #5
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e00e      	b.n	8002e92 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	3305      	adds	r3, #5
 8002e90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_I2S_Init+0x1c8>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	08db      	lsrs	r3, r3, #3
 8002e9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	085b      	lsrs	r3, r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	e003      	b.n	8002ec0 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d902      	bls.n	8002ecc <HAL_I2S_Init+0x138>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	2bff      	cmp	r3, #255	; 0xff
 8002eca:	d907      	bls.n	8002edc <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	f043 0210 	orr.w	r2, r3, #16
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e037      	b.n	8002f4c <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	ea42 0103 	orr.w	r1, r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <HAL_I2S_Init+0x1c0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6851      	ldr	r1, [r2, #4]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6892      	ldr	r2, [r2, #8]
 8002f02:	4311      	orrs	r1, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	68d2      	ldr	r2, [r2, #12]
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6992      	ldr	r2, [r2, #24]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f1a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b30      	cmp	r3, #48	; 0x30
 8002f22:	d003      	beq.n	8002f2c <HAL_I2S_Init+0x198>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2bb0      	cmp	r3, #176	; 0xb0
 8002f2a:	d107      	bne.n	8002f3c <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	fffff040 	.word	0xfffff040
 8002f58:	00bb8000 	.word	0x00bb8000
 8002f5c:	cccccccd 	.word	0xcccccccd

08002f60 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_I2S_Transmit_DMA+0x1a>
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e08e      	b.n	800309c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_I2S_Transmit_DMA+0x2e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e086      	b.n	800309c <HAL_I2S_Transmit_DMA+0x13c>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d005      	beq.n	8002fae <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
 8002fac:	e076      	b.n	800309c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d002      	beq.n	8002fda <HAL_I2S_Transmit_DMA+0x7a>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	84da      	strh	r2, [r3, #38]	; 0x26
 8002fee:	e005      	b.n	8002ffc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <HAL_I2S_Transmit_DMA+0x144>)
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <HAL_I2S_Transmit_DMA+0x148>)
 800300a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_I2S_Transmit_DMA+0x14c>)
 8003012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800301c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003024:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800302a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800302c:	f7fe fd80 	bl	8001b30 <HAL_DMA_Start_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00f      	beq.n	8003056 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	f043 0208 	orr.w	r2, r3, #8
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e022      	b.n	800309c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003072:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0202 	orr.w	r2, r2, #2
 8003090:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	0800333f 	.word	0x0800333f
 80030a8:	080032fd 	.word	0x080032fd
 80030ac:	080033b9 	.word	0x080033b9

080030b0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_I2S_Receive_DMA+0x1a>
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0a1      	b.n	8003212 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_I2S_Receive_DMA+0x2e>
 80030da:	2302      	movs	r3, #2
 80030dc:	e099      	b.n	8003212 <HAL_I2S_Receive_DMA+0x162>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d005      	beq.n	80030fe <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
 80030fc:	e089      	b.n	8003212 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2204      	movs	r2, #4
 8003102:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d002      	beq.n	800312a <HAL_I2S_Receive_DMA+0x7a>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d10a      	bne.n	8003140 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800313e:	e005      	b.n	800314c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	88fa      	ldrh	r2, [r7, #6]
 8003144:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	4a32      	ldr	r2, [pc, #200]	; (800321c <HAL_I2S_Receive_DMA+0x16c>)
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	4a31      	ldr	r2, [pc, #196]	; (8003220 <HAL_I2S_Receive_DMA+0x170>)
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	4a30      	ldr	r2, [pc, #192]	; (8003224 <HAL_I2S_Receive_DMA+0x174>)
 8003162:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003172:	d10a      	bne.n	800318a <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	4619      	mov	r1, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80031a2:	f7fe fcc5 	bl	8001b30 <HAL_DMA_Start_IT>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00f      	beq.n	80031cc <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	f043 0208 	orr.w	r2, r3, #8
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e022      	b.n	8003212 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69da      	ldr	r2, [r3, #28]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031e8:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d107      	bne.n	8003208 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	0800339d 	.word	0x0800339d
 8003220:	0800335b 	.word	0x0800335b
 8003224:	080033b9 	.word	0x080033b9

08003228 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d02d      	beq.n	80032d0 <I2S_GetClockFreq+0x6c>
 8003274:	2b02      	cmp	r3, #2
 8003276:	d12e      	bne.n	80032d6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <I2S_GetClockFreq+0x88>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d108      	bne.n	8003296 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <I2S_GetClockFreq+0x88>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <I2S_GetClockFreq+0x8c>)
 800328e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e007      	b.n	80032a6 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <I2S_GetClockFreq+0x88>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329e:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <I2S_GetClockFreq+0x90>)
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <I2S_GetClockFreq+0x88>)
 80032a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ac:	0f1b      	lsrs	r3, r3, #28
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <I2S_GetClockFreq+0x88>)
 80032b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	fb03 f202 	mul.w	r2, r3, r2
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	613b      	str	r3, [r7, #16]

      break;
 80032ce:	e005      	b.n	80032dc <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <I2S_GetClockFreq+0x94>)
 80032d2:	613b      	str	r3, [r7, #16]
      break;
 80032d4:	e002      	b.n	80032dc <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
      break;
 80032da:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80032dc:	693b      	ldr	r3, [r7, #16]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	371c      	adds	r7, #28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	017d7840 	.word	0x017d7840
 80032f8:	00bb8000 	.word	0x00bb8000

080032fc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10e      	bne.n	8003330 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0202 	bic.w	r2, r2, #2
 8003320:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f7ff ff83 	bl	800323c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f7ff ff6b 	bl	8003228 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10e      	bne.n	800338e <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7fd fa28 	bl	80007e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f7fd f9fc 	bl	80007a8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0203 	bic.w	r2, r2, #3
 80033d4:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	f043 0208 	orr.w	r2, r3, #8
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff ff2a 	bl	8003250 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <HAL_PWREx_EnableOverDrive+0x98>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	4a22      	ldr	r2, [pc, #136]	; (800349c <HAL_PWREx_EnableOverDrive+0x98>)
 8003414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003418:	6413      	str	r3, [r2, #64]	; 0x40
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_PWREx_EnableOverDrive+0x98>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003426:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800342c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003430:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003432:	f7fe f98d 	bl	8001750 <HAL_GetTick>
 8003436:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003438:	e009      	b.n	800344e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800343a:	f7fe f989 	bl	8001750 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003448:	d901      	bls.n	800344e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e022      	b.n	8003494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345a:	d1ee      	bne.n	800343a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003468:	f7fe f972 	bl	8001750 <HAL_GetTick>
 800346c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800346e:	e009      	b.n	8003484 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003470:	f7fe f96e 	bl	8001750 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347e:	d901      	bls.n	8003484 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e007      	b.n	8003494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003490:	d1ee      	bne.n	8003470 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40023800 	.word	0x40023800
 80034a0:	40007000 	.word	0x40007000

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034ac:	2300      	movs	r3, #0
 80034ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e291      	b.n	80039de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8087 	beq.w	80035d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c8:	4b96      	ldr	r3, [pc, #600]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d00c      	beq.n	80034ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d4:	4b93      	ldr	r3, [pc, #588]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d112      	bne.n	8003506 <HAL_RCC_OscConfig+0x62>
 80034e0:	4b90      	ldr	r3, [pc, #576]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ec:	d10b      	bne.n	8003506 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ee:	4b8d      	ldr	r3, [pc, #564]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d06c      	beq.n	80035d4 <HAL_RCC_OscConfig+0x130>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d168      	bne.n	80035d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e26b      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350e:	d106      	bne.n	800351e <HAL_RCC_OscConfig+0x7a>
 8003510:	4b84      	ldr	r3, [pc, #528]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a83      	ldr	r2, [pc, #524]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e02e      	b.n	800357c <HAL_RCC_OscConfig+0xd8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0x9c>
 8003526:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7e      	ldr	r2, [pc, #504]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800352c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b7c      	ldr	r3, [pc, #496]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7b      	ldr	r2, [pc, #492]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e01d      	b.n	800357c <HAL_RCC_OscConfig+0xd8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0xc0>
 800354a:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a75      	ldr	r2, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b73      	ldr	r3, [pc, #460]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a72      	ldr	r2, [pc, #456]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0xd8>
 8003564:	4b6f      	ldr	r3, [pc, #444]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6e      	ldr	r2, [pc, #440]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800356a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b6c      	ldr	r3, [pc, #432]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6b      	ldr	r2, [pc, #428]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe f8e4 	bl	8001750 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe f8e0 	bl	8001750 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e21f      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b61      	ldr	r3, [pc, #388]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xe8>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe f8d0 	bl	8001750 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe f8cc 	bl	8001750 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e20b      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	4b57      	ldr	r3, [pc, #348]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x110>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d069      	beq.n	80036b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e2:	4b50      	ldr	r3, [pc, #320]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b4d      	ldr	r3, [pc, #308]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d11c      	bne.n	8003634 <HAL_RCC_OscConfig+0x190>
 80035fa:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x17a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1df      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	493d      	ldr	r1, [pc, #244]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e040      	b.n	80036b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363c:	4b39      	ldr	r3, [pc, #228]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a38      	ldr	r2, [pc, #224]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe f882 	bl	8001750 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003650:	f7fe f87e 	bl	8001750 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1bd      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4929      	ldr	r1, [pc, #164]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
 8003682:	e018      	b.n	80036b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fe f85e 	bl	8001750 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe f85a 	bl	8001750 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e199      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d038      	beq.n	8003734 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b16      	ldr	r3, [pc, #88]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fe f83b 	bl	8001750 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036de:	f7fe f837 	bl	8001750 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e176      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x23a>
 80036fc:	e01a      	b.n	8003734 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <HAL_RCC_OscConfig+0x280>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fe f821 	bl	8001750 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe f81d 	bl	8001750 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d903      	bls.n	8003728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e15c      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
 8003724:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	4b91      	ldr	r3, [pc, #580]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ee      	bne.n	8003712 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a4 	beq.w	800388a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b8b      	ldr	r3, [pc, #556]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	4b88      	ldr	r3, [pc, #544]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a87      	ldr	r2, [pc, #540]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b85      	ldr	r3, [pc, #532]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376a:	4b82      	ldr	r3, [pc, #520]	; (8003974 <HAL_RCC_OscConfig+0x4d0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d118      	bne.n	80037a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003776:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a7e      	ldr	r2, [pc, #504]	; (8003974 <HAL_RCC_OscConfig+0x4d0>)
 800377c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003782:	f7fd ffe5 	bl	8001750 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378a:	f7fd ffe1 	bl	8001750 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b64      	cmp	r3, #100	; 0x64
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e120      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379c:	4b75      	ldr	r3, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x4d0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d106      	bne.n	80037be <HAL_RCC_OscConfig+0x31a>
 80037b0:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a6e      	ldr	r2, [pc, #440]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	e02d      	b.n	800381a <HAL_RCC_OscConfig+0x376>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10c      	bne.n	80037e0 <HAL_RCC_OscConfig+0x33c>
 80037c6:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a69      	ldr	r2, [pc, #420]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a66      	ldr	r2, [pc, #408]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
 80037de:	e01c      	b.n	800381a <HAL_RCC_OscConfig+0x376>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b05      	cmp	r3, #5
 80037e6:	d10c      	bne.n	8003802 <HAL_RCC_OscConfig+0x35e>
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a60      	ldr	r2, [pc, #384]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003800:	e00b      	b.n	800381a <HAL_RCC_OscConfig+0x376>
 8003802:	4b5b      	ldr	r3, [pc, #364]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a5a      	ldr	r2, [pc, #360]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
 800380e:	4b58      	ldr	r3, [pc, #352]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a57      	ldr	r2, [pc, #348]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d015      	beq.n	800384e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fd ff95 	bl	8001750 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd ff91 	bl	8001750 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0ce      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ee      	beq.n	800382a <HAL_RCC_OscConfig+0x386>
 800384c:	e014      	b.n	8003878 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384e:	f7fd ff7f 	bl	8001750 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003854:	e00a      	b.n	800386c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003856:	f7fd ff7b 	bl	8001750 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f241 3288 	movw	r2, #5000	; 0x1388
 8003864:	4293      	cmp	r3, r2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0b8      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	4b40      	ldr	r3, [pc, #256]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ee      	bne.n	8003856 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d105      	bne.n	800388a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387e:	4b3c      	ldr	r3, [pc, #240]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a3b      	ldr	r2, [pc, #236]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80a4 	beq.w	80039dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d06b      	beq.n	8003978 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d149      	bne.n	800393c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b31      	ldr	r3, [pc, #196]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a30      	ldr	r2, [pc, #192]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd ff4c 	bl	8001750 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fd ff48 	bl	8001750 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e087      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b28      	ldr	r3, [pc, #160]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	4313      	orrs	r3, r2
 8003900:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003902:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003906:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd ff1c 	bl	8001750 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fd ff18 	bl	8001750 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e057      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x478>
 800393a:	e04f      	b.n	80039dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd ff02 	bl	8001750 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fd fefe 	bl	8001750 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e03d      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x4ac>
 800396e:	e035      	b.n	80039dc <HAL_RCC_OscConfig+0x538>
 8003970:	40023800 	.word	0x40023800
 8003974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x544>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d028      	beq.n	80039d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d121      	bne.n	80039d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d11a      	bne.n	80039d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d111      	bne.n	80039d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0d0      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b67      	ldr	r3, [pc, #412]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	4965      	ldr	r1, [pc, #404]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b63      	ldr	r3, [pc, #396]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0b8      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a58      	ldr	r2, [pc, #352]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a64:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	494d      	ldr	r1, [pc, #308]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d040      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d115      	bne.n	8003ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e07f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aae:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e073      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	4b3d      	ldr	r3, [pc, #244]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06b      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4936      	ldr	r1, [pc, #216]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae0:	f7fd fe36 	bl	8001750 <HAL_GetTick>
 8003ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7fd fe32 	bl	8001750 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e053      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 020c 	and.w	r2, r3, #12
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d1eb      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b10:	4b27      	ldr	r3, [pc, #156]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d210      	bcs.n	8003b40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 020f 	bic.w	r2, r3, #15
 8003b26:	4922      	ldr	r1, [pc, #136]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e032      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b4c:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4916      	ldr	r1, [pc, #88]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	490e      	ldr	r1, [pc, #56]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b7e:	f000 f821 	bl	8003bc4 <HAL_RCC_GetSysClockFreq>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8003b90:	5ccb      	ldrb	r3, [r1, r3]
 8003b92:	fa22 f303 	lsr.w	r3, r2, r3
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <HAL_RCC_ClockConfig+0x1d0>)
 8003b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_ClockConfig+0x1d4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fd92 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023c00 	.word	0x40023c00
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	08004640 	.word	0x08004640
 8003bbc:	20000058 	.word	0x20000058
 8003bc0:	2000005c 	.word	0x2000005c

08003bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc8:	b090      	sub	sp, #64	; 0x40
 8003bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d00d      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x40>
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	f200 80a1 	bhi.w	8003d30 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d003      	beq.n	8003bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8003bf6:	e09b      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bfc:	e09b      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bfe:	4b53      	ldr	r3, [pc, #332]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c02:	e098      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c04:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c0e:	4b4d      	ldr	r3, [pc, #308]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d028      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1a:	4b4a      	ldr	r3, [pc, #296]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	099b      	lsrs	r3, r3, #6
 8003c20:	2200      	movs	r2, #0
 8003c22:	623b      	str	r3, [r7, #32]
 8003c24:	627a      	str	r2, [r7, #36]	; 0x24
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4b47      	ldr	r3, [pc, #284]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c30:	fb03 f201 	mul.w	r2, r3, r1
 8003c34:	2300      	movs	r3, #0
 8003c36:	fb00 f303 	mul.w	r3, r0, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a43      	ldr	r2, [pc, #268]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c44:	460a      	mov	r2, r1
 8003c46:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4a:	4413      	add	r3, r2
 8003c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	2200      	movs	r2, #0
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	61fa      	str	r2, [r7, #28]
 8003c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c5e:	f7fc fadf 	bl	8000220 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4613      	mov	r3, r2
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6a:	e053      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6c:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	2200      	movs	r2, #0
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	617a      	str	r2, [r7, #20]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c7e:	f04f 0b00 	mov.w	fp, #0
 8003c82:	4652      	mov	r2, sl
 8003c84:	465b      	mov	r3, fp
 8003c86:	f04f 0000 	mov.w	r0, #0
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	0159      	lsls	r1, r3, #5
 8003c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c94:	0150      	lsls	r0, r2, #5
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003c9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cb6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cba:	eb63 0509 	sbc.w	r5, r3, r9
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	00eb      	lsls	r3, r5, #3
 8003cc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ccc:	00e2      	lsls	r2, r4, #3
 8003cce:	4614      	mov	r4, r2
 8003cd0:	461d      	mov	r5, r3
 8003cd2:	eb14 030a 	adds.w	r3, r4, sl
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	eb45 030b 	adc.w	r3, r5, fp
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cea:	4629      	mov	r1, r5
 8003cec:	028b      	lsls	r3, r1, #10
 8003cee:	4621      	mov	r1, r4
 8003cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	028a      	lsls	r2, r1, #10
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	2200      	movs	r2, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	60fa      	str	r2, [r7, #12]
 8003d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d08:	f7fc fa8a 	bl	8000220 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3740      	adds	r7, #64	; 0x40
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	017d7840 	.word	0x017d7840

08003d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d012      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d74:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a64      	ldr	r2, [pc, #400]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d7e:	6093      	str	r3, [r2, #8]
 8003d80:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4960      	ldr	r1, [pc, #384]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d017      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003da6:	4b59      	ldr	r3, [pc, #356]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	4955      	ldr	r1, [pc, #340]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc4:	d101      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d017      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003de2:	4b4a      	ldr	r3, [pc, #296]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	4946      	ldr	r1, [pc, #280]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e00:	d101      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 808b 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e20:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	4a39      	ldr	r2, [pc, #228]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2c:	4b37      	ldr	r3, [pc, #220]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e38:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd fc84 	bl	8001750 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4c:	f7fd fc80 	bl	8001750 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e2bc      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e5e:	4b2c      	ldr	r3, [pc, #176]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e6a:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d035      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d02e      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e92:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9e:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003eaa:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003eb0:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d114      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fc48 	bl	8001750 <HAL_GetTick>
 8003ec0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd fc44 	bl	8001750 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e27e      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef2:	d111      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003f02:	400b      	ands	r3, r1
 8003f04:	4901      	ldr	r1, [pc, #4]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000
 8003f14:	0ffffcff 	.word	0x0ffffcff
 8003f18:	4ba4      	ldr	r3, [pc, #656]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4aa3      	ldr	r2, [pc, #652]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f22:	6093      	str	r3, [r2, #8]
 8003f24:	4ba1      	ldr	r3, [pc, #644]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f30:	499e      	ldr	r1, [pc, #632]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d010      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f42:	4b9a      	ldr	r3, [pc, #616]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f48:	4a98      	ldr	r2, [pc, #608]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f52:	4b96      	ldr	r3, [pc, #600]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	4993      	ldr	r1, [pc, #588]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f70:	4b8e      	ldr	r3, [pc, #568]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	498b      	ldr	r1, [pc, #556]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f92:	4b86      	ldr	r3, [pc, #536]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa0:	4982      	ldr	r1, [pc, #520]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fb4:	4b7d      	ldr	r3, [pc, #500]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc2:	497a      	ldr	r1, [pc, #488]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd6:	4b75      	ldr	r3, [pc, #468]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f023 0203 	bic.w	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	4971      	ldr	r1, [pc, #452]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f023 020c 	bic.w	r2, r3, #12
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4969      	ldr	r1, [pc, #420]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800401a:	4b64      	ldr	r3, [pc, #400]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	4960      	ldr	r1, [pc, #384]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800403c:	4b5b      	ldr	r3, [pc, #364]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	4958      	ldr	r1, [pc, #352]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800405e:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406c:	494f      	ldr	r1, [pc, #316]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004080:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	4947      	ldr	r1, [pc, #284]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	493e      	ldr	r1, [pc, #248]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4936      	ldr	r1, [pc, #216]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d011      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040e6:	4b31      	ldr	r3, [pc, #196]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f4:	492d      	ldr	r1, [pc, #180]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004104:	d101      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004106:	2301      	movs	r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004116:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004124:	4921      	ldr	r1, [pc, #132]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004138:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004146:	4919      	ldr	r1, [pc, #100]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800415a:	4b14      	ldr	r3, [pc, #80]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004168:	4910      	ldr	r1, [pc, #64]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d006      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 809d 	beq.w	80042be <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a08      	ldr	r2, [pc, #32]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800418a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800418e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004190:	f7fd fade 	bl	8001750 <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004196:	e00b      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004198:	f7fd fada 	bl	8001750 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d904      	bls.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e116      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b0:	4b8b      	ldr	r3, [pc, #556]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ed      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d113      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041d0:	4b83      	ldr	r3, [pc, #524]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d6:	0e1b      	lsrs	r3, r3, #24
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	019a      	lsls	r2, r3, #6
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	497b      	ldr	r1, [pc, #492]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004216:	2b00      	cmp	r3, #0
 8004218:	d024      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004222:	d11f      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004224:	4b6e      	ldr	r3, [pc, #440]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422a:	0f1b      	lsrs	r3, r3, #28
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	019a      	lsls	r2, r3, #6
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	431a      	orrs	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	071b      	lsls	r3, r3, #28
 8004244:	4966      	ldr	r1, [pc, #408]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800424c:	4b64      	ldr	r3, [pc, #400]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800424e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004252:	f023 021f 	bic.w	r2, r3, #31
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	3b01      	subs	r3, #1
 800425c:	4960      	ldr	r1, [pc, #384]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	019a      	lsls	r2, r3, #6
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	071b      	lsls	r3, r3, #28
 8004284:	4956      	ldr	r1, [pc, #344]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800428c:	4b54      	ldr	r3, [pc, #336]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a53      	ldr	r2, [pc, #332]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004298:	f7fd fa5a 	bl	8001750 <HAL_GetTick>
 800429c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a0:	f7fd fa56 	bl	8001750 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e092      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042b2:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 8088 	bne.w	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042c6:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a45      	ldr	r2, [pc, #276]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fd fa3d 	bl	8001750 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042da:	f7fd fa39 	bl	8001750 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b64      	cmp	r3, #100	; 0x64
 80042e6:	d901      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e075      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042ec:	4b3c      	ldr	r3, [pc, #240]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f8:	d0ef      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004316:	2b00      	cmp	r3, #0
 8004318:	d024      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d120      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004322:	4b2f      	ldr	r3, [pc, #188]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	019a      	lsls	r2, r3, #6
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	061b      	lsls	r3, r3, #24
 8004342:	4927      	ldr	r1, [pc, #156]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800434a:	4b25      	ldr	r3, [pc, #148]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004350:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	3b01      	subs	r3, #1
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	4920      	ldr	r1, [pc, #128]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d018      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004378:	d113      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	0e1b      	lsrs	r3, r3, #24
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	019a      	lsls	r2, r3, #6
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	041b      	lsls	r3, r3, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	4911      	ldr	r1, [pc, #68]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a0e      	ldr	r2, [pc, #56]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ae:	f7fd f9cf 	bl	8001750 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043b6:	f7fd f9cb 	bl	8001750 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b64      	cmp	r3, #100	; 0x64
 80043c2:	d901      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e007      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d4:	d1ef      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40023800 	.word	0x40023800

080043e4 <calloc>:
 80043e4:	4b02      	ldr	r3, [pc, #8]	; (80043f0 <calloc+0xc>)
 80043e6:	460a      	mov	r2, r1
 80043e8:	4601      	mov	r1, r0
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	f000 b802 	b.w	80043f4 <_calloc_r>
 80043f0:	200000b0 	.word	0x200000b0

080043f4 <_calloc_r>:
 80043f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043f6:	fba1 2402 	umull	r2, r4, r1, r2
 80043fa:	b94c      	cbnz	r4, 8004410 <_calloc_r+0x1c>
 80043fc:	4611      	mov	r1, r2
 80043fe:	9201      	str	r2, [sp, #4]
 8004400:	f000 f836 	bl	8004470 <_malloc_r>
 8004404:	9a01      	ldr	r2, [sp, #4]
 8004406:	4605      	mov	r5, r0
 8004408:	b930      	cbnz	r0, 8004418 <_calloc_r+0x24>
 800440a:	4628      	mov	r0, r5
 800440c:	b003      	add	sp, #12
 800440e:	bd30      	pop	{r4, r5, pc}
 8004410:	220c      	movs	r2, #12
 8004412:	6002      	str	r2, [r0, #0]
 8004414:	2500      	movs	r5, #0
 8004416:	e7f8      	b.n	800440a <_calloc_r+0x16>
 8004418:	4621      	mov	r1, r4
 800441a:	f000 f8b5 	bl	8004588 <memset>
 800441e:	e7f4      	b.n	800440a <_calloc_r+0x16>

08004420 <malloc>:
 8004420:	4b02      	ldr	r3, [pc, #8]	; (800442c <malloc+0xc>)
 8004422:	4601      	mov	r1, r0
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	f000 b823 	b.w	8004470 <_malloc_r>
 800442a:	bf00      	nop
 800442c:	200000b0 	.word	0x200000b0

08004430 <sbrk_aligned>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	4e0e      	ldr	r6, [pc, #56]	; (800446c <sbrk_aligned+0x3c>)
 8004434:	460c      	mov	r4, r1
 8004436:	6831      	ldr	r1, [r6, #0]
 8004438:	4605      	mov	r5, r0
 800443a:	b911      	cbnz	r1, 8004442 <sbrk_aligned+0x12>
 800443c:	f000 f8ac 	bl	8004598 <_sbrk_r>
 8004440:	6030      	str	r0, [r6, #0]
 8004442:	4621      	mov	r1, r4
 8004444:	4628      	mov	r0, r5
 8004446:	f000 f8a7 	bl	8004598 <_sbrk_r>
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	d00a      	beq.n	8004464 <sbrk_aligned+0x34>
 800444e:	1cc4      	adds	r4, r0, #3
 8004450:	f024 0403 	bic.w	r4, r4, #3
 8004454:	42a0      	cmp	r0, r4
 8004456:	d007      	beq.n	8004468 <sbrk_aligned+0x38>
 8004458:	1a21      	subs	r1, r4, r0
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f89c 	bl	8004598 <_sbrk_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d101      	bne.n	8004468 <sbrk_aligned+0x38>
 8004464:	f04f 34ff 	mov.w	r4, #4294967295
 8004468:	4620      	mov	r0, r4
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	20000684 	.word	0x20000684

08004470 <_malloc_r>:
 8004470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004474:	1ccd      	adds	r5, r1, #3
 8004476:	f025 0503 	bic.w	r5, r5, #3
 800447a:	3508      	adds	r5, #8
 800447c:	2d0c      	cmp	r5, #12
 800447e:	bf38      	it	cc
 8004480:	250c      	movcc	r5, #12
 8004482:	2d00      	cmp	r5, #0
 8004484:	4607      	mov	r7, r0
 8004486:	db01      	blt.n	800448c <_malloc_r+0x1c>
 8004488:	42a9      	cmp	r1, r5
 800448a:	d905      	bls.n	8004498 <_malloc_r+0x28>
 800448c:	230c      	movs	r3, #12
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	2600      	movs	r6, #0
 8004492:	4630      	mov	r0, r6
 8004494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004498:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800456c <_malloc_r+0xfc>
 800449c:	f000 f868 	bl	8004570 <__malloc_lock>
 80044a0:	f8d8 3000 	ldr.w	r3, [r8]
 80044a4:	461c      	mov	r4, r3
 80044a6:	bb5c      	cbnz	r4, 8004500 <_malloc_r+0x90>
 80044a8:	4629      	mov	r1, r5
 80044aa:	4638      	mov	r0, r7
 80044ac:	f7ff ffc0 	bl	8004430 <sbrk_aligned>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	4604      	mov	r4, r0
 80044b4:	d155      	bne.n	8004562 <_malloc_r+0xf2>
 80044b6:	f8d8 4000 	ldr.w	r4, [r8]
 80044ba:	4626      	mov	r6, r4
 80044bc:	2e00      	cmp	r6, #0
 80044be:	d145      	bne.n	800454c <_malloc_r+0xdc>
 80044c0:	2c00      	cmp	r4, #0
 80044c2:	d048      	beq.n	8004556 <_malloc_r+0xe6>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	4631      	mov	r1, r6
 80044c8:	4638      	mov	r0, r7
 80044ca:	eb04 0903 	add.w	r9, r4, r3
 80044ce:	f000 f863 	bl	8004598 <_sbrk_r>
 80044d2:	4581      	cmp	r9, r0
 80044d4:	d13f      	bne.n	8004556 <_malloc_r+0xe6>
 80044d6:	6821      	ldr	r1, [r4, #0]
 80044d8:	1a6d      	subs	r5, r5, r1
 80044da:	4629      	mov	r1, r5
 80044dc:	4638      	mov	r0, r7
 80044de:	f7ff ffa7 	bl	8004430 <sbrk_aligned>
 80044e2:	3001      	adds	r0, #1
 80044e4:	d037      	beq.n	8004556 <_malloc_r+0xe6>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	442b      	add	r3, r5
 80044ea:	6023      	str	r3, [r4, #0]
 80044ec:	f8d8 3000 	ldr.w	r3, [r8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d038      	beq.n	8004566 <_malloc_r+0xf6>
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	42a2      	cmp	r2, r4
 80044f8:	d12b      	bne.n	8004552 <_malloc_r+0xe2>
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	e00f      	b.n	8004520 <_malloc_r+0xb0>
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	1b52      	subs	r2, r2, r5
 8004504:	d41f      	bmi.n	8004546 <_malloc_r+0xd6>
 8004506:	2a0b      	cmp	r2, #11
 8004508:	d917      	bls.n	800453a <_malloc_r+0xca>
 800450a:	1961      	adds	r1, r4, r5
 800450c:	42a3      	cmp	r3, r4
 800450e:	6025      	str	r5, [r4, #0]
 8004510:	bf18      	it	ne
 8004512:	6059      	strne	r1, [r3, #4]
 8004514:	6863      	ldr	r3, [r4, #4]
 8004516:	bf08      	it	eq
 8004518:	f8c8 1000 	streq.w	r1, [r8]
 800451c:	5162      	str	r2, [r4, r5]
 800451e:	604b      	str	r3, [r1, #4]
 8004520:	4638      	mov	r0, r7
 8004522:	f104 060b 	add.w	r6, r4, #11
 8004526:	f000 f829 	bl	800457c <__malloc_unlock>
 800452a:	f026 0607 	bic.w	r6, r6, #7
 800452e:	1d23      	adds	r3, r4, #4
 8004530:	1af2      	subs	r2, r6, r3
 8004532:	d0ae      	beq.n	8004492 <_malloc_r+0x22>
 8004534:	1b9b      	subs	r3, r3, r6
 8004536:	50a3      	str	r3, [r4, r2]
 8004538:	e7ab      	b.n	8004492 <_malloc_r+0x22>
 800453a:	42a3      	cmp	r3, r4
 800453c:	6862      	ldr	r2, [r4, #4]
 800453e:	d1dd      	bne.n	80044fc <_malloc_r+0x8c>
 8004540:	f8c8 2000 	str.w	r2, [r8]
 8004544:	e7ec      	b.n	8004520 <_malloc_r+0xb0>
 8004546:	4623      	mov	r3, r4
 8004548:	6864      	ldr	r4, [r4, #4]
 800454a:	e7ac      	b.n	80044a6 <_malloc_r+0x36>
 800454c:	4634      	mov	r4, r6
 800454e:	6876      	ldr	r6, [r6, #4]
 8004550:	e7b4      	b.n	80044bc <_malloc_r+0x4c>
 8004552:	4613      	mov	r3, r2
 8004554:	e7cc      	b.n	80044f0 <_malloc_r+0x80>
 8004556:	230c      	movs	r3, #12
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	4638      	mov	r0, r7
 800455c:	f000 f80e 	bl	800457c <__malloc_unlock>
 8004560:	e797      	b.n	8004492 <_malloc_r+0x22>
 8004562:	6025      	str	r5, [r4, #0]
 8004564:	e7dc      	b.n	8004520 <_malloc_r+0xb0>
 8004566:	605b      	str	r3, [r3, #4]
 8004568:	deff      	udf	#255	; 0xff
 800456a:	bf00      	nop
 800456c:	20000680 	.word	0x20000680

08004570 <__malloc_lock>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__malloc_lock+0x8>)
 8004572:	f000 b84b 	b.w	800460c <__retarget_lock_acquire_recursive>
 8004576:	bf00      	nop
 8004578:	200007c4 	.word	0x200007c4

0800457c <__malloc_unlock>:
 800457c:	4801      	ldr	r0, [pc, #4]	; (8004584 <__malloc_unlock+0x8>)
 800457e:	f000 b846 	b.w	800460e <__retarget_lock_release_recursive>
 8004582:	bf00      	nop
 8004584:	200007c4 	.word	0x200007c4

08004588 <memset>:
 8004588:	4402      	add	r2, r0
 800458a:	4603      	mov	r3, r0
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <memset+0xa>
 8004590:	4770      	bx	lr
 8004592:	f803 1b01 	strb.w	r1, [r3], #1
 8004596:	e7f9      	b.n	800458c <memset+0x4>

08004598 <_sbrk_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	4d06      	ldr	r5, [pc, #24]	; (80045b4 <_sbrk_r+0x1c>)
 800459c:	2300      	movs	r3, #0
 800459e:	4604      	mov	r4, r0
 80045a0:	4608      	mov	r0, r1
 80045a2:	602b      	str	r3, [r5, #0]
 80045a4:	f7fd f812 	bl	80015cc <_sbrk>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_sbrk_r+0x1a>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_sbrk_r+0x1a>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	200007c0 	.word	0x200007c0

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	; (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	200000b0 	.word	0x200000b0

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4d0d      	ldr	r5, [pc, #52]	; (80045fc <__libc_init_array+0x38>)
 80045c8:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <__libc_init_array+0x3c>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	2600      	movs	r6, #0
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <__libc_init_array+0x40>)
 80045d6:	4c0c      	ldr	r4, [pc, #48]	; (8004608 <__libc_init_array+0x44>)
 80045d8:	f000 f81a 	bl	8004610 <_init>
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	2600      	movs	r6, #0
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	08004660 	.word	0x08004660
 8004600:	08004660 	.word	0x08004660
 8004604:	08004660 	.word	0x08004660
 8004608:	08004664 	.word	0x08004664

0800460c <__retarget_lock_acquire_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_release_recursive>:
 800460e:	4770      	bx	lr

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
