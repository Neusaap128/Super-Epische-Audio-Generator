
SEAG_F.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  08008ac8  08008ac8  00018ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009010  08009010  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009018  08009018  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800901c  0800901c  0001901c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08009020  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000718  200000d0  080090f0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e8  080090f0  000207e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4a9  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037e4  00000000  00000000  0002f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de0  00000000  00000000  00032dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2c  00000000  00000000  00033bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dcd  00000000  00000000  000345dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017656  00000000  00000000  0005a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d244b  00000000  00000000  000719ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004390  00000000  00000000  00143e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001481dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000d0 	.word	0x200000d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008aac 	.word	0x08008aac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d4 	.word	0x200000d4
 800021c:	08008aac 	.word	0x08008aac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <CodecInit>:
 *  Created on: Mar 17, 2024
 *      Author: seppe
 */
#include "CodecDriver.h"

void CodecInit(I2C_HandleTypeDef *hi2c1){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

	ResetCodec(hi2c1);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f88c 	bl	80010aa <ResetCodec>

	HAL_Delay(25);
 8000f92:	2019      	movs	r0, #25
 8000f94:	f002 f904 	bl	80031a0 <HAL_Delay>

	//Connect Linput1 to inverting input of left input PGA, 0db gain, connecting Left input PGA to input booster
	//WriteCodecRegister(hi2c1, 0x20, 0b100001000);

	// L out Volume
	WriteCodecRegister(hi2c1, 0x02, 0b101111001);
 8000f98:	f240 1279 	movw	r2, #377	; 0x179
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f890 	bl	80010c4 <WriteCodecRegister>

	//un mute left channel, LINVOL = +0DB [5:0]
	WriteCodecRegister(hi2c1, 0x00, 0b100010111);
 8000fa4:	f240 1217 	movw	r2, #279	; 0x117
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f88a 	bl	80010c4 <WriteCodecRegister>

	//mute right channel
	WriteCodecRegister(hi2c1, 0x01, 0b100000000);
 8000fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f884 	bl	80010c4 <WriteCodecRegister>

	//Enable LB2LO
	WriteCodecRegister(hi2c1, 0x2D, 0b001010000);
 8000fbc:	2250      	movs	r2, #80	; 0x50
 8000fbe:	212d      	movs	r1, #45	; 0x2d
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f87f 	bl	80010c4 <WriteCodecRegister>


	// ----- Power Management -----

	// outdated R25 VMIDSEL: 01 = driver enable(playback/record), VREF enable, AINL enable, AINR disabled, ADCL enable, ADCR disable, MICB disable, MCLK enabled
	WriteCodecRegister(hi2c1, 0x19, 0b011111100);
 8000fc6:	22fc      	movs	r2, #252	; 0xfc
 8000fc8:	2119      	movs	r1, #25
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f87a 	bl	80010c4 <WriteCodecRegister>

	//left DAC, LOUT1 buffer SPKL PGA, PLL enabled
	WriteCodecRegister(hi2c1, 0x1A, 0b111010000);
 8000fd0:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000fd4:	211a      	movs	r1, #26
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 f874 	bl	80010c4 <WriteCodecRegister>

	//left PGA enabled, Left output mixer
	WriteCodecRegister(hi2c1, 0x2F, 0b000111100);
 8000fdc:	223c      	movs	r2, #60	; 0x3c
 8000fde:	212f      	movs	r1, #47	; 0x2f
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f86f 	bl	80010c4 <WriteCodecRegister>
	//WriteCodecRegister(hi2c1, 0x02, 0b100000000);

	//-----------------------

	// Disable master mode codec, I²S format
	WriteCodecRegister(hi2c1, 0x07, 0b000000010);
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	2107      	movs	r1, #7
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f86a 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x20, 0b100001000);
 8000ff0:	f44f 7284 	mov.w	r2, #264	; 0x108
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f864 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x21, 0b000000000);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2121      	movs	r1, #33	; 0x21
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 f85f 	bl	80010c4 <WriteCodecRegister>

	//WriteCodecRegister(hi2c1, 0x2D, 0b000000000);

	WriteCodecRegister(hi2c1, 0x2E, 0b000000000);
 8001006:	2200      	movs	r2, #0
 8001008:	212e      	movs	r1, #46	; 0x2e
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f85a 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x22, 0b101010000);
 8001010:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8001014:	2122      	movs	r1, #34	; 0x22
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f854 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x25, 0b001010000);
 800101c:	2250      	movs	r2, #80	; 0x50
 800101e:	2125      	movs	r1, #37	; 0x25
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f84f 	bl	80010c4 <WriteCodecRegister>

	//Write speaker L volume
	WriteCodecRegister(hi2c1, 0x28, 0b101111001);
 8001026:	f240 1279 	movw	r2, #377	; 0x179
 800102a:	2128      	movs	r1, #40	; 0x28
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f849 	bl	80010c4 <WriteCodecRegister>
	//Write speaker R volume
	WriteCodecRegister(hi2c1, 0x29, 0b101111001);
 8001032:	f240 1279 	movw	r2, #377	; 0x179
 8001036:	2129      	movs	r1, #41	; 0x29
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f843 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x34, 0b000000000);
 800103e:	2200      	movs	r2, #0
 8001040:	2134      	movs	r1, #52	; 0x34
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f83e 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x04, 0b000000000);
 8001048:	2200      	movs	r2, #0
 800104a:	2104      	movs	r1, #4
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 f839 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x08, 0b111000000);
 8001052:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001056:	2108      	movs	r1, #8
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f833 	bl	80010c4 <WriteCodecRegister>

	// Disabled high pass filter
	WriteCodecRegister(hi2c1, 0x05, 0b000000001);
 800105e:	2201      	movs	r2, #1
 8001060:	2105      	movs	r1, #5
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f82e 	bl	80010c4 <WriteCodecRegister>

	WriteCodecRegister(hi2c1, 0x09, 0b000000000);
 8001068:	2200      	movs	r2, #0
 800106a:	2109      	movs	r1, #9
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f829 	bl	80010c4 <WriteCodecRegister>

	//Writing ADC and DAC volume
	WriteCodecRegister(hi2c1, 0x15, 0b111000011);
 8001072:	f240 12c3 	movw	r2, #451	; 0x1c3
 8001076:	2115      	movs	r1, #21
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f823 	bl	80010c4 <WriteCodecRegister>
	WriteCodecRegister(hi2c1, 0x16, 0b111000011);
 800107e:	f240 12c3 	movw	r2, #451	; 0x1c3
 8001082:	2116      	movs	r1, #22
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f81d 	bl	80010c4 <WriteCodecRegister>

	//Writing ADC and DAC volume
	WriteCodecRegister(hi2c1, 0x0A, 0b111111111);
 800108a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800108e:	210a      	movs	r1, #10
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f817 	bl	80010c4 <WriteCodecRegister>
	WriteCodecRegister(hi2c1, 0x0B, 0b111111111);
 8001096:	f240 12ff 	movw	r2, #511	; 0x1ff
 800109a:	210b      	movs	r1, #11
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f811 	bl	80010c4 <WriteCodecRegister>
	buf[0]=0x55;
	HAL_I2C_Master_Transmit(hi2c1, codecAddr, buf, 1 , HAL_MAX_DELAY);

	HAL_I2C_Mem_Write(hi2c1, codecAddr, reg , I2C_MEMADD_SIZE_8BIT, data)
	*/
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <ResetCodec>:


void ResetCodec(I2C_HandleTypeDef *hi2c1){
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	WriteCodecRegister(hi2c1, 0x0F, 0xFF);
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	210f      	movs	r1, #15
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f804 	bl	80010c4 <WriteCodecRegister>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <WriteCodecRegister>:

void WriteCodecRegister(I2C_HandleTypeDef *hi2c1, uint8_t reg, uint16_t pData){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af04      	add	r7, sp, #16
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	803b      	strh	r3, [r7, #0]
	uint8_t regAddrWDataBit = (uint8_t)(reg << 1) | (pData >> 8);
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	883b      	ldrh	r3, [r7, #0]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	73fb      	strb	r3, [r7, #15]
	uint8_t lowByte = (uint8_t)(pData & 0xFF);
 80010e6:	883b      	ldrh	r3, [r7, #0]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c1, codecAddr, regAddrWDataBit, I2C_MEMADD_SIZE_8BIT, &lowByte, 1, HAL_MAX_DELAY);
 80010ec:	2334      	movs	r3, #52	; 0x34
 80010ee:	b299      	uxth	r1, r3
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 030e 	add.w	r3, r7, #14
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f002 ff6e 	bl	8003fe8 <HAL_I2C_Mem_Write>
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <InitDSP>:
uint8_t dataReadyFlag;

// --- filters ---
Filters* filters;

void InitDSP(uint32_t sampleFrequency, I2S_HandleTypeDef *hi2s1, I2S_HandleTypeDef *hi2s2){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]

	//Init filters
	filters = initializeFilters(sampleFrequency);
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 fca9 	bl	8001a78 <initializeFilters>
 8001126:	4603      	mov	r3, r0
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <InitDSP+0x34>)
 800112a:	6013      	str	r3, [r2, #0]

	//Init I²S
	HAL_I2S_Transmit_DMA(hi2s1, (uint16_t*)&outputData[0], BUFFER_SIZE);
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	4907      	ldr	r1, [pc, #28]	; (800114c <InitDSP+0x38>)
 8001130:	68b8      	ldr	r0, [r7, #8]
 8001132:	f003 fc31 	bl	8004998 <HAL_I2S_Transmit_DMA>
	HAL_I2S_Receive_DMA(hi2s2, (uint16_t*)&inputData[0], BUFFER_SIZE);
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	4905      	ldr	r1, [pc, #20]	; (8001150 <InitDSP+0x3c>)
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f003 fcd4 	bl	8004ae8 <HAL_I2S_Receive_DMA>

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002f0 	.word	0x200002f0
 800114c:	200001ec 	.word	0x200001ec
 8001150:	200000ec 	.word	0x200000ec

08001154 <DSPUpdate>:


void DSPUpdate(){
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0


	if(dataReadyFlag){
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <DSPUpdate+0x70>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d02b      	beq.n	80011ba <DSPUpdate+0x66>

		for(uint8_t i = 0; i < BUFFER_SIZE/2; i++){
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	e022      	b.n	80011ae <DSPUpdate+0x5a>

			// Process left channel
			if(i % 2 == 0){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d112      	bne.n	800119a <DSPUpdate+0x46>
				*(outputBufPtr+i) = appendSample(filters, *(inputBufPtr+i));
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <DSPUpdate+0x74>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <DSPUpdate+0x78>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b219      	sxth	r1, r3
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <DSPUpdate+0x7c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	18d4      	adds	r4, r2, r3
 8001190:	f000 fcfe 	bl	8001b90 <appendSample>
 8001194:	4603      	mov	r3, r0
 8001196:	8023      	strh	r3, [r4, #0]
 8001198:	e006      	b.n	80011a8 <DSPUpdate+0x54>

			}else{
				*(outputBufPtr+i) = (int16_t)(0);
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <DSPUpdate+0x7c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < BUFFER_SIZE/2; i++){
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	3301      	adds	r3, #1
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b3f      	cmp	r3, #63	; 0x3f
 80011b2:	d9d9      	bls.n	8001168 <DSPUpdate+0x14>
			}

		}
		dataReadyFlag = 0;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <DSPUpdate+0x70>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	}


}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200002ec 	.word	0x200002ec
 80011c8:	200002f0 	.word	0x200002f0
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <GetEnabledFilters>:
	}else{
		filters->enabledFilters &= 0 << filterIndex;
	}
}

uint8_t GetEnabledFilters(){
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
	return filters->enabledFilters;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <GetEnabledFilters+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	200002f0 	.word	0x200002f0

080011ec <getFilters>:

Filters* getFilters(){
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	return filters;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <getFilters+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	200002f0 	.word	0x200002f0

08001204 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

	inputBufPtr = &inputData[0];
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_I2S_RxHalfCpltCallback+0x28>)
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001210:	601a      	str	r2, [r3, #0]
	outputBufPtr = &outputData[0];
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_I2S_RxHalfCpltCallback+0x34>)
 8001216:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_I2S_RxHalfCpltCallback+0x38>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]

}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	200000ec 	.word	0x200000ec
 8001234:	20000004 	.word	0x20000004
 8001238:	200001ec 	.word	0x200001ec
 800123c:	200002ec 	.word	0x200002ec

08001240 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	inputBufPtr = &inputData[BUFFER_SIZE/2];
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <HAL_I2S_RxCpltCallback+0x28>)
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_I2S_RxCpltCallback+0x2c>)
 800124c:	601a      	str	r2, [r3, #0]
	outputBufPtr = &outputData[BUFFER_SIZE/2];
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_I2S_RxCpltCallback+0x30>)
 8001250:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_I2S_RxCpltCallback+0x34>)
 8001252:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_I2S_RxCpltCallback+0x38>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]

}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000
 800126c:	2000016c 	.word	0x2000016c
 8001270:	20000004 	.word	0x20000004
 8001274:	2000026c 	.word	0x2000026c
 8001278:	200002ec 	.word	0x200002ec

0800127c <initializeAllPass>:

#include "AllPass.h"

AllPass* initializeAllPass(uint32_t sampleRate, float delayS, float amplification, float attenuation){
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	ed87 0a02 	vstr	s0, [r7, #8]
 8001288:	edc7 0a01 	vstr	s1, [r7, #4]
 800128c:	ed87 1a00 	vstr	s2, [r7]

    AllPass* allPass = malloc(sizeof(AllPass));
 8001290:	2008      	movs	r0, #8
 8001292:	f004 fde1 	bl	8005e58 <malloc>
 8001296:	4603      	mov	r3, r0
 8001298:	61fb      	str	r3, [r7, #28]

    CombFeedforward *combFeedforward = initializeCombFeedforward(sampleRate, delayS, amplification, attenuation);
 800129a:	ed97 1a00 	vldr	s2, [r7]
 800129e:	edd7 0a01 	vldr	s1, [r7, #4]
 80012a2:	ed97 0a02 	vldr	s0, [r7, #8]
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 fa1a 	bl	80016e0 <initializeCombFeedforward>
 80012ac:	61b8      	str	r0, [r7, #24]
    CombFeedback *combFeedback = initializeCombFeedback(sampleRate, delayS, amplification, attenuation);
 80012ae:	ed97 1a00 	vldr	s2, [r7]
 80012b2:	edd7 0a01 	vldr	s1, [r7, #4]
 80012b6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 f956 	bl	800156c <initializeCombFeedback>
 80012c0:	6178      	str	r0, [r7, #20]

    allPass->combFeedforward = combFeedforward;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	601a      	str	r2, [r3, #0]
    allPass->combFeedback = combFeedback;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	605a      	str	r2, [r3, #4]

    return allPass;
 80012ce:	69fb      	ldr	r3, [r7, #28]

}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <allPassAppendSample>:

SampleType  allPassAppendSample(AllPass* filter, SampleType  newSample){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]

	SampleType feedForwardOutput = combFeedforwardAppendSample(filter->combFeedforward, newSample);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fa27 	bl	8001742 <combFeedforwardAppendSample>
 80012f4:	4603      	mov	r3, r0
 80012f6:	81fb      	strh	r3, [r7, #14]

	SampleType output = combFeedbackAppendSample(filter->combFeedback, feedForwardOutput);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f96b 	bl	80015de <combFeedbackAppendSample>
 8001308:	4603      	mov	r3, r0
 800130a:	81bb      	strh	r3, [r7, #12]

    return output;
 800130c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]

}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <setAllPassLevel>:
	allPass->combFeedback->offset = offset;
	allPass->combFeedforward->offset = offset;

}

void setAllPassLevel(AllPass* allPass, float a){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	ed87 0a00 	vstr	s0, [r7]
	setCombFeedbackLevel(allPass->combFeedback, a);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	ed97 0a00 	vldr	s0, [r7]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f99b 	bl	8001668 <setCombFeedbackLevel>
	setCombFeedforwardLevel(allPass->combFeedforward, a);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	ed97 0a00 	vldr	s0, [r7]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fa40 	bl	80017c0 <setCombFeedforwardLevel>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <initializeChorus>:
#include "Chorus.h"


Chorus* initializeChorus(uint32_t sampleRate){
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

    Chorus* filter = malloc(sizeof(Chorus));
 8001350:	2018      	movs	r0, #24
 8001352:	f004 fd81 	bl	8005e58 <malloc>
 8001356:	4603      	mov	r3, r0
 8001358:	613b      	str	r3, [r7, #16]

    filter->delayLowPass = initializeLowPass(sampleRate, 10);
 800135a:	210a      	movs	r1, #10
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fca7 	bl	8001cb0 <initializeLowPass>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	605a      	str	r2, [r3, #4]
    
    filter->amountOfFeedforwardFilters = 2;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2202      	movs	r2, #2
 800136c:	741a      	strb	r2, [r3, #16]
    filter->previousDelays = calloc(filter->amountOfFeedforwardFilters, sizeof(float));
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	7c1b      	ldrb	r3, [r3, #16]
 8001372:	2104      	movs	r1, #4
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fd51 	bl	8005e1c <calloc>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	609a      	str	r2, [r3, #8]

    filter->a = 0.9999f;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4a29      	ldr	r2, [pc, #164]	; (800142c <initializeChorus+0xe4>)
 8001386:	60da      	str	r2, [r3, #12]

    filter->combFeedforwardFilters = malloc(filter->amountOfFeedforwardFilters*sizeof(CombFeedforward));
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	7c1b      	ldrb	r3, [r3, #16]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fd62 	bl	8005e58 <malloc>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	615a      	str	r2, [r3, #20]

    float delayS[2] = {0.03f, 0.050f};
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <initializeChorus+0xe8>)
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a6:	e883 0003 	stmia.w	r3, {r0, r1}

    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 80013aa:	2300      	movs	r3, #0
 80013ac:	75fb      	strb	r3, [r7, #23]
 80013ae:	e032      	b.n	8001416 <initializeChorus+0xce>
        filter->previousDelays[i] = sampleRate*delayS[i]/2;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	3318      	adds	r3, #24
 80013c0:	443b      	add	r3, r7
 80013c2:	3b10      	subs	r3, #16
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	7dfb      	ldrb	r3, [r7, #23]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013de:	edc3 7a00 	vstr	s15, [r3]
        filter->combFeedforwardFilters[i] = initializeCombFeedforward(sampleRate, delayS[i], 1.0f, 0.99f);
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3318      	adds	r3, #24
 80013e8:	443b      	add	r3, r7
 80013ea:	3b10      	subs	r3, #16
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	18d4      	adds	r4, r2, r3
 80013fa:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001434 <initializeChorus+0xec>
 80013fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001402:	eeb0 0a67 	vmov.f32	s0, s15
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f96a 	bl	80016e0 <initializeCombFeedforward>
 800140c:	4603      	mov	r3, r0
 800140e:	6023      	str	r3, [r4, #0]
    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	3301      	adds	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	7c1b      	ldrb	r3, [r3, #16]
 800141a:	7dfa      	ldrb	r2, [r7, #23]
 800141c:	429a      	cmp	r2, r3
 800141e:	d3c7      	bcc.n	80013b0 <initializeChorus+0x68>

    }

    return filter;
 8001420:	693b      	ldr	r3, [r7, #16]

}
 8001422:	4618      	mov	r0, r3
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	3f7ff972 	.word	0x3f7ff972
 8001430:	08008ac8 	.word	0x08008ac8
 8001434:	3f7d70a4 	.word	0x3f7d70a4

08001438 <chorusAppendSample>:

SampleType chorusAppendSample(Chorus *filter, SampleType input){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]

	SampleType output = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	81fb      	strh	r3, [r7, #14]

    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 8001448:	2300      	movs	r3, #0
 800144a:	737b      	strb	r3, [r7, #13]
 800144c:	e062      	b.n	8001514 <chorusAppendSample+0xdc>
        uint16_t rawDelay = rand() % filter->combFeedforwardFilters[i]->inputSamples->bufferSize; // max delay in sample amount
 800144e:	f004 fdb7 	bl	8005fc0 <rand>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6959      	ldr	r1, [r3, #20]
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	fbb2 f1f3 	udiv	r1, r2, r3
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	817b      	strh	r3, [r7, #10]

        filter->previousDelays[i] = filter->a*filter->previousDelays[i] + (1.0f-filter->a)*rawDelay;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	ed93 7a03 	vldr	s14, [r3, #12]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	7b7b      	ldrb	r3, [r7, #13]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001494:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001498:	897b      	ldrh	r3, [r7, #10]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	7b7b      	ldrb	r3, [r7, #13]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b4:	edc3 7a00 	vstr	s15, [r3]

        uint16_t delay = (uint16_t)filter->previousDelays[i];
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ca:	ee17 3a90 	vmov	r3, s15
 80014ce:	813b      	strh	r3, [r7, #8]

        filter->combFeedforwardFilters[i]->offset = delay;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	7b7b      	ldrb	r3, [r7, #13]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	893a      	ldrh	r2, [r7, #8]
 80014de:	601a      	str	r2, [r3, #0]

        
        output += combFeedforwardAppendSample(filter->combFeedforwardFilters[i], input)/filter->amountOfFeedforwardFilters;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f925 	bl	8001742 <combFeedforwardAppendSample>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7c1b      	ldrb	r3, [r3, #16]
 8001500:	fb92 f3f3 	sdiv	r3, r2, r3
 8001504:	b29a      	uxth	r2, r3
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	4413      	add	r3, r2
 800150a:	b29b      	uxth	r3, r3
 800150c:	81fb      	strh	r3, [r7, #14]
    for(uint8_t i = 0; i < filter->amountOfFeedforwardFilters; i++){
 800150e:	7b7b      	ldrb	r3, [r7, #13]
 8001510:	3301      	adds	r3, #1
 8001512:	737b      	strb	r3, [r7, #13]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7c1b      	ldrb	r3, [r3, #16]
 8001518:	7b7a      	ldrb	r2, [r7, #13]
 800151a:	429a      	cmp	r2, r3
 800151c:	d397      	bcc.n	800144e <chorusAppendSample+0x16>

    }

    return output;
 800151e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <setChorusLevel>:

void setChorusLevel(Chorus* filter, float a){
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	ed87 0a00 	vstr	s0, [r7]

	for(uint8_t i = 0 ;i < filter->amountOfFeedforwardFilters; i++){
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e00d      	b.n	8001558 <setChorusLevel+0x2e>

		setCombFeedforwardLevel(filter->combFeedforwardFilters[i], a);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	ed97 0a00 	vldr	s0, [r7]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f937 	bl	80017c0 <setCombFeedforwardLevel>
	for(uint8_t i = 0 ;i < filter->amountOfFeedforwardFilters; i++){
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	3301      	adds	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7c1b      	ldrb	r3, [r3, #16]
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3ec      	bcc.n	800153c <setChorusLevel+0x12>

	}

}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <initializeCombFeedback>:

#include "CombFeedback.h"

CombFeedback* initializeCombFeedback(uint32_t sampleRate, float delayS, float amplification, float attenuation){
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	ed87 0a02 	vstr	s0, [r7, #8]
 8001578:	edc7 0a01 	vstr	s1, [r7, #4]
 800157c:	ed87 1a00 	vstr	s2, [r7]

    CombFeedback *filter = malloc(sizeof(CombFeedback));
 8001580:	2014      	movs	r0, #20
 8001582:	f004 fc69 	bl	8005e58 <malloc>
 8001586:	4603      	mov	r3, r0
 8001588:	617b      	str	r3, [r7, #20]

    filter->offset = 0;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    filter->outputSamples = initializeCircularBuffer( delayS*sampleRate);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800159a:	edd7 7a02 	vldr	s15, [r7, #8]
 800159e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a6:	ee17 0a90 	vmov	r0, s15
 80015aa:	f000 fcf5 	bl	8001f98 <initializeCircularBuffer>
 80015ae:	4602      	mov	r2, r0
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	605a      	str	r2, [r3, #4]

    filter->K = amplification;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	60da      	str	r2, [r3, #12]
    setCombFeedbackLevel(filter, attenuation);
 80015ba:	ed97 0a00 	vldr	s0, [r7]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f000 f852 	bl	8001668 <setCombFeedbackLevel>

    filter->lowPass = initializeLowPass(sampleRate, 1760);
 80015c4:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 fb71 	bl	8001cb0 <initializeLowPass>
 80015ce:	4602      	mov	r2, r0
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	609a      	str	r2, [r3, #8]

    return filter;
 80015d4:	697b      	ldr	r3, [r7, #20]

}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <combFeedbackAppendSample>:

SampleType combFeedbackAppendSample(CombFeedback *filter, SampleType newSample){
 80015de:	b590      	push	{r4, r7, lr}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	807b      	strh	r3, [r7, #2]

	SampleType lowPassedDelayedOutput = lowPassAppendSample( filter->lowPass, getValueInCircularBuffer(filter->outputSamples, filter->offset) );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689c      	ldr	r4, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4610      	mov	r0, r2
 80015fa:	f000 fd09 	bl	8002010 <getValueInCircularBuffer>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f000 fb9c 	bl	8001d40 <lowPassAppendSample>
 8001608:	4603      	mov	r3, r0
 800160a:	81fb      	strh	r3, [r7, #14]

	SampleType output = (filter->K)*(newSample - (filter->a)*lowPassedDelayedOutput);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001612:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	ed93 6a04 	vldr	s12, [r3, #16]
 8001624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001634:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	81bb      	strh	r3, [r7, #12]

	putValueInCircularBuffer(filter->outputSamples, output);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fcbd 	bl	8001fd0 <putValueInCircularBuffer>

    return output;
 8001656:	f9b7 300c 	ldrsh.w	r3, [r7, #12]

}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	0000      	movs	r0, r0
 8001664:	0000      	movs	r0, r0
	...

08001668 <setCombFeedbackLevel>:

void setCombFeedbackLevel(CombFeedback *combfeedback, float a){
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	ed87 0a00 	vstr	s0, [r7]

	if(a > 1.0f) a = 1.0f;
 8001674:	edd7 7a00 	vldr	s15, [r7]
 8001678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800167c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	dd02      	ble.n	800168c <setCombFeedbackLevel+0x24>
 8001686:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800168a:	603b      	str	r3, [r7, #0]
	if(a < 0.0f) a = 0.0f;
 800168c:	edd7 7a00 	vldr	s15, [r7]
 8001690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	d502      	bpl.n	80016a0 <setCombFeedbackLevel+0x38>
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	603b      	str	r3, [r7, #0]

	float value = pow(a, 1.0f/5.0f); //More resolution the higher a gets
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7fe ff71 	bl	8000588 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 80016d8 <setCombFeedbackLevel+0x70>
 80016ae:	ec43 2b10 	vmov	d0, r2, r3
 80016b2:	f005 fc01 	bl	8006eb8 <pow>
 80016b6:	ec53 2b10 	vmov	r2, r3, d0
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa93 	bl	8000be8 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	60fb      	str	r3, [r7, #12]

    combfeedback->a = value;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	611a      	str	r2, [r3, #16]

}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f3af 8000 	nop.w
 80016d8:	a0000000 	.word	0xa0000000
 80016dc:	3fc99999 	.word	0x3fc99999

080016e0 <initializeCombFeedforward>:

#include "CombFeedforward.h"

CombFeedforward* initializeCombFeedforward(uint32_t sampleRate, float delayS, float amplification, float attenuation){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80016f0:	ed87 1a00 	vstr	s2, [r7]

    CombFeedforward *filter = malloc(sizeof(CombFeedforward));
 80016f4:	2010      	movs	r0, #16
 80016f6:	f004 fbaf 	bl	8005e58 <malloc>
 80016fa:	4603      	mov	r3, r0
 80016fc:	617b      	str	r3, [r7, #20]

    filter->offset = 0;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    
    filter->K = amplification;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	609a      	str	r2, [r3, #8]
    setCombFeedforwardLevel(filter, attenuation);
 800170a:	ed97 0a00 	vldr	s0, [r7]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f000 f856 	bl	80017c0 <setCombFeedforwardLevel>

    filter->inputSamples = initializeCircularBuffer(delayS*sampleRate);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172a:	ee17 0a90 	vmov	r0, s15
 800172e:	f000 fc33 	bl	8001f98 <initializeCircularBuffer>
 8001732:	4602      	mov	r2, r0
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	605a      	str	r2, [r3, #4]
    
    return filter;
 8001738:	697b      	ldr	r3, [r7, #20]

}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <combFeedforwardAppendSample>:

int16_t combFeedforwardAppendSample(CombFeedforward *filter, int16_t newSample){
 8001742:	b580      	push	{r7, lr}
 8001744:	ed2d 8b02 	vpush	{d8}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]

    int16_t output = filter->K*newSample + filter->a*getValueInCircularBuffer(filter->inputSamples, filter->offset);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	ed93 7a02 	vldr	s14, [r3, #8]
 8001758:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 8a03 	vldr	s17, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	4610      	mov	r0, r2
 800177a:	f000 fc49 	bl	8002010 <getValueInCircularBuffer>
 800177e:	4603      	mov	r3, r0
 8001780:	ee07 3a90 	vmov	s15, r3
 8001784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001788:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800178c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001794:	ee17 3a90 	vmov	r3, s15
 8001798:	81fb      	strh	r3, [r7, #14]

    putValueInCircularBuffer(filter->inputSamples, newSample);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fc13 	bl	8001fd0 <putValueInCircularBuffer>

    return output;
 80017aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	ecbd 8b02 	vpop	{d8}
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	0000      	movs	r0, r0
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <setCombFeedforwardLevel>:

void setCombFeedforwardLevel(CombFeedforward *combfeedback, float a){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	ed87 0a00 	vstr	s0, [r7]

	if(a > 1.0f) a = 1.0f;
 80017cc:	edd7 7a00 	vldr	s15, [r7]
 80017d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	dd02      	ble.n	80017e4 <setCombFeedforwardLevel+0x24>
 80017de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80017e2:	603b      	str	r3, [r7, #0]
	if(a < 0.0f) a = 0.0f;
 80017e4:	edd7 7a00 	vldr	s15, [r7]
 80017e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d502      	bpl.n	80017f8 <setCombFeedforwardLevel+0x38>
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]

	float value = pow(a, 1.0f/5.0f); //More resolution the higher a gets
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f7fe fec5 	bl	8000588 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001830 <setCombFeedforwardLevel+0x70>
 8001806:	ec43 2b10 	vmov	d0, r2, r3
 800180a:	f005 fb55 	bl	8006eb8 <pow>
 800180e:	ec53 2b10 	vmov	r2, r3, d0
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f9e7 	bl	8000be8 <__aeabi_d2f>
 800181a:	4603      	mov	r3, r0
 800181c:	60fb      	str	r3, [r7, #12]

	combfeedback->a = value;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	60da      	str	r2, [r3, #12]

}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	a0000000 	.word	0xa0000000
 8001834:	3fc99999 	.word	0x3fc99999

08001838 <initializeDistortion>:

#include "Distortion.h"

Distortion* initializeDistortion(int threshold){
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    Distortion *distortion= malloc(sizeof(Distortion));
 8001840:	2002      	movs	r0, #2
 8001842:	f004 fb09 	bl	8005e58 <malloc>
 8001846:	4603      	mov	r3, r0
 8001848:	60fb      	str	r3, [r7, #12]
    distortion->threshold = threshold;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	801a      	strh	r2, [r3, #0]
    return distortion;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <distortionAppendSample>:

SampleType distortionAppendSample(Distortion* distortion, SampleType newSample){
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
    float in, out, in_fabs;
    uint8_t negatief =1;
 8001868:	2301      	movs	r3, #1
 800186a:	74fb      	strb	r3, [r7, #19]

    // Normalize input to threshold level = 1.0
    in = (float)newSample/distortion->threshold;
 800186c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	ee07 3a90 	vmov	s15, r3
 8001880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001888:	edc7 7a03 	vstr	s15, [r7, #12]
    in_fabs = fabs(in);
 800188c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001890:	eef0 7ae7 	vabs.f32	s15, s15
 8001894:	edc7 7a02 	vstr	s15, [r7, #8]
    if (in_fabs == in){
 8001898:	ed97 7a02 	vldr	s14, [r7, #8]
 800189c:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	d101      	bne.n	80018ae <distortionAppendSample+0x52>
        negatief = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	74fb      	strb	r3, [r7, #19]
    }
    if (in_fabs<1.0f/3) {
 80018ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001984 <distortionAppendSample+0x128>
 80018b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d508      	bpl.n	80018d2 <distortionAppendSample+0x76>
        out = 1.5*in_fabs;
 80018c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80018c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018cc:	edc7 7a05 	vstr	s15, [r7, #20]
 80018d0:	e035      	b.n	800193e <distortionAppendSample+0xe2>
    } else if (in_fabs >= 1.0f/3 && in_fabs < 2.0f/3) {
 80018d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001984 <distortionAppendSample+0x128>
 80018da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e2:	db29      	blt.n	8001938 <distortionAppendSample+0xdc>
 80018e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001988 <distortionAppendSample+0x12c>
 80018ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f4:	d520      	bpl.n	8001938 <distortionAppendSample+0xdc>
        out = (float)(3- (2-(3*in_fabs))*(2-(3*in_fabs)))/3;
 80018f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018fa:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800190a:	edd7 7a02 	vldr	s15, [r7, #8]
 800190e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001912:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001916:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800191a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001922:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800192e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001932:	edc7 7a05 	vstr	s15, [r7, #20]
 8001936:	e002      	b.n	800193e <distortionAppendSample+0xe2>
    } 
    else{
        out = 1;
 8001938:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800193c:	617b      	str	r3, [r7, #20]
    }
    if(negatief){
 800193e:	7cfb      	ldrb	r3, [r7, #19]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <distortionAppendSample+0xf4>
        out *= -1;
 8001944:	edd7 7a05 	vldr	s15, [r7, #20]
 8001948:	eef1 7a67 	vneg.f32	s15, s15
 800194c:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    out = out * distortion->threshold;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	edc7 7a05 	vstr	s15, [r7, #20]
    return (SampleType)out;
 8001968:	edd7 7a05 	vldr	s15, [r7, #20]
 800196c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001970:	ee17 3a90 	vmov	r3, s15
 8001974:	b21b      	sxth	r3, r3

}
 8001976:	4618      	mov	r0, r3
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	3eaaaaab 	.word	0x3eaaaaab
 8001988:	3f2aaaab 	.word	0x3f2aaaab

0800198c <setDistortionLevel>:

void setDistortionLevel(Distortion* dist, float a){
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	ed87 0a00 	vstr	s0, [r7]

	if(a > 1.0f) a = 1.0f;
 8001998:	edd7 7a00 	vldr	s15, [r7]
 800199c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	dd02      	ble.n	80019b0 <setDistortionLevel+0x24>
 80019aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019ae:	603b      	str	r3, [r7, #0]
	if(a < 0.0f) a = 0.0f;
 80019b0:	edd7 7a00 	vldr	s15, [r7]
 80019b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d502      	bpl.n	80019c4 <setDistortionLevel+0x38>
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	603b      	str	r3, [r7, #0]

	dist->threshold = 300 + a*(3000-300);
 80019c4:	edd7 7a00 	vldr	s15, [r7]
 80019c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80019f4 <setDistortionLevel+0x68>
 80019cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80019f8 <setDistortionLevel+0x6c>
 80019d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019dc:	ee17 3a90 	vmov	r3, s15
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	801a      	strh	r2, [r3, #0]

}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	4528c000 	.word	0x4528c000
 80019f8:	43960000 	.word	0x43960000

080019fc <createFilter>:
 *      Author: Joran
 */

#include "Filter.h"

Filter* createFilter(void* filterStruct, SampleType (*filterMethod)(void*, SampleType), void (*changeLevelMethod)(void*, float) ){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]

	Filter* filter = malloc(sizeof(Filter));
 8001a08:	200c      	movs	r0, #12
 8001a0a:	f004 fa25 	bl	8005e58 <malloc>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	617b      	str	r3, [r7, #20]

	filter->filterStruct = filterStruct;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]
	filter->filterMethod = filterMethod;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	605a      	str	r2, [r3, #4]
	filter->changeLevelMethod = changeLevelMethod;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	609a      	str	r2, [r3, #8]

	return filter;
 8001a24:	697b      	ldr	r3, [r7, #20]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <changeFilterLevel>:


void changeFilterLevel(Filter* filter, float a){
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	ed87 0a00 	vstr	s0, [r7]
	filter->changeLevelMethod(filter->filterStruct, a);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	ed97 0a00 	vldr	s0, [r7]
 8001a46:	4610      	mov	r0, r2
 8001a48:	4798      	blx	r3
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <filterAppendSample>:

SampleType filterAppendSample(Filter* filter, SampleType newSample){
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	807b      	strh	r3, [r7, #2]
	return filter->filterMethod(filter->filterStruct, newSample);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4798      	blx	r3
 8001a6e:	4603      	mov	r3, r0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <initializeFilters>:
 *  Created on: May 13, 2024
 *      Author: Joran
 */
#include "Filters.h"

Filters* initializeFilters(uint32_t sampleRate){
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b097      	sub	sp, #92	; 0x5c
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	6078      	str	r0, [r7, #4]

	Filters* filters = malloc(sizeof(Filters));
 8001a80:	2018      	movs	r0, #24
 8001a82:	f004 f9e9 	bl	8005e58 <malloc>
 8001a86:	4603      	mov	r3, r0
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c

    filters->enabledFilters = 0b00000000;
 8001a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

	Distortion* dist = initializeDistortion(1000);
 8001a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a94:	f7ff fed0 	bl	8001838 <initializeDistortion>
 8001a98:	64b8      	str	r0, [r7, #72]	; 0x48
	Filter* distFilter = createFilter(dist, distortionAppendSample, setDistortionLevel);
 8001a9a:	4a30      	ldr	r2, [pc, #192]	; (8001b5c <initializeFilters+0xe4>)
 8001a9c:	4930      	ldr	r1, [pc, #192]	; (8001b60 <initializeFilters+0xe8>)
 8001a9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001aa0:	f7ff ffac 	bl	80019fc <createFilter>
 8001aa4:	6478      	str	r0, [r7, #68]	; 0x44

    CombFeedback* echo = initializeCombFeedback(sampleRate, 0.5, 1.0, 0.5);
 8001aa6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8001aaa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001aae:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fd5a 	bl	800156c <initializeCombFeedback>
 8001ab8:	6438      	str	r0, [r7, #64]	; 0x40
    Filter* echoFilter = createFilter(echo, combFeedbackAppendSample, setCombFeedbackLevel);
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <initializeFilters+0xec>)
 8001abc:	492a      	ldr	r1, [pc, #168]	; (8001b68 <initializeFilters+0xf0>)
 8001abe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ac0:	f7ff ff9c 	bl	80019fc <createFilter>
 8001ac4:	63f8      	str	r0, [r7, #60]	; 0x3c

    float delayCombS[4] = {0.0297, 0.0371, 0.0411, 0.0437};
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <initializeFilters+0xf4>)
 8001ac8:	f107 0414 	add.w	r4, r7, #20
 8001acc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float delayAllS[2] = {0.005, 0.0017};
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <initializeFilters+0xf8>)
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001adc:	e883 0003 	stmia.w	r3, {r0, r1}
	Reverb* reverb = initializeReverb(sampleRate, 4, delayCombS, 2, delayAllS);
 8001ae0:	f107 0214 	add.w	r2, r7, #20
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2302      	movs	r3, #2
 8001aec:	2104      	movs	r1, #4
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f95e 	bl	8001db0 <initializeReverb>
 8001af4:	63b8      	str	r0, [r7, #56]	; 0x38
	Filter* reverbFilter = createFilter(reverb, reverbAppendSample, setReverbLevel);
 8001af6:	4a1f      	ldr	r2, [pc, #124]	; (8001b74 <initializeFilters+0xfc>)
 8001af8:	491f      	ldr	r1, [pc, #124]	; (8001b78 <initializeFilters+0x100>)
 8001afa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001afc:	f7ff ff7e 	bl	80019fc <createFilter>
 8001b00:	6378      	str	r0, [r7, #52]	; 0x34

	Flanger* flanger = initializeFlanger(sampleRate, 5.0f, 0.02f);
 8001b02:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8001b7c <initializeFilters+0x104>
 8001b06:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f872 	bl	8001bf4 <initializeFlanger>
 8001b10:	6338      	str	r0, [r7, #48]	; 0x30
	Filter* flangerFilter = createFilter(flanger, flangerAppendSample, setFlangerLevel);
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <initializeFilters+0x108>)
 8001b14:	491b      	ldr	r1, [pc, #108]	; (8001b84 <initializeFilters+0x10c>)
 8001b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b18:	f7ff ff70 	bl	80019fc <createFilter>
 8001b1c:	62f8      	str	r0, [r7, #44]	; 0x2c

	Chorus* chorus = initializeChorus(sampleRate);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fc12 	bl	8001348 <initializeChorus>
 8001b24:	62b8      	str	r0, [r7, #40]	; 0x28
	Filter* chorusFilter = createFilter(chorus, chorusAppendSample, setChorusLevel);
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <initializeFilters+0x110>)
 8001b28:	4918      	ldr	r1, [pc, #96]	; (8001b8c <initializeFilters+0x114>)
 8001b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b2c:	f7ff ff66 	bl	80019fc <createFilter>
 8001b30:	6278      	str	r0, [r7, #36]	; 0x24


    filters->filterInstances[0] = distFilter;
 8001b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b36:	605a      	str	r2, [r3, #4]
    filters->filterInstances[1] = echoFilter;
 8001b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b3c:	609a      	str	r2, [r3, #8]
    filters->filterInstances[2] = reverbFilter;
 8001b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b42:	60da      	str	r2, [r3, #12]
    filters->filterInstances[3] = flangerFilter;
 8001b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b48:	611a      	str	r2, [r3, #16]
    filters->filterInstances[4] = chorusFilter;
 8001b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4e:	615a      	str	r2, [r3, #20]

    return filters;
 8001b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3754      	adds	r7, #84	; 0x54
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	0800198d 	.word	0x0800198d
 8001b60:	0800185d 	.word	0x0800185d
 8001b64:	08001669 	.word	0x08001669
 8001b68:	080015df 	.word	0x080015df
 8001b6c:	08008ad0 	.word	0x08008ad0
 8001b70:	08008ae0 	.word	0x08008ae0
 8001b74:	08001f2b 	.word	0x08001f2b
 8001b78:	08001e95 	.word	0x08001e95
 8001b7c:	3ca3d70a 	.word	0x3ca3d70a
 8001b80:	08001c89 	.word	0x08001c89
 8001b84:	08001c49 	.word	0x08001c49
 8001b88:	0800152b 	.word	0x0800152b
 8001b8c:	08001439 	.word	0x08001439

08001b90 <appendSample>:


SampleType appendSample(Filters* filters, SampleType newSample){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]

	SampleType previousOutput = newSample;
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i = 0; i < AMOUNT_OF_FILTERS; i++){
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	737b      	strb	r3, [r7, #13]
 8001ba4:	e01c      	b.n	8001be0 <appendSample+0x50>

		uint8_t filterEnabled = (filters->enabledFilters >> i) & 1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	fa42 f303 	asr.w	r3, r2, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	733b      	strb	r3, [r7, #12]
		if(filterEnabled){
 8001bba:	7b3b      	ldrb	r3, [r7, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00c      	beq.n	8001bda <appendSample+0x4a>
			previousOutput = filterAppendSample(filters->filterInstances[i], previousOutput);
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff3e 	bl	8001a52 <filterAppendSample>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i = 0; i < AMOUNT_OF_FILTERS; i++){
 8001bda:	7b7b      	ldrb	r3, [r7, #13]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	737b      	strb	r3, [r7, #13]
 8001be0:	7b7b      	ldrb	r3, [r7, #13]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d9df      	bls.n	8001ba6 <appendSample+0x16>
		}

	}

	return previousOutput;
 8001be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <initializeFlanger>:

#include "Flanger.h"

Flanger* initializeFlanger(uint32_t sampleRate, float fer, float amp){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c00:	edc7 0a01 	vstr	s1, [r7, #4]

    Flanger *flanger= malloc(sizeof(flanger));
 8001c04:	2004      	movs	r0, #4
 8001c06:	f004 f927 	bl	8005e58 <malloc>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	617b      	str	r3, [r7, #20]

    flanger->oscillator = initializeOscillator(sampleRate, fer, amp);
 8001c0e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001c12:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 faaa 	bl	8002170 <initializeOscillator>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	60da      	str	r2, [r3, #12]
    flanger->combFilter = initializeCombFeedforward(sampleRate, amp, 1.0f, 0.95f);
 8001c22:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8001c44 <initializeFlanger+0x50>
 8001c26:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001c2a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fd56 	bl	80016e0 <initializeCombFeedforward>
 8001c34:	4602      	mov	r2, r0
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	609a      	str	r2, [r3, #8]

    return flanger;
 8001c3a:	697b      	ldr	r3, [r7, #20]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	3f733333 	.word	0x3f733333

08001c48 <flangerAppendSample>:

SampleType flangerAppendSample(Flanger* flanger, SampleType newSample){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
    
    uint32_t delay = oscillateAppendSample(flanger->oscillator);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fabd 	bl	80021d8 <oscillateAppendSample>
 8001c5e:	60f8      	str	r0, [r7, #12]

    flanger->combFilter->offset = delay;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	601a      	str	r2, [r3, #0]

    SampleType result = combFeedforwardAppendSample(flanger->combFilter, newSample);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fd65 	bl	8001742 <combFeedforwardAppendSample>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	817b      	strh	r3, [r7, #10]

    return result;
 8001c7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]

}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <setFlangerLevel>:

void setFlangerLevel(Flanger* flanger, float a){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	ed87 0a00 	vstr	s0, [r7]

	setCombFeedforwardLevel(flanger->combFilter, a);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	ed97 0a00 	vldr	s0, [r7]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fd8f 	bl	80017c0 <setCombFeedforwardLevel>

}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	0000      	movs	r0, r0
 8001cac:	0000      	movs	r0, r0
	...

08001cb0 <initializeLowPass>:

#include "LowPass.h"

LowPass* initializeLowPass(uint32_t samplingFreq, uint32_t freq) {
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]

    LowPass *filter =malloc(sizeof(LowPass));
 8001cba:	2008      	movs	r0, #8
 8001cbc:	f004 f8cc 	bl	8005e58 <malloc>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]

    filter->a = exp(-2*M_PI*(float)freq/samplingFreq);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cce:	ee17 0a90 	vmov	r0, s15
 8001cd2:	f7fe fc59 	bl	8000588 <__aeabi_f2d>
 8001cd6:	a318      	add	r3, pc, #96	; (adr r3, 8001d38 <initializeLowPass+0x88>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fcac 	bl	8000638 <__aeabi_dmul>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7fe fc2b 	bl	8000544 <__aeabi_ui2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f7fe fdc9 	bl	800088c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	ec43 2b17 	vmov	d7, r2, r3
 8001d02:	eeb0 0a47 	vmov.f32	s0, s14
 8001d06:	eef0 0a67 	vmov.f32	s1, s15
 8001d0a:	f005 f88d 	bl	8006e28 <exp>
 8001d0e:	ec53 2b10 	vmov	r2, r3, d0
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe ff67 	bl	8000be8 <__aeabi_d2f>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]

    filter->prevInput = 0;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	80da      	strh	r2, [r3, #6]
    filter->prevOutput = 0;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	809a      	strh	r2, [r3, #4]

    return filter;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bdb0      	pop	{r4, r5, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	54442d18 	.word	0x54442d18
 8001d3c:	c01921fb 	.word	0xc01921fb

08001d40 <lowPassAppendSample>:

SampleType lowPassAppendSample(LowPass *filter, SampleType input) {
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
    
	SampleType output = (1.0f-filter->a)*filter->prevInput + filter->a*filter->prevOutput;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	edd3 6a00 	vldr	s13, [r3]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8c:	ee17 3a90 	vmov	r3, s15
 8001d90:	81fb      	strh	r3, [r7, #14]

    filter->prevInput = input;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	80da      	strh	r2, [r3, #6]
    filter->prevOutput = output;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	89fa      	ldrh	r2, [r7, #14]
 8001d9c:	809a      	strh	r2, [r3, #4]

    return output;
 8001d9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <initializeReverb>:

#include "Reverb.h"

//Order delayS smallest to largest
Reverb* initializeReverb(uint32_t sampleRate, uint8_t amountOfCombFilters, float *delayCombS, uint8_t amountOfAllPassFilters, float *delayAllS){
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	72fb      	strb	r3, [r7, #11]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	72bb      	strb	r3, [r7, #10]

    Reverb *reverb = malloc(sizeof(Reverb));
 8001dc4:	2010      	movs	r0, #16
 8001dc6:	f004 f847 	bl	8005e58 <malloc>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	617b      	str	r3, [r7, #20]


    //Comb
    reverb->amountOfCombFilters = amountOfCombFilters;
 8001dce:	7afa      	ldrb	r2, [r7, #11]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]

    reverb->combFilters = malloc(reverb->amountOfCombFilters*sizeof(CombFeedforward));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 f83c 	bl	8005e58 <malloc>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	605a      	str	r2, [r3, #4]

    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	e018      	b.n	8001e20 <initializeReverb+0x70>
        reverb->combFilters[i] = initializeCombFeedback(sampleRate, delayCombS[i], 1.0f, 0.8f);
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	18d4      	adds	r4, r2, r3
 8001e04:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001e90 <initializeReverb+0xe0>
 8001e08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f7ff fbab 	bl	800156c <initializeCombFeedback>
 8001e16:	4603      	mov	r3, r0
 8001e18:	6023      	str	r3, [r4, #0]
    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	dbe1      	blt.n	8001dee <initializeReverb+0x3e>
    }
    
    
    //AllPass
    reverb->amountOfAllPassFilters = amountOfAllPassFilters;
 8001e2a:	7aba      	ldrb	r2, [r7, #10]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	609a      	str	r2, [r3, #8]
    reverb->allPassFilters = malloc(reverb->amountOfAllPassFilters*sizeof(AllPass));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 f80e 	bl	8005e58 <malloc>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	60da      	str	r2, [r3, #12]

    for(int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	e018      	b.n	8001e7c <initializeReverb+0xcc>
        reverb->allPassFilters[i] = initializeAllPass(sampleRate, delayAllS[i], 1, 0.8f);
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e50:	4413      	add	r3, r2
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	18d4      	adds	r4, r2, r3
 8001e60:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8001e90 <initializeReverb+0xe0>
 8001e64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001e68:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff fa05 	bl	800127c <initializeAllPass>
 8001e72:	4603      	mov	r3, r0
 8001e74:	6023      	str	r3, [r4, #0]
    for(int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dbe1      	blt.n	8001e4a <initializeReverb+0x9a>
    }

    return reverb;
 8001e86:	697b      	ldr	r3, [r7, #20]

}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3724      	adds	r7, #36	; 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	3f4ccccd 	.word	0x3f4ccccd

08001e94 <reverbAppendSample>:

SampleType reverbAppendSample(Reverb* reverb, SampleType newSample){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]

	SampleType combSumOutput = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	82fb      	strh	r3, [r7, #22]

    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e019      	b.n	8001ede <reverbAppendSample+0x4a>
        combSumOutput += combFeedbackAppendSample(reverb->combFilters[i], newSample)/reverb->amountOfCombFilters;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb8e 	bl	80015de <combFeedbackAppendSample>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	82fb      	strh	r3, [r7, #22]
    for(int i = 0; i < reverb->amountOfCombFilters; i++){
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	3301      	adds	r3, #1
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbe0      	blt.n	8001eaa <reverbAppendSample+0x16>
    }


    SampleType  previousAllPassOutput = combSumOutput;
 8001ee8:	8afb      	ldrh	r3, [r7, #22]
 8001eea:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	e010      	b.n	8001f14 <reverbAppendSample+0x80>
        previousAllPassOutput = allPassAppendSample(reverb->allPassFilters[i], previousAllPassOutput);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f9e7 	bl	80012d8 <allPassAppendSample>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbe9      	blt.n	8001ef2 <reverbAppendSample+0x5e>
    }
    
    return previousAllPassOutput;
 8001f1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <setReverbLevel>:

void setReverbLevel(Reverb* reverb, float a){
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	ed87 0a00 	vstr	s0, [r7]

	for(uint8_t i = 0; i < reverb->amountOfCombFilters; i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e00d      	b.n	8001f58 <setReverbLevel+0x2e>
		setCombFeedbackLevel(reverb->combFilters[i], a);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	ed97 0a00 	vldr	s0, [r7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fb8b 	bl	8001668 <setCombFeedbackLevel>
	for(uint8_t i = 0; i < reverb->amountOfCombFilters; i++){
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	3301      	adds	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	dbec      	blt.n	8001f3c <setReverbLevel+0x12>
	}

	for(uint8_t i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001f62:	2300      	movs	r3, #0
 8001f64:	73bb      	strb	r3, [r7, #14]
 8001f66:	e00d      	b.n	8001f84 <setReverbLevel+0x5a>
		setAllPassLevel(reverb->allPassFilters[i], a);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	ed97 0a00 	vldr	s0, [r7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f9cd 	bl	8001318 <setAllPassLevel>
	for(uint8_t i = 0; i < reverb->amountOfAllPassFilters; i++){
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	3301      	adds	r3, #1
 8001f82:	73bb      	strb	r3, [r7, #14]
 8001f84:	7bba      	ldrb	r2, [r7, #14]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbec      	blt.n	8001f68 <setReverbLevel+0x3e>
	}

}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <initializeCircularBuffer>:

#include "CircularBuffer.h"

CircularBuffer* initializeCircularBuffer(uint32_t bufferSize){
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

    CircularBuffer *buffer = malloc(sizeof(CircularBuffer));
 8001fa0:	200c      	movs	r0, #12
 8001fa2:	f003 ff59 	bl	8005e58 <malloc>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	60fb      	str	r3, [r7, #12]

    buffer->bufferSize = bufferSize;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
    buffer->buffer = calloc(bufferSize, sizeof(int16_t));
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f003 ff32 	bl	8005e1c <calloc>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	601a      	str	r2, [r3, #0]
    buffer->writeIndex = 0;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	605a      	str	r2, [r3, #4]

    return buffer;
 8001fc6:	68fb      	ldr	r3, [r7, #12]

}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <putValueInCircularBuffer>:

void putValueInCircularBuffer(CircularBuffer* buffer, int16_t value){
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]

    buffer->buffer[buffer->writeIndex] = value;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	801a      	strh	r2, [r3, #0]
    buffer->writeIndex = (buffer->writeIndex+1) % buffer->bufferSize;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6892      	ldr	r2, [r2, #8]
 8001ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ffa:	fb01 f202 	mul.w	r2, r1, r2
 8001ffe:	1a9a      	subs	r2, r3, r2
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	605a      	str	r2, [r3, #4]

}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <getValueInCircularBuffer>:

SampleType getValueInCircularBuffer(CircularBuffer* buffer, uint32_t offset){
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]

    SampleType output = buffer->buffer[ (buffer->writeIndex + offset ) % buffer->bufferSize ];
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	4413      	add	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6892      	ldr	r2, [r2, #8]
 800202a:	fbb3 f0f2 	udiv	r0, r3, r2
 800202e:	fb00 f202 	mul.w	r2, r0, r2
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	440b      	add	r3, r1
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	81fb      	strh	r3, [r7, #14]
    return output;
 800203c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	0000      	movs	r0, r0
	...

08002050 <initSin>:

#define SIN_LUT_SIZE 128

static float sin_lut[SIN_LUT_SIZE];

void initSin(){
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0

    for(uint16_t i = 0; i < SIN_LUT_SIZE; i++){
 8002056:	2300      	movs	r3, #0
 8002058:	80fb      	strh	r3, [r7, #6]
 800205a:	e02c      	b.n	80020b6 <initSin+0x66>
        sin_lut[i] = sinf(M_TWOPI*(float)i/SIN_LUT_SIZE);
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002066:	ee17 0a90 	vmov	r0, s15
 800206a:	f7fe fa8d 	bl	8000588 <__aeabi_f2d>
 800206e:	a318      	add	r3, pc, #96	; (adr r3, 80020d0 <initSin+0x80>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fae0 	bl	8000638 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <initSin+0x78>)
 8002086:	f7fe fc01 	bl	800088c <__aeabi_ddiv>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fda9 	bl	8000be8 <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
 8002098:	88fc      	ldrh	r4, [r7, #6]
 800209a:	ee00 3a10 	vmov	s0, r3
 800209e:	f004 ff7b 	bl	8006f98 <sinf>
 80020a2:	eef0 7a40 	vmov.f32	s15, s0
 80020a6:	4a09      	ldr	r2, [pc, #36]	; (80020cc <initSin+0x7c>)
 80020a8:	00a3      	lsls	r3, r4, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	edc3 7a00 	vstr	s15, [r3]
    for(uint16_t i = 0; i < SIN_LUT_SIZE; i++){
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	3301      	adds	r3, #1
 80020b4:	80fb      	strh	r3, [r7, #6]
 80020b6:	88fb      	ldrh	r3, [r7, #6]
 80020b8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ba:	d9cf      	bls.n	800205c <initSin+0xc>
    }

}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd90      	pop	{r4, r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40600000 	.word	0x40600000
 80020cc:	200002f4 	.word	0x200002f4
 80020d0:	54442d18 	.word	0x54442d18
 80020d4:	401921fb 	.word	0x401921fb

080020d8 <sinApproxLut>:

//x should be between 0 and 2 pi
float sinApproxLut(float x){
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	ed87 0a01 	vstr	s0, [r7, #4]

    //x -= truncf(x/(M_TWOPI))*M_TWOPI;

    float _x = x * 0.159154943092f; //[0..2*pi] to [0..1]
 80020e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002164 <sinApproxLut+0x8c>
 80020ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ee:	edc7 7a05 	vstr	s15, [r7, #20]
    float findex = (_x * SIN_LUT_SIZE);
 80020f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002168 <sinApproxLut+0x90>
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	edc7 7a04 	vstr	s15, [r7, #16]
    uint16_t index = (uint16_t)(findex);
 8002102:	edd7 7a04 	vldr	s15, [r7, #16]
 8002106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800210a:	ee17 3a90 	vmov	r3, s15
 800210e:	81fb      	strh	r3, [r7, #14]

    float fract = findex - index;
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211a:	ed97 7a04 	vldr	s14, [r7, #16]
 800211e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002122:	edc7 7a02 	vstr	s15, [r7, #8]

    return (1.0f*fract)*sin_lut[index]+fract*sin_lut[index+1];
 8002126:	89fb      	ldrh	r3, [r7, #14]
 8002128:	4a10      	ldr	r2, [pc, #64]	; (800216c <sinApproxLut+0x94>)
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	edd7 7a02 	vldr	s15, [r7, #8]
 8002136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	3301      	adds	r3, #1
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <sinApproxLut+0x94>)
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	edd3 6a00 	vldr	s13, [r3]
 8002148:	edd7 7a02 	vldr	s15, [r7, #8]
 800214c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
    
    //return sin_lut[3];

}
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	3e22f983 	.word	0x3e22f983
 8002168:	43000000 	.word	0x43000000
 800216c:	200002f4 	.word	0x200002f4

08002170 <initializeOscillator>:

#include "Oscillator.h"

Oscillator* initializeOscillator(uint32_t sampleRate, float frequency, float amplitude){
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	ed87 0a02 	vstr	s0, [r7, #8]
 800217c:	edc7 0a01 	vstr	s1, [r7, #4]

    Oscillator* oscillator = malloc(sizeof(Oscillator));
 8002180:	200c      	movs	r0, #12
 8002182:	f003 fe69 	bl	8005e58 <malloc>
 8002186:	4603      	mov	r3, r0
 8002188:	617b      	str	r3, [r7, #20]

    oscillator->freq = sampleRate/frequency; // [(1/s)/(1/s)]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002194:	ed97 7a02 	vldr	s14, [r7, #8]
 8002198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800219c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a0:	ee17 2a90 	vmov	r2, s15
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]
    oscillator->amp = amplitude*sampleRate;  // [s*1/s]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021be:	ee17 2a90 	vmov	r2, s15
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	605a      	str	r2, [r3, #4]

    oscillator->i =0;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]

    return oscillator;
 80021cc:	697b      	ldr	r3, [r7, #20]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <oscillateAppendSample>:

uint32_t oscillateAppendSample(Oscillator* osc){
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	ed2d 8b02 	vpush	{d8}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

    float sinuscall = M_TWOPI*osc->i/osc->freq;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f9ab 	bl	8000544 <__aeabi_ui2d>
 80021ee:	a326      	add	r3, pc, #152	; (adr r3, 8002288 <oscillateAppendSample+0xb0>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fa20 	bl	8000638 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4614      	mov	r4, r2
 80021fe:	461d      	mov	r5, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe f99d 	bl	8000544 <__aeabi_ui2d>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4620      	mov	r0, r4
 8002210:	4629      	mov	r1, r5
 8002212:	f7fe fb3b 	bl	800088c <__aeabi_ddiv>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fce3 	bl	8000be8 <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	60fb      	str	r3, [r7, #12]
    float output = osc->amp/2*(1.0f-(float)sinApproxLut(sinuscall)); //delen omdat het tussen de max waarden komt te zitte
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002234:	ed97 0a03 	vldr	s0, [r7, #12]
 8002238:	f7ff ff4e 	bl	80020d8 <sinApproxLut>
 800223c:	eef0 7a40 	vmov.f32	s15, s0
 8002240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002248:	ee68 7a27 	vmul.f32	s15, s16, s15
 800224c:	edc7 7a02 	vstr	s15, [r7, #8]
    osc->i++;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	609a      	str	r2, [r3, #8]
    // = (osc->i+1) % osc->freq;
    if(osc->i >= osc->freq){
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d302      	bcc.n	800226c <oscillateAppendSample+0x94>
    	osc->i = 0;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
    }

    return output;
 800226c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002274:	ee17 3a90 	vmov	r3, s15
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	ecbd 8b02 	vpop	{d8}
 8002282:	bdb0      	pop	{r4, r5, r7, pc}
 8002284:	f3af 8000 	nop.w
 8002288:	54442d18 	.word	0x54442d18
 800228c:	401921fb 	.word	0x401921fb

08002290 <InitIO>:
// 1, SelectingValue -> Disabled
// 2, Disabled -> SelectingFilter
// 3, SelectingFilter -> SelectingValue
uint8_t switchedStateFlag;

void InitIO(){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
 8002294:	f7fe ff9e 	bl	80011d4 <GetEnabledFilters>
 8002298:	4603      	mov	r3, r0
 800229a:	4619      	mov	r1, r3
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <InitIO+0x1c>)
 800229e:	f000 f98f 	bl	80025c0 <LoadValueIntoShiftRegister>
	ResetShiftRegister(&shiftRegLedbar);
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <InitIO+0x20>)
 80022a4:	f000 f980 	bl	80025a8 <ResetShiftRegister>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000008 	.word	0x20000008
 80022b0:	20000020 	.word	0x20000020

080022b4 <HandleSelectingFilter>:

void HandleSelectingFilter(){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0

	selectedFilter = (uint16_t)(rotaryEncoder.currentPos/4) % AMOUNT_OF_FILTERS;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HandleSelectingFilter+0x3c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HandleSelectingFilter+0x40>)
 80022c2:	fba3 1302 	umull	r1, r3, r3, r2
 80022c6:	0899      	lsrs	r1, r3, #2
 80022c8:	460b      	mov	r3, r1
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HandleSelectingFilter+0x44>)
 80022d4:	701a      	strb	r2, [r3, #0]
	LoadValueIntoShiftRegister(&shiftRegFilterSelect, 1 << selectedFilter);
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HandleSelectingFilter+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	2301      	movs	r3, #1
 80022de:	4093      	lsls	r3, r2
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <HandleSelectingFilter+0x48>)
 80022e6:	f000 f96b 	bl	80025c0 <LoadValueIntoShiftRegister>

}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000038 	.word	0x20000038
 80022f4:	cccccccd 	.word	0xcccccccd
 80022f8:	200004f5 	.word	0x200004f5
 80022fc:	20000008 	.word	0x20000008

08002300 <HandleSelectingValue>:

void HandleSelectingValue(){
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0

	uint8_t led_bar = (rotaryEncoder.currentPos/4);
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <HandleSelectingValue+0x5c>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	71fb      	strb	r3, [r7, #7]
	uint8_t ledbar_array = (1 << led_bar) - 1;
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2201      	movs	r2, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	71bb      	strb	r3, [r7, #6]

	changeFilterLevel(getFilters()->filterInstances[selectedFilter], (float)led_bar/(8-1));
 800231c:	f7fe ff66 	bl	80011ec <getFilters>
 8002320:	4602      	mov	r2, r0
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HandleSelectingValue+0x60>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	ee07 2a90 	vmov	s15, r2
 8002332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002336:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 800233a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800233e:	eeb0 0a47 	vmov.f32	s0, s14
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fb73 	bl	8001a2e <changeFilterLevel>

	LoadValueIntoShiftRegister(&shiftRegLedbar, ledbar_array);
 8002348:	79bb      	ldrb	r3, [r7, #6]
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HandleSelectingValue+0x64>)
 800234e:	f000 f937 	bl	80025c0 <LoadValueIntoShiftRegister>

}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000038 	.word	0x20000038
 8002360:	200004f5 	.word	0x200004f5
 8002364:	20000020 	.word	0x20000020

08002368 <ButtonInterrupt>:

void ButtonInterrupt(){
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

	IOState = (IOState + 1)%3;
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <ButtonInterrupt+0x40>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <ButtonInterrupt+0x44>)
 8002374:	fb83 3102 	smull	r3, r1, r3, r2
 8002378:	17d3      	asrs	r3, r2, #31
 800237a:	1ac9      	subs	r1, r1, r3
 800237c:	460b      	mov	r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	440b      	add	r3, r1
 8002382:	1ad1      	subs	r1, r2, r3
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <ButtonInterrupt+0x40>)
 8002388:	701a      	strb	r2, [r3, #0]

	rotaryEncoder.currentPos = 0;
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <ButtonInterrupt+0x48>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

	switchedStateFlag = IOState + 1;
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <ButtonInterrupt+0x40>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <ButtonInterrupt+0x4c>)
 800239a:	701a      	strb	r2, [r3, #0]


}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	200004f4 	.word	0x200004f4
 80023ac:	55555556 	.word	0x55555556
 80023b0:	20000038 	.word	0x20000038
 80023b4:	200004f6 	.word	0x200004f6

080023b8 <RotaryEncoderInterrupt>:

void RotaryEncoderInterrupt(){
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
	rot_intrupt(&rotaryEncoder);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <RotaryEncoderInterrupt+0x10>)
 80023be:	f000 f865 	bl	800248c <rot_intrupt>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000038 	.word	0x20000038

080023cc <IOUpdate>:


void IOUpdate(){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	//uint8_t buttonPressed = HAL_GPIO_ReadPin(ToggleInput1_GPIO_Port, ToggleInput1_Pin);
	//SetFilterState(0, buttonPressed);


	//Handling Transistions
	if(switchedStateFlag > 0){
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <IOUpdate+0x6c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <IOUpdate+0x44>

		switch(switchedStateFlag){
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <IOUpdate+0x6c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d010      	beq.n	8002402 <IOUpdate+0x36>
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	dc12      	bgt.n	800240a <IOUpdate+0x3e>
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <IOUpdate+0x20>
 80023e8:	2b02      	cmp	r3, #2
				LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
				ResetShiftRegister(&shiftRegLedbar);
				break;
			case 2:
				// Nothing needs to be reset
				break;
 80023ea:	e00e      	b.n	800240a <IOUpdate+0x3e>
				LoadValueIntoShiftRegister(&shiftRegFilterSelect, GetEnabledFilters());
 80023ec:	f7fe fef2 	bl	80011d4 <GetEnabledFilters>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4619      	mov	r1, r3
 80023f4:	4811      	ldr	r0, [pc, #68]	; (800243c <IOUpdate+0x70>)
 80023f6:	f000 f8e3 	bl	80025c0 <LoadValueIntoShiftRegister>
				ResetShiftRegister(&shiftRegLedbar);
 80023fa:	4811      	ldr	r0, [pc, #68]	; (8002440 <IOUpdate+0x74>)
 80023fc:	f000 f8d4 	bl	80025a8 <ResetShiftRegister>
				break;
 8002400:	e003      	b.n	800240a <IOUpdate+0x3e>
			case 3:
				// Nothing needs to be reset
				rotaryEncoder.currentPos = 4; // At least one led on, at start
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <IOUpdate+0x78>)
 8002404:	2204      	movs	r2, #4
 8002406:	701a      	strb	r2, [r3, #0]
				break;
 8002408:	bf00      	nop
		}

		switchedStateFlag = 0;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <IOUpdate+0x6c>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]

	}

	//Handling states
	switch (IOState) {
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <IOUpdate+0x7c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d009      	beq.n	800242c <IOUpdate+0x60>
 8002418:	2b02      	cmp	r3, #2
 800241a:	dc0b      	bgt.n	8002434 <IOUpdate+0x68>
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <IOUpdate+0x66>
 8002420:	2b01      	cmp	r3, #1
 8002422:	d000      	beq.n	8002426 <IOUpdate+0x5a>
	    	break;
	  }



}
 8002424:	e006      	b.n	8002434 <IOUpdate+0x68>
	    	HandleSelectingFilter();
 8002426:	f7ff ff45 	bl	80022b4 <HandleSelectingFilter>
	    	break;
 800242a:	e003      	b.n	8002434 <IOUpdate+0x68>
	    	HandleSelectingValue();
 800242c:	f7ff ff68 	bl	8002300 <HandleSelectingValue>
	    	break;
 8002430:	e000      	b.n	8002434 <IOUpdate+0x68>
	    	break;
 8002432:	bf00      	nop
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200004f6 	.word	0x200004f6
 800243c:	20000008 	.word	0x20000008
 8002440:	20000020 	.word	0x20000020
 8002444:	20000038 	.word	0x20000038
 8002448:	200004f4 	.word	0x200004f4

0800244c <rot_get_state>:

uint8_t rot_old_state =0;
uint8_t rot_new_state=0;


uint8_t rot_get_state(RotaryEncoder_t* rotEncoder) {
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	return (uint8_t)( (HAL_GPIO_ReadPin(rotEncoder->portB, rotEncoder->pinB) << 1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8a1b      	ldrh	r3, [r3, #16]
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f001 fce8 	bl	8003e34 <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
 8002466:	005b      	lsls	r3, r3, #1
                	| (HAL_GPIO_ReadPin(rotEncoder->portA, rotEncoder->pinA)) );
 8002468:	b25c      	sxtb	r4, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	891b      	ldrh	r3, [r3, #8]
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f001 fcdd 	bl	8003e34 <HAL_GPIO_ReadPin>
 800247a:	4603      	mov	r3, r0
 800247c:	b25b      	sxtb	r3, r3
 800247e:	4323      	orrs	r3, r4
 8002480:	b25b      	sxtb	r3, r3
	return (uint8_t)( (HAL_GPIO_ReadPin(rotEncoder->portB, rotEncoder->pinB) << 1)
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <rot_intrupt>:

void rot_intrupt(RotaryEncoder_t* rotEncoder){
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

	  rot_new_state = rot_get_state(rotEncoder);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffd9 	bl	800244c <rot_get_state>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <rot_intrupt+0x114>)
 80024a0:	701a      	strb	r2, [r3, #0]
	  		// Check transition
	  if (rot_old_state == 3 && rot_new_state == 2) {        // 3 -> 2 transition
 80024a2:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <rot_intrupt+0x118>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d10a      	bne.n	80024c0 <rot_intrupt+0x34>
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <rot_intrupt+0x114>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d106      	bne.n	80024c0 <rot_intrupt+0x34>
		  rotEncoder->currentPos++;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e067      	b.n	8002590 <rot_intrupt+0x104>
	  } else if (rot_old_state == 2 && rot_new_state == 0) { // 2 -> 0 transition
 80024c0:	4b38      	ldr	r3, [pc, #224]	; (80025a4 <rot_intrupt+0x118>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d10a      	bne.n	80024de <rot_intrupt+0x52>
 80024c8:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <rot_intrupt+0x114>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d106      	bne.n	80024de <rot_intrupt+0x52>
		  rotEncoder->currentPos++;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	3301      	adds	r3, #1
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e058      	b.n	8002590 <rot_intrupt+0x104>
	  } else if (rot_old_state == 0 && rot_new_state == 1) { // 0 -> 1 transition
 80024de:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <rot_intrupt+0x118>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <rot_intrupt+0x70>
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <rot_intrupt+0x114>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d106      	bne.n	80024fc <rot_intrupt+0x70>
		  rotEncoder->currentPos++;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e049      	b.n	8002590 <rot_intrupt+0x104>
	  } else if (rot_old_state == 1 && rot_new_state == 3) { // 1 -> 3 transition
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <rot_intrupt+0x118>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d10a      	bne.n	800251a <rot_intrupt+0x8e>
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <rot_intrupt+0x114>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d106      	bne.n	800251a <rot_intrupt+0x8e>
		  rotEncoder->currentPos++;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	b2da      	uxtb	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e03a      	b.n	8002590 <rot_intrupt+0x104>
	  } else if (rot_old_state == 3 && rot_new_state == 1) { // 3 -> 1 transition
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <rot_intrupt+0x118>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b03      	cmp	r3, #3
 8002520:	d10a      	bne.n	8002538 <rot_intrupt+0xac>
 8002522:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <rot_intrupt+0x114>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d106      	bne.n	8002538 <rot_intrupt+0xac>
		  rotEncoder->currentPos--;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	3b01      	subs	r3, #1
 8002530:	b2da      	uxtb	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e02b      	b.n	8002590 <rot_intrupt+0x104>
	  } else if (rot_old_state == 1 && rot_new_state == 0) { // 1 -> 0 transition
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <rot_intrupt+0x118>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10a      	bne.n	8002556 <rot_intrupt+0xca>
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <rot_intrupt+0x114>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <rot_intrupt+0xca>
		  rotEncoder->currentPos--;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	3b01      	subs	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e01c      	b.n	8002590 <rot_intrupt+0x104>
	  } else if (rot_old_state == 0 && rot_new_state == 2) { // 0 -> 2 transition
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <rot_intrupt+0x118>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <rot_intrupt+0xe8>
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <rot_intrupt+0x114>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d106      	bne.n	8002574 <rot_intrupt+0xe8>
		  rotEncoder->currentPos--;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e00d      	b.n	8002590 <rot_intrupt+0x104>
	  } else if (rot_old_state == 2 && rot_new_state == 3) { // 2 -> 3 transition
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <rot_intrupt+0x118>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d109      	bne.n	8002590 <rot_intrupt+0x104>
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <rot_intrupt+0x114>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d105      	bne.n	8002590 <rot_intrupt+0x104>
		  rotEncoder->currentPos--;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	3b01      	subs	r3, #1
 800258a:	b2da      	uxtb	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	701a      	strb	r2, [r3, #0]
	  }
	  rot_old_state = rot_new_state;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <rot_intrupt+0x114>)
 8002592:	781a      	ldrb	r2, [r3, #0]
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <rot_intrupt+0x118>)
 8002596:	701a      	strb	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200004f8 	.word	0x200004f8
 80025a4:	200004f7 	.word	0x200004f7

080025a8 <ResetShiftRegister>:
 */


#include "ShiftRegister.h"

void ResetShiftRegister(ShiftRegister_t *reg){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	LoadValueIntoShiftRegister(reg, 0x00);
 80025b0:	2100      	movs	r1, #0
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f804 	bl	80025c0 <LoadValueIntoShiftRegister>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <LoadValueIntoShiftRegister>:

void LoadValueIntoShiftRegister(ShiftRegister_t *reg, uint8_t num){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]

	for (int8_t i = 7; i >= 0; i--) {
 80025cc:	2307      	movs	r3, #7
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e02c      	b.n	800262c <LoadValueIntoShiftRegister+0x6c>
		GPIO_PinState bit_value = ((num >> i) & 1)  ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d8:	fa42 f303 	asr.w	r3, r2, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	73bb      	strb	r3, [r7, #14]
		HAL_GPIO_WritePin(reg->dataPort, reg->dataPin, bit_value);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6898      	ldr	r0, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	899b      	ldrh	r3, [r3, #12]
 80025ec:	7bba      	ldrb	r2, [r7, #14]
 80025ee:	4619      	mov	r1, r3
 80025f0:	f001 fc38 	bl	8003e64 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80025f4:	2001      	movs	r0, #1
 80025f6:	f000 fdd3 	bl	80031a0 <HAL_Delay>
		HAL_GPIO_WritePin(reg->clkPort, reg->clkPin, GPIO_PIN_SET);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	889b      	ldrh	r3, [r3, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	4619      	mov	r1, r3
 8002606:	f001 fc2d 	bl	8003e64 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800260a:	2001      	movs	r0, #1
 800260c:	f000 fdc8 	bl	80031a0 <HAL_Delay>
		HAL_GPIO_WritePin(reg->clkPort, reg->clkPin, GPIO_PIN_RESET);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	889b      	ldrh	r3, [r3, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	4619      	mov	r1, r3
 800261c:	f001 fc22 	bl	8003e64 <HAL_GPIO_WritePin>
	for (int8_t i = 7; i >= 0; i--) {
 8002620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	dace      	bge.n	80025d2 <LoadValueIntoShiftRegister+0x12>
	  }

	HAL_GPIO_WritePin(reg->enabledPort, reg->enabledPin, GPIO_PIN_SET);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6918      	ldr	r0, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8a9b      	ldrh	r3, [r3, #20]
 800263c:	2201      	movs	r2, #1
 800263e:	4619      	mov	r1, r3
 8002640:	f001 fc10 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002644:	2001      	movs	r0, #1
 8002646:	f000 fdab 	bl	80031a0 <HAL_Delay>
	HAL_GPIO_WritePin(reg->enabledPort, reg->enabledPin, GPIO_PIN_RESET);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6918      	ldr	r0, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8a9b      	ldrh	r3, [r3, #20]
 8002652:	2200      	movs	r2, #0
 8002654:	4619      	mov	r1, r3
 8002656:	f001 fc05 	bl	8003e64 <HAL_GPIO_WritePin>
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002668:	f000 fd3d 	bl	80030e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800266c:	f000 f826 	bl	80026bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002670:	f000 f892 	bl	8002798 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002674:	f000 f97a 	bl	800296c <MX_GPIO_Init>
  MX_DMA_Init();
 8002678:	f000 f946 	bl	8002908 <MX_DMA_Init>
  MX_I2C1_Init();
 800267c:	f000 f8ae 	bl	80027dc <MX_I2C1_Init>
  MX_I2S1_Init();
 8002680:	f000 f8ec 	bl	800285c <MX_I2S1_Init>
  MX_I2S2_Init();
 8002684:	f000 f916 	bl	80028b4 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  initSin();
 8002688:	f7ff fce2 	bl	8002050 <initSin>

  InitIO();
 800268c:	f7ff fe00 	bl	8002290 <InitIO>
  CodecInit(&hi2c1);
 8002690:	4807      	ldr	r0, [pc, #28]	; (80026b0 <main+0x4c>)
 8002692:	f7fe fc77 	bl	8000f84 <CodecInit>

  InitDSP(44000, &hi2s1, &hi2s2); //44117 is in IOC file
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <main+0x50>)
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <main+0x54>)
 800269a:	f64a 30e0 	movw	r0, #44000	; 0xabe0
 800269e:	f7fe fd39 	bl	8001114 <InitDSP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	IOUpdate();
 80026a2:	f7ff fe93 	bl	80023cc <IOUpdate>
	DSPUpdate(&hi2s1);
 80026a6:	4804      	ldr	r0, [pc, #16]	; (80026b8 <main+0x54>)
 80026a8:	f7fe fd54 	bl	8001154 <DSPUpdate>
	IOUpdate();
 80026ac:	e7f9      	b.n	80026a2 <main+0x3e>
 80026ae:	bf00      	nop
 80026b0:	200004fc 	.word	0x200004fc
 80026b4:	20000590 	.word	0x20000590
 80026b8:	20000550 	.word	0x20000550

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b094      	sub	sp, #80	; 0x50
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	2230      	movs	r2, #48	; 0x30
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fdbb 	bl	8006246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <SystemClock_Config+0xd4>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <SystemClock_Config+0xd4>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
 80026ec:	4b28      	ldr	r3, [pc, #160]	; (8002790 <SystemClock_Config+0xd4>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f8:	4b26      	ldr	r3, [pc, #152]	; (8002794 <SystemClock_Config+0xd8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a25      	ldr	r2, [pc, #148]	; (8002794 <SystemClock_Config+0xd8>)
 80026fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <SystemClock_Config+0xd8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002710:	2301      	movs	r3, #1
 8002712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271a:	2302      	movs	r3, #2
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800271e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002724:	2319      	movs	r3, #25
 8002726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002728:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800272e:	2302      	movs	r3, #2
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002732:	2302      	movs	r3, #2
 8002734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002736:	f107 0320 	add.w	r3, r7, #32
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fbce 	bl	8004edc <HAL_RCC_OscConfig>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002746:	f000 f9dd 	bl	8002b04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800274a:	f002 fb77 	bl	8004e3c <HAL_PWREx_EnableOverDrive>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002754:	f000 f9d6 	bl	8002b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002758:	230f      	movs	r3, #15
 800275a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800275c:	2302      	movs	r3, #2
 800275e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800276a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	2107      	movs	r1, #7
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fe54 	bl	8005424 <HAL_RCC_ClockConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002782:	f000 f9bf 	bl	8002b04 <Error_Handler>
  }
}
 8002786:	bf00      	nop
 8002788:	3750      	adds	r7, #80	; 0x50
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	40007000 	.word	0x40007000

08002798 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0a0      	sub	sp, #128	; 0x80
 800279c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800279e:	463b      	mov	r3, r7
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fd4e 	bl	8006246 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80027aa:	2301      	movs	r3, #1
 80027ac:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80027b2:	2302      	movs	r3, #2
 80027b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80027b6:	2302      	movs	r3, #2
 80027b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 80027be:	2300      	movs	r3, #0
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c2:	463b      	mov	r3, r7
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 ffdf 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <PeriphCommonClock_Config+0x3c>
  {
    Error_Handler();
 80027d0:	f000 f998 	bl	8002b04 <Error_Handler>
  }
}
 80027d4:	bf00      	nop
 80027d6:	3780      	adds	r7, #128	; 0x80
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <MX_I2C1_Init+0x74>)
 80027e2:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <MX_I2C1_Init+0x78>)
 80027e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <MX_I2C1_Init+0x74>)
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <MX_I2C1_Init+0x7c>)
 80027ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <MX_I2C1_Init+0x74>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <MX_I2C1_Init+0x74>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <MX_I2C1_Init+0x74>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <MX_I2C1_Init+0x74>)
 8002800:	2200      	movs	r2, #0
 8002802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <MX_I2C1_Init+0x74>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_I2C1_Init+0x74>)
 800280c:	2200      	movs	r2, #0
 800280e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <MX_I2C1_Init+0x74>)
 8002812:	2200      	movs	r2, #0
 8002814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002816:	480e      	ldr	r0, [pc, #56]	; (8002850 <MX_I2C1_Init+0x74>)
 8002818:	f001 fb56 	bl	8003ec8 <HAL_I2C_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002822:	f000 f96f 	bl	8002b04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002826:	2100      	movs	r1, #0
 8002828:	4809      	ldr	r0, [pc, #36]	; (8002850 <MX_I2C1_Init+0x74>)
 800282a:	f001 ff37 	bl	800469c <HAL_I2CEx_ConfigAnalogFilter>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002834:	f000 f966 	bl	8002b04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002838:	2100      	movs	r1, #0
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_I2C1_Init+0x74>)
 800283c:	f001 ff79 	bl	8004732 <HAL_I2CEx_ConfigDigitalFilter>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002846:	f000 f95d 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200004fc 	.word	0x200004fc
 8002854:	40005400 	.word	0x40005400
 8002858:	20404768 	.word	0x20404768

0800285c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MX_I2S1_Init+0x50>)
 8002862:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <MX_I2S1_Init+0x54>)
 8002864:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <MX_I2S1_Init+0x50>)
 8002868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MX_I2S1_Init+0x50>)
 8002870:	2200      	movs	r2, #0
 8002872:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002874:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <MX_I2S1_Init+0x50>)
 8002876:	2200      	movs	r2, #0
 8002878:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <MX_I2S1_Init+0x50>)
 800287c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002880:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <MX_I2S1_Init+0x50>)
 8002884:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002888:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <MX_I2S1_Init+0x50>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MX_I2S1_Init+0x50>)
 8002892:	2202      	movs	r2, #2
 8002894:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_I2S1_Init+0x50>)
 8002898:	f001 ff98 	bl	80047cc <HAL_I2S_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_I2S1_Init+0x4a>
  {
    Error_Handler();
 80028a2:	f000 f92f 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000550 	.word	0x20000550
 80028b0:	40013000 	.word	0x40013000

080028b4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <MX_I2S2_Init+0x50>)
 80028bc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028da:	f64a 4244 	movw	r2, #44100	; 0xac44
 80028de:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028e8:	2202      	movs	r2, #2
 80028ea:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <MX_I2S2_Init+0x4c>)
 80028ee:	f001 ff6d 	bl	80047cc <HAL_I2S_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_I2S2_Init+0x48>
  {
    Error_Handler();
 80028f8:	f000 f904 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000590 	.word	0x20000590
 8002904:	40003800 	.word	0x40003800

08002908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_DMA_Init+0x60>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <MX_DMA_Init+0x60>)
 8002914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MX_DMA_Init+0x60>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_DMA_Init+0x60>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <MX_DMA_Init+0x60>)
 800292c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <MX_DMA_Init+0x60>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	200e      	movs	r0, #14
 8002944:	f000 fd2b 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002948:	200e      	movs	r0, #14
 800294a:	f000 fd44 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	203b      	movs	r0, #59	; 0x3b
 8002954:	f000 fd23 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002958:	203b      	movs	r0, #59	; 0x3b
 800295a:	f000 fd3c 	bl	80033d6 <HAL_NVIC_EnableIRQ>

}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800

0800296c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002972:	f107 0314 	add.w	r3, r7, #20
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002982:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <MX_GPIO_Init+0x140>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a49      	ldr	r2, [pc, #292]	; (8002aac <MX_GPIO_Init+0x140>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b47      	ldr	r3, [pc, #284]	; (8002aac <MX_GPIO_Init+0x140>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800299a:	4b44      	ldr	r3, [pc, #272]	; (8002aac <MX_GPIO_Init+0x140>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a43      	ldr	r2, [pc, #268]	; (8002aac <MX_GPIO_Init+0x140>)
 80029a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <MX_GPIO_Init+0x140>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <MX_GPIO_Init+0x140>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a3d      	ldr	r2, [pc, #244]	; (8002aac <MX_GPIO_Init+0x140>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <MX_GPIO_Init+0x140>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <MX_GPIO_Init+0x140>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <MX_GPIO_Init+0x140>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <MX_GPIO_Init+0x140>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ShiftRegFDat_Pin|ShiftRegFStoClk_Pin|ShiftRegFClk_Pin|ShiftRegLBarDat_Pin
 80029e2:	2200      	movs	r2, #0
 80029e4:	f24e 010d 	movw	r1, #57357	; 0xe00d
 80029e8:	4831      	ldr	r0, [pc, #196]	; (8002ab0 <MX_GPIO_Init+0x144>)
 80029ea:	f001 fa3b 	bl	8003e64 <HAL_GPIO_WritePin>
                          |ShiftRegLBarStoClk_Pin|ShiftRegLBarClk_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ShiftRegFDat_Pin ShiftRegFStoClk_Pin ShiftRegFClk_Pin ShiftRegLBarDat_Pin
                           ShiftRegLBarStoClk_Pin ShiftRegLBarClk_Pin */
  GPIO_InitStruct.Pin = ShiftRegFDat_Pin|ShiftRegFStoClk_Pin|ShiftRegFClk_Pin|ShiftRegLBarDat_Pin
 80029ee:	f24e 030d 	movw	r3, #57357	; 0xe00d
 80029f2:	617b      	str	r3, [r7, #20]
                          |ShiftRegLBarStoClk_Pin|ShiftRegLBarClk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	482a      	ldr	r0, [pc, #168]	; (8002ab0 <MX_GPIO_Init+0x144>)
 8002a08:	f001 f878 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : RotEncoderInA_Pin RotEncoderButton_Pin */
  GPIO_InitStruct.Pin = RotEncoderInA_Pin|RotEncoderButton_Pin;
 8002a0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	4619      	mov	r1, r3
 8002a22:	4823      	ldr	r0, [pc, #140]	; (8002ab0 <MX_GPIO_Init+0x144>)
 8002a24:	f001 f86a 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : RotEncoderInB_Pin */
  GPIO_InitStruct.Pin = RotEncoderInB_Pin;
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a2c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RotEncoderInB_GPIO_Port, &GPIO_InitStruct);
 8002a36:	f107 0314 	add.w	r3, r7, #20
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	481c      	ldr	r0, [pc, #112]	; (8002ab0 <MX_GPIO_Init+0x144>)
 8002a3e:	f001 f85d 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : ToggleInput4_Pin ToggleInput2_Pin ToggleInput1_Pin ToggleInput8_Pin */
  GPIO_InitStruct.Pin = ToggleInput4_Pin|ToggleInput2_Pin|ToggleInput1_Pin|ToggleInput8_Pin;
 8002a42:	f44f 431a 	mov.w	r3, #39424	; 0x9a00
 8002a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <MX_GPIO_Init+0x148>)
 8002a58:	f001 f850 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pin : ToggleInput3_Pin */
  GPIO_InitStruct.Pin = ToggleInput3_Pin;
 8002a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ToggleInput3_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	4810      	ldr	r0, [pc, #64]	; (8002ab4 <MX_GPIO_Init+0x148>)
 8002a74:	f001 f842 	bl	8003afc <HAL_GPIO_Init>

  /*Configure GPIO pins : ToggleInput7_Pin ToggleInput6_Pin ToggleInput5_Pin */
  GPIO_InitStruct.Pin = ToggleInput7_Pin|ToggleInput6_Pin|ToggleInput5_Pin;
 8002a78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <MX_GPIO_Init+0x144>)
 8002a8e:	f001 f835 	bl	8003afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2017      	movs	r0, #23
 8002a98:	f000 fc81 	bl	800339e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a9c:	2017      	movs	r0, #23
 8002a9e:	f000 fc9a 	bl	80033d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020000 	.word	0x40020000

08002ab8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]

  /* Prevent unused argument(s) compilation warning */
  uint32_t currentMillis = HAL_GetTick();
 8002ac2:	f000 fb61 	bl	8003188 <HAL_GetTick>
 8002ac6:	60f8      	str	r0, [r7, #12]
  UNUSED(GPIO_Pin);


  if(GPIO_Pin == RotEncoderButton_Pin && (currentMillis - previousMillis > 100)){
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ace:	d107      	bne.n	8002ae0 <HAL_GPIO_EXTI_Callback+0x28>
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_GPIO_EXTI_Callback+0x48>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_GPIO_EXTI_Callback+0x28>
	  ButtonInterrupt();
 8002adc:	f7ff fc44 	bl	8002368 <ButtonInterrupt>
  }

  if(GPIO_Pin == RotEncoderInA_Pin || GPIO_Pin == RotEncoderInB_Pin){
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d002      	beq.n	8002aec <HAL_GPIO_EXTI_Callback+0x34>
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	2b80      	cmp	r3, #128	; 0x80
 8002aea:	d101      	bne.n	8002af0 <HAL_GPIO_EXTI_Callback+0x38>
	  RotaryEncoderInterrupt();
 8002aec:	f7ff fc64 	bl	80023b8 <RotaryEncoderInterrupt>
  }

  previousMillis = currentMillis;
 8002af0:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_GPIO_EXTI_Callback+0x48>)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6013      	str	r3, [r2, #0]

}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000690 	.word	0x20000690

08002b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b08:	b672      	cpsid	i
}
 8002b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <Error_Handler+0x8>
	...

08002b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_MspInit+0x44>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_MspInit+0x44>)
 8002b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_MspInit+0x44>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_MspInit+0x44>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a08      	ldr	r2, [pc, #32]	; (8002b54 <HAL_MspInit+0x44>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_MspInit+0x44>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0aa      	sub	sp, #168	; 0xa8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fb64 	bl	8006246 <memset>
  if(hi2c->Instance==I2C1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <HAL_I2C_MspInit+0xb0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d13b      	bne.n	8002c00 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fdf6 	bl	8005788 <HAL_RCCEx_PeriphCLKConfig>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002ba2:	f7ff ffaf 	bl	8002b04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_I2C_MspInit+0xb4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_I2C_MspInit+0xb4>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_I2C_MspInit+0xb4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bbe:	23c0      	movs	r3, #192	; 0xc0
 8002bc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc4:	2312      	movs	r3, #18
 8002bc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002be0:	4619      	mov	r1, r3
 8002be2:	480b      	ldr	r0, [pc, #44]	; (8002c10 <HAL_I2C_MspInit+0xb8>)
 8002be4:	f000 ff8a 	bl	8003afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HAL_I2C_MspInit+0xb4>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <HAL_I2C_MspInit+0xb4>)
 8002bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_I2C_MspInit+0xb4>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c00:	bf00      	nop
 8002c02:	37a8      	adds	r7, #168	; 0xa8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40005400 	.word	0x40005400
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020400 	.word	0x40020400

08002c14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	; 0x38
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
 8002c2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a7c      	ldr	r2, [pc, #496]	; (8002e24 <HAL_I2S_MspInit+0x210>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d176      	bne.n	8002d24 <HAL_I2S_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c36:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a7b      	ldr	r2, [pc, #492]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b79      	ldr	r3, [pc, #484]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a75      	ldr	r2, [pc, #468]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	4a6f      	ldr	r2, [pc, #444]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c6c:	f043 0304 	orr.w	r3, r3, #4
 8002c70:	6313      	str	r3, [r2, #48]	; 0x30
 8002c72:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002c7e:	23b0      	movs	r3, #176	; 0xb0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c8e:	2305      	movs	r3, #5
 8002c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c96:	4619      	mov	r1, r3
 8002c98:	4864      	ldr	r0, [pc, #400]	; (8002e2c <HAL_I2S_MspInit+0x218>)
 8002c9a:	f000 ff2f 	bl	8003afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c9e:	2310      	movs	r3, #16
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cae:	2305      	movs	r3, #5
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	485d      	ldr	r0, [pc, #372]	; (8002e30 <HAL_I2S_MspInit+0x21c>)
 8002cba:	f000 ff1f 	bl	8003afc <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cc0:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <HAL_I2S_MspInit+0x224>)
 8002cc2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002cc4:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cc6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002cca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ccc:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cce:	2240      	movs	r2, #64	; 0x40
 8002cd0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd2:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd8:	4b56      	ldr	r3, [pc, #344]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cde:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ce0:	4b54      	ldr	r3, [pc, #336]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ce8:	4b52      	ldr	r3, [pc, #328]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002cf0:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cf8:	4b4e      	ldr	r3, [pc, #312]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002cfa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cfe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d06:	484b      	ldr	r0, [pc, #300]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002d08:	f000 fb80 	bl	800340c <HAL_DMA_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2S_MspInit+0x102>
    {
      Error_Handler();
 8002d12:	f7ff fef7 	bl	8002b04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a46      	ldr	r2, [pc, #280]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1c:	4a45      	ldr	r2, [pc, #276]	; (8002e34 <HAL_I2S_MspInit+0x220>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d22:	e07a      	b.n	8002e1a <HAL_I2S_MspInit+0x206>
  else if(hi2s->Instance==SPI2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a44      	ldr	r2, [pc, #272]	; (8002e3c <HAL_I2S_MspInit+0x228>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d175      	bne.n	8002e1a <HAL_I2S_MspInit+0x206>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a31      	ldr	r2, [pc, #196]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_I2S_MspInit+0x214>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d76:	2302      	movs	r3, #2
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d86:	2305      	movs	r3, #5
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4827      	ldr	r0, [pc, #156]	; (8002e30 <HAL_I2S_MspInit+0x21c>)
 8002d92:	f000 feb3 	bl	8003afc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d96:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002da8:	2305      	movs	r3, #5
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db0:	4619      	mov	r1, r3
 8002db2:	4823      	ldr	r0, [pc, #140]	; (8002e40 <HAL_I2S_MspInit+0x22c>)
 8002db4:	f000 fea2 	bl	8003afc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dba:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <HAL_I2S_MspInit+0x234>)
 8002dbc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dde:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002de0:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002df2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002df6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002dfe:	4811      	ldr	r0, [pc, #68]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002e00:	f000 fb04 	bl	800340c <HAL_DMA_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2S_MspInit+0x1fa>
      Error_Handler();
 8002e0a:	f7ff fe7b 	bl	8002b04 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34
 8002e14:	4a0b      	ldr	r2, [pc, #44]	; (8002e44 <HAL_I2S_MspInit+0x230>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e1a:	bf00      	nop
 8002e1c:	3738      	adds	r7, #56	; 0x38
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40013000 	.word	0x40013000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40020800 	.word	0x40020800
 8002e34:	200005d0 	.word	0x200005d0
 8002e38:	40026458 	.word	0x40026458
 8002e3c:	40003800 	.word	0x40003800
 8002e40:	40020400 	.word	0x40020400
 8002e44:	20000630 	.word	0x20000630
 8002e48:	40026058 	.word	0x40026058

08002e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e50:	e7fe      	b.n	8002e50 <NMI_Handler+0x4>

08002e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e56:	e7fe      	b.n	8002e56 <HardFault_Handler+0x4>

08002e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e5c:	e7fe      	b.n	8002e5c <MemManage_Handler+0x4>

08002e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e62:	e7fe      	b.n	8002e62 <BusFault_Handler+0x4>

08002e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <UsageFault_Handler+0x4>

08002e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e98:	f000 f962 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <DMA1_Stream3_IRQHandler+0x10>)
 8002ea6:	f000 fbbf 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000630 	.word	0x20000630

08002eb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RotEncoderInA_Pin);
 8002eb8:	2040      	movs	r0, #64	; 0x40
 8002eba:	f000 ffed 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RotEncoderInB_Pin);
 8002ebe:	2080      	movs	r0, #128	; 0x80
 8002ec0:	f000 ffea 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RotEncoderButton_Pin);
 8002ec4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ec8:	f000 ffe6 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <DMA2_Stream3_IRQHandler+0x10>)
 8002ed6:	f000 fba7 	bl	8003628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200005d0 	.word	0x200005d0

08002ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return 1;
 8002ee8:	2301      	movs	r3, #1
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <_kill>:

int _kill(int pid, int sig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002efe:	f003 fa01 	bl	8006304 <__errno>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2216      	movs	r2, #22
 8002f06:	601a      	str	r2, [r3, #0]
  return -1;
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_exit>:

void _exit (int status)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffe7 	bl	8002ef4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f26:	e7fe      	b.n	8002f26 <_exit+0x12>

08002f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e00a      	b.n	8002f50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f3a:	f3af 8000 	nop.w
 8002f3e:	4601      	mov	r1, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	60ba      	str	r2, [r7, #8]
 8002f46:	b2ca      	uxtb	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dbf0      	blt.n	8002f3a <_read+0x12>
  }

  return len;
 8002f58:	687b      	ldr	r3, [r7, #4]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e009      	b.n	8002f88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	60ba      	str	r2, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dbf1      	blt.n	8002f74 <_write+0x12>
  }
  return len;
 8002f90:	687b      	ldr	r3, [r7, #4]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_close>:

int _close(int file)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc2:	605a      	str	r2, [r3, #4]
  return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_isatty>:

int _isatty(int file)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <_sbrk+0x5c>)
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <_sbrk+0x60>)
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <_sbrk+0x64>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <_sbrk+0x68>)
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d207      	bcs.n	8003044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003034:	f003 f966 	bl	8006304 <__errno>
 8003038:	4603      	mov	r3, r0
 800303a:	220c      	movs	r2, #12
 800303c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	e009      	b.n	8003058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <_sbrk+0x64>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <_sbrk+0x64>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4413      	add	r3, r2
 8003052:	4a05      	ldr	r2, [pc, #20]	; (8003068 <_sbrk+0x64>)
 8003054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20040000 	.word	0x20040000
 8003064:	00000400 	.word	0x00000400
 8003068:	20000694 	.word	0x20000694
 800306c:	200007e8 	.word	0x200007e8

08003070 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SystemInit+0x20>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	4a05      	ldr	r2, [pc, #20]	; (8003090 <SystemInit+0x20>)
 800307c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8003094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a0:	e002      	b.n	80030a8 <LoopCopyDataInit>

080030a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a6:	3304      	adds	r3, #4

080030a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ac:	d3f9      	bcc.n	80030a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b0:	4c0b      	ldr	r4, [pc, #44]	; (80030e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b4:	e001      	b.n	80030ba <LoopFillZerobss>

080030b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b8:	3204      	adds	r2, #4

080030ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030bc:	d3fb      	bcc.n	80030b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030be:	f7ff ffd7 	bl	8003070 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c2:	f003 f925 	bl	8006310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c6:	f7ff facd 	bl	8002664 <main>
  bx  lr    
 80030ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030cc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80030d8:	08009020 	.word	0x08009020
  ldr r2, =_sbss
 80030dc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80030e0:	200007e8 	.word	0x200007e8

080030e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e4:	e7fe      	b.n	80030e4 <ADC_IRQHandler>

080030e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ea:	2003      	movs	r0, #3
 80030ec:	f000 f94c 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f0:	200f      	movs	r0, #15
 80030f2:	f000 f805 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f6:	f7ff fd0b 	bl	8002b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x54>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_InitTick+0x58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 f967 	bl	80033f2 <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00e      	b.n	800314c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d80a      	bhi.n	800314a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	2200      	movs	r2, #0
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f000 f92f 	bl	800339e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_InitTick+0x5c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000054 	.word	0x20000054
 8003158:	2000005c 	.word	0x2000005c
 800315c:	20000058 	.word	0x20000058

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	2000005c 	.word	0x2000005c
 8003184:	20000698 	.word	0x20000698

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000698 	.word	0x20000698

080031a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff ffee 	bl	8003188 <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d005      	beq.n	80031c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_Delay+0x44>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031c6:	bf00      	nop
 80031c8:	f7ff ffde 	bl	8003188 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d8f7      	bhi.n	80031c8 <HAL_Delay+0x28>
  {
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000005c 	.word	0x2000005c

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <__NVIC_SetPriorityGrouping+0x40>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 8003212:	4313      	orrs	r3, r2
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x40>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00
 800322c:	05fa0000 	.word	0x05fa0000

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <__NVIC_EnableIRQ+0x38>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003354:	d301      	bcc.n	800335a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003356:	2301      	movs	r3, #1
 8003358:	e00f      	b.n	800337a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <SysTick_Config+0x40>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003362:	210f      	movs	r1, #15
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	f7ff ff8e 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <SysTick_Config+0x40>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <SysTick_Config+0x40>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff29 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b0:	f7ff ff3e 	bl	8003230 <__NVIC_GetPriorityGrouping>
 80033b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff8e 	bl	80032dc <NVIC_EncodePriority>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff5d 	bl	8003288 <__NVIC_SetPriority>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff31 	bl	800324c <__NVIC_EnableIRQ>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ffa2 	bl	8003344 <SysTick_Config>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff feb6 	bl	8003188 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e099      	b.n	800355c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003448:	e00f      	b.n	800346a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800344a:	f7ff fe9d 	bl	8003188 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b05      	cmp	r3, #5
 8003456:	d908      	bls.n	800346a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e078      	b.n	800355c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e8      	bne.n	800344a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4b38      	ldr	r3, [pc, #224]	; (8003564 <HAL_DMA_Init+0x158>)
 8003484:	4013      	ands	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f023 0307 	bic.w	r3, r3, #7
 80034ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d117      	bne.n	800352e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fa77 	bl	8003a04 <DMA_CheckFifoParam>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2240      	movs	r2, #64	; 0x40
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800352a:	2301      	movs	r3, #1
 800352c:	e016      	b.n	800355c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa2e 	bl	8003998 <DMA_CalcBaseAndBitshift>
 800353c:	4603      	mov	r3, r0
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	e010803f 	.word	0xe010803f

08003568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_DMA_Start_IT+0x26>
 800358a:	2302      	movs	r3, #2
 800358c:	e048      	b.n	8003620 <HAL_DMA_Start_IT+0xb8>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d137      	bne.n	8003612 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2202      	movs	r2, #2
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f9c0 	bl	800393c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c0:	223f      	movs	r2, #63	; 0x3f
 80035c2:	409a      	lsls	r2, r3
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0216 	orr.w	r2, r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0208 	orr.w	r2, r2, #8
 80035fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e005      	b.n	800361e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800361a:	2302      	movs	r3, #2
 800361c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800361e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003634:	4b8e      	ldr	r3, [pc, #568]	; (8003870 <HAL_DMA_IRQHandler+0x248>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a8e      	ldr	r2, [pc, #568]	; (8003874 <HAL_DMA_IRQHandler+0x24c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2208      	movs	r2, #8
 8003654:	409a      	lsls	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01a      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2208      	movs	r2, #8
 8003682:	409a      	lsls	r2, r3
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f043 0201 	orr.w	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003698:	2201      	movs	r2, #1
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	2204      	movs	r2, #4
 80036d0:	409a      	lsls	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00b      	beq.n	8003700 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f043 0204 	orr.w	r2, r3, #4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003704:	2210      	movs	r2, #16
 8003706:	409a      	lsls	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d043      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03c      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	2210      	movs	r2, #16
 8003724:	409a      	lsls	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d108      	bne.n	8003758 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
 8003756:	e01f      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	4798      	blx	r3
 8003768:	e016      	b.n	8003798 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0208 	bic.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	2220      	movs	r2, #32
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 808f 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8087 	beq.w	80038c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d136      	bne.n	8003840 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0216 	bic.w	r2, r2, #22
 80037e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_DMA_IRQHandler+0x1da>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0208 	bic.w	r2, r2, #8
 8003810:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	223f      	movs	r2, #63	; 0x3f
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003832:	2b00      	cmp	r3, #0
 8003834:	d07e      	beq.n	8003934 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
        }
        return;
 800383e:	e079      	b.n	8003934 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01d      	beq.n	800388a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	2b00      	cmp	r3, #0
 8003862:	d031      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e02c      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
 800386e:	bf00      	nop
 8003870:	20000054 	.word	0x20000054
 8003874:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4798      	blx	r3
 8003888:	e01e      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0210 	bic.w	r2, r2, #16
 80038a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d032      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2205      	movs	r2, #5
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	3301      	adds	r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d307      	bcc.n	8003910 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f2      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x2cc>
 800390e:	e000      	b.n	8003912 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003910:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e000      	b.n	8003936 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003934:	bf00      	nop
    }
  }
}
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003958:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b40      	cmp	r3, #64	; 0x40
 8003968:	d108      	bne.n	800397c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397a:	e007      	b.n	800398c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3b10      	subs	r3, #16
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <DMA_CalcBaseAndBitshift+0x60>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <DMA_CalcBaseAndBitshift+0x64>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d908      	bls.n	80039d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <DMA_CalcBaseAndBitshift+0x68>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	659a      	str	r2, [r3, #88]	; 0x58
 80039d6:	e006      	b.n	80039e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <DMA_CalcBaseAndBitshift+0x68>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	aaaaaaab 	.word	0xaaaaaaab
 80039fc:	08008af8 	.word	0x08008af8
 8003a00:	fffffc00 	.word	0xfffffc00

08003a04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11f      	bne.n	8003a5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d856      	bhi.n	8003ad2 <DMA_CheckFifoParam+0xce>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x28>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a4f 	.word	0x08003a4f
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003ad3 	.word	0x08003ad3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d046      	beq.n	8003ad6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a4c:	e043      	b.n	8003ad6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a56:	d140      	bne.n	8003ada <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5c:	e03d      	b.n	8003ada <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	d121      	bne.n	8003aac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d837      	bhi.n	8003ade <DMA_CheckFifoParam+0xda>
 8003a6e:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <DMA_CheckFifoParam+0x70>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a8b 	.word	0x08003a8b
 8003a7c:	08003a85 	.word	0x08003a85
 8003a80:	08003a9d 	.word	0x08003a9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e030      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d025      	beq.n	8003ae2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9a:	e022      	b.n	8003ae2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa4:	d11f      	bne.n	8003ae6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aaa:	e01c      	b.n	8003ae6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d903      	bls.n	8003aba <DMA_CheckFifoParam+0xb6>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d003      	beq.n	8003ac0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ab8:	e018      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      break;
 8003abe:	e015      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad0:	e00b      	b.n	8003aea <DMA_CheckFifoParam+0xe6>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e00a      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e008      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e006      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e004      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;   
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <DMA_CheckFifoParam+0xe8>
      break;
 8003aea:	bf00      	nop
    }
  } 
  
  return status; 
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop

08003afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	; 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e169      	b.n	8003df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f040 8158 	bne.w	8003dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <HAL_GPIO_Init+0x56>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d130      	bne.n	8003bb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 0201 	and.w	r2, r3, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d017      	beq.n	8003bf0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d123      	bne.n	8003c44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	08da      	lsrs	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3208      	adds	r2, #8
 8003c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	08da      	lsrs	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0203 	and.w	r2, r3, #3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80b2 	beq.w	8003dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	4b60      	ldr	r3, [pc, #384]	; (8003e08 <HAL_GPIO_Init+0x30c>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	4a5f      	ldr	r2, [pc, #380]	; (8003e08 <HAL_GPIO_Init+0x30c>)
 8003c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c90:	6453      	str	r3, [r2, #68]	; 0x44
 8003c92:	4b5d      	ldr	r3, [pc, #372]	; (8003e08 <HAL_GPIO_Init+0x30c>)
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <HAL_GPIO_Init+0x310>)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a52      	ldr	r2, [pc, #328]	; (8003e10 <HAL_GPIO_Init+0x314>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02b      	beq.n	8003d22 <HAL_GPIO_Init+0x226>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a51      	ldr	r2, [pc, #324]	; (8003e14 <HAL_GPIO_Init+0x318>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d025      	beq.n	8003d1e <HAL_GPIO_Init+0x222>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a50      	ldr	r2, [pc, #320]	; (8003e18 <HAL_GPIO_Init+0x31c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_GPIO_Init+0x21e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4f      	ldr	r2, [pc, #316]	; (8003e1c <HAL_GPIO_Init+0x320>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d019      	beq.n	8003d16 <HAL_GPIO_Init+0x21a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4e      	ldr	r2, [pc, #312]	; (8003e20 <HAL_GPIO_Init+0x324>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_Init+0x216>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4d      	ldr	r2, [pc, #308]	; (8003e24 <HAL_GPIO_Init+0x328>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00d      	beq.n	8003d0e <HAL_GPIO_Init+0x212>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4c      	ldr	r2, [pc, #304]	; (8003e28 <HAL_GPIO_Init+0x32c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_Init+0x20e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4b      	ldr	r2, [pc, #300]	; (8003e2c <HAL_GPIO_Init+0x330>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_GPIO_Init+0x20a>
 8003d02:	2307      	movs	r3, #7
 8003d04:	e00e      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d06:	2308      	movs	r3, #8
 8003d08:	e00c      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d0a:	2306      	movs	r3, #6
 8003d0c:	e00a      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d0e:	2305      	movs	r3, #5
 8003d10:	e008      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d12:	2304      	movs	r3, #4
 8003d14:	e006      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d16:	2303      	movs	r3, #3
 8003d18:	e004      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e002      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_GPIO_Init+0x228>
 8003d22:	2300      	movs	r3, #0
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f002 0203 	and.w	r2, r2, #3
 8003d2a:	0092      	lsls	r2, r2, #2
 8003d2c:	4093      	lsls	r3, r2
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d34:	4935      	ldr	r1, [pc, #212]	; (8003e0c <HAL_GPIO_Init+0x310>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d42:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d66:	4a32      	ldr	r2, [pc, #200]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d6c:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d90:	4a27      	ldr	r2, [pc, #156]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dba:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <HAL_GPIO_Init+0x334>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3301      	adds	r3, #1
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	f67f ae92 	bls.w	8003b1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40013800 	.word	0x40013800
 8003e10:	40020000 	.word	0x40020000
 8003e14:	40020400 	.word	0x40020400
 8003e18:	40020800 	.word	0x40020800
 8003e1c:	40020c00 	.word	0x40020c00
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40021400 	.word	0x40021400
 8003e28:	40021800 	.word	0x40021800
 8003e2c:	40021c00 	.word	0x40021c00
 8003e30:	40013c00 	.word	0x40013c00

08003e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
 8003e50:	e001      	b.n	8003e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eae:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fdfe 	bl	8002ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07f      	b.n	8003fda <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe fe32 	bl	8002b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e006      	b.n	8003f50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d104      	bne.n	8003f62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6859      	ldr	r1, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_I2C_Init+0x11c>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69d9      	ldr	r1, [r3, #28]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	02008000 	.word	0x02008000

08003fe8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af02      	add	r7, sp, #8
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	817b      	strh	r3, [r7, #10]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	813b      	strh	r3, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b20      	cmp	r3, #32
 800400c:	f040 80f9 	bne.w	8004202 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <HAL_I2C_Mem_Write+0x34>
 8004016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004022:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0ed      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_I2C_Mem_Write+0x4e>
 8004032:	2302      	movs	r3, #2
 8004034:	e0e6      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800403e:	f7ff f8a3 	bl	8003188 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2319      	movs	r3, #25
 800404a:	2201      	movs	r2, #1
 800404c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f955 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0d1      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2221      	movs	r2, #33	; 0x21
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2240      	movs	r2, #64	; 0x40
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004088:	88f8      	ldrh	r0, [r7, #6]
 800408a:	893a      	ldrh	r2, [r7, #8]
 800408c:	8979      	ldrh	r1, [r7, #10]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4603      	mov	r3, r0
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f8b9 	bl	8004210 <I2C_RequestMemoryWrite>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0a9      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2bff      	cmp	r3, #255	; 0xff
 80040b8:	d90e      	bls.n	80040d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	8979      	ldrh	r1, [r7, #10]
 80040c8:	2300      	movs	r3, #0
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fab1 	bl	8004638 <I2C_TransferConfig>
 80040d6:	e00f      	b.n	80040f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	8979      	ldrh	r1, [r7, #10]
 80040ea:	2300      	movs	r3, #0
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 faa0 	bl	8004638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f93f 	bl	8004380 <I2C_WaitOnTXISFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e07b      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d034      	beq.n	80041b0 <HAL_I2C_Mem_Write+0x1c8>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	d130      	bne.n	80041b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	2200      	movs	r2, #0
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f8d1 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e04d      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2bff      	cmp	r3, #255	; 0xff
 8004170:	d90e      	bls.n	8004190 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417c:	b2da      	uxtb	r2, r3
 800417e:	8979      	ldrh	r1, [r7, #10]
 8004180:	2300      	movs	r3, #0
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fa55 	bl	8004638 <I2C_TransferConfig>
 800418e:	e00f      	b.n	80041b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	8979      	ldrh	r1, [r7, #10]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fa44 	bl	8004638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d19e      	bne.n	80040f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f91e 	bl	8004400 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e01a      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2220      	movs	r2, #32
 80041d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_I2C_Mem_Write+0x224>)
 80041e2:	400b      	ands	r3, r1
 80041e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
  }
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	fe00e800 	.word	0xfe00e800

08004210 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	4608      	mov	r0, r1
 800421a:	4611      	mov	r1, r2
 800421c:	461a      	mov	r2, r3
 800421e:	4603      	mov	r3, r0
 8004220:	817b      	strh	r3, [r7, #10]
 8004222:	460b      	mov	r3, r1
 8004224:	813b      	strh	r3, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	b2da      	uxtb	r2, r3
 800422e:	8979      	ldrh	r1, [r7, #10]
 8004230:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <I2C_RequestMemoryWrite+0xa4>)
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f9fd 	bl	8004638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	69b9      	ldr	r1, [r7, #24]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f89c 	bl	8004380 <I2C_WaitOnTXISFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e02c      	b.n	80042ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d105      	bne.n	8004264 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004258:	893b      	ldrh	r3, [r7, #8]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
 8004262:	e015      	b.n	8004290 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004264:	893b      	ldrh	r3, [r7, #8]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	b29b      	uxth	r3, r3
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f882 	bl	8004380 <I2C_WaitOnTXISFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e012      	b.n	80042ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004286:	893b      	ldrh	r3, [r7, #8]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	2200      	movs	r2, #0
 8004298:	2180      	movs	r1, #128	; 0x80
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f830 	bl	8004300 <I2C_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	80002000 	.word	0x80002000

080042b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d103      	bne.n	80042d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d007      	beq.n	80042f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	619a      	str	r2, [r3, #24]
  }
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004310:	e022      	b.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d01e      	beq.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431a:	f7fe ff35 	bl	8003188 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x30>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d113      	bne.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e00f      	b.n	8004378 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	d0cd      	beq.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800438c:	e02c      	b.n	80043e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f870 	bl	8004478 <I2C_IsErrorOccurred>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e02a      	b.n	80043f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d01e      	beq.n	80043e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fe feed 	bl	8003188 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d113      	bne.n	80043e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e007      	b.n	80043f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d1cb      	bne.n	800438e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800440c:	e028      	b.n	8004460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f830 	bl	8004478 <I2C_IsErrorOccurred>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e026      	b.n	8004470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004422:	f7fe feb1 	bl	8003188 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d113      	bne.n	8004460 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e007      	b.n	8004470 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b20      	cmp	r3, #32
 800446c:	d1cf      	bne.n	800440e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b08a      	sub	sp, #40	; 0x28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d068      	beq.n	8004576 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2210      	movs	r2, #16
 80044aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044ac:	e049      	b.n	8004542 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d045      	beq.n	8004542 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fe fe67 	bl	8003188 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <I2C_IsErrorOccurred+0x54>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d13a      	bne.n	8004542 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ee:	d121      	bne.n	8004534 <I2C_IsErrorOccurred+0xbc>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f6:	d01d      	beq.n	8004534 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d01a      	beq.n	8004534 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800450e:	f7fe fe3b 	bl	8003188 <HAL_GetTick>
 8004512:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004514:	e00e      	b.n	8004534 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004516:	f7fe fe37 	bl	8003188 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b19      	cmp	r3, #25
 8004522:	d907      	bls.n	8004534 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f043 0320 	orr.w	r3, r3, #32
 800452a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004532:	e006      	b.n	8004542 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b20      	cmp	r3, #32
 8004540:	d1e9      	bne.n	8004516 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b20      	cmp	r3, #32
 800454e:	d003      	beq.n	8004558 <I2C_IsErrorOccurred+0xe0>
 8004550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0aa      	beq.n	80044ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2220      	movs	r2, #32
 8004566:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	f043 0304 	orr.w	r3, r3, #4
 800456e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	f043 0308 	orr.w	r3, r3, #8
 80045b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	f043 0302 	orr.w	r3, r3, #2
 80045d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01c      	beq.n	8004626 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fe63 	bl	80042b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <I2C_IsErrorOccurred+0x1bc>)
 80045fe:	400b      	ands	r3, r1
 8004600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800462a:	4618      	mov	r0, r3
 800462c:	3728      	adds	r7, #40	; 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	fe00e800 	.word	0xfe00e800

08004638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	460b      	mov	r3, r1
 8004644:	817b      	strh	r3, [r7, #10]
 8004646:	4613      	mov	r3, r2
 8004648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004650:	7a7b      	ldrb	r3, [r7, #9]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004658:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	4313      	orrs	r3, r2
 8004662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004666:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	0d5b      	lsrs	r3, r3, #21
 8004672:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <I2C_TransferConfig+0x60>)
 8004678:	430b      	orrs	r3, r1
 800467a:	43db      	mvns	r3, r3
 800467c:	ea02 0103 	and.w	r1, r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	03ff63ff 	.word	0x03ff63ff

0800469c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d138      	bne.n	8004724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046bc:	2302      	movs	r3, #2
 80046be:	e032      	b.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6819      	ldr	r1, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004732:	b480      	push	{r7}
 8004734:	b085      	sub	sp, #20
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b20      	cmp	r3, #32
 8004746:	d139      	bne.n	80047bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004752:	2302      	movs	r3, #2
 8004754:	e033      	b.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2224      	movs	r2, #36	; 0x24
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0201 	bic.w	r2, r2, #1
 8004774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0d2      	b.n	8004984 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fe fa0e 	bl	8002c14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69d9      	ldr	r1, [r3, #28]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b60      	ldr	r3, [pc, #384]	; (800498c <HAL_I2S_Init+0x1c0>)
 800480c:	400b      	ands	r3, r1
 800480e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2202      	movs	r2, #2
 8004816:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d067      	beq.n	80048f0 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004828:	2310      	movs	r3, #16
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e001      	b.n	8004832 <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800482e:	2320      	movs	r3, #32
 8004830:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b20      	cmp	r3, #32
 8004838:	d802      	bhi.n	8004840 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d102      	bne.n	800484e <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8004848:	4b51      	ldr	r3, [pc, #324]	; (8004990 <HAL_I2S_Init+0x1c4>)
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e003      	b.n	8004856 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fa24 	bl	8004c9c <I2S_GetClockFreq>
 8004854:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485e:	d125      	bne.n	80048ac <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	461a      	mov	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	3305      	adds	r3, #5
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e01f      	b.n	80048ca <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	fbb2 f2f3 	udiv	r2, r2, r3
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	3305      	adds	r3, #5
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	e00e      	b.n	80048ca <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	461a      	mov	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	3305      	adds	r3, #5
 80048c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4a31      	ldr	r2, [pc, #196]	; (8004994 <HAL_I2S_Init+0x1c8>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	08db      	lsrs	r3, r3, #3
 80048d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e003      	b.n	80048f8 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80048f0:	2302      	movs	r3, #2
 80048f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d902      	bls.n	8004904 <HAL_I2S_Init+0x138>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2bff      	cmp	r3, #255	; 0xff
 8004902:	d907      	bls.n	8004914 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004908:	f043 0210 	orr.w	r2, r3, #16
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e037      	b.n	8004984 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	ea42 0103 	orr.w	r1, r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	430a      	orrs	r2, r1
 8004926:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	4b17      	ldr	r3, [pc, #92]	; (800498c <HAL_I2S_Init+0x1c0>)
 8004930:	4013      	ands	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6851      	ldr	r1, [r2, #4]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6892      	ldr	r2, [r2, #8]
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68d2      	ldr	r2, [r2, #12]
 8004940:	4311      	orrs	r1, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6992      	ldr	r2, [r2, #24]
 8004946:	430a      	orrs	r2, r1
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004952:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d003      	beq.n	8004964 <HAL_I2S_Init+0x198>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2bb0      	cmp	r3, #176	; 0xb0
 8004962:	d107      	bne.n	8004974 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004972:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	fffff040 	.word	0xfffff040
 8004990:	00bb8000 	.word	0x00bb8000
 8004994:	cccccccd 	.word	0xcccccccd

08004998 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_I2S_Transmit_DMA+0x1a>
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e08e      	b.n	8004ad4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_I2S_Transmit_DMA+0x2e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e086      	b.n	8004ad4 <HAL_I2S_Transmit_DMA+0x13c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d005      	beq.n	80049e6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	e076      	b.n	8004ad4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2203      	movs	r2, #3
 80049ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pTxBuffPtr = pData;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	621a      	str	r2, [r3, #32]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d002      	beq.n	8004a12 <HAL_I2S_Transmit_DMA+0x7a>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b05      	cmp	r3, #5
 8004a10:	d10a      	bne.n	8004a28 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = (Size << 1U);
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	84da      	strh	r2, [r3, #38]	; 0x26
 8004a26:	e005      	b.n	8004a34 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	849a      	strh	r2, [r3, #36]	; 0x24
    hi2s->TxXferCount = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	84da      	strh	r2, [r3, #38]	; 0x26
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	4a28      	ldr	r2, [pc, #160]	; (8004adc <HAL_I2S_Transmit_DMA+0x144>)
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_I2S_Transmit_DMA+0x148>)
 8004a42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_I2S_Transmit_DMA+0x14c>)
 8004a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004a54:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004a5c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004a64:	f7fe fd80 	bl	8003568 <HAL_DMA_Start_IT>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00f      	beq.n	8004a8e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	f043 0208 	orr.w	r2, r3, #8
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e022      	b.n	8004ad4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aaa:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0202 	orr.w	r2, r2, #2
 8004ac8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	08004d77 	.word	0x08004d77
 8004ae0:	08004d35 	.word	0x08004d35
 8004ae4:	08004df1 	.word	0x08004df1

08004ae8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_I2S_Receive_DMA+0x1a>
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0a1      	b.n	8004c4a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_I2S_Receive_DMA+0x2e>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e099      	b.n	8004c4a <HAL_I2S_Receive_DMA+0x162>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d005      	beq.n	8004b36 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
 8004b34:	e089      	b.n	8004c4a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2204      	movs	r2, #4
 8004b3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d002      	beq.n	8004b62 <HAL_I2S_Receive_DMA+0x7a>
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b05      	cmp	r3, #5
 8004b60:	d10a      	bne.n	8004b78 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	85da      	strh	r2, [r3, #46]	; 0x2e
 8004b76:	e005      	b.n	8004b84 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	4a32      	ldr	r2, [pc, #200]	; (8004c54 <HAL_I2S_Receive_DMA+0x16c>)
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	4a31      	ldr	r2, [pc, #196]	; (8004c58 <HAL_I2S_Receive_DMA+0x170>)
 8004b92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b98:	4a30      	ldr	r2, [pc, #192]	; (8004c5c <HAL_I2S_Receive_DMA+0x174>)
 8004b9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004baa:	d10a      	bne.n	8004bc2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	4619      	mov	r1, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bd8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004bda:	f7fe fcc5 	bl	8003568 <HAL_DMA_Start_IT>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00f      	beq.n	8004c04 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	f043 0208 	orr.w	r2, r3, #8
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e022      	b.n	8004c4a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69da      	ldr	r2, [r3, #28]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c20:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d107      	bne.n	8004c40 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	08004dd5 	.word	0x08004dd5
 8004c58:	08004d93 	.word	0x08004d93
 8004c5c:	08004df1 	.word	0x08004df1

08004c60 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d02d      	beq.n	8004d08 <I2S_GetClockFreq+0x6c>
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d12e      	bne.n	8004d0e <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <I2S_GetClockFreq+0x88>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d108      	bne.n	8004cce <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <I2S_GetClockFreq+0x88>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <I2S_GetClockFreq+0x8c>)
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e007      	b.n	8004cde <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <I2S_GetClockFreq+0x88>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <I2S_GetClockFreq+0x90>)
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <I2S_GetClockFreq+0x88>)
 8004ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce4:	0f1b      	lsrs	r3, r3, #28
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <I2S_GetClockFreq+0x88>)
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	fb03 f202 	mul.w	r2, r3, r2
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	613b      	str	r3, [r7, #16]

      break;
 8004d06:	e005      	b.n	8004d14 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <I2S_GetClockFreq+0x94>)
 8004d0a:	613b      	str	r3, [r7, #16]
      break;
 8004d0c:	e002      	b.n	8004d14 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
      break;
 8004d12:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8004d14:	693b      	ldr	r3, [r7, #16]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800
 8004d28:	00f42400 	.word	0x00f42400
 8004d2c:	017d7840 	.word	0x017d7840
 8004d30:	00bb8000 	.word	0x00bb8000

08004d34 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10e      	bne.n	8004d68 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0202 	bic.w	r2, r2, #2
 8004d58:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    hi2s->State = HAL_I2S_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7ff ff83 	bl	8004c74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff ff6b 	bl	8004c60 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10e      	bne.n	8004dc6 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7fc fa3a 	bl	8001240 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7fc fa0e 	bl	8001204 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0203 	bic.w	r2, r2, #3
 8004e0c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	f043 0208 	orr.w	r2, r3, #8
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff ff2a 	bl	8004c88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e46:	4b23      	ldr	r3, [pc, #140]	; (8004ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6413      	str	r3, [r2, #64]	; 0x40
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e6a:	f7fe f98d 	bl	8003188 <HAL_GetTick>
 8004e6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e70:	e009      	b.n	8004e86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e72:	f7fe f989 	bl	8003188 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e80:	d901      	bls.n	8004e86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e022      	b.n	8004ecc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e92:	d1ee      	bne.n	8004e72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e94:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ea0:	f7fe f972 	bl	8003188 <HAL_GetTick>
 8004ea4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ea6:	e009      	b.n	8004ebc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ea8:	f7fe f96e 	bl	8003188 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb6:	d901      	bls.n	8004ebc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e007      	b.n	8004ecc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec8:	d1ee      	bne.n	8004ea8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40007000 	.word	0x40007000

08004edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e291      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8087 	beq.w	800500e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f00:	4b96      	ldr	r3, [pc, #600]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d00c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f0c:	4b93      	ldr	r3, [pc, #588]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d112      	bne.n	8004f3e <HAL_RCC_OscConfig+0x62>
 8004f18:	4b90      	ldr	r3, [pc, #576]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f24:	d10b      	bne.n	8004f3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f26:	4b8d      	ldr	r3, [pc, #564]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d06c      	beq.n	800500c <HAL_RCC_OscConfig+0x130>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d168      	bne.n	800500c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e26b      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x7a>
 8004f48:	4b84      	ldr	r3, [pc, #528]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a83      	ldr	r2, [pc, #524]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e02e      	b.n	8004fb4 <HAL_RCC_OscConfig+0xd8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x9c>
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7e      	ldr	r2, [pc, #504]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4b7c      	ldr	r3, [pc, #496]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a7b      	ldr	r2, [pc, #492]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e01d      	b.n	8004fb4 <HAL_RCC_OscConfig+0xd8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f80:	d10c      	bne.n	8004f9c <HAL_RCC_OscConfig+0xc0>
 8004f82:	4b76      	ldr	r3, [pc, #472]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a75      	ldr	r2, [pc, #468]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	4b73      	ldr	r3, [pc, #460]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a72      	ldr	r2, [pc, #456]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e00b      	b.n	8004fb4 <HAL_RCC_OscConfig+0xd8>
 8004f9c:	4b6f      	ldr	r3, [pc, #444]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a6e      	ldr	r2, [pc, #440]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b6c      	ldr	r3, [pc, #432]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a6b      	ldr	r2, [pc, #428]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe f8e4 	bl	8003188 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fe f8e0 	bl	8003188 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e21f      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd6:	4b61      	ldr	r3, [pc, #388]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0xe8>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fe f8d0 	bl	8003188 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fec:	f7fe f8cc 	bl	8003188 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b64      	cmp	r3, #100	; 0x64
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e20b      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ffe:	4b57      	ldr	r3, [pc, #348]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x110>
 800500a:	e000      	b.n	800500e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d069      	beq.n	80050ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800501a:	4b50      	ldr	r3, [pc, #320]	; (800515c <HAL_RCC_OscConfig+0x280>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005026:	4b4d      	ldr	r3, [pc, #308]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	2b08      	cmp	r3, #8
 8005030:	d11c      	bne.n	800506c <HAL_RCC_OscConfig+0x190>
 8005032:	4b4a      	ldr	r3, [pc, #296]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d116      	bne.n	800506c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <HAL_RCC_OscConfig+0x17a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d001      	beq.n	8005056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e1df      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	493d      	ldr	r1, [pc, #244]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506a:	e040      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d023      	beq.n	80050bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005074:	4b39      	ldr	r3, [pc, #228]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a38      	ldr	r2, [pc, #224]	; (800515c <HAL_RCC_OscConfig+0x280>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fe f882 	bl	8003188 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005088:	f7fe f87e 	bl	8003188 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e1bd      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509a:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_OscConfig+0x280>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b2d      	ldr	r3, [pc, #180]	; (800515c <HAL_RCC_OscConfig+0x280>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4929      	ldr	r1, [pc, #164]	; (800515c <HAL_RCC_OscConfig+0x280>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]
 80050ba:	e018      	b.n	80050ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050bc:	4b27      	ldr	r3, [pc, #156]	; (800515c <HAL_RCC_OscConfig+0x280>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a26      	ldr	r2, [pc, #152]	; (800515c <HAL_RCC_OscConfig+0x280>)
 80050c2:	f023 0301 	bic.w	r3, r3, #1
 80050c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fe f85e 	bl	8003188 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fe f85a 	bl	8003188 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e199      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e2:	4b1e      	ldr	r3, [pc, #120]	; (800515c <HAL_RCC_OscConfig+0x280>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d038      	beq.n	800516c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d019      	beq.n	8005136 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005102:	4b16      	ldr	r3, [pc, #88]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510e:	f7fe f83b 	bl	8003188 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005116:	f7fe f837 	bl	8003188 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e176      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <HAL_RCC_OscConfig+0x280>)
 800512a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x23a>
 8005134:	e01a      	b.n	800516c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_RCC_OscConfig+0x280>)
 8005138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513a:	4a08      	ldr	r2, [pc, #32]	; (800515c <HAL_RCC_OscConfig+0x280>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7fe f821 	bl	8003188 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514a:	f7fe f81d 	bl	8003188 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d903      	bls.n	8005160 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e15c      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
 800515c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	4b91      	ldr	r3, [pc, #580]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80a4 	beq.w	80052c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800517a:	4b8b      	ldr	r3, [pc, #556]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	4b88      	ldr	r3, [pc, #544]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a87      	ldr	r2, [pc, #540]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	6413      	str	r3, [r2, #64]	; 0x40
 8005192:	4b85      	ldr	r3, [pc, #532]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	60bb      	str	r3, [r7, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051a2:	4b82      	ldr	r3, [pc, #520]	; (80053ac <HAL_RCC_OscConfig+0x4d0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d118      	bne.n	80051e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80051ae:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x4d0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a7e      	ldr	r2, [pc, #504]	; (80053ac <HAL_RCC_OscConfig+0x4d0>)
 80051b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ba:	f7fd ffe5 	bl	8003188 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c2:	f7fd ffe1 	bl	8003188 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b64      	cmp	r3, #100	; 0x64
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e120      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d4:	4b75      	ldr	r3, [pc, #468]	; (80053ac <HAL_RCC_OscConfig+0x4d0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d106      	bne.n	80051f6 <HAL_RCC_OscConfig+0x31a>
 80051e8:	4b6f      	ldr	r3, [pc, #444]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	4a6e      	ldr	r2, [pc, #440]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	6713      	str	r3, [r2, #112]	; 0x70
 80051f4:	e02d      	b.n	8005252 <HAL_RCC_OscConfig+0x376>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10c      	bne.n	8005218 <HAL_RCC_OscConfig+0x33c>
 80051fe:	4b6a      	ldr	r3, [pc, #424]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	4a69      	ldr	r2, [pc, #420]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6713      	str	r3, [r2, #112]	; 0x70
 800520a:	4b67      	ldr	r3, [pc, #412]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a66      	ldr	r2, [pc, #408]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005210:	f023 0304 	bic.w	r3, r3, #4
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	e01c      	b.n	8005252 <HAL_RCC_OscConfig+0x376>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b05      	cmp	r3, #5
 800521e:	d10c      	bne.n	800523a <HAL_RCC_OscConfig+0x35e>
 8005220:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a60      	ldr	r2, [pc, #384]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
 800522c:	4b5e      	ldr	r3, [pc, #376]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a5d      	ldr	r2, [pc, #372]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	e00b      	b.n	8005252 <HAL_RCC_OscConfig+0x376>
 800523a:	4b5b      	ldr	r3, [pc, #364]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	4a5a      	ldr	r2, [pc, #360]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	6713      	str	r3, [r2, #112]	; 0x70
 8005246:	4b58      	ldr	r3, [pc, #352]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a57      	ldr	r2, [pc, #348]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d015      	beq.n	8005286 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525a:	f7fd ff95 	bl	8003188 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005260:	e00a      	b.n	8005278 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005262:	f7fd ff91 	bl	8003188 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005270:	4293      	cmp	r3, r2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e0ce      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005278:	4b4b      	ldr	r3, [pc, #300]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0ee      	beq.n	8005262 <HAL_RCC_OscConfig+0x386>
 8005284:	e014      	b.n	80052b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fd ff7f 	bl	8003188 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528e:	f7fd ff7b 	bl	8003188 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f241 3288 	movw	r2, #5000	; 0x1388
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0b8      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a4:	4b40      	ldr	r3, [pc, #256]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ee      	bne.n	800528e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d105      	bne.n	80052c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b6:	4b3c      	ldr	r3, [pc, #240]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	4a3b      	ldr	r2, [pc, #236]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80052bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80a4 	beq.w	8005414 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052cc:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 030c 	and.w	r3, r3, #12
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d06b      	beq.n	80053b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d149      	bne.n	8005374 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e0:	4b31      	ldr	r3, [pc, #196]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 80052e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ec:	f7fd ff4c 	bl	8003188 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fd ff48 	bl	8003188 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e087      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	4313      	orrs	r3, r2
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800533a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800533e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005340:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a18      	ldr	r2, [pc, #96]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fd ff1c 	bl	8003188 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005354:	f7fd ff18 	bl	8003188 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e057      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0x478>
 8005372:	e04f      	b.n	8005414 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a0b      	ldr	r2, [pc, #44]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800537a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800537e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fd ff02 	bl	8003188 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005388:	f7fd fefe 	bl	8003188 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b02      	cmp	r3, #2
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e03d      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539a:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <HAL_RCC_OscConfig+0x4cc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1f0      	bne.n	8005388 <HAL_RCC_OscConfig+0x4ac>
 80053a6:	e035      	b.n	8005414 <HAL_RCC_OscConfig+0x538>
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_RCC_OscConfig+0x544>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d028      	beq.n	8005410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d121      	bne.n	8005410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d11a      	bne.n	8005410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d111      	bne.n	8005410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	3b01      	subs	r3, #1
 80053fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800

08005424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e0d0      	b.n	80055de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800543c:	4b6a      	ldr	r3, [pc, #424]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d910      	bls.n	800546c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b67      	ldr	r3, [pc, #412]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 020f 	bic.w	r2, r3, #15
 8005452:	4965      	ldr	r1, [pc, #404]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	4313      	orrs	r3, r2
 8005458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b63      	ldr	r3, [pc, #396]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0b8      	b.n	80055de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005484:	4b59      	ldr	r3, [pc, #356]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 800548a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a52      	ldr	r2, [pc, #328]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80054a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	494d      	ldr	r1, [pc, #308]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d040      	beq.n	8005548 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b47      	ldr	r3, [pc, #284]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d115      	bne.n	8005506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e07f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d107      	bne.n	80054f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	4b41      	ldr	r3, [pc, #260]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e073      	b.n	80055de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f6:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e06b      	b.n	80055de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005506:	4b39      	ldr	r3, [pc, #228]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f023 0203 	bic.w	r2, r3, #3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4936      	ldr	r1, [pc, #216]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 8005514:	4313      	orrs	r3, r2
 8005516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005518:	f7fd fe36 	bl	8003188 <HAL_GetTick>
 800551c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551e:	e00a      	b.n	8005536 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005520:	f7fd fe32 	bl	8003188 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e053      	b.n	80055de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005536:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 020c 	and.w	r2, r3, #12
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	429a      	cmp	r2, r3
 8005546:	d1eb      	bne.n	8005520 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005548:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d210      	bcs.n	8005578 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 020f 	bic.w	r2, r3, #15
 800555e:	4922      	ldr	r1, [pc, #136]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e032      	b.n	80055de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4916      	ldr	r1, [pc, #88]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	490e      	ldr	r1, [pc, #56]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055b6:	f000 f821 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	490a      	ldr	r1, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x1cc>)
 80055c8:	5ccb      	ldrb	r3, [r1, r3]
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x1d0>)
 80055d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_ClockConfig+0x1d4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fd fd92 	bl	8003100 <HAL_InitTick>

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40023c00 	.word	0x40023c00
 80055ec:	40023800 	.word	0x40023800
 80055f0:	08008ae8 	.word	0x08008ae8
 80055f4:	20000054 	.word	0x20000054
 80055f8:	20000058 	.word	0x20000058

080055fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005600:	b090      	sub	sp, #64	; 0x40
 8005602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
 8005608:	2300      	movs	r3, #0
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560c:	2300      	movs	r3, #0
 800560e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005614:	4b59      	ldr	r3, [pc, #356]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b08      	cmp	r3, #8
 800561e:	d00d      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x40>
 8005620:	2b08      	cmp	r3, #8
 8005622:	f200 80a1 	bhi.w	8005768 <HAL_RCC_GetSysClockFreq+0x16c>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x34>
 800562a:	2b04      	cmp	r3, #4
 800562c:	d003      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0x3a>
 800562e:	e09b      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005630:	4b53      	ldr	r3, [pc, #332]	; (8005780 <HAL_RCC_GetSysClockFreq+0x184>)
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005634:	e09b      	b.n	800576e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005636:	4b53      	ldr	r3, [pc, #332]	; (8005784 <HAL_RCC_GetSysClockFreq+0x188>)
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800563a:	e098      	b.n	800576e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800563c:	4b4f      	ldr	r3, [pc, #316]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005646:	4b4d      	ldr	r3, [pc, #308]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d028      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005652:	4b4a      	ldr	r3, [pc, #296]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	2200      	movs	r2, #0
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	627a      	str	r2, [r7, #36]	; 0x24
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005664:	2100      	movs	r1, #0
 8005666:	4b47      	ldr	r3, [pc, #284]	; (8005784 <HAL_RCC_GetSysClockFreq+0x188>)
 8005668:	fb03 f201 	mul.w	r2, r3, r1
 800566c:	2300      	movs	r3, #0
 800566e:	fb00 f303 	mul.w	r3, r0, r3
 8005672:	4413      	add	r3, r2
 8005674:	4a43      	ldr	r2, [pc, #268]	; (8005784 <HAL_RCC_GetSysClockFreq+0x188>)
 8005676:	fba0 1202 	umull	r1, r2, r0, r2
 800567a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800567c:	460a      	mov	r2, r1
 800567e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005682:	4413      	add	r3, r2
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2200      	movs	r2, #0
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005696:	f7fb faf7 	bl	8000c88 <__aeabi_uldivmod>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4613      	mov	r3, r2
 80056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a2:	e053      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a4:	4b35      	ldr	r3, [pc, #212]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	099b      	lsrs	r3, r3, #6
 80056aa:	2200      	movs	r2, #0
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	617a      	str	r2, [r7, #20]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056b6:	f04f 0b00 	mov.w	fp, #0
 80056ba:	4652      	mov	r2, sl
 80056bc:	465b      	mov	r3, fp
 80056be:	f04f 0000 	mov.w	r0, #0
 80056c2:	f04f 0100 	mov.w	r1, #0
 80056c6:	0159      	lsls	r1, r3, #5
 80056c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056cc:	0150      	lsls	r0, r2, #5
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	ebb2 080a 	subs.w	r8, r2, sl
 80056d6:	eb63 090b 	sbc.w	r9, r3, fp
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056ee:	ebb2 0408 	subs.w	r4, r2, r8
 80056f2:	eb63 0509 	sbc.w	r5, r3, r9
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	00eb      	lsls	r3, r5, #3
 8005700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005704:	00e2      	lsls	r2, r4, #3
 8005706:	4614      	mov	r4, r2
 8005708:	461d      	mov	r5, r3
 800570a:	eb14 030a 	adds.w	r3, r4, sl
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	eb45 030b 	adc.w	r3, r5, fp
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005722:	4629      	mov	r1, r5
 8005724:	028b      	lsls	r3, r1, #10
 8005726:	4621      	mov	r1, r4
 8005728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800572c:	4621      	mov	r1, r4
 800572e:	028a      	lsls	r2, r1, #10
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	2200      	movs	r2, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	60fa      	str	r2, [r7, #12]
 800573c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005740:	f7fb faa2 	bl	8000c88 <__aeabi_uldivmod>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4613      	mov	r3, r2
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	3301      	adds	r3, #1
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800575c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005766:	e002      	b.n	800576e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCC_GetSysClockFreq+0x184>)
 800576a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800576c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005770:	4618      	mov	r0, r3
 8005772:	3740      	adds	r7, #64	; 0x40
 8005774:	46bd      	mov	sp, r7
 8005776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800
 8005780:	00f42400 	.word	0x00f42400
 8005784:	017d7840 	.word	0x017d7840

08005788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d012      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057ac:	4b65      	ldr	r3, [pc, #404]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4a64      	ldr	r2, [pc, #400]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80057b6:	6093      	str	r3, [r2, #8]
 80057b8:	4b62      	ldr	r3, [pc, #392]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4960      	ldr	r1, [pc, #384]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d017      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057de:	4b59      	ldr	r3, [pc, #356]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	4955      	ldr	r1, [pc, #340]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fc:	d101      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800580a:	2301      	movs	r3, #1
 800580c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d017      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800581a:	4b4a      	ldr	r3, [pc, #296]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800581c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005820:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	4946      	ldr	r1, [pc, #280]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005838:	d101      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800583a:	2301      	movs	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 808b 	beq.w	800596e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005858:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	4a39      	ldr	r2, [pc, #228]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800585e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005862:	6413      	str	r3, [r2, #64]	; 0x40
 8005864:	4b37      	ldr	r3, [pc, #220]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005870:	4b35      	ldr	r3, [pc, #212]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a34      	ldr	r2, [pc, #208]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800587a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587c:	f7fd fc84 	bl	8003188 <HAL_GetTick>
 8005880:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005884:	f7fd fc80 	bl	8003188 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	; 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e2bc      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005896:	4b2c      	ldr	r3, [pc, #176]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058a2:	4b28      	ldr	r3, [pc, #160]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d035      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d02e      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058c0:	4b20      	ldr	r3, [pc, #128]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058ca:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058d6:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d114      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fd fc48 	bl	8003188 <HAL_GetTick>
 80058f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fa:	e00a      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fd fc44 	bl	8003188 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e27e      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0ee      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800592a:	d111      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800593a:	400b      	ands	r3, r1
 800593c:	4901      	ldr	r1, [pc, #4]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
 8005942:	e00b      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005944:	40023800 	.word	0x40023800
 8005948:	40007000 	.word	0x40007000
 800594c:	0ffffcff 	.word	0x0ffffcff
 8005950:	4ba4      	ldr	r3, [pc, #656]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4aa3      	ldr	r2, [pc, #652]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005956:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800595a:	6093      	str	r3, [r2, #8]
 800595c:	4ba1      	ldr	r3, [pc, #644]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800595e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005968:	499e      	ldr	r1, [pc, #632]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800596a:	4313      	orrs	r3, r2
 800596c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b00      	cmp	r3, #0
 8005978:	d010      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800597a:	4b9a      	ldr	r3, [pc, #616]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800597c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005980:	4a98      	ldr	r2, [pc, #608]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005986:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800598a:	4b96      	ldr	r3, [pc, #600]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800598c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	4993      	ldr	r1, [pc, #588]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059a8:	4b8e      	ldr	r3, [pc, #568]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	498b      	ldr	r1, [pc, #556]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ca:	4b86      	ldr	r3, [pc, #536]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	4982      	ldr	r1, [pc, #520]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ec:	4b7d      	ldr	r3, [pc, #500]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fa:	497a      	ldr	r1, [pc, #488]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a0e:	4b75      	ldr	r3, [pc, #468]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	f023 0203 	bic.w	r2, r3, #3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	4971      	ldr	r1, [pc, #452]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a30:	4b6c      	ldr	r3, [pc, #432]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f023 020c 	bic.w	r2, r3, #12
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	4969      	ldr	r1, [pc, #420]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a52:	4b64      	ldr	r3, [pc, #400]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	4960      	ldr	r1, [pc, #384]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a74:	4b5b      	ldr	r3, [pc, #364]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	4958      	ldr	r1, [pc, #352]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a96:	4b53      	ldr	r3, [pc, #332]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa4:	494f      	ldr	r1, [pc, #316]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ab8:	4b4a      	ldr	r3, [pc, #296]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac6:	4947      	ldr	r1, [pc, #284]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ada:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae8:	493e      	ldr	r1, [pc, #248]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005afc:	4b39      	ldr	r3, [pc, #228]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0a:	4936      	ldr	r1, [pc, #216]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d011      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b1e:	4b31      	ldr	r3, [pc, #196]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2c:	492d      	ldr	r1, [pc, #180]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b4e:	4b25      	ldr	r3, [pc, #148]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5c:	4921      	ldr	r1, [pc, #132]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b70:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7e:	4919      	ldr	r1, [pc, #100]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba0:	4910      	ldr	r1, [pc, #64]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d006      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 809d 	beq.w	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005bbc:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc8:	f7fd fade 	bl	8003188 <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bce:	e00b      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bd0:	f7fd fada 	bl	8003188 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	; 0x64
 8005bdc:	d904      	bls.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e116      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005be8:	4b8b      	ldr	r3, [pc, #556]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1ed      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d017      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d113      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c08:	4b83      	ldr	r3, [pc, #524]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c0e:	0e1b      	lsrs	r3, r3, #24
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	019a      	lsls	r2, r3, #6
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	061b      	lsls	r3, r3, #24
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	071b      	lsls	r3, r3, #28
 8005c28:	497b      	ldr	r1, [pc, #492]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d024      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5a:	d11f      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c5c:	4b6e      	ldr	r3, [pc, #440]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c62:	0f1b      	lsrs	r3, r3, #28
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	019a      	lsls	r2, r3, #6
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	061b      	lsls	r3, r3, #24
 8005c76:	431a      	orrs	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	071b      	lsls	r3, r3, #28
 8005c7c:	4966      	ldr	r1, [pc, #408]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c84:	4b64      	ldr	r3, [pc, #400]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8a:	f023 021f 	bic.w	r2, r3, #31
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	4960      	ldr	r1, [pc, #384]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00d      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	019a      	lsls	r2, r3, #6
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	061b      	lsls	r3, r3, #24
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	071b      	lsls	r3, r3, #28
 8005cbc:	4956      	ldr	r1, [pc, #344]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cc4:	4b54      	ldr	r3, [pc, #336]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a53      	ldr	r2, [pc, #332]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fd fa5a 	bl	8003188 <HAL_GetTick>
 8005cd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cd8:	f7fd fa56 	bl	8003188 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	; 0x64
 8005ce4:	d901      	bls.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e092      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cea:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0f0      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	f040 8088 	bne.w	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cfe:	4b46      	ldr	r3, [pc, #280]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a45      	ldr	r2, [pc, #276]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d0a:	f7fd fa3d 	bl	8003188 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d12:	f7fd fa39 	bl	8003188 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b64      	cmp	r3, #100	; 0x64
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e075      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d24:	4b3c      	ldr	r3, [pc, #240]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d30:	d0ef      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d024      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d120      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0303 	and.w	r3, r3, #3
 8005d66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	019a      	lsls	r2, r3, #6
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	041b      	lsls	r3, r3, #16
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	4927      	ldr	r1, [pc, #156]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d82:	4b25      	ldr	r3, [pc, #148]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	4920      	ldr	r1, [pc, #128]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d018      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x652>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db0:	d113      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005db2:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	0e1b      	lsrs	r3, r3, #24
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	019a      	lsls	r2, r3, #6
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	041b      	lsls	r3, r3, #16
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	061b      	lsls	r3, r3, #24
 8005dd2:	4911      	ldr	r1, [pc, #68]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a0e      	ldr	r2, [pc, #56]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de6:	f7fd f9cf 	bl	8003188 <HAL_GetTick>
 8005dea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dee:	f7fd f9cb 	bl	8003188 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b64      	cmp	r3, #100	; 0x64
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e007      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e00:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e0c:	d1ef      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40023800 	.word	0x40023800

08005e1c <calloc>:
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <calloc+0xc>)
 8005e1e:	460a      	mov	r2, r1
 8005e20:	4601      	mov	r1, r0
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	f000 b802 	b.w	8005e2c <_calloc_r>
 8005e28:	200000b8 	.word	0x200000b8

08005e2c <_calloc_r>:
 8005e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e2e:	fba1 2402 	umull	r2, r4, r1, r2
 8005e32:	b94c      	cbnz	r4, 8005e48 <_calloc_r+0x1c>
 8005e34:	4611      	mov	r1, r2
 8005e36:	9201      	str	r2, [sp, #4]
 8005e38:	f000 f836 	bl	8005ea8 <_malloc_r>
 8005e3c:	9a01      	ldr	r2, [sp, #4]
 8005e3e:	4605      	mov	r5, r0
 8005e40:	b930      	cbnz	r0, 8005e50 <_calloc_r+0x24>
 8005e42:	4628      	mov	r0, r5
 8005e44:	b003      	add	sp, #12
 8005e46:	bd30      	pop	{r4, r5, pc}
 8005e48:	220c      	movs	r2, #12
 8005e4a:	6002      	str	r2, [r0, #0]
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	e7f8      	b.n	8005e42 <_calloc_r+0x16>
 8005e50:	4621      	mov	r1, r4
 8005e52:	f000 f9f8 	bl	8006246 <memset>
 8005e56:	e7f4      	b.n	8005e42 <_calloc_r+0x16>

08005e58 <malloc>:
 8005e58:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <malloc+0xc>)
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	f000 b823 	b.w	8005ea8 <_malloc_r>
 8005e62:	bf00      	nop
 8005e64:	200000b8 	.word	0x200000b8

08005e68 <sbrk_aligned>:
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	4e0e      	ldr	r6, [pc, #56]	; (8005ea4 <sbrk_aligned+0x3c>)
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	6831      	ldr	r1, [r6, #0]
 8005e70:	4605      	mov	r5, r0
 8005e72:	b911      	cbnz	r1, 8005e7a <sbrk_aligned+0x12>
 8005e74:	f000 fa24 	bl	80062c0 <_sbrk_r>
 8005e78:	6030      	str	r0, [r6, #0]
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f000 fa1f 	bl	80062c0 <_sbrk_r>
 8005e82:	1c43      	adds	r3, r0, #1
 8005e84:	d00a      	beq.n	8005e9c <sbrk_aligned+0x34>
 8005e86:	1cc4      	adds	r4, r0, #3
 8005e88:	f024 0403 	bic.w	r4, r4, #3
 8005e8c:	42a0      	cmp	r0, r4
 8005e8e:	d007      	beq.n	8005ea0 <sbrk_aligned+0x38>
 8005e90:	1a21      	subs	r1, r4, r0
 8005e92:	4628      	mov	r0, r5
 8005e94:	f000 fa14 	bl	80062c0 <_sbrk_r>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d101      	bne.n	8005ea0 <sbrk_aligned+0x38>
 8005e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	bd70      	pop	{r4, r5, r6, pc}
 8005ea4:	200006a0 	.word	0x200006a0

08005ea8 <_malloc_r>:
 8005ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eac:	1ccd      	adds	r5, r1, #3
 8005eae:	f025 0503 	bic.w	r5, r5, #3
 8005eb2:	3508      	adds	r5, #8
 8005eb4:	2d0c      	cmp	r5, #12
 8005eb6:	bf38      	it	cc
 8005eb8:	250c      	movcc	r5, #12
 8005eba:	2d00      	cmp	r5, #0
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	db01      	blt.n	8005ec4 <_malloc_r+0x1c>
 8005ec0:	42a9      	cmp	r1, r5
 8005ec2:	d905      	bls.n	8005ed0 <_malloc_r+0x28>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	2600      	movs	r6, #0
 8005eca:	4630      	mov	r0, r6
 8005ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fa4 <_malloc_r+0xfc>
 8005ed4:	f000 f868 	bl	8005fa8 <__malloc_lock>
 8005ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8005edc:	461c      	mov	r4, r3
 8005ede:	bb5c      	cbnz	r4, 8005f38 <_malloc_r+0x90>
 8005ee0:	4629      	mov	r1, r5
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f7ff ffc0 	bl	8005e68 <sbrk_aligned>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	4604      	mov	r4, r0
 8005eec:	d155      	bne.n	8005f9a <_malloc_r+0xf2>
 8005eee:	f8d8 4000 	ldr.w	r4, [r8]
 8005ef2:	4626      	mov	r6, r4
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	d145      	bne.n	8005f84 <_malloc_r+0xdc>
 8005ef8:	2c00      	cmp	r4, #0
 8005efa:	d048      	beq.n	8005f8e <_malloc_r+0xe6>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	4631      	mov	r1, r6
 8005f00:	4638      	mov	r0, r7
 8005f02:	eb04 0903 	add.w	r9, r4, r3
 8005f06:	f000 f9db 	bl	80062c0 <_sbrk_r>
 8005f0a:	4581      	cmp	r9, r0
 8005f0c:	d13f      	bne.n	8005f8e <_malloc_r+0xe6>
 8005f0e:	6821      	ldr	r1, [r4, #0]
 8005f10:	1a6d      	subs	r5, r5, r1
 8005f12:	4629      	mov	r1, r5
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ffa7 	bl	8005e68 <sbrk_aligned>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d037      	beq.n	8005f8e <_malloc_r+0xe6>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	442b      	add	r3, r5
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	f8d8 3000 	ldr.w	r3, [r8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d038      	beq.n	8005f9e <_malloc_r+0xf6>
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	42a2      	cmp	r2, r4
 8005f30:	d12b      	bne.n	8005f8a <_malloc_r+0xe2>
 8005f32:	2200      	movs	r2, #0
 8005f34:	605a      	str	r2, [r3, #4]
 8005f36:	e00f      	b.n	8005f58 <_malloc_r+0xb0>
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	1b52      	subs	r2, r2, r5
 8005f3c:	d41f      	bmi.n	8005f7e <_malloc_r+0xd6>
 8005f3e:	2a0b      	cmp	r2, #11
 8005f40:	d917      	bls.n	8005f72 <_malloc_r+0xca>
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	6025      	str	r5, [r4, #0]
 8005f48:	bf18      	it	ne
 8005f4a:	6059      	strne	r1, [r3, #4]
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	bf08      	it	eq
 8005f50:	f8c8 1000 	streq.w	r1, [r8]
 8005f54:	5162      	str	r2, [r4, r5]
 8005f56:	604b      	str	r3, [r1, #4]
 8005f58:	4638      	mov	r0, r7
 8005f5a:	f104 060b 	add.w	r6, r4, #11
 8005f5e:	f000 f829 	bl	8005fb4 <__malloc_unlock>
 8005f62:	f026 0607 	bic.w	r6, r6, #7
 8005f66:	1d23      	adds	r3, r4, #4
 8005f68:	1af2      	subs	r2, r6, r3
 8005f6a:	d0ae      	beq.n	8005eca <_malloc_r+0x22>
 8005f6c:	1b9b      	subs	r3, r3, r6
 8005f6e:	50a3      	str	r3, [r4, r2]
 8005f70:	e7ab      	b.n	8005eca <_malloc_r+0x22>
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	6862      	ldr	r2, [r4, #4]
 8005f76:	d1dd      	bne.n	8005f34 <_malloc_r+0x8c>
 8005f78:	f8c8 2000 	str.w	r2, [r8]
 8005f7c:	e7ec      	b.n	8005f58 <_malloc_r+0xb0>
 8005f7e:	4623      	mov	r3, r4
 8005f80:	6864      	ldr	r4, [r4, #4]
 8005f82:	e7ac      	b.n	8005ede <_malloc_r+0x36>
 8005f84:	4634      	mov	r4, r6
 8005f86:	6876      	ldr	r6, [r6, #4]
 8005f88:	e7b4      	b.n	8005ef4 <_malloc_r+0x4c>
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	e7cc      	b.n	8005f28 <_malloc_r+0x80>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4638      	mov	r0, r7
 8005f94:	f000 f80e 	bl	8005fb4 <__malloc_unlock>
 8005f98:	e797      	b.n	8005eca <_malloc_r+0x22>
 8005f9a:	6025      	str	r5, [r4, #0]
 8005f9c:	e7dc      	b.n	8005f58 <_malloc_r+0xb0>
 8005f9e:	605b      	str	r3, [r3, #4]
 8005fa0:	deff      	udf	#255	; 0xff
 8005fa2:	bf00      	nop
 8005fa4:	2000069c 	.word	0x2000069c

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	; (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f000 b9d6 	b.w	800635a <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	200007e4 	.word	0x200007e4

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f000 b9d1 	b.w	800635c <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	200007e4 	.word	0x200007e4

08005fc0 <rand>:
 8005fc0:	4b16      	ldr	r3, [pc, #88]	; (800601c <rand+0x5c>)
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	681c      	ldr	r4, [r3, #0]
 8005fc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fc8:	b9b3      	cbnz	r3, 8005ff8 <rand+0x38>
 8005fca:	2018      	movs	r0, #24
 8005fcc:	f7ff ff44 	bl	8005e58 <malloc>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6320      	str	r0, [r4, #48]	; 0x30
 8005fd4:	b920      	cbnz	r0, 8005fe0 <rand+0x20>
 8005fd6:	4b12      	ldr	r3, [pc, #72]	; (8006020 <rand+0x60>)
 8005fd8:	4812      	ldr	r0, [pc, #72]	; (8006024 <rand+0x64>)
 8005fda:	2152      	movs	r1, #82	; 0x52
 8005fdc:	f000 f9c0 	bl	8006360 <__assert_func>
 8005fe0:	4911      	ldr	r1, [pc, #68]	; (8006028 <rand+0x68>)
 8005fe2:	4b12      	ldr	r3, [pc, #72]	; (800602c <rand+0x6c>)
 8005fe4:	e9c0 1300 	strd	r1, r3, [r0]
 8005fe8:	4b11      	ldr	r3, [pc, #68]	; (8006030 <rand+0x70>)
 8005fea:	6083      	str	r3, [r0, #8]
 8005fec:	230b      	movs	r3, #11
 8005fee:	8183      	strh	r3, [r0, #12]
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005ff8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005ffa:	480e      	ldr	r0, [pc, #56]	; (8006034 <rand+0x74>)
 8005ffc:	690b      	ldr	r3, [r1, #16]
 8005ffe:	694c      	ldr	r4, [r1, #20]
 8006000:	4a0d      	ldr	r2, [pc, #52]	; (8006038 <rand+0x78>)
 8006002:	4358      	muls	r0, r3
 8006004:	fb02 0004 	mla	r0, r2, r4, r0
 8006008:	fba3 3202 	umull	r3, r2, r3, r2
 800600c:	3301      	adds	r3, #1
 800600e:	eb40 0002 	adc.w	r0, r0, r2
 8006012:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006016:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800601a:	bd10      	pop	{r4, pc}
 800601c:	200000b8 	.word	0x200000b8
 8006020:	08008b00 	.word	0x08008b00
 8006024:	08008b17 	.word	0x08008b17
 8006028:	abcd330e 	.word	0xabcd330e
 800602c:	e66d1234 	.word	0xe66d1234
 8006030:	0005deec 	.word	0x0005deec
 8006034:	5851f42d 	.word	0x5851f42d
 8006038:	4c957f2d 	.word	0x4c957f2d

0800603c <std>:
 800603c:	2300      	movs	r3, #0
 800603e:	b510      	push	{r4, lr}
 8006040:	4604      	mov	r4, r0
 8006042:	e9c0 3300 	strd	r3, r3, [r0]
 8006046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604a:	6083      	str	r3, [r0, #8]
 800604c:	8181      	strh	r1, [r0, #12]
 800604e:	6643      	str	r3, [r0, #100]	; 0x64
 8006050:	81c2      	strh	r2, [r0, #14]
 8006052:	6183      	str	r3, [r0, #24]
 8006054:	4619      	mov	r1, r3
 8006056:	2208      	movs	r2, #8
 8006058:	305c      	adds	r0, #92	; 0x5c
 800605a:	f000 f8f4 	bl	8006246 <memset>
 800605e:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <std+0x58>)
 8006060:	6263      	str	r3, [r4, #36]	; 0x24
 8006062:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <std+0x5c>)
 8006064:	62a3      	str	r3, [r4, #40]	; 0x28
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <std+0x60>)
 8006068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <std+0x64>)
 800606c:	6323      	str	r3, [r4, #48]	; 0x30
 800606e:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <std+0x68>)
 8006070:	6224      	str	r4, [r4, #32]
 8006072:	429c      	cmp	r4, r3
 8006074:	d006      	beq.n	8006084 <std+0x48>
 8006076:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800607a:	4294      	cmp	r4, r2
 800607c:	d002      	beq.n	8006084 <std+0x48>
 800607e:	33d0      	adds	r3, #208	; 0xd0
 8006080:	429c      	cmp	r4, r3
 8006082:	d105      	bne.n	8006090 <std+0x54>
 8006084:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608c:	f000 b964 	b.w	8006358 <__retarget_lock_init_recursive>
 8006090:	bd10      	pop	{r4, pc}
 8006092:	bf00      	nop
 8006094:	080061c1 	.word	0x080061c1
 8006098:	080061e3 	.word	0x080061e3
 800609c:	0800621b 	.word	0x0800621b
 80060a0:	0800623f 	.word	0x0800623f
 80060a4:	200006a4 	.word	0x200006a4

080060a8 <stdio_exit_handler>:
 80060a8:	4a02      	ldr	r2, [pc, #8]	; (80060b4 <stdio_exit_handler+0xc>)
 80060aa:	4903      	ldr	r1, [pc, #12]	; (80060b8 <stdio_exit_handler+0x10>)
 80060ac:	4803      	ldr	r0, [pc, #12]	; (80060bc <stdio_exit_handler+0x14>)
 80060ae:	f000 b869 	b.w	8006184 <_fwalk_sglue>
 80060b2:	bf00      	nop
 80060b4:	20000060 	.word	0x20000060
 80060b8:	08006541 	.word	0x08006541
 80060bc:	2000006c 	.word	0x2000006c

080060c0 <cleanup_stdio>:
 80060c0:	6841      	ldr	r1, [r0, #4]
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <cleanup_stdio+0x34>)
 80060c4:	4299      	cmp	r1, r3
 80060c6:	b510      	push	{r4, lr}
 80060c8:	4604      	mov	r4, r0
 80060ca:	d001      	beq.n	80060d0 <cleanup_stdio+0x10>
 80060cc:	f000 fa38 	bl	8006540 <_fflush_r>
 80060d0:	68a1      	ldr	r1, [r4, #8]
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <cleanup_stdio+0x38>)
 80060d4:	4299      	cmp	r1, r3
 80060d6:	d002      	beq.n	80060de <cleanup_stdio+0x1e>
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fa31 	bl	8006540 <_fflush_r>
 80060de:	68e1      	ldr	r1, [r4, #12]
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <cleanup_stdio+0x3c>)
 80060e2:	4299      	cmp	r1, r3
 80060e4:	d004      	beq.n	80060f0 <cleanup_stdio+0x30>
 80060e6:	4620      	mov	r0, r4
 80060e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ec:	f000 ba28 	b.w	8006540 <_fflush_r>
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	bf00      	nop
 80060f4:	200006a4 	.word	0x200006a4
 80060f8:	2000070c 	.word	0x2000070c
 80060fc:	20000774 	.word	0x20000774

08006100 <global_stdio_init.part.0>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <global_stdio_init.part.0+0x30>)
 8006104:	4c0b      	ldr	r4, [pc, #44]	; (8006134 <global_stdio_init.part.0+0x34>)
 8006106:	4a0c      	ldr	r2, [pc, #48]	; (8006138 <global_stdio_init.part.0+0x38>)
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	4620      	mov	r0, r4
 800610c:	2200      	movs	r2, #0
 800610e:	2104      	movs	r1, #4
 8006110:	f7ff ff94 	bl	800603c <std>
 8006114:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006118:	2201      	movs	r2, #1
 800611a:	2109      	movs	r1, #9
 800611c:	f7ff ff8e 	bl	800603c <std>
 8006120:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006124:	2202      	movs	r2, #2
 8006126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612a:	2112      	movs	r1, #18
 800612c:	f7ff bf86 	b.w	800603c <std>
 8006130:	200007dc 	.word	0x200007dc
 8006134:	200006a4 	.word	0x200006a4
 8006138:	080060a9 	.word	0x080060a9

0800613c <__sfp_lock_acquire>:
 800613c:	4801      	ldr	r0, [pc, #4]	; (8006144 <__sfp_lock_acquire+0x8>)
 800613e:	f000 b90c 	b.w	800635a <__retarget_lock_acquire_recursive>
 8006142:	bf00      	nop
 8006144:	200007e5 	.word	0x200007e5

08006148 <__sfp_lock_release>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__sfp_lock_release+0x8>)
 800614a:	f000 b907 	b.w	800635c <__retarget_lock_release_recursive>
 800614e:	bf00      	nop
 8006150:	200007e5 	.word	0x200007e5

08006154 <__sinit>:
 8006154:	b510      	push	{r4, lr}
 8006156:	4604      	mov	r4, r0
 8006158:	f7ff fff0 	bl	800613c <__sfp_lock_acquire>
 800615c:	6a23      	ldr	r3, [r4, #32]
 800615e:	b11b      	cbz	r3, 8006168 <__sinit+0x14>
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	f7ff bff0 	b.w	8006148 <__sfp_lock_release>
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <__sinit+0x28>)
 800616a:	6223      	str	r3, [r4, #32]
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <__sinit+0x2c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f5      	bne.n	8006160 <__sinit+0xc>
 8006174:	f7ff ffc4 	bl	8006100 <global_stdio_init.part.0>
 8006178:	e7f2      	b.n	8006160 <__sinit+0xc>
 800617a:	bf00      	nop
 800617c:	080060c1 	.word	0x080060c1
 8006180:	200007dc 	.word	0x200007dc

08006184 <_fwalk_sglue>:
 8006184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006188:	4607      	mov	r7, r0
 800618a:	4688      	mov	r8, r1
 800618c:	4614      	mov	r4, r2
 800618e:	2600      	movs	r6, #0
 8006190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006194:	f1b9 0901 	subs.w	r9, r9, #1
 8006198:	d505      	bpl.n	80061a6 <_fwalk_sglue+0x22>
 800619a:	6824      	ldr	r4, [r4, #0]
 800619c:	2c00      	cmp	r4, #0
 800619e:	d1f7      	bne.n	8006190 <_fwalk_sglue+0xc>
 80061a0:	4630      	mov	r0, r6
 80061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a6:	89ab      	ldrh	r3, [r5, #12]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d907      	bls.n	80061bc <_fwalk_sglue+0x38>
 80061ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061b0:	3301      	adds	r3, #1
 80061b2:	d003      	beq.n	80061bc <_fwalk_sglue+0x38>
 80061b4:	4629      	mov	r1, r5
 80061b6:	4638      	mov	r0, r7
 80061b8:	47c0      	blx	r8
 80061ba:	4306      	orrs	r6, r0
 80061bc:	3568      	adds	r5, #104	; 0x68
 80061be:	e7e9      	b.n	8006194 <_fwalk_sglue+0x10>

080061c0 <__sread>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	460c      	mov	r4, r1
 80061c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c8:	f000 f868 	bl	800629c <_read_r>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	bfab      	itete	ge
 80061d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061d2:	89a3      	ldrhlt	r3, [r4, #12]
 80061d4:	181b      	addge	r3, r3, r0
 80061d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061da:	bfac      	ite	ge
 80061dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80061de:	81a3      	strhlt	r3, [r4, #12]
 80061e0:	bd10      	pop	{r4, pc}

080061e2 <__swrite>:
 80061e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	461f      	mov	r7, r3
 80061e8:	898b      	ldrh	r3, [r1, #12]
 80061ea:	05db      	lsls	r3, r3, #23
 80061ec:	4605      	mov	r5, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	4616      	mov	r6, r2
 80061f2:	d505      	bpl.n	8006200 <__swrite+0x1e>
 80061f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f8:	2302      	movs	r3, #2
 80061fa:	2200      	movs	r2, #0
 80061fc:	f000 f83c 	bl	8006278 <_lseek_r>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	4632      	mov	r2, r6
 800620e:	463b      	mov	r3, r7
 8006210:	4628      	mov	r0, r5
 8006212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006216:	f000 b863 	b.w	80062e0 <_write_r>

0800621a <__sseek>:
 800621a:	b510      	push	{r4, lr}
 800621c:	460c      	mov	r4, r1
 800621e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006222:	f000 f829 	bl	8006278 <_lseek_r>
 8006226:	1c43      	adds	r3, r0, #1
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	bf15      	itete	ne
 800622c:	6560      	strne	r0, [r4, #84]	; 0x54
 800622e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006236:	81a3      	strheq	r3, [r4, #12]
 8006238:	bf18      	it	ne
 800623a:	81a3      	strhne	r3, [r4, #12]
 800623c:	bd10      	pop	{r4, pc}

0800623e <__sclose>:
 800623e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006242:	f000 b809 	b.w	8006258 <_close_r>

08006246 <memset>:
 8006246:	4402      	add	r2, r0
 8006248:	4603      	mov	r3, r0
 800624a:	4293      	cmp	r3, r2
 800624c:	d100      	bne.n	8006250 <memset+0xa>
 800624e:	4770      	bx	lr
 8006250:	f803 1b01 	strb.w	r1, [r3], #1
 8006254:	e7f9      	b.n	800624a <memset+0x4>
	...

08006258 <_close_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d06      	ldr	r5, [pc, #24]	; (8006274 <_close_r+0x1c>)
 800625c:	2300      	movs	r3, #0
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fc fe99 	bl	8002f9a <_close>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_close_r+0x1a>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_close_r+0x1a>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	200007e0 	.word	0x200007e0

08006278 <_lseek_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d07      	ldr	r5, [pc, #28]	; (8006298 <_lseek_r+0x20>)
 800627c:	4604      	mov	r4, r0
 800627e:	4608      	mov	r0, r1
 8006280:	4611      	mov	r1, r2
 8006282:	2200      	movs	r2, #0
 8006284:	602a      	str	r2, [r5, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	f7fc feae 	bl	8002fe8 <_lseek>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d102      	bne.n	8006296 <_lseek_r+0x1e>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	b103      	cbz	r3, 8006296 <_lseek_r+0x1e>
 8006294:	6023      	str	r3, [r4, #0]
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	200007e0 	.word	0x200007e0

0800629c <_read_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4d07      	ldr	r5, [pc, #28]	; (80062bc <_read_r+0x20>)
 80062a0:	4604      	mov	r4, r0
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	2200      	movs	r2, #0
 80062a8:	602a      	str	r2, [r5, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f7fc fe3c 	bl	8002f28 <_read>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_read_r+0x1e>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_read_r+0x1e>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	200007e0 	.word	0x200007e0

080062c0 <_sbrk_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d06      	ldr	r5, [pc, #24]	; (80062dc <_sbrk_r+0x1c>)
 80062c4:	2300      	movs	r3, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	f7fc fe9a 	bl	8003004 <_sbrk>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_sbrk_r+0x1a>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_sbrk_r+0x1a>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	200007e0 	.word	0x200007e0

080062e0 <_write_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d07      	ldr	r5, [pc, #28]	; (8006300 <_write_r+0x20>)
 80062e4:	4604      	mov	r4, r0
 80062e6:	4608      	mov	r0, r1
 80062e8:	4611      	mov	r1, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fc fe37 	bl	8002f62 <_write>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_write_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_write_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	200007e0 	.word	0x200007e0

08006304 <__errno>:
 8006304:	4b01      	ldr	r3, [pc, #4]	; (800630c <__errno+0x8>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	200000b8 	.word	0x200000b8

08006310 <__libc_init_array>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	4d0d      	ldr	r5, [pc, #52]	; (8006348 <__libc_init_array+0x38>)
 8006314:	4c0d      	ldr	r4, [pc, #52]	; (800634c <__libc_init_array+0x3c>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	2600      	movs	r6, #0
 800631c:	42a6      	cmp	r6, r4
 800631e:	d109      	bne.n	8006334 <__libc_init_array+0x24>
 8006320:	4d0b      	ldr	r5, [pc, #44]	; (8006350 <__libc_init_array+0x40>)
 8006322:	4c0c      	ldr	r4, [pc, #48]	; (8006354 <__libc_init_array+0x44>)
 8006324:	f002 fbc2 	bl	8008aac <_init>
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	2600      	movs	r6, #0
 800632e:	42a6      	cmp	r6, r4
 8006330:	d105      	bne.n	800633e <__libc_init_array+0x2e>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	f855 3b04 	ldr.w	r3, [r5], #4
 8006338:	4798      	blx	r3
 800633a:	3601      	adds	r6, #1
 800633c:	e7ee      	b.n	800631c <__libc_init_array+0xc>
 800633e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006342:	4798      	blx	r3
 8006344:	3601      	adds	r6, #1
 8006346:	e7f2      	b.n	800632e <__libc_init_array+0x1e>
 8006348:	08009018 	.word	0x08009018
 800634c:	08009018 	.word	0x08009018
 8006350:	08009018 	.word	0x08009018
 8006354:	0800901c 	.word	0x0800901c

08006358 <__retarget_lock_init_recursive>:
 8006358:	4770      	bx	lr

0800635a <__retarget_lock_acquire_recursive>:
 800635a:	4770      	bx	lr

0800635c <__retarget_lock_release_recursive>:
 800635c:	4770      	bx	lr
	...

08006360 <__assert_func>:
 8006360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006362:	4614      	mov	r4, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <__assert_func+0x2c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4605      	mov	r5, r0
 800636c:	68d8      	ldr	r0, [r3, #12]
 800636e:	b14c      	cbz	r4, 8006384 <__assert_func+0x24>
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <__assert_func+0x30>)
 8006372:	9100      	str	r1, [sp, #0]
 8006374:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006378:	4906      	ldr	r1, [pc, #24]	; (8006394 <__assert_func+0x34>)
 800637a:	462b      	mov	r3, r5
 800637c:	f000 f908 	bl	8006590 <fiprintf>
 8006380:	f000 f918 	bl	80065b4 <abort>
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <__assert_func+0x38>)
 8006386:	461c      	mov	r4, r3
 8006388:	e7f3      	b.n	8006372 <__assert_func+0x12>
 800638a:	bf00      	nop
 800638c:	200000b8 	.word	0x200000b8
 8006390:	08008b6f 	.word	0x08008b6f
 8006394:	08008b7c 	.word	0x08008b7c
 8006398:	08008baa 	.word	0x08008baa

0800639c <_free_r>:
 800639c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639e:	2900      	cmp	r1, #0
 80063a0:	d044      	beq.n	800642c <_free_r+0x90>
 80063a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a6:	9001      	str	r0, [sp, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f1a1 0404 	sub.w	r4, r1, #4
 80063ae:	bfb8      	it	lt
 80063b0:	18e4      	addlt	r4, r4, r3
 80063b2:	f7ff fdf9 	bl	8005fa8 <__malloc_lock>
 80063b6:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <_free_r+0x94>)
 80063b8:	9801      	ldr	r0, [sp, #4]
 80063ba:	6813      	ldr	r3, [r2, #0]
 80063bc:	b933      	cbnz	r3, 80063cc <_free_r+0x30>
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	6014      	str	r4, [r2, #0]
 80063c2:	b003      	add	sp, #12
 80063c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c8:	f7ff bdf4 	b.w	8005fb4 <__malloc_unlock>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d908      	bls.n	80063e2 <_free_r+0x46>
 80063d0:	6825      	ldr	r5, [r4, #0]
 80063d2:	1961      	adds	r1, r4, r5
 80063d4:	428b      	cmp	r3, r1
 80063d6:	bf01      	itttt	eq
 80063d8:	6819      	ldreq	r1, [r3, #0]
 80063da:	685b      	ldreq	r3, [r3, #4]
 80063dc:	1949      	addeq	r1, r1, r5
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	e7ed      	b.n	80063be <_free_r+0x22>
 80063e2:	461a      	mov	r2, r3
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b10b      	cbz	r3, 80063ec <_free_r+0x50>
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d9fa      	bls.n	80063e2 <_free_r+0x46>
 80063ec:	6811      	ldr	r1, [r2, #0]
 80063ee:	1855      	adds	r5, r2, r1
 80063f0:	42a5      	cmp	r5, r4
 80063f2:	d10b      	bne.n	800640c <_free_r+0x70>
 80063f4:	6824      	ldr	r4, [r4, #0]
 80063f6:	4421      	add	r1, r4
 80063f8:	1854      	adds	r4, r2, r1
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	d1e0      	bne.n	80063c2 <_free_r+0x26>
 8006400:	681c      	ldr	r4, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	6053      	str	r3, [r2, #4]
 8006406:	440c      	add	r4, r1
 8006408:	6014      	str	r4, [r2, #0]
 800640a:	e7da      	b.n	80063c2 <_free_r+0x26>
 800640c:	d902      	bls.n	8006414 <_free_r+0x78>
 800640e:	230c      	movs	r3, #12
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	e7d6      	b.n	80063c2 <_free_r+0x26>
 8006414:	6825      	ldr	r5, [r4, #0]
 8006416:	1961      	adds	r1, r4, r5
 8006418:	428b      	cmp	r3, r1
 800641a:	bf04      	itt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	bf04      	itt	eq
 8006424:	1949      	addeq	r1, r1, r5
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	6054      	str	r4, [r2, #4]
 800642a:	e7ca      	b.n	80063c2 <_free_r+0x26>
 800642c:	b003      	add	sp, #12
 800642e:	bd30      	pop	{r4, r5, pc}
 8006430:	2000069c 	.word	0x2000069c

08006434 <__sflush_r>:
 8006434:	898a      	ldrh	r2, [r1, #12]
 8006436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643a:	4605      	mov	r5, r0
 800643c:	0710      	lsls	r0, r2, #28
 800643e:	460c      	mov	r4, r1
 8006440:	d458      	bmi.n	80064f4 <__sflush_r+0xc0>
 8006442:	684b      	ldr	r3, [r1, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	dc05      	bgt.n	8006454 <__sflush_r+0x20>
 8006448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	dc02      	bgt.n	8006454 <__sflush_r+0x20>
 800644e:	2000      	movs	r0, #0
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006456:	2e00      	cmp	r6, #0
 8006458:	d0f9      	beq.n	800644e <__sflush_r+0x1a>
 800645a:	2300      	movs	r3, #0
 800645c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006460:	682f      	ldr	r7, [r5, #0]
 8006462:	6a21      	ldr	r1, [r4, #32]
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	d032      	beq.n	80064ce <__sflush_r+0x9a>
 8006468:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	075a      	lsls	r2, r3, #29
 800646e:	d505      	bpl.n	800647c <__sflush_r+0x48>
 8006470:	6863      	ldr	r3, [r4, #4]
 8006472:	1ac0      	subs	r0, r0, r3
 8006474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006476:	b10b      	cbz	r3, 800647c <__sflush_r+0x48>
 8006478:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800647a:	1ac0      	subs	r0, r0, r3
 800647c:	2300      	movs	r3, #0
 800647e:	4602      	mov	r2, r0
 8006480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006482:	6a21      	ldr	r1, [r4, #32]
 8006484:	4628      	mov	r0, r5
 8006486:	47b0      	blx	r6
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	d106      	bne.n	800649c <__sflush_r+0x68>
 800648e:	6829      	ldr	r1, [r5, #0]
 8006490:	291d      	cmp	r1, #29
 8006492:	d82b      	bhi.n	80064ec <__sflush_r+0xb8>
 8006494:	4a29      	ldr	r2, [pc, #164]	; (800653c <__sflush_r+0x108>)
 8006496:	410a      	asrs	r2, r1
 8006498:	07d6      	lsls	r6, r2, #31
 800649a:	d427      	bmi.n	80064ec <__sflush_r+0xb8>
 800649c:	2200      	movs	r2, #0
 800649e:	6062      	str	r2, [r4, #4]
 80064a0:	04d9      	lsls	r1, r3, #19
 80064a2:	6922      	ldr	r2, [r4, #16]
 80064a4:	6022      	str	r2, [r4, #0]
 80064a6:	d504      	bpl.n	80064b2 <__sflush_r+0x7e>
 80064a8:	1c42      	adds	r2, r0, #1
 80064aa:	d101      	bne.n	80064b0 <__sflush_r+0x7c>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b903      	cbnz	r3, 80064b2 <__sflush_r+0x7e>
 80064b0:	6560      	str	r0, [r4, #84]	; 0x54
 80064b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064b4:	602f      	str	r7, [r5, #0]
 80064b6:	2900      	cmp	r1, #0
 80064b8:	d0c9      	beq.n	800644e <__sflush_r+0x1a>
 80064ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064be:	4299      	cmp	r1, r3
 80064c0:	d002      	beq.n	80064c8 <__sflush_r+0x94>
 80064c2:	4628      	mov	r0, r5
 80064c4:	f7ff ff6a 	bl	800639c <_free_r>
 80064c8:	2000      	movs	r0, #0
 80064ca:	6360      	str	r0, [r4, #52]	; 0x34
 80064cc:	e7c0      	b.n	8006450 <__sflush_r+0x1c>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b0      	blx	r6
 80064d4:	1c41      	adds	r1, r0, #1
 80064d6:	d1c8      	bne.n	800646a <__sflush_r+0x36>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0c5      	beq.n	800646a <__sflush_r+0x36>
 80064de:	2b1d      	cmp	r3, #29
 80064e0:	d001      	beq.n	80064e6 <__sflush_r+0xb2>
 80064e2:	2b16      	cmp	r3, #22
 80064e4:	d101      	bne.n	80064ea <__sflush_r+0xb6>
 80064e6:	602f      	str	r7, [r5, #0]
 80064e8:	e7b1      	b.n	800644e <__sflush_r+0x1a>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	e7ad      	b.n	8006450 <__sflush_r+0x1c>
 80064f4:	690f      	ldr	r7, [r1, #16]
 80064f6:	2f00      	cmp	r7, #0
 80064f8:	d0a9      	beq.n	800644e <__sflush_r+0x1a>
 80064fa:	0793      	lsls	r3, r2, #30
 80064fc:	680e      	ldr	r6, [r1, #0]
 80064fe:	bf08      	it	eq
 8006500:	694b      	ldreq	r3, [r1, #20]
 8006502:	600f      	str	r7, [r1, #0]
 8006504:	bf18      	it	ne
 8006506:	2300      	movne	r3, #0
 8006508:	eba6 0807 	sub.w	r8, r6, r7
 800650c:	608b      	str	r3, [r1, #8]
 800650e:	f1b8 0f00 	cmp.w	r8, #0
 8006512:	dd9c      	ble.n	800644e <__sflush_r+0x1a>
 8006514:	6a21      	ldr	r1, [r4, #32]
 8006516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006518:	4643      	mov	r3, r8
 800651a:	463a      	mov	r2, r7
 800651c:	4628      	mov	r0, r5
 800651e:	47b0      	blx	r6
 8006520:	2800      	cmp	r0, #0
 8006522:	dc06      	bgt.n	8006532 <__sflush_r+0xfe>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	e78e      	b.n	8006450 <__sflush_r+0x1c>
 8006532:	4407      	add	r7, r0
 8006534:	eba8 0800 	sub.w	r8, r8, r0
 8006538:	e7e9      	b.n	800650e <__sflush_r+0xda>
 800653a:	bf00      	nop
 800653c:	dfbffffe 	.word	0xdfbffffe

08006540 <_fflush_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	690b      	ldr	r3, [r1, #16]
 8006544:	4605      	mov	r5, r0
 8006546:	460c      	mov	r4, r1
 8006548:	b913      	cbnz	r3, 8006550 <_fflush_r+0x10>
 800654a:	2500      	movs	r5, #0
 800654c:	4628      	mov	r0, r5
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	b118      	cbz	r0, 800655a <_fflush_r+0x1a>
 8006552:	6a03      	ldr	r3, [r0, #32]
 8006554:	b90b      	cbnz	r3, 800655a <_fflush_r+0x1a>
 8006556:	f7ff fdfd 	bl	8006154 <__sinit>
 800655a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0f3      	beq.n	800654a <_fflush_r+0xa>
 8006562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006564:	07d0      	lsls	r0, r2, #31
 8006566:	d404      	bmi.n	8006572 <_fflush_r+0x32>
 8006568:	0599      	lsls	r1, r3, #22
 800656a:	d402      	bmi.n	8006572 <_fflush_r+0x32>
 800656c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656e:	f7ff fef4 	bl	800635a <__retarget_lock_acquire_recursive>
 8006572:	4628      	mov	r0, r5
 8006574:	4621      	mov	r1, r4
 8006576:	f7ff ff5d 	bl	8006434 <__sflush_r>
 800657a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800657c:	07da      	lsls	r2, r3, #31
 800657e:	4605      	mov	r5, r0
 8006580:	d4e4      	bmi.n	800654c <_fflush_r+0xc>
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	059b      	lsls	r3, r3, #22
 8006586:	d4e1      	bmi.n	800654c <_fflush_r+0xc>
 8006588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658a:	f7ff fee7 	bl	800635c <__retarget_lock_release_recursive>
 800658e:	e7dd      	b.n	800654c <_fflush_r+0xc>

08006590 <fiprintf>:
 8006590:	b40e      	push	{r1, r2, r3}
 8006592:	b503      	push	{r0, r1, lr}
 8006594:	4601      	mov	r1, r0
 8006596:	ab03      	add	r3, sp, #12
 8006598:	4805      	ldr	r0, [pc, #20]	; (80065b0 <fiprintf+0x20>)
 800659a:	f853 2b04 	ldr.w	r2, [r3], #4
 800659e:	6800      	ldr	r0, [r0, #0]
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	f000 f837 	bl	8006614 <_vfiprintf_r>
 80065a6:	b002      	add	sp, #8
 80065a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80065ac:	b003      	add	sp, #12
 80065ae:	4770      	bx	lr
 80065b0:	200000b8 	.word	0x200000b8

080065b4 <abort>:
 80065b4:	b508      	push	{r3, lr}
 80065b6:	2006      	movs	r0, #6
 80065b8:	f000 fb94 	bl	8006ce4 <raise>
 80065bc:	2001      	movs	r0, #1
 80065be:	f7fc fca9 	bl	8002f14 <_exit>

080065c2 <__sfputc_r>:
 80065c2:	6893      	ldr	r3, [r2, #8]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	b410      	push	{r4}
 80065ca:	6093      	str	r3, [r2, #8]
 80065cc:	da08      	bge.n	80065e0 <__sfputc_r+0x1e>
 80065ce:	6994      	ldr	r4, [r2, #24]
 80065d0:	42a3      	cmp	r3, r4
 80065d2:	db01      	blt.n	80065d8 <__sfputc_r+0x16>
 80065d4:	290a      	cmp	r1, #10
 80065d6:	d103      	bne.n	80065e0 <__sfputc_r+0x1e>
 80065d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065dc:	f000 bac4 	b.w	8006b68 <__swbuf_r>
 80065e0:	6813      	ldr	r3, [r2, #0]
 80065e2:	1c58      	adds	r0, r3, #1
 80065e4:	6010      	str	r0, [r2, #0]
 80065e6:	7019      	strb	r1, [r3, #0]
 80065e8:	4608      	mov	r0, r1
 80065ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <__sfputs_r>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	4606      	mov	r6, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	4614      	mov	r4, r2
 80065f8:	18d5      	adds	r5, r2, r3
 80065fa:	42ac      	cmp	r4, r5
 80065fc:	d101      	bne.n	8006602 <__sfputs_r+0x12>
 80065fe:	2000      	movs	r0, #0
 8006600:	e007      	b.n	8006612 <__sfputs_r+0x22>
 8006602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006606:	463a      	mov	r2, r7
 8006608:	4630      	mov	r0, r6
 800660a:	f7ff ffda 	bl	80065c2 <__sfputc_r>
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	d1f3      	bne.n	80065fa <__sfputs_r+0xa>
 8006612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006614 <_vfiprintf_r>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	460d      	mov	r5, r1
 800661a:	b09d      	sub	sp, #116	; 0x74
 800661c:	4614      	mov	r4, r2
 800661e:	4698      	mov	r8, r3
 8006620:	4606      	mov	r6, r0
 8006622:	b118      	cbz	r0, 800662c <_vfiprintf_r+0x18>
 8006624:	6a03      	ldr	r3, [r0, #32]
 8006626:	b90b      	cbnz	r3, 800662c <_vfiprintf_r+0x18>
 8006628:	f7ff fd94 	bl	8006154 <__sinit>
 800662c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800662e:	07d9      	lsls	r1, r3, #31
 8006630:	d405      	bmi.n	800663e <_vfiprintf_r+0x2a>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	059a      	lsls	r2, r3, #22
 8006636:	d402      	bmi.n	800663e <_vfiprintf_r+0x2a>
 8006638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800663a:	f7ff fe8e 	bl	800635a <__retarget_lock_acquire_recursive>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	071b      	lsls	r3, r3, #28
 8006642:	d501      	bpl.n	8006648 <_vfiprintf_r+0x34>
 8006644:	692b      	ldr	r3, [r5, #16]
 8006646:	b99b      	cbnz	r3, 8006670 <_vfiprintf_r+0x5c>
 8006648:	4629      	mov	r1, r5
 800664a:	4630      	mov	r0, r6
 800664c:	f000 faca 	bl	8006be4 <__swsetup_r>
 8006650:	b170      	cbz	r0, 8006670 <_vfiprintf_r+0x5c>
 8006652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006654:	07dc      	lsls	r4, r3, #31
 8006656:	d504      	bpl.n	8006662 <_vfiprintf_r+0x4e>
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	b01d      	add	sp, #116	; 0x74
 800665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	0598      	lsls	r0, r3, #22
 8006666:	d4f7      	bmi.n	8006658 <_vfiprintf_r+0x44>
 8006668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800666a:	f7ff fe77 	bl	800635c <__retarget_lock_release_recursive>
 800666e:	e7f3      	b.n	8006658 <_vfiprintf_r+0x44>
 8006670:	2300      	movs	r3, #0
 8006672:	9309      	str	r3, [sp, #36]	; 0x24
 8006674:	2320      	movs	r3, #32
 8006676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800667a:	f8cd 800c 	str.w	r8, [sp, #12]
 800667e:	2330      	movs	r3, #48	; 0x30
 8006680:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006834 <_vfiprintf_r+0x220>
 8006684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006688:	f04f 0901 	mov.w	r9, #1
 800668c:	4623      	mov	r3, r4
 800668e:	469a      	mov	sl, r3
 8006690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006694:	b10a      	cbz	r2, 800669a <_vfiprintf_r+0x86>
 8006696:	2a25      	cmp	r2, #37	; 0x25
 8006698:	d1f9      	bne.n	800668e <_vfiprintf_r+0x7a>
 800669a:	ebba 0b04 	subs.w	fp, sl, r4
 800669e:	d00b      	beq.n	80066b8 <_vfiprintf_r+0xa4>
 80066a0:	465b      	mov	r3, fp
 80066a2:	4622      	mov	r2, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	4630      	mov	r0, r6
 80066a8:	f7ff ffa2 	bl	80065f0 <__sfputs_r>
 80066ac:	3001      	adds	r0, #1
 80066ae:	f000 80a9 	beq.w	8006804 <_vfiprintf_r+0x1f0>
 80066b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b4:	445a      	add	r2, fp
 80066b6:	9209      	str	r2, [sp, #36]	; 0x24
 80066b8:	f89a 3000 	ldrb.w	r3, [sl]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80a1 	beq.w	8006804 <_vfiprintf_r+0x1f0>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f04f 32ff 	mov.w	r2, #4294967295
 80066c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066cc:	f10a 0a01 	add.w	sl, sl, #1
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066d8:	931a      	str	r3, [sp, #104]	; 0x68
 80066da:	4654      	mov	r4, sl
 80066dc:	2205      	movs	r2, #5
 80066de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e2:	4854      	ldr	r0, [pc, #336]	; (8006834 <_vfiprintf_r+0x220>)
 80066e4:	f7f9 fd9c 	bl	8000220 <memchr>
 80066e8:	9a04      	ldr	r2, [sp, #16]
 80066ea:	b9d8      	cbnz	r0, 8006724 <_vfiprintf_r+0x110>
 80066ec:	06d1      	lsls	r1, r2, #27
 80066ee:	bf44      	itt	mi
 80066f0:	2320      	movmi	r3, #32
 80066f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f6:	0713      	lsls	r3, r2, #28
 80066f8:	bf44      	itt	mi
 80066fa:	232b      	movmi	r3, #43	; 0x2b
 80066fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006700:	f89a 3000 	ldrb.w	r3, [sl]
 8006704:	2b2a      	cmp	r3, #42	; 0x2a
 8006706:	d015      	beq.n	8006734 <_vfiprintf_r+0x120>
 8006708:	9a07      	ldr	r2, [sp, #28]
 800670a:	4654      	mov	r4, sl
 800670c:	2000      	movs	r0, #0
 800670e:	f04f 0c0a 	mov.w	ip, #10
 8006712:	4621      	mov	r1, r4
 8006714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006718:	3b30      	subs	r3, #48	; 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d94d      	bls.n	80067ba <_vfiprintf_r+0x1a6>
 800671e:	b1b0      	cbz	r0, 800674e <_vfiprintf_r+0x13a>
 8006720:	9207      	str	r2, [sp, #28]
 8006722:	e014      	b.n	800674e <_vfiprintf_r+0x13a>
 8006724:	eba0 0308 	sub.w	r3, r0, r8
 8006728:	fa09 f303 	lsl.w	r3, r9, r3
 800672c:	4313      	orrs	r3, r2
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	46a2      	mov	sl, r4
 8006732:	e7d2      	b.n	80066da <_vfiprintf_r+0xc6>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	1d19      	adds	r1, r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	9103      	str	r1, [sp, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfbb      	ittet	lt
 8006740:	425b      	neglt	r3, r3
 8006742:	f042 0202 	orrlt.w	r2, r2, #2
 8006746:	9307      	strge	r3, [sp, #28]
 8006748:	9307      	strlt	r3, [sp, #28]
 800674a:	bfb8      	it	lt
 800674c:	9204      	strlt	r2, [sp, #16]
 800674e:	7823      	ldrb	r3, [r4, #0]
 8006750:	2b2e      	cmp	r3, #46	; 0x2e
 8006752:	d10c      	bne.n	800676e <_vfiprintf_r+0x15a>
 8006754:	7863      	ldrb	r3, [r4, #1]
 8006756:	2b2a      	cmp	r3, #42	; 0x2a
 8006758:	d134      	bne.n	80067c4 <_vfiprintf_r+0x1b0>
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	1d1a      	adds	r2, r3, #4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	9203      	str	r2, [sp, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	bfb8      	it	lt
 8006766:	f04f 33ff 	movlt.w	r3, #4294967295
 800676a:	3402      	adds	r4, #2
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006844 <_vfiprintf_r+0x230>
 8006772:	7821      	ldrb	r1, [r4, #0]
 8006774:	2203      	movs	r2, #3
 8006776:	4650      	mov	r0, sl
 8006778:	f7f9 fd52 	bl	8000220 <memchr>
 800677c:	b138      	cbz	r0, 800678e <_vfiprintf_r+0x17a>
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	eba0 000a 	sub.w	r0, r0, sl
 8006784:	2240      	movs	r2, #64	; 0x40
 8006786:	4082      	lsls	r2, r0
 8006788:	4313      	orrs	r3, r2
 800678a:	3401      	adds	r4, #1
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006792:	4829      	ldr	r0, [pc, #164]	; (8006838 <_vfiprintf_r+0x224>)
 8006794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006798:	2206      	movs	r2, #6
 800679a:	f7f9 fd41 	bl	8000220 <memchr>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d03f      	beq.n	8006822 <_vfiprintf_r+0x20e>
 80067a2:	4b26      	ldr	r3, [pc, #152]	; (800683c <_vfiprintf_r+0x228>)
 80067a4:	bb1b      	cbnz	r3, 80067ee <_vfiprintf_r+0x1da>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	3307      	adds	r3, #7
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	3308      	adds	r3, #8
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b4:	443b      	add	r3, r7
 80067b6:	9309      	str	r3, [sp, #36]	; 0x24
 80067b8:	e768      	b.n	800668c <_vfiprintf_r+0x78>
 80067ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80067be:	460c      	mov	r4, r1
 80067c0:	2001      	movs	r0, #1
 80067c2:	e7a6      	b.n	8006712 <_vfiprintf_r+0xfe>
 80067c4:	2300      	movs	r3, #0
 80067c6:	3401      	adds	r4, #1
 80067c8:	9305      	str	r3, [sp, #20]
 80067ca:	4619      	mov	r1, r3
 80067cc:	f04f 0c0a 	mov.w	ip, #10
 80067d0:	4620      	mov	r0, r4
 80067d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d6:	3a30      	subs	r2, #48	; 0x30
 80067d8:	2a09      	cmp	r2, #9
 80067da:	d903      	bls.n	80067e4 <_vfiprintf_r+0x1d0>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0c6      	beq.n	800676e <_vfiprintf_r+0x15a>
 80067e0:	9105      	str	r1, [sp, #20]
 80067e2:	e7c4      	b.n	800676e <_vfiprintf_r+0x15a>
 80067e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80067e8:	4604      	mov	r4, r0
 80067ea:	2301      	movs	r3, #1
 80067ec:	e7f0      	b.n	80067d0 <_vfiprintf_r+0x1bc>
 80067ee:	ab03      	add	r3, sp, #12
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	462a      	mov	r2, r5
 80067f4:	4b12      	ldr	r3, [pc, #72]	; (8006840 <_vfiprintf_r+0x22c>)
 80067f6:	a904      	add	r1, sp, #16
 80067f8:	4630      	mov	r0, r6
 80067fa:	f3af 8000 	nop.w
 80067fe:	4607      	mov	r7, r0
 8006800:	1c78      	adds	r0, r7, #1
 8006802:	d1d6      	bne.n	80067b2 <_vfiprintf_r+0x19e>
 8006804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006806:	07d9      	lsls	r1, r3, #31
 8006808:	d405      	bmi.n	8006816 <_vfiprintf_r+0x202>
 800680a:	89ab      	ldrh	r3, [r5, #12]
 800680c:	059a      	lsls	r2, r3, #22
 800680e:	d402      	bmi.n	8006816 <_vfiprintf_r+0x202>
 8006810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006812:	f7ff fda3 	bl	800635c <__retarget_lock_release_recursive>
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	065b      	lsls	r3, r3, #25
 800681a:	f53f af1d 	bmi.w	8006658 <_vfiprintf_r+0x44>
 800681e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006820:	e71c      	b.n	800665c <_vfiprintf_r+0x48>
 8006822:	ab03      	add	r3, sp, #12
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	462a      	mov	r2, r5
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <_vfiprintf_r+0x22c>)
 800682a:	a904      	add	r1, sp, #16
 800682c:	4630      	mov	r0, r6
 800682e:	f000 f879 	bl	8006924 <_printf_i>
 8006832:	e7e4      	b.n	80067fe <_vfiprintf_r+0x1ea>
 8006834:	08008bab 	.word	0x08008bab
 8006838:	08008bb5 	.word	0x08008bb5
 800683c:	00000000 	.word	0x00000000
 8006840:	080065f1 	.word	0x080065f1
 8006844:	08008bb1 	.word	0x08008bb1

08006848 <_printf_common>:
 8006848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	4616      	mov	r6, r2
 800684e:	4699      	mov	r9, r3
 8006850:	688a      	ldr	r2, [r1, #8]
 8006852:	690b      	ldr	r3, [r1, #16]
 8006854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006858:	4293      	cmp	r3, r2
 800685a:	bfb8      	it	lt
 800685c:	4613      	movlt	r3, r2
 800685e:	6033      	str	r3, [r6, #0]
 8006860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006864:	4607      	mov	r7, r0
 8006866:	460c      	mov	r4, r1
 8006868:	b10a      	cbz	r2, 800686e <_printf_common+0x26>
 800686a:	3301      	adds	r3, #1
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	6823      	ldr	r3, [r4, #0]
 8006870:	0699      	lsls	r1, r3, #26
 8006872:	bf42      	ittt	mi
 8006874:	6833      	ldrmi	r3, [r6, #0]
 8006876:	3302      	addmi	r3, #2
 8006878:	6033      	strmi	r3, [r6, #0]
 800687a:	6825      	ldr	r5, [r4, #0]
 800687c:	f015 0506 	ands.w	r5, r5, #6
 8006880:	d106      	bne.n	8006890 <_printf_common+0x48>
 8006882:	f104 0a19 	add.w	sl, r4, #25
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	6832      	ldr	r2, [r6, #0]
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	42ab      	cmp	r3, r5
 800688e:	dc26      	bgt.n	80068de <_printf_common+0x96>
 8006890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006894:	1e13      	subs	r3, r2, #0
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	bf18      	it	ne
 800689a:	2301      	movne	r3, #1
 800689c:	0692      	lsls	r2, r2, #26
 800689e:	d42b      	bmi.n	80068f8 <_printf_common+0xb0>
 80068a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a4:	4649      	mov	r1, r9
 80068a6:	4638      	mov	r0, r7
 80068a8:	47c0      	blx	r8
 80068aa:	3001      	adds	r0, #1
 80068ac:	d01e      	beq.n	80068ec <_printf_common+0xa4>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	6922      	ldr	r2, [r4, #16]
 80068b2:	f003 0306 	and.w	r3, r3, #6
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	bf02      	ittt	eq
 80068ba:	68e5      	ldreq	r5, [r4, #12]
 80068bc:	6833      	ldreq	r3, [r6, #0]
 80068be:	1aed      	subeq	r5, r5, r3
 80068c0:	68a3      	ldr	r3, [r4, #8]
 80068c2:	bf0c      	ite	eq
 80068c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068c8:	2500      	movne	r5, #0
 80068ca:	4293      	cmp	r3, r2
 80068cc:	bfc4      	itt	gt
 80068ce:	1a9b      	subgt	r3, r3, r2
 80068d0:	18ed      	addgt	r5, r5, r3
 80068d2:	2600      	movs	r6, #0
 80068d4:	341a      	adds	r4, #26
 80068d6:	42b5      	cmp	r5, r6
 80068d8:	d11a      	bne.n	8006910 <_printf_common+0xc8>
 80068da:	2000      	movs	r0, #0
 80068dc:	e008      	b.n	80068f0 <_printf_common+0xa8>
 80068de:	2301      	movs	r3, #1
 80068e0:	4652      	mov	r2, sl
 80068e2:	4649      	mov	r1, r9
 80068e4:	4638      	mov	r0, r7
 80068e6:	47c0      	blx	r8
 80068e8:	3001      	adds	r0, #1
 80068ea:	d103      	bne.n	80068f4 <_printf_common+0xac>
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f4:	3501      	adds	r5, #1
 80068f6:	e7c6      	b.n	8006886 <_printf_common+0x3e>
 80068f8:	18e1      	adds	r1, r4, r3
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	2030      	movs	r0, #48	; 0x30
 80068fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006902:	4422      	add	r2, r4
 8006904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800690c:	3302      	adds	r3, #2
 800690e:	e7c7      	b.n	80068a0 <_printf_common+0x58>
 8006910:	2301      	movs	r3, #1
 8006912:	4622      	mov	r2, r4
 8006914:	4649      	mov	r1, r9
 8006916:	4638      	mov	r0, r7
 8006918:	47c0      	blx	r8
 800691a:	3001      	adds	r0, #1
 800691c:	d0e6      	beq.n	80068ec <_printf_common+0xa4>
 800691e:	3601      	adds	r6, #1
 8006920:	e7d9      	b.n	80068d6 <_printf_common+0x8e>
	...

08006924 <_printf_i>:
 8006924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	7e0f      	ldrb	r7, [r1, #24]
 800692a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800692c:	2f78      	cmp	r7, #120	; 0x78
 800692e:	4691      	mov	r9, r2
 8006930:	4680      	mov	r8, r0
 8006932:	460c      	mov	r4, r1
 8006934:	469a      	mov	sl, r3
 8006936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800693a:	d807      	bhi.n	800694c <_printf_i+0x28>
 800693c:	2f62      	cmp	r7, #98	; 0x62
 800693e:	d80a      	bhi.n	8006956 <_printf_i+0x32>
 8006940:	2f00      	cmp	r7, #0
 8006942:	f000 80d4 	beq.w	8006aee <_printf_i+0x1ca>
 8006946:	2f58      	cmp	r7, #88	; 0x58
 8006948:	f000 80c0 	beq.w	8006acc <_printf_i+0x1a8>
 800694c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006954:	e03a      	b.n	80069cc <_printf_i+0xa8>
 8006956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800695a:	2b15      	cmp	r3, #21
 800695c:	d8f6      	bhi.n	800694c <_printf_i+0x28>
 800695e:	a101      	add	r1, pc, #4	; (adr r1, 8006964 <_printf_i+0x40>)
 8006960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006964:	080069bd 	.word	0x080069bd
 8006968:	080069d1 	.word	0x080069d1
 800696c:	0800694d 	.word	0x0800694d
 8006970:	0800694d 	.word	0x0800694d
 8006974:	0800694d 	.word	0x0800694d
 8006978:	0800694d 	.word	0x0800694d
 800697c:	080069d1 	.word	0x080069d1
 8006980:	0800694d 	.word	0x0800694d
 8006984:	0800694d 	.word	0x0800694d
 8006988:	0800694d 	.word	0x0800694d
 800698c:	0800694d 	.word	0x0800694d
 8006990:	08006ad5 	.word	0x08006ad5
 8006994:	080069fd 	.word	0x080069fd
 8006998:	08006a8f 	.word	0x08006a8f
 800699c:	0800694d 	.word	0x0800694d
 80069a0:	0800694d 	.word	0x0800694d
 80069a4:	08006af7 	.word	0x08006af7
 80069a8:	0800694d 	.word	0x0800694d
 80069ac:	080069fd 	.word	0x080069fd
 80069b0:	0800694d 	.word	0x0800694d
 80069b4:	0800694d 	.word	0x0800694d
 80069b8:	08006a97 	.word	0x08006a97
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	1d1a      	adds	r2, r3, #4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	602a      	str	r2, [r5, #0]
 80069c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069cc:	2301      	movs	r3, #1
 80069ce:	e09f      	b.n	8006b10 <_printf_i+0x1ec>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	682b      	ldr	r3, [r5, #0]
 80069d4:	0607      	lsls	r7, r0, #24
 80069d6:	f103 0104 	add.w	r1, r3, #4
 80069da:	6029      	str	r1, [r5, #0]
 80069dc:	d501      	bpl.n	80069e2 <_printf_i+0xbe>
 80069de:	681e      	ldr	r6, [r3, #0]
 80069e0:	e003      	b.n	80069ea <_printf_i+0xc6>
 80069e2:	0646      	lsls	r6, r0, #25
 80069e4:	d5fb      	bpl.n	80069de <_printf_i+0xba>
 80069e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	da03      	bge.n	80069f6 <_printf_i+0xd2>
 80069ee:	232d      	movs	r3, #45	; 0x2d
 80069f0:	4276      	negs	r6, r6
 80069f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f6:	485a      	ldr	r0, [pc, #360]	; (8006b60 <_printf_i+0x23c>)
 80069f8:	230a      	movs	r3, #10
 80069fa:	e012      	b.n	8006a22 <_printf_i+0xfe>
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	1d19      	adds	r1, r3, #4
 8006a02:	6029      	str	r1, [r5, #0]
 8006a04:	0605      	lsls	r5, r0, #24
 8006a06:	d501      	bpl.n	8006a0c <_printf_i+0xe8>
 8006a08:	681e      	ldr	r6, [r3, #0]
 8006a0a:	e002      	b.n	8006a12 <_printf_i+0xee>
 8006a0c:	0641      	lsls	r1, r0, #25
 8006a0e:	d5fb      	bpl.n	8006a08 <_printf_i+0xe4>
 8006a10:	881e      	ldrh	r6, [r3, #0]
 8006a12:	4853      	ldr	r0, [pc, #332]	; (8006b60 <_printf_i+0x23c>)
 8006a14:	2f6f      	cmp	r7, #111	; 0x6f
 8006a16:	bf0c      	ite	eq
 8006a18:	2308      	moveq	r3, #8
 8006a1a:	230a      	movne	r3, #10
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a22:	6865      	ldr	r5, [r4, #4]
 8006a24:	60a5      	str	r5, [r4, #8]
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	bfa2      	ittt	ge
 8006a2a:	6821      	ldrge	r1, [r4, #0]
 8006a2c:	f021 0104 	bicge.w	r1, r1, #4
 8006a30:	6021      	strge	r1, [r4, #0]
 8006a32:	b90e      	cbnz	r6, 8006a38 <_printf_i+0x114>
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	d04b      	beq.n	8006ad0 <_printf_i+0x1ac>
 8006a38:	4615      	mov	r5, r2
 8006a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a42:	5dc7      	ldrb	r7, [r0, r7]
 8006a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a48:	4637      	mov	r7, r6
 8006a4a:	42bb      	cmp	r3, r7
 8006a4c:	460e      	mov	r6, r1
 8006a4e:	d9f4      	bls.n	8006a3a <_printf_i+0x116>
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d10b      	bne.n	8006a6c <_printf_i+0x148>
 8006a54:	6823      	ldr	r3, [r4, #0]
 8006a56:	07de      	lsls	r6, r3, #31
 8006a58:	d508      	bpl.n	8006a6c <_printf_i+0x148>
 8006a5a:	6923      	ldr	r3, [r4, #16]
 8006a5c:	6861      	ldr	r1, [r4, #4]
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	bfde      	ittt	le
 8006a62:	2330      	movle	r3, #48	; 0x30
 8006a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a6c:	1b52      	subs	r2, r2, r5
 8006a6e:	6122      	str	r2, [r4, #16]
 8006a70:	f8cd a000 	str.w	sl, [sp]
 8006a74:	464b      	mov	r3, r9
 8006a76:	aa03      	add	r2, sp, #12
 8006a78:	4621      	mov	r1, r4
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	f7ff fee4 	bl	8006848 <_printf_common>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d14a      	bne.n	8006b1a <_printf_i+0x1f6>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	b004      	add	sp, #16
 8006a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	f043 0320 	orr.w	r3, r3, #32
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	4833      	ldr	r0, [pc, #204]	; (8006b64 <_printf_i+0x240>)
 8006a98:	2778      	movs	r7, #120	; 0x78
 8006a9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	6829      	ldr	r1, [r5, #0]
 8006aa2:	061f      	lsls	r7, r3, #24
 8006aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aa8:	d402      	bmi.n	8006ab0 <_printf_i+0x18c>
 8006aaa:	065f      	lsls	r7, r3, #25
 8006aac:	bf48      	it	mi
 8006aae:	b2b6      	uxthmi	r6, r6
 8006ab0:	07df      	lsls	r7, r3, #31
 8006ab2:	bf48      	it	mi
 8006ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab8:	6029      	str	r1, [r5, #0]
 8006aba:	bf48      	it	mi
 8006abc:	6023      	strmi	r3, [r4, #0]
 8006abe:	b91e      	cbnz	r6, 8006ac8 <_printf_i+0x1a4>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	f023 0320 	bic.w	r3, r3, #32
 8006ac6:	6023      	str	r3, [r4, #0]
 8006ac8:	2310      	movs	r3, #16
 8006aca:	e7a7      	b.n	8006a1c <_printf_i+0xf8>
 8006acc:	4824      	ldr	r0, [pc, #144]	; (8006b60 <_printf_i+0x23c>)
 8006ace:	e7e4      	b.n	8006a9a <_printf_i+0x176>
 8006ad0:	4615      	mov	r5, r2
 8006ad2:	e7bd      	b.n	8006a50 <_printf_i+0x12c>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	6826      	ldr	r6, [r4, #0]
 8006ad8:	6961      	ldr	r1, [r4, #20]
 8006ada:	1d18      	adds	r0, r3, #4
 8006adc:	6028      	str	r0, [r5, #0]
 8006ade:	0635      	lsls	r5, r6, #24
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_i+0x1c4>
 8006ae4:	6019      	str	r1, [r3, #0]
 8006ae6:	e002      	b.n	8006aee <_printf_i+0x1ca>
 8006ae8:	0670      	lsls	r0, r6, #25
 8006aea:	d5fb      	bpl.n	8006ae4 <_printf_i+0x1c0>
 8006aec:	8019      	strh	r1, [r3, #0]
 8006aee:	2300      	movs	r3, #0
 8006af0:	6123      	str	r3, [r4, #16]
 8006af2:	4615      	mov	r5, r2
 8006af4:	e7bc      	b.n	8006a70 <_printf_i+0x14c>
 8006af6:	682b      	ldr	r3, [r5, #0]
 8006af8:	1d1a      	adds	r2, r3, #4
 8006afa:	602a      	str	r2, [r5, #0]
 8006afc:	681d      	ldr	r5, [r3, #0]
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	2100      	movs	r1, #0
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7f9 fb8c 	bl	8000220 <memchr>
 8006b08:	b108      	cbz	r0, 8006b0e <_printf_i+0x1ea>
 8006b0a:	1b40      	subs	r0, r0, r5
 8006b0c:	6060      	str	r0, [r4, #4]
 8006b0e:	6863      	ldr	r3, [r4, #4]
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	2300      	movs	r3, #0
 8006b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b18:	e7aa      	b.n	8006a70 <_printf_i+0x14c>
 8006b1a:	6923      	ldr	r3, [r4, #16]
 8006b1c:	462a      	mov	r2, r5
 8006b1e:	4649      	mov	r1, r9
 8006b20:	4640      	mov	r0, r8
 8006b22:	47d0      	blx	sl
 8006b24:	3001      	adds	r0, #1
 8006b26:	d0ad      	beq.n	8006a84 <_printf_i+0x160>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	079b      	lsls	r3, r3, #30
 8006b2c:	d413      	bmi.n	8006b56 <_printf_i+0x232>
 8006b2e:	68e0      	ldr	r0, [r4, #12]
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	4298      	cmp	r0, r3
 8006b34:	bfb8      	it	lt
 8006b36:	4618      	movlt	r0, r3
 8006b38:	e7a6      	b.n	8006a88 <_printf_i+0x164>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	4649      	mov	r1, r9
 8006b40:	4640      	mov	r0, r8
 8006b42:	47d0      	blx	sl
 8006b44:	3001      	adds	r0, #1
 8006b46:	d09d      	beq.n	8006a84 <_printf_i+0x160>
 8006b48:	3501      	adds	r5, #1
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	9903      	ldr	r1, [sp, #12]
 8006b4e:	1a5b      	subs	r3, r3, r1
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	dcf2      	bgt.n	8006b3a <_printf_i+0x216>
 8006b54:	e7eb      	b.n	8006b2e <_printf_i+0x20a>
 8006b56:	2500      	movs	r5, #0
 8006b58:	f104 0619 	add.w	r6, r4, #25
 8006b5c:	e7f5      	b.n	8006b4a <_printf_i+0x226>
 8006b5e:	bf00      	nop
 8006b60:	08008bbc 	.word	0x08008bbc
 8006b64:	08008bcd 	.word	0x08008bcd

08006b68 <__swbuf_r>:
 8006b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6a:	460e      	mov	r6, r1
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	4605      	mov	r5, r0
 8006b70:	b118      	cbz	r0, 8006b7a <__swbuf_r+0x12>
 8006b72:	6a03      	ldr	r3, [r0, #32]
 8006b74:	b90b      	cbnz	r3, 8006b7a <__swbuf_r+0x12>
 8006b76:	f7ff faed 	bl	8006154 <__sinit>
 8006b7a:	69a3      	ldr	r3, [r4, #24]
 8006b7c:	60a3      	str	r3, [r4, #8]
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	071a      	lsls	r2, r3, #28
 8006b82:	d525      	bpl.n	8006bd0 <__swbuf_r+0x68>
 8006b84:	6923      	ldr	r3, [r4, #16]
 8006b86:	b31b      	cbz	r3, 8006bd0 <__swbuf_r+0x68>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	6922      	ldr	r2, [r4, #16]
 8006b8c:	1a98      	subs	r0, r3, r2
 8006b8e:	6963      	ldr	r3, [r4, #20]
 8006b90:	b2f6      	uxtb	r6, r6
 8006b92:	4283      	cmp	r3, r0
 8006b94:	4637      	mov	r7, r6
 8006b96:	dc04      	bgt.n	8006ba2 <__swbuf_r+0x3a>
 8006b98:	4621      	mov	r1, r4
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f7ff fcd0 	bl	8006540 <_fflush_r>
 8006ba0:	b9e0      	cbnz	r0, 8006bdc <__swbuf_r+0x74>
 8006ba2:	68a3      	ldr	r3, [r4, #8]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	60a3      	str	r3, [r4, #8]
 8006ba8:	6823      	ldr	r3, [r4, #0]
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	6022      	str	r2, [r4, #0]
 8006bae:	701e      	strb	r6, [r3, #0]
 8006bb0:	6962      	ldr	r2, [r4, #20]
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d004      	beq.n	8006bc2 <__swbuf_r+0x5a>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	07db      	lsls	r3, r3, #31
 8006bbc:	d506      	bpl.n	8006bcc <__swbuf_r+0x64>
 8006bbe:	2e0a      	cmp	r6, #10
 8006bc0:	d104      	bne.n	8006bcc <__swbuf_r+0x64>
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f7ff fcbb 	bl	8006540 <_fflush_r>
 8006bca:	b938      	cbnz	r0, 8006bdc <__swbuf_r+0x74>
 8006bcc:	4638      	mov	r0, r7
 8006bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f806 	bl	8006be4 <__swsetup_r>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d0d5      	beq.n	8006b88 <__swbuf_r+0x20>
 8006bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8006be0:	e7f4      	b.n	8006bcc <__swbuf_r+0x64>
	...

08006be4 <__swsetup_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4b2a      	ldr	r3, [pc, #168]	; (8006c90 <__swsetup_r+0xac>)
 8006be8:	4605      	mov	r5, r0
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	460c      	mov	r4, r1
 8006bee:	b118      	cbz	r0, 8006bf8 <__swsetup_r+0x14>
 8006bf0:	6a03      	ldr	r3, [r0, #32]
 8006bf2:	b90b      	cbnz	r3, 8006bf8 <__swsetup_r+0x14>
 8006bf4:	f7ff faae 	bl	8006154 <__sinit>
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bfe:	0718      	lsls	r0, r3, #28
 8006c00:	d422      	bmi.n	8006c48 <__swsetup_r+0x64>
 8006c02:	06d9      	lsls	r1, r3, #27
 8006c04:	d407      	bmi.n	8006c16 <__swsetup_r+0x32>
 8006c06:	2309      	movs	r3, #9
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	e034      	b.n	8006c80 <__swsetup_r+0x9c>
 8006c16:	0758      	lsls	r0, r3, #29
 8006c18:	d512      	bpl.n	8006c40 <__swsetup_r+0x5c>
 8006c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1c:	b141      	cbz	r1, 8006c30 <__swsetup_r+0x4c>
 8006c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c22:	4299      	cmp	r1, r3
 8006c24:	d002      	beq.n	8006c2c <__swsetup_r+0x48>
 8006c26:	4628      	mov	r0, r5
 8006c28:	f7ff fbb8 	bl	800639c <_free_r>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6363      	str	r3, [r4, #52]	; 0x34
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c36:	81a3      	strh	r3, [r4, #12]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	6923      	ldr	r3, [r4, #16]
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	f043 0308 	orr.w	r3, r3, #8
 8006c46:	81a3      	strh	r3, [r4, #12]
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	b94b      	cbnz	r3, 8006c60 <__swsetup_r+0x7c>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c56:	d003      	beq.n	8006c60 <__swsetup_r+0x7c>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 f884 	bl	8006d68 <__smakebuf_r>
 8006c60:	89a0      	ldrh	r0, [r4, #12]
 8006c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c66:	f010 0301 	ands.w	r3, r0, #1
 8006c6a:	d00a      	beq.n	8006c82 <__swsetup_r+0x9e>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60a3      	str	r3, [r4, #8]
 8006c70:	6963      	ldr	r3, [r4, #20]
 8006c72:	425b      	negs	r3, r3
 8006c74:	61a3      	str	r3, [r4, #24]
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	b943      	cbnz	r3, 8006c8c <__swsetup_r+0xa8>
 8006c7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c7e:	d1c4      	bne.n	8006c0a <__swsetup_r+0x26>
 8006c80:	bd38      	pop	{r3, r4, r5, pc}
 8006c82:	0781      	lsls	r1, r0, #30
 8006c84:	bf58      	it	pl
 8006c86:	6963      	ldrpl	r3, [r4, #20]
 8006c88:	60a3      	str	r3, [r4, #8]
 8006c8a:	e7f4      	b.n	8006c76 <__swsetup_r+0x92>
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7f7      	b.n	8006c80 <__swsetup_r+0x9c>
 8006c90:	200000b8 	.word	0x200000b8

08006c94 <_raise_r>:
 8006c94:	291f      	cmp	r1, #31
 8006c96:	b538      	push	{r3, r4, r5, lr}
 8006c98:	4604      	mov	r4, r0
 8006c9a:	460d      	mov	r5, r1
 8006c9c:	d904      	bls.n	8006ca8 <_raise_r+0x14>
 8006c9e:	2316      	movs	r3, #22
 8006ca0:	6003      	str	r3, [r0, #0]
 8006ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006caa:	b112      	cbz	r2, 8006cb2 <_raise_r+0x1e>
 8006cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cb0:	b94b      	cbnz	r3, 8006cc6 <_raise_r+0x32>
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 f830 	bl	8006d18 <_getpid_r>
 8006cb8:	462a      	mov	r2, r5
 8006cba:	4601      	mov	r1, r0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc2:	f000 b817 	b.w	8006cf4 <_kill_r>
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d00a      	beq.n	8006ce0 <_raise_r+0x4c>
 8006cca:	1c59      	adds	r1, r3, #1
 8006ccc:	d103      	bne.n	8006cd6 <_raise_r+0x42>
 8006cce:	2316      	movs	r3, #22
 8006cd0:	6003      	str	r3, [r0, #0]
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	e7e7      	b.n	8006ca6 <_raise_r+0x12>
 8006cd6:	2400      	movs	r4, #0
 8006cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cdc:	4628      	mov	r0, r5
 8006cde:	4798      	blx	r3
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e7e0      	b.n	8006ca6 <_raise_r+0x12>

08006ce4 <raise>:
 8006ce4:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <raise+0xc>)
 8006ce6:	4601      	mov	r1, r0
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	f7ff bfd3 	b.w	8006c94 <_raise_r>
 8006cee:	bf00      	nop
 8006cf0:	200000b8 	.word	0x200000b8

08006cf4 <_kill_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d07      	ldr	r5, [pc, #28]	; (8006d14 <_kill_r+0x20>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	4611      	mov	r1, r2
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	f7fc f8f7 	bl	8002ef4 <_kill>
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	d102      	bne.n	8006d10 <_kill_r+0x1c>
 8006d0a:	682b      	ldr	r3, [r5, #0]
 8006d0c:	b103      	cbz	r3, 8006d10 <_kill_r+0x1c>
 8006d0e:	6023      	str	r3, [r4, #0]
 8006d10:	bd38      	pop	{r3, r4, r5, pc}
 8006d12:	bf00      	nop
 8006d14:	200007e0 	.word	0x200007e0

08006d18 <_getpid_r>:
 8006d18:	f7fc b8e4 	b.w	8002ee4 <_getpid>

08006d1c <__swhatbuf_r>:
 8006d1c:	b570      	push	{r4, r5, r6, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2900      	cmp	r1, #0
 8006d26:	b096      	sub	sp, #88	; 0x58
 8006d28:	4615      	mov	r5, r2
 8006d2a:	461e      	mov	r6, r3
 8006d2c:	da0d      	bge.n	8006d4a <__swhatbuf_r+0x2e>
 8006d2e:	89a3      	ldrh	r3, [r4, #12]
 8006d30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d34:	f04f 0100 	mov.w	r1, #0
 8006d38:	bf0c      	ite	eq
 8006d3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d3e:	2340      	movne	r3, #64	; 0x40
 8006d40:	2000      	movs	r0, #0
 8006d42:	6031      	str	r1, [r6, #0]
 8006d44:	602b      	str	r3, [r5, #0]
 8006d46:	b016      	add	sp, #88	; 0x58
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
 8006d4a:	466a      	mov	r2, sp
 8006d4c:	f000 f848 	bl	8006de0 <_fstat_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	dbec      	blt.n	8006d2e <__swhatbuf_r+0x12>
 8006d54:	9901      	ldr	r1, [sp, #4]
 8006d56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d5e:	4259      	negs	r1, r3
 8006d60:	4159      	adcs	r1, r3
 8006d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d66:	e7eb      	b.n	8006d40 <__swhatbuf_r+0x24>

08006d68 <__smakebuf_r>:
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d6c:	079d      	lsls	r5, r3, #30
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	d507      	bpl.n	8006d84 <__smakebuf_r+0x1c>
 8006d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	6123      	str	r3, [r4, #16]
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	6163      	str	r3, [r4, #20]
 8006d80:	b002      	add	sp, #8
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	ab01      	add	r3, sp, #4
 8006d86:	466a      	mov	r2, sp
 8006d88:	f7ff ffc8 	bl	8006d1c <__swhatbuf_r>
 8006d8c:	9900      	ldr	r1, [sp, #0]
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff f889 	bl	8005ea8 <_malloc_r>
 8006d96:	b948      	cbnz	r0, 8006dac <__smakebuf_r+0x44>
 8006d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9c:	059a      	lsls	r2, r3, #22
 8006d9e:	d4ef      	bmi.n	8006d80 <__smakebuf_r+0x18>
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	e7e3      	b.n	8006d74 <__smakebuf_r+0xc>
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	6163      	str	r3, [r4, #20]
 8006dba:	9b01      	ldr	r3, [sp, #4]
 8006dbc:	6120      	str	r0, [r4, #16]
 8006dbe:	b15b      	cbz	r3, 8006dd8 <__smakebuf_r+0x70>
 8006dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f81d 	bl	8006e04 <_isatty_r>
 8006dca:	b128      	cbz	r0, 8006dd8 <__smakebuf_r+0x70>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	431d      	orrs	r5, r3
 8006ddc:	81a5      	strh	r5, [r4, #12]
 8006dde:	e7cf      	b.n	8006d80 <__smakebuf_r+0x18>

08006de0 <_fstat_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d07      	ldr	r5, [pc, #28]	; (8006e00 <_fstat_r+0x20>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	f7fc f8e0 	bl	8002fb2 <_fstat>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d102      	bne.n	8006dfc <_fstat_r+0x1c>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	b103      	cbz	r3, 8006dfc <_fstat_r+0x1c>
 8006dfa:	6023      	str	r3, [r4, #0]
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop
 8006e00:	200007e0 	.word	0x200007e0

08006e04 <_isatty_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	; (8006e20 <_isatty_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fc f8df 	bl	8002fd2 <_isatty>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_isatty_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_isatty_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	200007e0 	.word	0x200007e0
 8006e24:	00000000 	.word	0x00000000

08006e28 <exp>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	ed2d 8b02 	vpush	{d8}
 8006e2e:	ec55 4b10 	vmov	r4, r5, d0
 8006e32:	f000 f905 	bl	8007040 <__ieee754_exp>
 8006e36:	eeb0 8a40 	vmov.f32	s16, s0
 8006e3a:	eef0 8a60 	vmov.f32	s17, s1
 8006e3e:	ec45 4b10 	vmov	d0, r4, r5
 8006e42:	f000 f8ef 	bl	8007024 <finite>
 8006e46:	b168      	cbz	r0, 8006e64 <exp+0x3c>
 8006e48:	a317      	add	r3, pc, #92	; (adr r3, 8006ea8 <exp+0x80>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	4620      	mov	r0, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	f7f9 fe81 	bl	8000b58 <__aeabi_dcmpgt>
 8006e56:	b160      	cbz	r0, 8006e72 <exp+0x4a>
 8006e58:	f7ff fa54 	bl	8006304 <__errno>
 8006e5c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8006e98 <exp+0x70>
 8006e60:	2322      	movs	r3, #34	; 0x22
 8006e62:	6003      	str	r3, [r0, #0]
 8006e64:	eeb0 0a48 	vmov.f32	s0, s16
 8006e68:	eef0 0a68 	vmov.f32	s1, s17
 8006e6c:	ecbd 8b02 	vpop	{d8}
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
 8006e72:	a30f      	add	r3, pc, #60	; (adr r3, 8006eb0 <exp+0x88>)
 8006e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e78:	4620      	mov	r0, r4
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	f7f9 fe4e 	bl	8000b1c <__aeabi_dcmplt>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d0ef      	beq.n	8006e64 <exp+0x3c>
 8006e84:	f7ff fa3e 	bl	8006304 <__errno>
 8006e88:	2322      	movs	r3, #34	; 0x22
 8006e8a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8006ea0 <exp+0x78>
 8006e8e:	6003      	str	r3, [r0, #0]
 8006e90:	e7e8      	b.n	8006e64 <exp+0x3c>
 8006e92:	bf00      	nop
 8006e94:	f3af 8000 	nop.w
 8006e98:	00000000 	.word	0x00000000
 8006e9c:	7ff00000 	.word	0x7ff00000
	...
 8006ea8:	fefa39ef 	.word	0xfefa39ef
 8006eac:	40862e42 	.word	0x40862e42
 8006eb0:	d52d3051 	.word	0xd52d3051
 8006eb4:	c0874910 	.word	0xc0874910

08006eb8 <pow>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	ed2d 8b02 	vpush	{d8}
 8006ebe:	eeb0 8a40 	vmov.f32	s16, s0
 8006ec2:	eef0 8a60 	vmov.f32	s17, s1
 8006ec6:	ec55 4b11 	vmov	r4, r5, d1
 8006eca:	f000 fa3d 	bl	8007348 <__ieee754_pow>
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	ec57 6b10 	vmov	r6, r7, d0
 8006eda:	f7f9 fe47 	bl	8000b6c <__aeabi_dcmpun>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d13b      	bne.n	8006f5a <pow+0xa2>
 8006ee2:	ec51 0b18 	vmov	r0, r1, d8
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f7f9 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8006eee:	b1b8      	cbz	r0, 8006f20 <pow+0x68>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 fe06 	bl	8000b08 <__aeabi_dcmpeq>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d146      	bne.n	8006f8e <pow+0xd6>
 8006f00:	ec45 4b10 	vmov	d0, r4, r5
 8006f04:	f000 f88e 	bl	8007024 <finite>
 8006f08:	b338      	cbz	r0, 8006f5a <pow+0xa2>
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4620      	mov	r0, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	f7f9 fe03 	bl	8000b1c <__aeabi_dcmplt>
 8006f16:	b300      	cbz	r0, 8006f5a <pow+0xa2>
 8006f18:	f7ff f9f4 	bl	8006304 <__errno>
 8006f1c:	2322      	movs	r3, #34	; 0x22
 8006f1e:	e01b      	b.n	8006f58 <pow+0xa0>
 8006f20:	ec47 6b10 	vmov	d0, r6, r7
 8006f24:	f000 f87e 	bl	8007024 <finite>
 8006f28:	b9e0      	cbnz	r0, 8006f64 <pow+0xac>
 8006f2a:	eeb0 0a48 	vmov.f32	s0, s16
 8006f2e:	eef0 0a68 	vmov.f32	s1, s17
 8006f32:	f000 f877 	bl	8007024 <finite>
 8006f36:	b1a8      	cbz	r0, 8006f64 <pow+0xac>
 8006f38:	ec45 4b10 	vmov	d0, r4, r5
 8006f3c:	f000 f872 	bl	8007024 <finite>
 8006f40:	b180      	cbz	r0, 8006f64 <pow+0xac>
 8006f42:	4632      	mov	r2, r6
 8006f44:	463b      	mov	r3, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fe0f 	bl	8000b6c <__aeabi_dcmpun>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0e2      	beq.n	8006f18 <pow+0x60>
 8006f52:	f7ff f9d7 	bl	8006304 <__errno>
 8006f56:	2321      	movs	r3, #33	; 0x21
 8006f58:	6003      	str	r3, [r0, #0]
 8006f5a:	ecbd 8b02 	vpop	{d8}
 8006f5e:	ec47 6b10 	vmov	d0, r6, r7
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 fdcc 	bl	8000b08 <__aeabi_dcmpeq>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d0f2      	beq.n	8006f5a <pow+0xa2>
 8006f74:	eeb0 0a48 	vmov.f32	s0, s16
 8006f78:	eef0 0a68 	vmov.f32	s1, s17
 8006f7c:	f000 f852 	bl	8007024 <finite>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d0ea      	beq.n	8006f5a <pow+0xa2>
 8006f84:	ec45 4b10 	vmov	d0, r4, r5
 8006f88:	f000 f84c 	bl	8007024 <finite>
 8006f8c:	e7c3      	b.n	8006f16 <pow+0x5e>
 8006f8e:	4f01      	ldr	r7, [pc, #4]	; (8006f94 <pow+0xdc>)
 8006f90:	2600      	movs	r6, #0
 8006f92:	e7e2      	b.n	8006f5a <pow+0xa2>
 8006f94:	3ff00000 	.word	0x3ff00000

08006f98 <sinf>:
 8006f98:	ee10 3a10 	vmov	r3, s0
 8006f9c:	b507      	push	{r0, r1, r2, lr}
 8006f9e:	4a1f      	ldr	r2, [pc, #124]	; (800701c <sinf+0x84>)
 8006fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	dc07      	bgt.n	8006fb8 <sinf+0x20>
 8006fa8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007020 <sinf+0x88>
 8006fac:	2000      	movs	r0, #0
 8006fae:	b003      	add	sp, #12
 8006fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb4:	f000 bf5a 	b.w	8007e6c <__kernel_sinf>
 8006fb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006fbc:	db04      	blt.n	8006fc8 <sinf+0x30>
 8006fbe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006fc2:	b003      	add	sp, #12
 8006fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fc8:	4668      	mov	r0, sp
 8006fca:	f000 ff97 	bl	8007efc <__ieee754_rem_pio2f>
 8006fce:	f000 0003 	and.w	r0, r0, #3
 8006fd2:	2801      	cmp	r0, #1
 8006fd4:	d00a      	beq.n	8006fec <sinf+0x54>
 8006fd6:	2802      	cmp	r0, #2
 8006fd8:	d00f      	beq.n	8006ffa <sinf+0x62>
 8006fda:	b9c0      	cbnz	r0, 800700e <sinf+0x76>
 8006fdc:	eddd 0a01 	vldr	s1, [sp, #4]
 8006fe0:	ed9d 0a00 	vldr	s0, [sp]
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	f000 ff41 	bl	8007e6c <__kernel_sinf>
 8006fea:	e7ea      	b.n	8006fc2 <sinf+0x2a>
 8006fec:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ff0:	ed9d 0a00 	vldr	s0, [sp]
 8006ff4:	f000 fedc 	bl	8007db0 <__kernel_cosf>
 8006ff8:	e7e3      	b.n	8006fc2 <sinf+0x2a>
 8006ffa:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ffe:	ed9d 0a00 	vldr	s0, [sp]
 8007002:	2001      	movs	r0, #1
 8007004:	f000 ff32 	bl	8007e6c <__kernel_sinf>
 8007008:	eeb1 0a40 	vneg.f32	s0, s0
 800700c:	e7d9      	b.n	8006fc2 <sinf+0x2a>
 800700e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007012:	ed9d 0a00 	vldr	s0, [sp]
 8007016:	f000 fecb 	bl	8007db0 <__kernel_cosf>
 800701a:	e7f5      	b.n	8007008 <sinf+0x70>
 800701c:	3f490fd8 	.word	0x3f490fd8
 8007020:	00000000 	.word	0x00000000

08007024 <finite>:
 8007024:	b082      	sub	sp, #8
 8007026:	ed8d 0b00 	vstr	d0, [sp]
 800702a:	9801      	ldr	r0, [sp, #4]
 800702c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007030:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007034:	0fc0      	lsrs	r0, r0, #31
 8007036:	b002      	add	sp, #8
 8007038:	4770      	bx	lr
 800703a:	0000      	movs	r0, r0
 800703c:	0000      	movs	r0, r0
	...

08007040 <__ieee754_exp>:
 8007040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	ec55 4b10 	vmov	r4, r5, d0
 8007048:	49b5      	ldr	r1, [pc, #724]	; (8007320 <__ieee754_exp+0x2e0>)
 800704a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800704e:	428a      	cmp	r2, r1
 8007050:	ed2d 8b04 	vpush	{d8-d9}
 8007054:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007058:	d93b      	bls.n	80070d2 <__ieee754_exp+0x92>
 800705a:	49b2      	ldr	r1, [pc, #712]	; (8007324 <__ieee754_exp+0x2e4>)
 800705c:	428a      	cmp	r2, r1
 800705e:	d916      	bls.n	800708e <__ieee754_exp+0x4e>
 8007060:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007064:	4323      	orrs	r3, r4
 8007066:	ee10 2a10 	vmov	r2, s0
 800706a:	d007      	beq.n	800707c <__ieee754_exp+0x3c>
 800706c:	462b      	mov	r3, r5
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7f9 f92b 	bl	80002cc <__adddf3>
 8007076:	4604      	mov	r4, r0
 8007078:	460d      	mov	r5, r1
 800707a:	e002      	b.n	8007082 <__ieee754_exp+0x42>
 800707c:	b10e      	cbz	r6, 8007082 <__ieee754_exp+0x42>
 800707e:	2400      	movs	r4, #0
 8007080:	2500      	movs	r5, #0
 8007082:	ecbd 8b04 	vpop	{d8-d9}
 8007086:	ec45 4b10 	vmov	d0, r4, r5
 800708a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708e:	a38e      	add	r3, pc, #568	; (adr r3, 80072c8 <__ieee754_exp+0x288>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	ee10 0a10 	vmov	r0, s0
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 fd5d 	bl	8000b58 <__aeabi_dcmpgt>
 800709e:	4607      	mov	r7, r0
 80070a0:	b130      	cbz	r0, 80070b0 <__ieee754_exp+0x70>
 80070a2:	ecbd 8b04 	vpop	{d8-d9}
 80070a6:	2000      	movs	r0, #0
 80070a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	f001 b901 	b.w	80082b2 <__math_oflow>
 80070b0:	a387      	add	r3, pc, #540	; (adr r3, 80072d0 <__ieee754_exp+0x290>)
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	4620      	mov	r0, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7f9 fd2f 	bl	8000b1c <__aeabi_dcmplt>
 80070be:	2800      	cmp	r0, #0
 80070c0:	f000 808b 	beq.w	80071da <__ieee754_exp+0x19a>
 80070c4:	ecbd 8b04 	vpop	{d8-d9}
 80070c8:	4638      	mov	r0, r7
 80070ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ce:	f001 b8e7 	b.w	80082a0 <__math_uflow>
 80070d2:	4b95      	ldr	r3, [pc, #596]	; (8007328 <__ieee754_exp+0x2e8>)
 80070d4:	429a      	cmp	r2, r3
 80070d6:	f240 80ac 	bls.w	8007232 <__ieee754_exp+0x1f2>
 80070da:	4b94      	ldr	r3, [pc, #592]	; (800732c <__ieee754_exp+0x2ec>)
 80070dc:	429a      	cmp	r2, r3
 80070de:	d87c      	bhi.n	80071da <__ieee754_exp+0x19a>
 80070e0:	4b93      	ldr	r3, [pc, #588]	; (8007330 <__ieee754_exp+0x2f0>)
 80070e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80070e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ea:	ee10 0a10 	vmov	r0, s0
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 f8ea 	bl	80002c8 <__aeabi_dsub>
 80070f4:	4b8f      	ldr	r3, [pc, #572]	; (8007334 <__ieee754_exp+0x2f4>)
 80070f6:	00f7      	lsls	r7, r6, #3
 80070f8:	443b      	add	r3, r7
 80070fa:	ed93 7b00 	vldr	d7, [r3]
 80070fe:	f1c6 0a01 	rsb	sl, r6, #1
 8007102:	4680      	mov	r8, r0
 8007104:	4689      	mov	r9, r1
 8007106:	ebaa 0a06 	sub.w	sl, sl, r6
 800710a:	eeb0 8a47 	vmov.f32	s16, s14
 800710e:	eef0 8a67 	vmov.f32	s17, s15
 8007112:	ec53 2b18 	vmov	r2, r3, d8
 8007116:	4640      	mov	r0, r8
 8007118:	4649      	mov	r1, r9
 800711a:	f7f9 f8d5 	bl	80002c8 <__aeabi_dsub>
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	4622      	mov	r2, r4
 8007124:	462b      	mov	r3, r5
 8007126:	4620      	mov	r0, r4
 8007128:	4629      	mov	r1, r5
 800712a:	f7f9 fa85 	bl	8000638 <__aeabi_dmul>
 800712e:	a36a      	add	r3, pc, #424	; (adr r3, 80072d8 <__ieee754_exp+0x298>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	f7f9 fa7e 	bl	8000638 <__aeabi_dmul>
 800713c:	a368      	add	r3, pc, #416	; (adr r3, 80072e0 <__ieee754_exp+0x2a0>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 f8c1 	bl	80002c8 <__aeabi_dsub>
 8007146:	4632      	mov	r2, r6
 8007148:	463b      	mov	r3, r7
 800714a:	f7f9 fa75 	bl	8000638 <__aeabi_dmul>
 800714e:	a366      	add	r3, pc, #408	; (adr r3, 80072e8 <__ieee754_exp+0x2a8>)
 8007150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007154:	f7f9 f8ba 	bl	80002cc <__adddf3>
 8007158:	4632      	mov	r2, r6
 800715a:	463b      	mov	r3, r7
 800715c:	f7f9 fa6c 	bl	8000638 <__aeabi_dmul>
 8007160:	a363      	add	r3, pc, #396	; (adr r3, 80072f0 <__ieee754_exp+0x2b0>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	f7f9 f8af 	bl	80002c8 <__aeabi_dsub>
 800716a:	4632      	mov	r2, r6
 800716c:	463b      	mov	r3, r7
 800716e:	f7f9 fa63 	bl	8000638 <__aeabi_dmul>
 8007172:	a361      	add	r3, pc, #388	; (adr r3, 80072f8 <__ieee754_exp+0x2b8>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f7f9 f8a8 	bl	80002cc <__adddf3>
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	f7f9 fa5a 	bl	8000638 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4620      	mov	r0, r4
 800718a:	4629      	mov	r1, r5
 800718c:	f7f9 f89c 	bl	80002c8 <__aeabi_dsub>
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	4606      	mov	r6, r0
 8007196:	460f      	mov	r7, r1
 8007198:	4620      	mov	r0, r4
 800719a:	4629      	mov	r1, r5
 800719c:	f7f9 fa4c 	bl	8000638 <__aeabi_dmul>
 80071a0:	ec41 0b19 	vmov	d9, r0, r1
 80071a4:	f1ba 0f00 	cmp.w	sl, #0
 80071a8:	d15d      	bne.n	8007266 <__ieee754_exp+0x226>
 80071aa:	2200      	movs	r2, #0
 80071ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071b0:	4630      	mov	r0, r6
 80071b2:	4639      	mov	r1, r7
 80071b4:	f7f9 f888 	bl	80002c8 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	ec51 0b19 	vmov	r0, r1, d9
 80071c0:	f7f9 fb64 	bl	800088c <__aeabi_ddiv>
 80071c4:	4622      	mov	r2, r4
 80071c6:	462b      	mov	r3, r5
 80071c8:	f7f9 f87e 	bl	80002c8 <__aeabi_dsub>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	2000      	movs	r0, #0
 80071d2:	4959      	ldr	r1, [pc, #356]	; (8007338 <__ieee754_exp+0x2f8>)
 80071d4:	f7f9 f878 	bl	80002c8 <__aeabi_dsub>
 80071d8:	e74d      	b.n	8007076 <__ieee754_exp+0x36>
 80071da:	4b58      	ldr	r3, [pc, #352]	; (800733c <__ieee754_exp+0x2fc>)
 80071dc:	4620      	mov	r0, r4
 80071de:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80071e2:	4629      	mov	r1, r5
 80071e4:	a346      	add	r3, pc, #280	; (adr r3, 8007300 <__ieee754_exp+0x2c0>)
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	f7f9 fa25 	bl	8000638 <__aeabi_dmul>
 80071ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071f2:	f7f9 f86b 	bl	80002cc <__adddf3>
 80071f6:	f7f9 fccf 	bl	8000b98 <__aeabi_d2iz>
 80071fa:	4682      	mov	sl, r0
 80071fc:	f7f9 f9b2 	bl	8000564 <__aeabi_i2d>
 8007200:	a341      	add	r3, pc, #260	; (adr r3, 8007308 <__ieee754_exp+0x2c8>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	4606      	mov	r6, r0
 8007208:	460f      	mov	r7, r1
 800720a:	f7f9 fa15 	bl	8000638 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 f857 	bl	80002c8 <__aeabi_dsub>
 800721a:	a33d      	add	r3, pc, #244	; (adr r3, 8007310 <__ieee754_exp+0x2d0>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	4680      	mov	r8, r0
 8007222:	4689      	mov	r9, r1
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f9 fa06 	bl	8000638 <__aeabi_dmul>
 800722c:	ec41 0b18 	vmov	d8, r0, r1
 8007230:	e76f      	b.n	8007112 <__ieee754_exp+0xd2>
 8007232:	4b43      	ldr	r3, [pc, #268]	; (8007340 <__ieee754_exp+0x300>)
 8007234:	429a      	cmp	r2, r3
 8007236:	d811      	bhi.n	800725c <__ieee754_exp+0x21c>
 8007238:	a337      	add	r3, pc, #220	; (adr r3, 8007318 <__ieee754_exp+0x2d8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	ee10 0a10 	vmov	r0, s0
 8007242:	4629      	mov	r1, r5
 8007244:	f7f9 f842 	bl	80002cc <__adddf3>
 8007248:	4b3b      	ldr	r3, [pc, #236]	; (8007338 <__ieee754_exp+0x2f8>)
 800724a:	2200      	movs	r2, #0
 800724c:	f7f9 fc84 	bl	8000b58 <__aeabi_dcmpgt>
 8007250:	b138      	cbz	r0, 8007262 <__ieee754_exp+0x222>
 8007252:	4b39      	ldr	r3, [pc, #228]	; (8007338 <__ieee754_exp+0x2f8>)
 8007254:	2200      	movs	r2, #0
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	e70a      	b.n	8007072 <__ieee754_exp+0x32>
 800725c:	f04f 0a00 	mov.w	sl, #0
 8007260:	e75f      	b.n	8007122 <__ieee754_exp+0xe2>
 8007262:	4682      	mov	sl, r0
 8007264:	e75d      	b.n	8007122 <__ieee754_exp+0xe2>
 8007266:	4632      	mov	r2, r6
 8007268:	463b      	mov	r3, r7
 800726a:	2000      	movs	r0, #0
 800726c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007270:	f7f9 f82a 	bl	80002c8 <__aeabi_dsub>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	ec51 0b19 	vmov	r0, r1, d9
 800727c:	f7f9 fb06 	bl	800088c <__aeabi_ddiv>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	ec51 0b18 	vmov	r0, r1, d8
 8007288:	f7f9 f81e 	bl	80002c8 <__aeabi_dsub>
 800728c:	4642      	mov	r2, r8
 800728e:	464b      	mov	r3, r9
 8007290:	f7f9 f81a 	bl	80002c8 <__aeabi_dsub>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	2000      	movs	r0, #0
 800729a:	4927      	ldr	r1, [pc, #156]	; (8007338 <__ieee754_exp+0x2f8>)
 800729c:	f7f9 f814 	bl	80002c8 <__aeabi_dsub>
 80072a0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80072a4:	4592      	cmp	sl, r2
 80072a6:	db02      	blt.n	80072ae <__ieee754_exp+0x26e>
 80072a8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80072ac:	e6e3      	b.n	8007076 <__ieee754_exp+0x36>
 80072ae:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80072b2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80072b6:	2200      	movs	r2, #0
 80072b8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80072bc:	f7f9 f9bc 	bl	8000638 <__aeabi_dmul>
 80072c0:	e6d9      	b.n	8007076 <__ieee754_exp+0x36>
 80072c2:	bf00      	nop
 80072c4:	f3af 8000 	nop.w
 80072c8:	fefa39ef 	.word	0xfefa39ef
 80072cc:	40862e42 	.word	0x40862e42
 80072d0:	d52d3051 	.word	0xd52d3051
 80072d4:	c0874910 	.word	0xc0874910
 80072d8:	72bea4d0 	.word	0x72bea4d0
 80072dc:	3e663769 	.word	0x3e663769
 80072e0:	c5d26bf1 	.word	0xc5d26bf1
 80072e4:	3ebbbd41 	.word	0x3ebbbd41
 80072e8:	af25de2c 	.word	0xaf25de2c
 80072ec:	3f11566a 	.word	0x3f11566a
 80072f0:	16bebd93 	.word	0x16bebd93
 80072f4:	3f66c16c 	.word	0x3f66c16c
 80072f8:	5555553e 	.word	0x5555553e
 80072fc:	3fc55555 	.word	0x3fc55555
 8007300:	652b82fe 	.word	0x652b82fe
 8007304:	3ff71547 	.word	0x3ff71547
 8007308:	fee00000 	.word	0xfee00000
 800730c:	3fe62e42 	.word	0x3fe62e42
 8007310:	35793c76 	.word	0x35793c76
 8007314:	3dea39ef 	.word	0x3dea39ef
 8007318:	8800759c 	.word	0x8800759c
 800731c:	7e37e43c 	.word	0x7e37e43c
 8007320:	40862e41 	.word	0x40862e41
 8007324:	7fefffff 	.word	0x7fefffff
 8007328:	3fd62e42 	.word	0x3fd62e42
 800732c:	3ff0a2b1 	.word	0x3ff0a2b1
 8007330:	08008bf0 	.word	0x08008bf0
 8007334:	08008c00 	.word	0x08008c00
 8007338:	3ff00000 	.word	0x3ff00000
 800733c:	08008be0 	.word	0x08008be0
 8007340:	3defffff 	.word	0x3defffff
 8007344:	00000000 	.word	0x00000000

08007348 <__ieee754_pow>:
 8007348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734c:	ed2d 8b06 	vpush	{d8-d10}
 8007350:	b089      	sub	sp, #36	; 0x24
 8007352:	ed8d 1b00 	vstr	d1, [sp]
 8007356:	e9dd 2900 	ldrd	r2, r9, [sp]
 800735a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800735e:	ea58 0102 	orrs.w	r1, r8, r2
 8007362:	ec57 6b10 	vmov	r6, r7, d0
 8007366:	d115      	bne.n	8007394 <__ieee754_pow+0x4c>
 8007368:	19b3      	adds	r3, r6, r6
 800736a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800736e:	4152      	adcs	r2, r2
 8007370:	4299      	cmp	r1, r3
 8007372:	4b89      	ldr	r3, [pc, #548]	; (8007598 <__ieee754_pow+0x250>)
 8007374:	4193      	sbcs	r3, r2
 8007376:	f080 84d1 	bcs.w	8007d1c <__ieee754_pow+0x9d4>
 800737a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800737e:	4630      	mov	r0, r6
 8007380:	4639      	mov	r1, r7
 8007382:	f7f8 ffa3 	bl	80002cc <__adddf3>
 8007386:	ec41 0b10 	vmov	d0, r0, r1
 800738a:	b009      	add	sp, #36	; 0x24
 800738c:	ecbd 8b06 	vpop	{d8-d10}
 8007390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007394:	4b81      	ldr	r3, [pc, #516]	; (800759c <__ieee754_pow+0x254>)
 8007396:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800739a:	429c      	cmp	r4, r3
 800739c:	ee10 aa10 	vmov	sl, s0
 80073a0:	463d      	mov	r5, r7
 80073a2:	dc06      	bgt.n	80073b2 <__ieee754_pow+0x6a>
 80073a4:	d101      	bne.n	80073aa <__ieee754_pow+0x62>
 80073a6:	2e00      	cmp	r6, #0
 80073a8:	d1e7      	bne.n	800737a <__ieee754_pow+0x32>
 80073aa:	4598      	cmp	r8, r3
 80073ac:	dc01      	bgt.n	80073b2 <__ieee754_pow+0x6a>
 80073ae:	d10f      	bne.n	80073d0 <__ieee754_pow+0x88>
 80073b0:	b172      	cbz	r2, 80073d0 <__ieee754_pow+0x88>
 80073b2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80073b6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80073ba:	ea55 050a 	orrs.w	r5, r5, sl
 80073be:	d1dc      	bne.n	800737a <__ieee754_pow+0x32>
 80073c0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80073c4:	18db      	adds	r3, r3, r3
 80073c6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80073ca:	4152      	adcs	r2, r2
 80073cc:	429d      	cmp	r5, r3
 80073ce:	e7d0      	b.n	8007372 <__ieee754_pow+0x2a>
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	da3b      	bge.n	800744c <__ieee754_pow+0x104>
 80073d4:	4b72      	ldr	r3, [pc, #456]	; (80075a0 <__ieee754_pow+0x258>)
 80073d6:	4598      	cmp	r8, r3
 80073d8:	dc51      	bgt.n	800747e <__ieee754_pow+0x136>
 80073da:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80073de:	4598      	cmp	r8, r3
 80073e0:	f340 84ab 	ble.w	8007d3a <__ieee754_pow+0x9f2>
 80073e4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80073e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073ec:	2b14      	cmp	r3, #20
 80073ee:	dd0f      	ble.n	8007410 <__ieee754_pow+0xc8>
 80073f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80073f4:	fa22 f103 	lsr.w	r1, r2, r3
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	4293      	cmp	r3, r2
 80073fe:	f040 849c 	bne.w	8007d3a <__ieee754_pow+0x9f2>
 8007402:	f001 0101 	and.w	r1, r1, #1
 8007406:	f1c1 0302 	rsb	r3, r1, #2
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	b182      	cbz	r2, 8007430 <__ieee754_pow+0xe8>
 800740e:	e05f      	b.n	80074d0 <__ieee754_pow+0x188>
 8007410:	2a00      	cmp	r2, #0
 8007412:	d15b      	bne.n	80074cc <__ieee754_pow+0x184>
 8007414:	f1c3 0314 	rsb	r3, r3, #20
 8007418:	fa48 f103 	asr.w	r1, r8, r3
 800741c:	fa01 f303 	lsl.w	r3, r1, r3
 8007420:	4543      	cmp	r3, r8
 8007422:	f040 8487 	bne.w	8007d34 <__ieee754_pow+0x9ec>
 8007426:	f001 0101 	and.w	r1, r1, #1
 800742a:	f1c1 0302 	rsb	r3, r1, #2
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	4b5c      	ldr	r3, [pc, #368]	; (80075a4 <__ieee754_pow+0x25c>)
 8007432:	4598      	cmp	r8, r3
 8007434:	d132      	bne.n	800749c <__ieee754_pow+0x154>
 8007436:	f1b9 0f00 	cmp.w	r9, #0
 800743a:	f280 8477 	bge.w	8007d2c <__ieee754_pow+0x9e4>
 800743e:	4959      	ldr	r1, [pc, #356]	; (80075a4 <__ieee754_pow+0x25c>)
 8007440:	4632      	mov	r2, r6
 8007442:	463b      	mov	r3, r7
 8007444:	2000      	movs	r0, #0
 8007446:	f7f9 fa21 	bl	800088c <__aeabi_ddiv>
 800744a:	e79c      	b.n	8007386 <__ieee754_pow+0x3e>
 800744c:	2300      	movs	r3, #0
 800744e:	9304      	str	r3, [sp, #16]
 8007450:	2a00      	cmp	r2, #0
 8007452:	d13d      	bne.n	80074d0 <__ieee754_pow+0x188>
 8007454:	4b51      	ldr	r3, [pc, #324]	; (800759c <__ieee754_pow+0x254>)
 8007456:	4598      	cmp	r8, r3
 8007458:	d1ea      	bne.n	8007430 <__ieee754_pow+0xe8>
 800745a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800745e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007462:	ea53 030a 	orrs.w	r3, r3, sl
 8007466:	f000 8459 	beq.w	8007d1c <__ieee754_pow+0x9d4>
 800746a:	4b4f      	ldr	r3, [pc, #316]	; (80075a8 <__ieee754_pow+0x260>)
 800746c:	429c      	cmp	r4, r3
 800746e:	dd08      	ble.n	8007482 <__ieee754_pow+0x13a>
 8007470:	f1b9 0f00 	cmp.w	r9, #0
 8007474:	f2c0 8456 	blt.w	8007d24 <__ieee754_pow+0x9dc>
 8007478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800747c:	e783      	b.n	8007386 <__ieee754_pow+0x3e>
 800747e:	2302      	movs	r3, #2
 8007480:	e7e5      	b.n	800744e <__ieee754_pow+0x106>
 8007482:	f1b9 0f00 	cmp.w	r9, #0
 8007486:	f04f 0000 	mov.w	r0, #0
 800748a:	f04f 0100 	mov.w	r1, #0
 800748e:	f6bf af7a 	bge.w	8007386 <__ieee754_pow+0x3e>
 8007492:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007496:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800749a:	e774      	b.n	8007386 <__ieee754_pow+0x3e>
 800749c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80074a0:	d106      	bne.n	80074b0 <__ieee754_pow+0x168>
 80074a2:	4632      	mov	r2, r6
 80074a4:	463b      	mov	r3, r7
 80074a6:	4630      	mov	r0, r6
 80074a8:	4639      	mov	r1, r7
 80074aa:	f7f9 f8c5 	bl	8000638 <__aeabi_dmul>
 80074ae:	e76a      	b.n	8007386 <__ieee754_pow+0x3e>
 80074b0:	4b3e      	ldr	r3, [pc, #248]	; (80075ac <__ieee754_pow+0x264>)
 80074b2:	4599      	cmp	r9, r3
 80074b4:	d10c      	bne.n	80074d0 <__ieee754_pow+0x188>
 80074b6:	2d00      	cmp	r5, #0
 80074b8:	db0a      	blt.n	80074d0 <__ieee754_pow+0x188>
 80074ba:	ec47 6b10 	vmov	d0, r6, r7
 80074be:	b009      	add	sp, #36	; 0x24
 80074c0:	ecbd 8b06 	vpop	{d8-d10}
 80074c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c8:	f000 befc 	b.w	80082c4 <__ieee754_sqrt>
 80074cc:	2300      	movs	r3, #0
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	ec47 6b10 	vmov	d0, r6, r7
 80074d4:	f000 fc62 	bl	8007d9c <fabs>
 80074d8:	ec51 0b10 	vmov	r0, r1, d0
 80074dc:	f1ba 0f00 	cmp.w	sl, #0
 80074e0:	d129      	bne.n	8007536 <__ieee754_pow+0x1ee>
 80074e2:	b124      	cbz	r4, 80074ee <__ieee754_pow+0x1a6>
 80074e4:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <__ieee754_pow+0x25c>)
 80074e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d123      	bne.n	8007536 <__ieee754_pow+0x1ee>
 80074ee:	f1b9 0f00 	cmp.w	r9, #0
 80074f2:	da05      	bge.n	8007500 <__ieee754_pow+0x1b8>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	2000      	movs	r0, #0
 80074fa:	492a      	ldr	r1, [pc, #168]	; (80075a4 <__ieee754_pow+0x25c>)
 80074fc:	f7f9 f9c6 	bl	800088c <__aeabi_ddiv>
 8007500:	2d00      	cmp	r5, #0
 8007502:	f6bf af40 	bge.w	8007386 <__ieee754_pow+0x3e>
 8007506:	9b04      	ldr	r3, [sp, #16]
 8007508:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800750c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007510:	431c      	orrs	r4, r3
 8007512:	d108      	bne.n	8007526 <__ieee754_pow+0x1de>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4610      	mov	r0, r2
 800751a:	4619      	mov	r1, r3
 800751c:	f7f8 fed4 	bl	80002c8 <__aeabi_dsub>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	e78f      	b.n	8007446 <__ieee754_pow+0xfe>
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	2b01      	cmp	r3, #1
 800752a:	f47f af2c 	bne.w	8007386 <__ieee754_pow+0x3e>
 800752e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007532:	4619      	mov	r1, r3
 8007534:	e727      	b.n	8007386 <__ieee754_pow+0x3e>
 8007536:	0feb      	lsrs	r3, r5, #31
 8007538:	3b01      	subs	r3, #1
 800753a:	9306      	str	r3, [sp, #24]
 800753c:	9a06      	ldr	r2, [sp, #24]
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	d102      	bne.n	800754a <__ieee754_pow+0x202>
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	e7e6      	b.n	8007518 <__ieee754_pow+0x1d0>
 800754a:	4b19      	ldr	r3, [pc, #100]	; (80075b0 <__ieee754_pow+0x268>)
 800754c:	4598      	cmp	r8, r3
 800754e:	f340 80fb 	ble.w	8007748 <__ieee754_pow+0x400>
 8007552:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007556:	4598      	cmp	r8, r3
 8007558:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <__ieee754_pow+0x260>)
 800755a:	dd0c      	ble.n	8007576 <__ieee754_pow+0x22e>
 800755c:	429c      	cmp	r4, r3
 800755e:	dc0f      	bgt.n	8007580 <__ieee754_pow+0x238>
 8007560:	f1b9 0f00 	cmp.w	r9, #0
 8007564:	da0f      	bge.n	8007586 <__ieee754_pow+0x23e>
 8007566:	2000      	movs	r0, #0
 8007568:	b009      	add	sp, #36	; 0x24
 800756a:	ecbd 8b06 	vpop	{d8-d10}
 800756e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007572:	f000 be9e 	b.w	80082b2 <__math_oflow>
 8007576:	429c      	cmp	r4, r3
 8007578:	dbf2      	blt.n	8007560 <__ieee754_pow+0x218>
 800757a:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <__ieee754_pow+0x25c>)
 800757c:	429c      	cmp	r4, r3
 800757e:	dd19      	ble.n	80075b4 <__ieee754_pow+0x26c>
 8007580:	f1b9 0f00 	cmp.w	r9, #0
 8007584:	dcef      	bgt.n	8007566 <__ieee754_pow+0x21e>
 8007586:	2000      	movs	r0, #0
 8007588:	b009      	add	sp, #36	; 0x24
 800758a:	ecbd 8b06 	vpop	{d8-d10}
 800758e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007592:	f000 be85 	b.w	80082a0 <__math_uflow>
 8007596:	bf00      	nop
 8007598:	fff00000 	.word	0xfff00000
 800759c:	7ff00000 	.word	0x7ff00000
 80075a0:	433fffff 	.word	0x433fffff
 80075a4:	3ff00000 	.word	0x3ff00000
 80075a8:	3fefffff 	.word	0x3fefffff
 80075ac:	3fe00000 	.word	0x3fe00000
 80075b0:	41e00000 	.word	0x41e00000
 80075b4:	4b60      	ldr	r3, [pc, #384]	; (8007738 <__ieee754_pow+0x3f0>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	f7f8 fe86 	bl	80002c8 <__aeabi_dsub>
 80075bc:	a354      	add	r3, pc, #336	; (adr r3, 8007710 <__ieee754_pow+0x3c8>)
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	4604      	mov	r4, r0
 80075c4:	460d      	mov	r5, r1
 80075c6:	f7f9 f837 	bl	8000638 <__aeabi_dmul>
 80075ca:	a353      	add	r3, pc, #332	; (adr r3, 8007718 <__ieee754_pow+0x3d0>)
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	4606      	mov	r6, r0
 80075d2:	460f      	mov	r7, r1
 80075d4:	4620      	mov	r0, r4
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f9 f82e 	bl	8000638 <__aeabi_dmul>
 80075dc:	4b57      	ldr	r3, [pc, #348]	; (800773c <__ieee754_pow+0x3f4>)
 80075de:	4682      	mov	sl, r0
 80075e0:	468b      	mov	fp, r1
 80075e2:	2200      	movs	r2, #0
 80075e4:	4620      	mov	r0, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	f7f9 f826 	bl	8000638 <__aeabi_dmul>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	a14b      	add	r1, pc, #300	; (adr r1, 8007720 <__ieee754_pow+0x3d8>)
 80075f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075f6:	f7f8 fe67 	bl	80002c8 <__aeabi_dsub>
 80075fa:	4622      	mov	r2, r4
 80075fc:	462b      	mov	r3, r5
 80075fe:	f7f9 f81b 	bl	8000638 <__aeabi_dmul>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	2000      	movs	r0, #0
 8007608:	494d      	ldr	r1, [pc, #308]	; (8007740 <__ieee754_pow+0x3f8>)
 800760a:	f7f8 fe5d 	bl	80002c8 <__aeabi_dsub>
 800760e:	4622      	mov	r2, r4
 8007610:	4680      	mov	r8, r0
 8007612:	4689      	mov	r9, r1
 8007614:	462b      	mov	r3, r5
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 f80d 	bl	8000638 <__aeabi_dmul>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4640      	mov	r0, r8
 8007624:	4649      	mov	r1, r9
 8007626:	f7f9 f807 	bl	8000638 <__aeabi_dmul>
 800762a:	a33f      	add	r3, pc, #252	; (adr r3, 8007728 <__ieee754_pow+0x3e0>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f9 f802 	bl	8000638 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4650      	mov	r0, sl
 800763a:	4659      	mov	r1, fp
 800763c:	f7f8 fe44 	bl	80002c8 <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4680      	mov	r8, r0
 8007646:	4689      	mov	r9, r1
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f8 fe3e 	bl	80002cc <__adddf3>
 8007650:	2000      	movs	r0, #0
 8007652:	4632      	mov	r2, r6
 8007654:	463b      	mov	r3, r7
 8007656:	4604      	mov	r4, r0
 8007658:	460d      	mov	r5, r1
 800765a:	f7f8 fe35 	bl	80002c8 <__aeabi_dsub>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4640      	mov	r0, r8
 8007664:	4649      	mov	r1, r9
 8007666:	f7f8 fe2f 	bl	80002c8 <__aeabi_dsub>
 800766a:	9b04      	ldr	r3, [sp, #16]
 800766c:	9a06      	ldr	r2, [sp, #24]
 800766e:	3b01      	subs	r3, #1
 8007670:	4313      	orrs	r3, r2
 8007672:	4682      	mov	sl, r0
 8007674:	468b      	mov	fp, r1
 8007676:	f040 81e7 	bne.w	8007a48 <__ieee754_pow+0x700>
 800767a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007730 <__ieee754_pow+0x3e8>
 800767e:	eeb0 8a47 	vmov.f32	s16, s14
 8007682:	eef0 8a67 	vmov.f32	s17, s15
 8007686:	e9dd 6700 	ldrd	r6, r7, [sp]
 800768a:	2600      	movs	r6, #0
 800768c:	4632      	mov	r2, r6
 800768e:	463b      	mov	r3, r7
 8007690:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007694:	f7f8 fe18 	bl	80002c8 <__aeabi_dsub>
 8007698:	4622      	mov	r2, r4
 800769a:	462b      	mov	r3, r5
 800769c:	f7f8 ffcc 	bl	8000638 <__aeabi_dmul>
 80076a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076a4:	4680      	mov	r8, r0
 80076a6:	4689      	mov	r9, r1
 80076a8:	4650      	mov	r0, sl
 80076aa:	4659      	mov	r1, fp
 80076ac:	f7f8 ffc4 	bl	8000638 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4640      	mov	r0, r8
 80076b6:	4649      	mov	r1, r9
 80076b8:	f7f8 fe08 	bl	80002cc <__adddf3>
 80076bc:	4632      	mov	r2, r6
 80076be:	463b      	mov	r3, r7
 80076c0:	4680      	mov	r8, r0
 80076c2:	4689      	mov	r9, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7f8 ffb6 	bl	8000638 <__aeabi_dmul>
 80076cc:	460b      	mov	r3, r1
 80076ce:	4604      	mov	r4, r0
 80076d0:	460d      	mov	r5, r1
 80076d2:	4602      	mov	r2, r0
 80076d4:	4649      	mov	r1, r9
 80076d6:	4640      	mov	r0, r8
 80076d8:	f7f8 fdf8 	bl	80002cc <__adddf3>
 80076dc:	4b19      	ldr	r3, [pc, #100]	; (8007744 <__ieee754_pow+0x3fc>)
 80076de:	4299      	cmp	r1, r3
 80076e0:	ec45 4b19 	vmov	d9, r4, r5
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	468b      	mov	fp, r1
 80076ea:	f340 82f0 	ble.w	8007cce <__ieee754_pow+0x986>
 80076ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80076f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80076f6:	4303      	orrs	r3, r0
 80076f8:	f000 81e4 	beq.w	8007ac4 <__ieee754_pow+0x77c>
 80076fc:	ec51 0b18 	vmov	r0, r1, d8
 8007700:	2200      	movs	r2, #0
 8007702:	2300      	movs	r3, #0
 8007704:	f7f9 fa0a 	bl	8000b1c <__aeabi_dcmplt>
 8007708:	3800      	subs	r0, #0
 800770a:	bf18      	it	ne
 800770c:	2001      	movne	r0, #1
 800770e:	e72b      	b.n	8007568 <__ieee754_pow+0x220>
 8007710:	60000000 	.word	0x60000000
 8007714:	3ff71547 	.word	0x3ff71547
 8007718:	f85ddf44 	.word	0xf85ddf44
 800771c:	3e54ae0b 	.word	0x3e54ae0b
 8007720:	55555555 	.word	0x55555555
 8007724:	3fd55555 	.word	0x3fd55555
 8007728:	652b82fe 	.word	0x652b82fe
 800772c:	3ff71547 	.word	0x3ff71547
 8007730:	00000000 	.word	0x00000000
 8007734:	bff00000 	.word	0xbff00000
 8007738:	3ff00000 	.word	0x3ff00000
 800773c:	3fd00000 	.word	0x3fd00000
 8007740:	3fe00000 	.word	0x3fe00000
 8007744:	408fffff 	.word	0x408fffff
 8007748:	4bd5      	ldr	r3, [pc, #852]	; (8007aa0 <__ieee754_pow+0x758>)
 800774a:	402b      	ands	r3, r5
 800774c:	2200      	movs	r2, #0
 800774e:	b92b      	cbnz	r3, 800775c <__ieee754_pow+0x414>
 8007750:	4bd4      	ldr	r3, [pc, #848]	; (8007aa4 <__ieee754_pow+0x75c>)
 8007752:	f7f8 ff71 	bl	8000638 <__aeabi_dmul>
 8007756:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800775a:	460c      	mov	r4, r1
 800775c:	1523      	asrs	r3, r4, #20
 800775e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007762:	4413      	add	r3, r2
 8007764:	9305      	str	r3, [sp, #20]
 8007766:	4bd0      	ldr	r3, [pc, #832]	; (8007aa8 <__ieee754_pow+0x760>)
 8007768:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800776c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007770:	429c      	cmp	r4, r3
 8007772:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007776:	dd08      	ble.n	800778a <__ieee754_pow+0x442>
 8007778:	4bcc      	ldr	r3, [pc, #816]	; (8007aac <__ieee754_pow+0x764>)
 800777a:	429c      	cmp	r4, r3
 800777c:	f340 8162 	ble.w	8007a44 <__ieee754_pow+0x6fc>
 8007780:	9b05      	ldr	r3, [sp, #20]
 8007782:	3301      	adds	r3, #1
 8007784:	9305      	str	r3, [sp, #20]
 8007786:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800778a:	2400      	movs	r4, #0
 800778c:	00e3      	lsls	r3, r4, #3
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	4bc7      	ldr	r3, [pc, #796]	; (8007ab0 <__ieee754_pow+0x768>)
 8007792:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007796:	ed93 7b00 	vldr	d7, [r3]
 800779a:	4629      	mov	r1, r5
 800779c:	ec53 2b17 	vmov	r2, r3, d7
 80077a0:	eeb0 9a47 	vmov.f32	s18, s14
 80077a4:	eef0 9a67 	vmov.f32	s19, s15
 80077a8:	4682      	mov	sl, r0
 80077aa:	f7f8 fd8d 	bl	80002c8 <__aeabi_dsub>
 80077ae:	4652      	mov	r2, sl
 80077b0:	4606      	mov	r6, r0
 80077b2:	460f      	mov	r7, r1
 80077b4:	462b      	mov	r3, r5
 80077b6:	ec51 0b19 	vmov	r0, r1, d9
 80077ba:	f7f8 fd87 	bl	80002cc <__adddf3>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	2000      	movs	r0, #0
 80077c4:	49bb      	ldr	r1, [pc, #748]	; (8007ab4 <__ieee754_pow+0x76c>)
 80077c6:	f7f9 f861 	bl	800088c <__aeabi_ddiv>
 80077ca:	ec41 0b1a 	vmov	d10, r0, r1
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f8 ff2f 	bl	8000638 <__aeabi_dmul>
 80077da:	2300      	movs	r3, #0
 80077dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077e0:	9302      	str	r3, [sp, #8]
 80077e2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80077e6:	46ab      	mov	fp, r5
 80077e8:	106d      	asrs	r5, r5, #1
 80077ea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80077ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80077f2:	ec41 0b18 	vmov	d8, r0, r1
 80077f6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80077fa:	2200      	movs	r2, #0
 80077fc:	4640      	mov	r0, r8
 80077fe:	4649      	mov	r1, r9
 8007800:	4614      	mov	r4, r2
 8007802:	461d      	mov	r5, r3
 8007804:	f7f8 ff18 	bl	8000638 <__aeabi_dmul>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4630      	mov	r0, r6
 800780e:	4639      	mov	r1, r7
 8007810:	f7f8 fd5a 	bl	80002c8 <__aeabi_dsub>
 8007814:	ec53 2b19 	vmov	r2, r3, d9
 8007818:	4606      	mov	r6, r0
 800781a:	460f      	mov	r7, r1
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f8 fd52 	bl	80002c8 <__aeabi_dsub>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	f7f8 fd4c 	bl	80002c8 <__aeabi_dsub>
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	f7f8 ff00 	bl	8000638 <__aeabi_dmul>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4630      	mov	r0, r6
 800783e:	4639      	mov	r1, r7
 8007840:	f7f8 fd42 	bl	80002c8 <__aeabi_dsub>
 8007844:	ec53 2b1a 	vmov	r2, r3, d10
 8007848:	f7f8 fef6 	bl	8000638 <__aeabi_dmul>
 800784c:	ec53 2b18 	vmov	r2, r3, d8
 8007850:	ec41 0b19 	vmov	d9, r0, r1
 8007854:	ec51 0b18 	vmov	r0, r1, d8
 8007858:	f7f8 feee 	bl	8000638 <__aeabi_dmul>
 800785c:	a37c      	add	r3, pc, #496	; (adr r3, 8007a50 <__ieee754_pow+0x708>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	4604      	mov	r4, r0
 8007864:	460d      	mov	r5, r1
 8007866:	f7f8 fee7 	bl	8000638 <__aeabi_dmul>
 800786a:	a37b      	add	r3, pc, #492	; (adr r3, 8007a58 <__ieee754_pow+0x710>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fd2c 	bl	80002cc <__adddf3>
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	f7f8 fede 	bl	8000638 <__aeabi_dmul>
 800787c:	a378      	add	r3, pc, #480	; (adr r3, 8007a60 <__ieee754_pow+0x718>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f7f8 fd23 	bl	80002cc <__adddf3>
 8007886:	4622      	mov	r2, r4
 8007888:	462b      	mov	r3, r5
 800788a:	f7f8 fed5 	bl	8000638 <__aeabi_dmul>
 800788e:	a376      	add	r3, pc, #472	; (adr r3, 8007a68 <__ieee754_pow+0x720>)
 8007890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007894:	f7f8 fd1a 	bl	80002cc <__adddf3>
 8007898:	4622      	mov	r2, r4
 800789a:	462b      	mov	r3, r5
 800789c:	f7f8 fecc 	bl	8000638 <__aeabi_dmul>
 80078a0:	a373      	add	r3, pc, #460	; (adr r3, 8007a70 <__ieee754_pow+0x728>)
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f7f8 fd11 	bl	80002cc <__adddf3>
 80078aa:	4622      	mov	r2, r4
 80078ac:	462b      	mov	r3, r5
 80078ae:	f7f8 fec3 	bl	8000638 <__aeabi_dmul>
 80078b2:	a371      	add	r3, pc, #452	; (adr r3, 8007a78 <__ieee754_pow+0x730>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fd08 	bl	80002cc <__adddf3>
 80078bc:	4622      	mov	r2, r4
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	462b      	mov	r3, r5
 80078c4:	4620      	mov	r0, r4
 80078c6:	4629      	mov	r1, r5
 80078c8:	f7f8 feb6 	bl	8000638 <__aeabi_dmul>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4630      	mov	r0, r6
 80078d2:	4639      	mov	r1, r7
 80078d4:	f7f8 feb0 	bl	8000638 <__aeabi_dmul>
 80078d8:	4642      	mov	r2, r8
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	464b      	mov	r3, r9
 80078e0:	ec51 0b18 	vmov	r0, r1, d8
 80078e4:	f7f8 fcf2 	bl	80002cc <__adddf3>
 80078e8:	ec53 2b19 	vmov	r2, r3, d9
 80078ec:	f7f8 fea4 	bl	8000638 <__aeabi_dmul>
 80078f0:	4622      	mov	r2, r4
 80078f2:	462b      	mov	r3, r5
 80078f4:	f7f8 fcea 	bl	80002cc <__adddf3>
 80078f8:	4642      	mov	r2, r8
 80078fa:	4682      	mov	sl, r0
 80078fc:	468b      	mov	fp, r1
 80078fe:	464b      	mov	r3, r9
 8007900:	4640      	mov	r0, r8
 8007902:	4649      	mov	r1, r9
 8007904:	f7f8 fe98 	bl	8000638 <__aeabi_dmul>
 8007908:	4b6b      	ldr	r3, [pc, #428]	; (8007ab8 <__ieee754_pow+0x770>)
 800790a:	2200      	movs	r2, #0
 800790c:	4606      	mov	r6, r0
 800790e:	460f      	mov	r7, r1
 8007910:	f7f8 fcdc 	bl	80002cc <__adddf3>
 8007914:	4652      	mov	r2, sl
 8007916:	465b      	mov	r3, fp
 8007918:	f7f8 fcd8 	bl	80002cc <__adddf3>
 800791c:	2000      	movs	r0, #0
 800791e:	4604      	mov	r4, r0
 8007920:	460d      	mov	r5, r1
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f8 fe85 	bl	8000638 <__aeabi_dmul>
 800792e:	4b62      	ldr	r3, [pc, #392]	; (8007ab8 <__ieee754_pow+0x770>)
 8007930:	4680      	mov	r8, r0
 8007932:	4689      	mov	r9, r1
 8007934:	2200      	movs	r2, #0
 8007936:	4620      	mov	r0, r4
 8007938:	4629      	mov	r1, r5
 800793a:	f7f8 fcc5 	bl	80002c8 <__aeabi_dsub>
 800793e:	4632      	mov	r2, r6
 8007940:	463b      	mov	r3, r7
 8007942:	f7f8 fcc1 	bl	80002c8 <__aeabi_dsub>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4650      	mov	r0, sl
 800794c:	4659      	mov	r1, fp
 800794e:	f7f8 fcbb 	bl	80002c8 <__aeabi_dsub>
 8007952:	ec53 2b18 	vmov	r2, r3, d8
 8007956:	f7f8 fe6f 	bl	8000638 <__aeabi_dmul>
 800795a:	4622      	mov	r2, r4
 800795c:	4606      	mov	r6, r0
 800795e:	460f      	mov	r7, r1
 8007960:	462b      	mov	r3, r5
 8007962:	ec51 0b19 	vmov	r0, r1, d9
 8007966:	f7f8 fe67 	bl	8000638 <__aeabi_dmul>
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	4630      	mov	r0, r6
 8007970:	4639      	mov	r1, r7
 8007972:	f7f8 fcab 	bl	80002cc <__adddf3>
 8007976:	4606      	mov	r6, r0
 8007978:	460f      	mov	r7, r1
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4640      	mov	r0, r8
 8007980:	4649      	mov	r1, r9
 8007982:	f7f8 fca3 	bl	80002cc <__adddf3>
 8007986:	a33e      	add	r3, pc, #248	; (adr r3, 8007a80 <__ieee754_pow+0x738>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	2000      	movs	r0, #0
 800798e:	4604      	mov	r4, r0
 8007990:	460d      	mov	r5, r1
 8007992:	f7f8 fe51 	bl	8000638 <__aeabi_dmul>
 8007996:	4642      	mov	r2, r8
 8007998:	ec41 0b18 	vmov	d8, r0, r1
 800799c:	464b      	mov	r3, r9
 800799e:	4620      	mov	r0, r4
 80079a0:	4629      	mov	r1, r5
 80079a2:	f7f8 fc91 	bl	80002c8 <__aeabi_dsub>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 fc8b 	bl	80002c8 <__aeabi_dsub>
 80079b2:	a335      	add	r3, pc, #212	; (adr r3, 8007a88 <__ieee754_pow+0x740>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f7f8 fe3e 	bl	8000638 <__aeabi_dmul>
 80079bc:	a334      	add	r3, pc, #208	; (adr r3, 8007a90 <__ieee754_pow+0x748>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	4606      	mov	r6, r0
 80079c4:	460f      	mov	r7, r1
 80079c6:	4620      	mov	r0, r4
 80079c8:	4629      	mov	r1, r5
 80079ca:	f7f8 fe35 	bl	8000638 <__aeabi_dmul>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4630      	mov	r0, r6
 80079d4:	4639      	mov	r1, r7
 80079d6:	f7f8 fc79 	bl	80002cc <__adddf3>
 80079da:	9a07      	ldr	r2, [sp, #28]
 80079dc:	4b37      	ldr	r3, [pc, #220]	; (8007abc <__ieee754_pow+0x774>)
 80079de:	4413      	add	r3, r2
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f7f8 fc72 	bl	80002cc <__adddf3>
 80079e8:	4682      	mov	sl, r0
 80079ea:	9805      	ldr	r0, [sp, #20]
 80079ec:	468b      	mov	fp, r1
 80079ee:	f7f8 fdb9 	bl	8000564 <__aeabi_i2d>
 80079f2:	9a07      	ldr	r2, [sp, #28]
 80079f4:	4b32      	ldr	r3, [pc, #200]	; (8007ac0 <__ieee754_pow+0x778>)
 80079f6:	4413      	add	r3, r2
 80079f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079fc:	4606      	mov	r6, r0
 80079fe:	460f      	mov	r7, r1
 8007a00:	4652      	mov	r2, sl
 8007a02:	465b      	mov	r3, fp
 8007a04:	ec51 0b18 	vmov	r0, r1, d8
 8007a08:	f7f8 fc60 	bl	80002cc <__adddf3>
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	f7f8 fc5c 	bl	80002cc <__adddf3>
 8007a14:	4632      	mov	r2, r6
 8007a16:	463b      	mov	r3, r7
 8007a18:	f7f8 fc58 	bl	80002cc <__adddf3>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	4632      	mov	r2, r6
 8007a20:	463b      	mov	r3, r7
 8007a22:	4604      	mov	r4, r0
 8007a24:	460d      	mov	r5, r1
 8007a26:	f7f8 fc4f 	bl	80002c8 <__aeabi_dsub>
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	f7f8 fc4b 	bl	80002c8 <__aeabi_dsub>
 8007a32:	ec53 2b18 	vmov	r2, r3, d8
 8007a36:	f7f8 fc47 	bl	80002c8 <__aeabi_dsub>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4650      	mov	r0, sl
 8007a40:	4659      	mov	r1, fp
 8007a42:	e610      	b.n	8007666 <__ieee754_pow+0x31e>
 8007a44:	2401      	movs	r4, #1
 8007a46:	e6a1      	b.n	800778c <__ieee754_pow+0x444>
 8007a48:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007a98 <__ieee754_pow+0x750>
 8007a4c:	e617      	b.n	800767e <__ieee754_pow+0x336>
 8007a4e:	bf00      	nop
 8007a50:	4a454eef 	.word	0x4a454eef
 8007a54:	3fca7e28 	.word	0x3fca7e28
 8007a58:	93c9db65 	.word	0x93c9db65
 8007a5c:	3fcd864a 	.word	0x3fcd864a
 8007a60:	a91d4101 	.word	0xa91d4101
 8007a64:	3fd17460 	.word	0x3fd17460
 8007a68:	518f264d 	.word	0x518f264d
 8007a6c:	3fd55555 	.word	0x3fd55555
 8007a70:	db6fabff 	.word	0xdb6fabff
 8007a74:	3fdb6db6 	.word	0x3fdb6db6
 8007a78:	33333303 	.word	0x33333303
 8007a7c:	3fe33333 	.word	0x3fe33333
 8007a80:	e0000000 	.word	0xe0000000
 8007a84:	3feec709 	.word	0x3feec709
 8007a88:	dc3a03fd 	.word	0xdc3a03fd
 8007a8c:	3feec709 	.word	0x3feec709
 8007a90:	145b01f5 	.word	0x145b01f5
 8007a94:	be3e2fe0 	.word	0xbe3e2fe0
 8007a98:	00000000 	.word	0x00000000
 8007a9c:	3ff00000 	.word	0x3ff00000
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	43400000 	.word	0x43400000
 8007aa8:	0003988e 	.word	0x0003988e
 8007aac:	000bb679 	.word	0x000bb679
 8007ab0:	08008c10 	.word	0x08008c10
 8007ab4:	3ff00000 	.word	0x3ff00000
 8007ab8:	40080000 	.word	0x40080000
 8007abc:	08008c30 	.word	0x08008c30
 8007ac0:	08008c20 	.word	0x08008c20
 8007ac4:	a3b3      	add	r3, pc, #716	; (adr r3, 8007d94 <__ieee754_pow+0xa4c>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	4640      	mov	r0, r8
 8007acc:	4649      	mov	r1, r9
 8007ace:	f7f8 fbfd 	bl	80002cc <__adddf3>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	ec41 0b1a 	vmov	d10, r0, r1
 8007ad8:	462b      	mov	r3, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	f7f8 fbf3 	bl	80002c8 <__aeabi_dsub>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	ec51 0b1a 	vmov	r0, r1, d10
 8007aea:	f7f9 f835 	bl	8000b58 <__aeabi_dcmpgt>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f47f ae04 	bne.w	80076fc <__ieee754_pow+0x3b4>
 8007af4:	4aa2      	ldr	r2, [pc, #648]	; (8007d80 <__ieee754_pow+0xa38>)
 8007af6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007afa:	4293      	cmp	r3, r2
 8007afc:	f340 8107 	ble.w	8007d0e <__ieee754_pow+0x9c6>
 8007b00:	151b      	asrs	r3, r3, #20
 8007b02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007b06:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007b0a:	fa4a fa03 	asr.w	sl, sl, r3
 8007b0e:	44da      	add	sl, fp
 8007b10:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007b14:	489b      	ldr	r0, [pc, #620]	; (8007d84 <__ieee754_pow+0xa3c>)
 8007b16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007b1a:	4108      	asrs	r0, r1
 8007b1c:	ea00 030a 	and.w	r3, r0, sl
 8007b20:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007b24:	f1c1 0114 	rsb	r1, r1, #20
 8007b28:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007b2c:	fa4a fa01 	asr.w	sl, sl, r1
 8007b30:	f1bb 0f00 	cmp.w	fp, #0
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	4620      	mov	r0, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	bfb8      	it	lt
 8007b3e:	f1ca 0a00 	rsblt	sl, sl, #0
 8007b42:	f7f8 fbc1 	bl	80002c8 <__aeabi_dsub>
 8007b46:	ec41 0b19 	vmov	d9, r0, r1
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	ec51 0b19 	vmov	r0, r1, d9
 8007b52:	f7f8 fbbb 	bl	80002cc <__adddf3>
 8007b56:	a37a      	add	r3, pc, #488	; (adr r3, 8007d40 <__ieee754_pow+0x9f8>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	4604      	mov	r4, r0
 8007b60:	460d      	mov	r5, r1
 8007b62:	f7f8 fd69 	bl	8000638 <__aeabi_dmul>
 8007b66:	ec53 2b19 	vmov	r2, r3, d9
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	460f      	mov	r7, r1
 8007b6e:	4620      	mov	r0, r4
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7f8 fba9 	bl	80002c8 <__aeabi_dsub>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	f7f8 fba3 	bl	80002c8 <__aeabi_dsub>
 8007b82:	a371      	add	r3, pc, #452	; (adr r3, 8007d48 <__ieee754_pow+0xa00>)
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f7f8 fd56 	bl	8000638 <__aeabi_dmul>
 8007b8c:	a370      	add	r3, pc, #448	; (adr r3, 8007d50 <__ieee754_pow+0xa08>)
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	4680      	mov	r8, r0
 8007b94:	4689      	mov	r9, r1
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fd4d 	bl	8000638 <__aeabi_dmul>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	4649      	mov	r1, r9
 8007ba6:	f7f8 fb91 	bl	80002cc <__adddf3>
 8007baa:	4604      	mov	r4, r0
 8007bac:	460d      	mov	r5, r1
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	4639      	mov	r1, r7
 8007bb6:	f7f8 fb89 	bl	80002cc <__adddf3>
 8007bba:	4632      	mov	r2, r6
 8007bbc:	463b      	mov	r3, r7
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4689      	mov	r9, r1
 8007bc2:	f7f8 fb81 	bl	80002c8 <__aeabi_dsub>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4629      	mov	r1, r5
 8007bce:	f7f8 fb7b 	bl	80002c8 <__aeabi_dsub>
 8007bd2:	4642      	mov	r2, r8
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	464b      	mov	r3, r9
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 fd2b 	bl	8000638 <__aeabi_dmul>
 8007be2:	a35d      	add	r3, pc, #372	; (adr r3, 8007d58 <__ieee754_pow+0xa10>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	4604      	mov	r4, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	f7f8 fd24 	bl	8000638 <__aeabi_dmul>
 8007bf0:	a35b      	add	r3, pc, #364	; (adr r3, 8007d60 <__ieee754_pow+0xa18>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fb67 	bl	80002c8 <__aeabi_dsub>
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	f7f8 fd1b 	bl	8000638 <__aeabi_dmul>
 8007c02:	a359      	add	r3, pc, #356	; (adr r3, 8007d68 <__ieee754_pow+0xa20>)
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f7f8 fb60 	bl	80002cc <__adddf3>
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	462b      	mov	r3, r5
 8007c10:	f7f8 fd12 	bl	8000638 <__aeabi_dmul>
 8007c14:	a356      	add	r3, pc, #344	; (adr r3, 8007d70 <__ieee754_pow+0xa28>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f7f8 fb55 	bl	80002c8 <__aeabi_dsub>
 8007c1e:	4622      	mov	r2, r4
 8007c20:	462b      	mov	r3, r5
 8007c22:	f7f8 fd09 	bl	8000638 <__aeabi_dmul>
 8007c26:	a354      	add	r3, pc, #336	; (adr r3, 8007d78 <__ieee754_pow+0xa30>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f7f8 fb4e 	bl	80002cc <__adddf3>
 8007c30:	4622      	mov	r2, r4
 8007c32:	462b      	mov	r3, r5
 8007c34:	f7f8 fd00 	bl	8000638 <__aeabi_dmul>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 fb42 	bl	80002c8 <__aeabi_dsub>
 8007c44:	4604      	mov	r4, r0
 8007c46:	460d      	mov	r5, r1
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7f8 fcf2 	bl	8000638 <__aeabi_dmul>
 8007c54:	2200      	movs	r2, #0
 8007c56:	ec41 0b19 	vmov	d9, r0, r1
 8007c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fb31 	bl	80002c8 <__aeabi_dsub>
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	ec51 0b19 	vmov	r0, r1, d9
 8007c6e:	f7f8 fe0d 	bl	800088c <__aeabi_ddiv>
 8007c72:	4632      	mov	r2, r6
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	463b      	mov	r3, r7
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 fcdb 	bl	8000638 <__aeabi_dmul>
 8007c82:	4632      	mov	r2, r6
 8007c84:	463b      	mov	r3, r7
 8007c86:	f7f8 fb21 	bl	80002cc <__adddf3>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 fb19 	bl	80002c8 <__aeabi_dsub>
 8007c96:	4642      	mov	r2, r8
 8007c98:	464b      	mov	r3, r9
 8007c9a:	f7f8 fb15 	bl	80002c8 <__aeabi_dsub>
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4939      	ldr	r1, [pc, #228]	; (8007d88 <__ieee754_pow+0xa40>)
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f7f8 fb0f 	bl	80002c8 <__aeabi_dsub>
 8007caa:	ec41 0b10 	vmov	d0, r0, r1
 8007cae:	ee10 3a90 	vmov	r3, s1
 8007cb2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cba:	da2b      	bge.n	8007d14 <__ieee754_pow+0x9cc>
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	f000 fa53 	bl	8008168 <scalbn>
 8007cc2:	ec51 0b10 	vmov	r0, r1, d0
 8007cc6:	ec53 2b18 	vmov	r2, r3, d8
 8007cca:	f7ff bbee 	b.w	80074aa <__ieee754_pow+0x162>
 8007cce:	4b2f      	ldr	r3, [pc, #188]	; (8007d8c <__ieee754_pow+0xa44>)
 8007cd0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007cd4:	429e      	cmp	r6, r3
 8007cd6:	f77f af0d 	ble.w	8007af4 <__ieee754_pow+0x7ac>
 8007cda:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <__ieee754_pow+0xa48>)
 8007cdc:	440b      	add	r3, r1
 8007cde:	4303      	orrs	r3, r0
 8007ce0:	d009      	beq.n	8007cf6 <__ieee754_pow+0x9ae>
 8007ce2:	ec51 0b18 	vmov	r0, r1, d8
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f7f8 ff17 	bl	8000b1c <__aeabi_dcmplt>
 8007cee:	3800      	subs	r0, #0
 8007cf0:	bf18      	it	ne
 8007cf2:	2001      	movne	r0, #1
 8007cf4:	e448      	b.n	8007588 <__ieee754_pow+0x240>
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	f7f8 fae5 	bl	80002c8 <__aeabi_dsub>
 8007cfe:	4642      	mov	r2, r8
 8007d00:	464b      	mov	r3, r9
 8007d02:	f7f8 ff1f 	bl	8000b44 <__aeabi_dcmpge>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f43f aef4 	beq.w	8007af4 <__ieee754_pow+0x7ac>
 8007d0c:	e7e9      	b.n	8007ce2 <__ieee754_pow+0x99a>
 8007d0e:	f04f 0a00 	mov.w	sl, #0
 8007d12:	e71a      	b.n	8007b4a <__ieee754_pow+0x802>
 8007d14:	ec51 0b10 	vmov	r0, r1, d0
 8007d18:	4619      	mov	r1, r3
 8007d1a:	e7d4      	b.n	8007cc6 <__ieee754_pow+0x97e>
 8007d1c:	491a      	ldr	r1, [pc, #104]	; (8007d88 <__ieee754_pow+0xa40>)
 8007d1e:	2000      	movs	r0, #0
 8007d20:	f7ff bb31 	b.w	8007386 <__ieee754_pow+0x3e>
 8007d24:	2000      	movs	r0, #0
 8007d26:	2100      	movs	r1, #0
 8007d28:	f7ff bb2d 	b.w	8007386 <__ieee754_pow+0x3e>
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7ff bb29 	b.w	8007386 <__ieee754_pow+0x3e>
 8007d34:	9204      	str	r2, [sp, #16]
 8007d36:	f7ff bb7b 	b.w	8007430 <__ieee754_pow+0xe8>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f7ff bb65 	b.w	800740a <__ieee754_pow+0xc2>
 8007d40:	00000000 	.word	0x00000000
 8007d44:	3fe62e43 	.word	0x3fe62e43
 8007d48:	fefa39ef 	.word	0xfefa39ef
 8007d4c:	3fe62e42 	.word	0x3fe62e42
 8007d50:	0ca86c39 	.word	0x0ca86c39
 8007d54:	be205c61 	.word	0xbe205c61
 8007d58:	72bea4d0 	.word	0x72bea4d0
 8007d5c:	3e663769 	.word	0x3e663769
 8007d60:	c5d26bf1 	.word	0xc5d26bf1
 8007d64:	3ebbbd41 	.word	0x3ebbbd41
 8007d68:	af25de2c 	.word	0xaf25de2c
 8007d6c:	3f11566a 	.word	0x3f11566a
 8007d70:	16bebd93 	.word	0x16bebd93
 8007d74:	3f66c16c 	.word	0x3f66c16c
 8007d78:	5555553e 	.word	0x5555553e
 8007d7c:	3fc55555 	.word	0x3fc55555
 8007d80:	3fe00000 	.word	0x3fe00000
 8007d84:	fff00000 	.word	0xfff00000
 8007d88:	3ff00000 	.word	0x3ff00000
 8007d8c:	4090cbff 	.word	0x4090cbff
 8007d90:	3f6f3400 	.word	0x3f6f3400
 8007d94:	652b82fe 	.word	0x652b82fe
 8007d98:	3c971547 	.word	0x3c971547

08007d9c <fabs>:
 8007d9c:	ec51 0b10 	vmov	r0, r1, d0
 8007da0:	ee10 2a10 	vmov	r2, s0
 8007da4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007da8:	ec43 2b10 	vmov	d0, r2, r3
 8007dac:	4770      	bx	lr
	...

08007db0 <__kernel_cosf>:
 8007db0:	ee10 3a10 	vmov	r3, s0
 8007db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007db8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc0:	da05      	bge.n	8007dce <__kernel_cosf+0x1e>
 8007dc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007dc6:	ee17 2a90 	vmov	r2, s15
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	d03b      	beq.n	8007e46 <__kernel_cosf+0x96>
 8007dce:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007dd2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007e4c <__kernel_cosf+0x9c>
 8007dd6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8007e50 <__kernel_cosf+0xa0>
 8007dda:	4a1e      	ldr	r2, [pc, #120]	; (8007e54 <__kernel_cosf+0xa4>)
 8007ddc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007de0:	4293      	cmp	r3, r2
 8007de2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8007e58 <__kernel_cosf+0xa8>
 8007de6:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007dea:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8007e5c <__kernel_cosf+0xac>
 8007dee:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007df2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007e60 <__kernel_cosf+0xb0>
 8007df6:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007dfa:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8007e64 <__kernel_cosf+0xb4>
 8007dfe:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007e02:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8007e06:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007e0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007e0e:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e16:	dc04      	bgt.n	8007e22 <__kernel_cosf+0x72>
 8007e18:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007e1c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8007e20:	4770      	bx	lr
 8007e22:	4a11      	ldr	r2, [pc, #68]	; (8007e68 <__kernel_cosf+0xb8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	bfda      	itte	le
 8007e28:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007e2c:	ee07 3a10 	vmovle	s14, r3
 8007e30:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8007e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e38:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007e3c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007e40:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e44:	4770      	bx	lr
 8007e46:	eeb0 0a66 	vmov.f32	s0, s13
 8007e4a:	4770      	bx	lr
 8007e4c:	ad47d74e 	.word	0xad47d74e
 8007e50:	310f74f6 	.word	0x310f74f6
 8007e54:	3e999999 	.word	0x3e999999
 8007e58:	b493f27c 	.word	0xb493f27c
 8007e5c:	37d00d01 	.word	0x37d00d01
 8007e60:	bab60b61 	.word	0xbab60b61
 8007e64:	3d2aaaab 	.word	0x3d2aaaab
 8007e68:	3f480000 	.word	0x3f480000

08007e6c <__kernel_sinf>:
 8007e6c:	ee10 3a10 	vmov	r3, s0
 8007e70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007e78:	da04      	bge.n	8007e84 <__kernel_sinf+0x18>
 8007e7a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007e7e:	ee17 3a90 	vmov	r3, s15
 8007e82:	b35b      	cbz	r3, 8007edc <__kernel_sinf+0x70>
 8007e84:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007e88:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007ee0 <__kernel_sinf+0x74>
 8007e8c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007ee4 <__kernel_sinf+0x78>
 8007e90:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007e94:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007ee8 <__kernel_sinf+0x7c>
 8007e98:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007e9c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007eec <__kernel_sinf+0x80>
 8007ea0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007ea4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007ef0 <__kernel_sinf+0x84>
 8007ea8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007eac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007eb0:	b930      	cbnz	r0, 8007ec0 <__kernel_sinf+0x54>
 8007eb2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007ef4 <__kernel_sinf+0x88>
 8007eb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007eba:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007ebe:	4770      	bx	lr
 8007ec0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007ec4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007ec8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007ecc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007ed0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007ef8 <__kernel_sinf+0x8c>
 8007ed4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007ed8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	2f2ec9d3 	.word	0x2f2ec9d3
 8007ee4:	b2d72f34 	.word	0xb2d72f34
 8007ee8:	3638ef1b 	.word	0x3638ef1b
 8007eec:	b9500d01 	.word	0xb9500d01
 8007ef0:	3c088889 	.word	0x3c088889
 8007ef4:	be2aaaab 	.word	0xbe2aaaab
 8007ef8:	3e2aaaab 	.word	0x3e2aaaab

08007efc <__ieee754_rem_pio2f>:
 8007efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007efe:	ee10 6a10 	vmov	r6, s0
 8007f02:	4b86      	ldr	r3, [pc, #536]	; (800811c <__ieee754_rem_pio2f+0x220>)
 8007f04:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007f08:	429d      	cmp	r5, r3
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	dc05      	bgt.n	8007f1c <__ieee754_rem_pio2f+0x20>
 8007f10:	2300      	movs	r3, #0
 8007f12:	ed80 0a00 	vstr	s0, [r0]
 8007f16:	6043      	str	r3, [r0, #4]
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e020      	b.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8007f1c:	4b80      	ldr	r3, [pc, #512]	; (8008120 <__ieee754_rem_pio2f+0x224>)
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	dc38      	bgt.n	8007f94 <__ieee754_rem_pio2f+0x98>
 8007f22:	2e00      	cmp	r6, #0
 8007f24:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8008124 <__ieee754_rem_pio2f+0x228>
 8007f28:	4b7f      	ldr	r3, [pc, #508]	; (8008128 <__ieee754_rem_pio2f+0x22c>)
 8007f2a:	f025 050f 	bic.w	r5, r5, #15
 8007f2e:	dd18      	ble.n	8007f62 <__ieee754_rem_pio2f+0x66>
 8007f30:	429d      	cmp	r5, r3
 8007f32:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007f36:	bf09      	itett	eq
 8007f38:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800812c <__ieee754_rem_pio2f+0x230>
 8007f3c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008130 <__ieee754_rem_pio2f+0x234>
 8007f40:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007f44:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008134 <__ieee754_rem_pio2f+0x238>
 8007f48:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007f4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f50:	edc0 6a00 	vstr	s13, [r0]
 8007f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f58:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f5c:	2001      	movs	r0, #1
 8007f5e:	b007      	add	sp, #28
 8007f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f62:	429d      	cmp	r5, r3
 8007f64:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007f68:	bf09      	itett	eq
 8007f6a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800812c <__ieee754_rem_pio2f+0x230>
 8007f6e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008130 <__ieee754_rem_pio2f+0x234>
 8007f72:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007f76:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008134 <__ieee754_rem_pio2f+0x238>
 8007f7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007f7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f82:	edc0 6a00 	vstr	s13, [r0]
 8007f86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f8a:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	e7e4      	b.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8007f94:	4b68      	ldr	r3, [pc, #416]	; (8008138 <__ieee754_rem_pio2f+0x23c>)
 8007f96:	429d      	cmp	r5, r3
 8007f98:	dc71      	bgt.n	800807e <__ieee754_rem_pio2f+0x182>
 8007f9a:	f000 f8db 	bl	8008154 <fabsf>
 8007f9e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800813c <__ieee754_rem_pio2f+0x240>
 8007fa2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007fa6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fb2:	ee17 0a90 	vmov	r0, s15
 8007fb6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008124 <__ieee754_rem_pio2f+0x228>
 8007fba:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007fbe:	281f      	cmp	r0, #31
 8007fc0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008130 <__ieee754_rem_pio2f+0x234>
 8007fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc8:	eeb1 6a47 	vneg.f32	s12, s14
 8007fcc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007fd0:	ee16 2a90 	vmov	r2, s13
 8007fd4:	dc1c      	bgt.n	8008010 <__ieee754_rem_pio2f+0x114>
 8007fd6:	495a      	ldr	r1, [pc, #360]	; (8008140 <__ieee754_rem_pio2f+0x244>)
 8007fd8:	1e47      	subs	r7, r0, #1
 8007fda:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007fde:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007fe2:	428b      	cmp	r3, r1
 8007fe4:	d014      	beq.n	8008010 <__ieee754_rem_pio2f+0x114>
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	ed94 7a00 	vldr	s14, [r4]
 8007fec:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007ff6:	ed84 0a01 	vstr	s0, [r4, #4]
 8007ffa:	dab0      	bge.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8007ffc:	eeb1 7a47 	vneg.f32	s14, s14
 8008000:	eeb1 0a40 	vneg.f32	s0, s0
 8008004:	ed84 7a00 	vstr	s14, [r4]
 8008008:	ed84 0a01 	vstr	s0, [r4, #4]
 800800c:	4240      	negs	r0, r0
 800800e:	e7a6      	b.n	8007f5e <__ieee754_rem_pio2f+0x62>
 8008010:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008014:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8008018:	2908      	cmp	r1, #8
 800801a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800801e:	dde2      	ble.n	8007fe6 <__ieee754_rem_pio2f+0xea>
 8008020:	eddf 5a42 	vldr	s11, [pc, #264]	; 800812c <__ieee754_rem_pio2f+0x230>
 8008024:	eef0 6a40 	vmov.f32	s13, s0
 8008028:	eee6 6a25 	vfma.f32	s13, s12, s11
 800802c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008030:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008034:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008134 <__ieee754_rem_pio2f+0x238>
 8008038:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800803c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008040:	ee15 2a90 	vmov	r2, s11
 8008044:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008048:	1a5b      	subs	r3, r3, r1
 800804a:	2b19      	cmp	r3, #25
 800804c:	dc04      	bgt.n	8008058 <__ieee754_rem_pio2f+0x15c>
 800804e:	edc4 5a00 	vstr	s11, [r4]
 8008052:	eeb0 0a66 	vmov.f32	s0, s13
 8008056:	e7c7      	b.n	8007fe8 <__ieee754_rem_pio2f+0xec>
 8008058:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008144 <__ieee754_rem_pio2f+0x248>
 800805c:	eeb0 0a66 	vmov.f32	s0, s13
 8008060:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008064:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008068:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008148 <__ieee754_rem_pio2f+0x24c>
 800806c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008070:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008074:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008078:	ed84 7a00 	vstr	s14, [r4]
 800807c:	e7b4      	b.n	8007fe8 <__ieee754_rem_pio2f+0xec>
 800807e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008082:	db06      	blt.n	8008092 <__ieee754_rem_pio2f+0x196>
 8008084:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008088:	edc0 7a01 	vstr	s15, [r0, #4]
 800808c:	edc0 7a00 	vstr	s15, [r0]
 8008090:	e742      	b.n	8007f18 <__ieee754_rem_pio2f+0x1c>
 8008092:	15ea      	asrs	r2, r5, #23
 8008094:	3a86      	subs	r2, #134	; 0x86
 8008096:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080a2:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800814c <__ieee754_rem_pio2f+0x250>
 80080a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080ae:	ed8d 7a03 	vstr	s14, [sp, #12]
 80080b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80080be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80080c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80080ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d2:	edcd 7a05 	vstr	s15, [sp, #20]
 80080d6:	d11e      	bne.n	8008116 <__ieee754_rem_pio2f+0x21a>
 80080d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	bf14      	ite	ne
 80080e2:	2302      	movne	r3, #2
 80080e4:	2301      	moveq	r3, #1
 80080e6:	491a      	ldr	r1, [pc, #104]	; (8008150 <__ieee754_rem_pio2f+0x254>)
 80080e8:	9101      	str	r1, [sp, #4]
 80080ea:	2102      	movs	r1, #2
 80080ec:	9100      	str	r1, [sp, #0]
 80080ee:	a803      	add	r0, sp, #12
 80080f0:	4621      	mov	r1, r4
 80080f2:	f000 f9c1 	bl	8008478 <__kernel_rem_pio2f>
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	f6bf af31 	bge.w	8007f5e <__ieee754_rem_pio2f+0x62>
 80080fc:	edd4 7a00 	vldr	s15, [r4]
 8008100:	eef1 7a67 	vneg.f32	s15, s15
 8008104:	edc4 7a00 	vstr	s15, [r4]
 8008108:	edd4 7a01 	vldr	s15, [r4, #4]
 800810c:	eef1 7a67 	vneg.f32	s15, s15
 8008110:	edc4 7a01 	vstr	s15, [r4, #4]
 8008114:	e77a      	b.n	800800c <__ieee754_rem_pio2f+0x110>
 8008116:	2303      	movs	r3, #3
 8008118:	e7e5      	b.n	80080e6 <__ieee754_rem_pio2f+0x1ea>
 800811a:	bf00      	nop
 800811c:	3f490fd8 	.word	0x3f490fd8
 8008120:	4016cbe3 	.word	0x4016cbe3
 8008124:	3fc90f80 	.word	0x3fc90f80
 8008128:	3fc90fd0 	.word	0x3fc90fd0
 800812c:	37354400 	.word	0x37354400
 8008130:	37354443 	.word	0x37354443
 8008134:	2e85a308 	.word	0x2e85a308
 8008138:	43490f80 	.word	0x43490f80
 800813c:	3f22f984 	.word	0x3f22f984
 8008140:	08008c40 	.word	0x08008c40
 8008144:	2e85a300 	.word	0x2e85a300
 8008148:	248d3132 	.word	0x248d3132
 800814c:	43800000 	.word	0x43800000
 8008150:	08008cc0 	.word	0x08008cc0

08008154 <fabsf>:
 8008154:	ee10 3a10 	vmov	r3, s0
 8008158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800815c:	ee00 3a10 	vmov	s0, r3
 8008160:	4770      	bx	lr
 8008162:	0000      	movs	r0, r0
 8008164:	0000      	movs	r0, r0
	...

08008168 <scalbn>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	ec55 4b10 	vmov	r4, r5, d0
 800816e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008172:	4606      	mov	r6, r0
 8008174:	462b      	mov	r3, r5
 8008176:	b999      	cbnz	r1, 80081a0 <scalbn+0x38>
 8008178:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800817c:	4323      	orrs	r3, r4
 800817e:	d03f      	beq.n	8008200 <scalbn+0x98>
 8008180:	4b35      	ldr	r3, [pc, #212]	; (8008258 <scalbn+0xf0>)
 8008182:	4629      	mov	r1, r5
 8008184:	ee10 0a10 	vmov	r0, s0
 8008188:	2200      	movs	r2, #0
 800818a:	f7f8 fa55 	bl	8000638 <__aeabi_dmul>
 800818e:	4b33      	ldr	r3, [pc, #204]	; (800825c <scalbn+0xf4>)
 8008190:	429e      	cmp	r6, r3
 8008192:	4604      	mov	r4, r0
 8008194:	460d      	mov	r5, r1
 8008196:	da10      	bge.n	80081ba <scalbn+0x52>
 8008198:	a327      	add	r3, pc, #156	; (adr r3, 8008238 <scalbn+0xd0>)
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	e01f      	b.n	80081e0 <scalbn+0x78>
 80081a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80081a4:	4291      	cmp	r1, r2
 80081a6:	d10c      	bne.n	80081c2 <scalbn+0x5a>
 80081a8:	ee10 2a10 	vmov	r2, s0
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f7f8 f88c 	bl	80002cc <__adddf3>
 80081b4:	4604      	mov	r4, r0
 80081b6:	460d      	mov	r5, r1
 80081b8:	e022      	b.n	8008200 <scalbn+0x98>
 80081ba:	460b      	mov	r3, r1
 80081bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081c0:	3936      	subs	r1, #54	; 0x36
 80081c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80081c6:	4296      	cmp	r6, r2
 80081c8:	dd0d      	ble.n	80081e6 <scalbn+0x7e>
 80081ca:	2d00      	cmp	r5, #0
 80081cc:	a11c      	add	r1, pc, #112	; (adr r1, 8008240 <scalbn+0xd8>)
 80081ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081d2:	da02      	bge.n	80081da <scalbn+0x72>
 80081d4:	a11c      	add	r1, pc, #112	; (adr r1, 8008248 <scalbn+0xe0>)
 80081d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081da:	a319      	add	r3, pc, #100	; (adr r3, 8008240 <scalbn+0xd8>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f7f8 fa2a 	bl	8000638 <__aeabi_dmul>
 80081e4:	e7e6      	b.n	80081b4 <scalbn+0x4c>
 80081e6:	1872      	adds	r2, r6, r1
 80081e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80081ec:	428a      	cmp	r2, r1
 80081ee:	dcec      	bgt.n	80081ca <scalbn+0x62>
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	dd08      	ble.n	8008206 <scalbn+0x9e>
 80081f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008200:	ec45 4b10 	vmov	d0, r4, r5
 8008204:	bd70      	pop	{r4, r5, r6, pc}
 8008206:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800820a:	da08      	bge.n	800821e <scalbn+0xb6>
 800820c:	2d00      	cmp	r5, #0
 800820e:	a10a      	add	r1, pc, #40	; (adr r1, 8008238 <scalbn+0xd0>)
 8008210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008214:	dac0      	bge.n	8008198 <scalbn+0x30>
 8008216:	a10e      	add	r1, pc, #56	; (adr r1, 8008250 <scalbn+0xe8>)
 8008218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800821c:	e7bc      	b.n	8008198 <scalbn+0x30>
 800821e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008222:	3236      	adds	r2, #54	; 0x36
 8008224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008228:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800822c:	4620      	mov	r0, r4
 800822e:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <scalbn+0xf8>)
 8008230:	2200      	movs	r2, #0
 8008232:	e7d5      	b.n	80081e0 <scalbn+0x78>
 8008234:	f3af 8000 	nop.w
 8008238:	c2f8f359 	.word	0xc2f8f359
 800823c:	01a56e1f 	.word	0x01a56e1f
 8008240:	8800759c 	.word	0x8800759c
 8008244:	7e37e43c 	.word	0x7e37e43c
 8008248:	8800759c 	.word	0x8800759c
 800824c:	fe37e43c 	.word	0xfe37e43c
 8008250:	c2f8f359 	.word	0xc2f8f359
 8008254:	81a56e1f 	.word	0x81a56e1f
 8008258:	43500000 	.word	0x43500000
 800825c:	ffff3cb0 	.word	0xffff3cb0
 8008260:	3c900000 	.word	0x3c900000

08008264 <with_errno>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	4604      	mov	r4, r0
 8008268:	460d      	mov	r5, r1
 800826a:	4616      	mov	r6, r2
 800826c:	f7fe f84a 	bl	8006304 <__errno>
 8008270:	4629      	mov	r1, r5
 8008272:	6006      	str	r6, [r0, #0]
 8008274:	4620      	mov	r0, r4
 8008276:	bd70      	pop	{r4, r5, r6, pc}

08008278 <xflow>:
 8008278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800827a:	4614      	mov	r4, r2
 800827c:	461d      	mov	r5, r3
 800827e:	b108      	cbz	r0, 8008284 <xflow+0xc>
 8008280:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008284:	e9cd 2300 	strd	r2, r3, [sp]
 8008288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	f7f8 f9d2 	bl	8000638 <__aeabi_dmul>
 8008294:	2222      	movs	r2, #34	; 0x22
 8008296:	b003      	add	sp, #12
 8008298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800829c:	f7ff bfe2 	b.w	8008264 <with_errno>

080082a0 <__math_uflow>:
 80082a0:	b508      	push	{r3, lr}
 80082a2:	2200      	movs	r2, #0
 80082a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082a8:	f7ff ffe6 	bl	8008278 <xflow>
 80082ac:	ec41 0b10 	vmov	d0, r0, r1
 80082b0:	bd08      	pop	{r3, pc}

080082b2 <__math_oflow>:
 80082b2:	b508      	push	{r3, lr}
 80082b4:	2200      	movs	r2, #0
 80082b6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80082ba:	f7ff ffdd 	bl	8008278 <xflow>
 80082be:	ec41 0b10 	vmov	d0, r0, r1
 80082c2:	bd08      	pop	{r3, pc}

080082c4 <__ieee754_sqrt>:
 80082c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c8:	ec55 4b10 	vmov	r4, r5, d0
 80082cc:	4e67      	ldr	r6, [pc, #412]	; (800846c <__ieee754_sqrt+0x1a8>)
 80082ce:	43ae      	bics	r6, r5
 80082d0:	ee10 0a10 	vmov	r0, s0
 80082d4:	ee10 2a10 	vmov	r2, s0
 80082d8:	4629      	mov	r1, r5
 80082da:	462b      	mov	r3, r5
 80082dc:	d10d      	bne.n	80082fa <__ieee754_sqrt+0x36>
 80082de:	f7f8 f9ab 	bl	8000638 <__aeabi_dmul>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f7 ffef 	bl	80002cc <__adddf3>
 80082ee:	4604      	mov	r4, r0
 80082f0:	460d      	mov	r5, r1
 80082f2:	ec45 4b10 	vmov	d0, r4, r5
 80082f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	2d00      	cmp	r5, #0
 80082fc:	dc0b      	bgt.n	8008316 <__ieee754_sqrt+0x52>
 80082fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008302:	4326      	orrs	r6, r4
 8008304:	d0f5      	beq.n	80082f2 <__ieee754_sqrt+0x2e>
 8008306:	b135      	cbz	r5, 8008316 <__ieee754_sqrt+0x52>
 8008308:	f7f7 ffde 	bl	80002c8 <__aeabi_dsub>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	f7f8 fabc 	bl	800088c <__aeabi_ddiv>
 8008314:	e7eb      	b.n	80082ee <__ieee754_sqrt+0x2a>
 8008316:	1509      	asrs	r1, r1, #20
 8008318:	f000 808d 	beq.w	8008436 <__ieee754_sqrt+0x172>
 800831c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008320:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008328:	07c9      	lsls	r1, r1, #31
 800832a:	bf5c      	itt	pl
 800832c:	005b      	lslpl	r3, r3, #1
 800832e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008332:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008336:	bf58      	it	pl
 8008338:	0052      	lslpl	r2, r2, #1
 800833a:	2500      	movs	r5, #0
 800833c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008340:	1076      	asrs	r6, r6, #1
 8008342:	0052      	lsls	r2, r2, #1
 8008344:	f04f 0e16 	mov.w	lr, #22
 8008348:	46ac      	mov	ip, r5
 800834a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800834e:	eb0c 0001 	add.w	r0, ip, r1
 8008352:	4298      	cmp	r0, r3
 8008354:	bfde      	ittt	le
 8008356:	1a1b      	suble	r3, r3, r0
 8008358:	eb00 0c01 	addle.w	ip, r0, r1
 800835c:	186d      	addle	r5, r5, r1
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	f1be 0e01 	subs.w	lr, lr, #1
 8008364:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008368:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800836c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008370:	d1ed      	bne.n	800834e <__ieee754_sqrt+0x8a>
 8008372:	4674      	mov	r4, lr
 8008374:	2720      	movs	r7, #32
 8008376:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800837a:	4563      	cmp	r3, ip
 800837c:	eb01 000e 	add.w	r0, r1, lr
 8008380:	dc02      	bgt.n	8008388 <__ieee754_sqrt+0xc4>
 8008382:	d113      	bne.n	80083ac <__ieee754_sqrt+0xe8>
 8008384:	4290      	cmp	r0, r2
 8008386:	d811      	bhi.n	80083ac <__ieee754_sqrt+0xe8>
 8008388:	2800      	cmp	r0, #0
 800838a:	eb00 0e01 	add.w	lr, r0, r1
 800838e:	da57      	bge.n	8008440 <__ieee754_sqrt+0x17c>
 8008390:	f1be 0f00 	cmp.w	lr, #0
 8008394:	db54      	blt.n	8008440 <__ieee754_sqrt+0x17c>
 8008396:	f10c 0801 	add.w	r8, ip, #1
 800839a:	eba3 030c 	sub.w	r3, r3, ip
 800839e:	4290      	cmp	r0, r2
 80083a0:	bf88      	it	hi
 80083a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80083a6:	1a12      	subs	r2, r2, r0
 80083a8:	440c      	add	r4, r1
 80083aa:	46c4      	mov	ip, r8
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	3f01      	subs	r7, #1
 80083b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80083b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80083b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80083bc:	d1dd      	bne.n	800837a <__ieee754_sqrt+0xb6>
 80083be:	4313      	orrs	r3, r2
 80083c0:	d01b      	beq.n	80083fa <__ieee754_sqrt+0x136>
 80083c2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008470 <__ieee754_sqrt+0x1ac>
 80083c6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008474 <__ieee754_sqrt+0x1b0>
 80083ca:	e9da 0100 	ldrd	r0, r1, [sl]
 80083ce:	e9db 2300 	ldrd	r2, r3, [fp]
 80083d2:	f7f7 ff79 	bl	80002c8 <__aeabi_dsub>
 80083d6:	e9da 8900 	ldrd	r8, r9, [sl]
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f8 fba5 	bl	8000b30 <__aeabi_dcmple>
 80083e6:	b140      	cbz	r0, 80083fa <__ieee754_sqrt+0x136>
 80083e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80083ec:	e9da 0100 	ldrd	r0, r1, [sl]
 80083f0:	e9db 2300 	ldrd	r2, r3, [fp]
 80083f4:	d126      	bne.n	8008444 <__ieee754_sqrt+0x180>
 80083f6:	3501      	adds	r5, #1
 80083f8:	463c      	mov	r4, r7
 80083fa:	106a      	asrs	r2, r5, #1
 80083fc:	0863      	lsrs	r3, r4, #1
 80083fe:	07e9      	lsls	r1, r5, #31
 8008400:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008404:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008408:	bf48      	it	mi
 800840a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800840e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008412:	461c      	mov	r4, r3
 8008414:	e76d      	b.n	80082f2 <__ieee754_sqrt+0x2e>
 8008416:	0ad3      	lsrs	r3, r2, #11
 8008418:	3815      	subs	r0, #21
 800841a:	0552      	lsls	r2, r2, #21
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0fa      	beq.n	8008416 <__ieee754_sqrt+0x152>
 8008420:	02dc      	lsls	r4, r3, #11
 8008422:	d50a      	bpl.n	800843a <__ieee754_sqrt+0x176>
 8008424:	f1c1 0420 	rsb	r4, r1, #32
 8008428:	fa22 f404 	lsr.w	r4, r2, r4
 800842c:	1e4d      	subs	r5, r1, #1
 800842e:	408a      	lsls	r2, r1
 8008430:	4323      	orrs	r3, r4
 8008432:	1b41      	subs	r1, r0, r5
 8008434:	e772      	b.n	800831c <__ieee754_sqrt+0x58>
 8008436:	4608      	mov	r0, r1
 8008438:	e7f0      	b.n	800841c <__ieee754_sqrt+0x158>
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	3101      	adds	r1, #1
 800843e:	e7ef      	b.n	8008420 <__ieee754_sqrt+0x15c>
 8008440:	46e0      	mov	r8, ip
 8008442:	e7aa      	b.n	800839a <__ieee754_sqrt+0xd6>
 8008444:	f7f7 ff42 	bl	80002cc <__adddf3>
 8008448:	e9da 8900 	ldrd	r8, r9, [sl]
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4640      	mov	r0, r8
 8008452:	4649      	mov	r1, r9
 8008454:	f7f8 fb62 	bl	8000b1c <__aeabi_dcmplt>
 8008458:	b120      	cbz	r0, 8008464 <__ieee754_sqrt+0x1a0>
 800845a:	1ca0      	adds	r0, r4, #2
 800845c:	bf08      	it	eq
 800845e:	3501      	addeq	r5, #1
 8008460:	3402      	adds	r4, #2
 8008462:	e7ca      	b.n	80083fa <__ieee754_sqrt+0x136>
 8008464:	3401      	adds	r4, #1
 8008466:	f024 0401 	bic.w	r4, r4, #1
 800846a:	e7c6      	b.n	80083fa <__ieee754_sqrt+0x136>
 800846c:	7ff00000 	.word	0x7ff00000
 8008470:	200000c0 	.word	0x200000c0
 8008474:	200000c8 	.word	0x200000c8

08008478 <__kernel_rem_pio2f>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	ed2d 8b04 	vpush	{d8-d9}
 8008480:	b0d9      	sub	sp, #356	; 0x164
 8008482:	4688      	mov	r8, r1
 8008484:	9002      	str	r0, [sp, #8]
 8008486:	49b8      	ldr	r1, [pc, #736]	; (8008768 <__kernel_rem_pio2f+0x2f0>)
 8008488:	9866      	ldr	r0, [sp, #408]	; 0x198
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008490:	9901      	ldr	r1, [sp, #4]
 8008492:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8008494:	f101 3bff 	add.w	fp, r1, #4294967295
 8008498:	1d11      	adds	r1, r2, #4
 800849a:	db25      	blt.n	80084e8 <__kernel_rem_pio2f+0x70>
 800849c:	1ed0      	subs	r0, r2, #3
 800849e:	bf48      	it	mi
 80084a0:	1d10      	addmi	r0, r2, #4
 80084a2:	10c0      	asrs	r0, r0, #3
 80084a4:	1c45      	adds	r5, r0, #1
 80084a6:	00e9      	lsls	r1, r5, #3
 80084a8:	eba0 070b 	sub.w	r7, r0, fp
 80084ac:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008778 <__kernel_rem_pio2f+0x300>
 80084b0:	9103      	str	r1, [sp, #12]
 80084b2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80084b6:	eb0a 0c0b 	add.w	ip, sl, fp
 80084ba:	ae1c      	add	r6, sp, #112	; 0x70
 80084bc:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 80084c0:	2400      	movs	r4, #0
 80084c2:	4564      	cmp	r4, ip
 80084c4:	dd12      	ble.n	80084ec <__kernel_rem_pio2f+0x74>
 80084c6:	9901      	ldr	r1, [sp, #4]
 80084c8:	ac1c      	add	r4, sp, #112	; 0x70
 80084ca:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80084ce:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80084d2:	f04f 0c00 	mov.w	ip, #0
 80084d6:	45d4      	cmp	ip, sl
 80084d8:	dc27      	bgt.n	800852a <__kernel_rem_pio2f+0xb2>
 80084da:	f8dd e008 	ldr.w	lr, [sp, #8]
 80084de:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8008778 <__kernel_rem_pio2f+0x300>
 80084e2:	4627      	mov	r7, r4
 80084e4:	2600      	movs	r6, #0
 80084e6:	e016      	b.n	8008516 <__kernel_rem_pio2f+0x9e>
 80084e8:	2000      	movs	r0, #0
 80084ea:	e7db      	b.n	80084a4 <__kernel_rem_pio2f+0x2c>
 80084ec:	42e7      	cmn	r7, r4
 80084ee:	bf5d      	ittte	pl
 80084f0:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80084f4:	ee07 1a90 	vmovpl	s15, r1
 80084f8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80084fc:	eef0 7a47 	vmovmi.f32	s15, s14
 8008500:	ece6 7a01 	vstmia	r6!, {s15}
 8008504:	3401      	adds	r4, #1
 8008506:	e7dc      	b.n	80084c2 <__kernel_rem_pio2f+0x4a>
 8008508:	ecfe 6a01 	vldmia	lr!, {s13}
 800850c:	ed97 7a00 	vldr	s14, [r7]
 8008510:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008514:	3601      	adds	r6, #1
 8008516:	455e      	cmp	r6, fp
 8008518:	f1a7 0704 	sub.w	r7, r7, #4
 800851c:	ddf4      	ble.n	8008508 <__kernel_rem_pio2f+0x90>
 800851e:	ece9 7a01 	vstmia	r9!, {s15}
 8008522:	f10c 0c01 	add.w	ip, ip, #1
 8008526:	3404      	adds	r4, #4
 8008528:	e7d5      	b.n	80084d6 <__kernel_rem_pio2f+0x5e>
 800852a:	a908      	add	r1, sp, #32
 800852c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008530:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008534:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8008774 <__kernel_rem_pio2f+0x2fc>
 8008538:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8008770 <__kernel_rem_pio2f+0x2f8>
 800853c:	9105      	str	r1, [sp, #20]
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	4656      	mov	r6, sl
 8008542:	00b3      	lsls	r3, r6, #2
 8008544:	9306      	str	r3, [sp, #24]
 8008546:	ab58      	add	r3, sp, #352	; 0x160
 8008548:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800854c:	ac08      	add	r4, sp, #32
 800854e:	ab44      	add	r3, sp, #272	; 0x110
 8008550:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008554:	46a4      	mov	ip, r4
 8008556:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800855a:	4637      	mov	r7, r6
 800855c:	2f00      	cmp	r7, #0
 800855e:	f1a0 0004 	sub.w	r0, r0, #4
 8008562:	dc4a      	bgt.n	80085fa <__kernel_rem_pio2f+0x182>
 8008564:	4628      	mov	r0, r5
 8008566:	9207      	str	r2, [sp, #28]
 8008568:	f000 f9f8 	bl	800895c <scalbnf>
 800856c:	eeb0 8a40 	vmov.f32	s16, s0
 8008570:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008574:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008578:	f000 fa56 	bl	8008a28 <floorf>
 800857c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008580:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008584:	2d00      	cmp	r5, #0
 8008586:	9a07      	ldr	r2, [sp, #28]
 8008588:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800858c:	ee17 9a90 	vmov	r9, s15
 8008590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008594:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008598:	dd41      	ble.n	800861e <__kernel_rem_pio2f+0x1a6>
 800859a:	f106 3cff 	add.w	ip, r6, #4294967295
 800859e:	ab08      	add	r3, sp, #32
 80085a0:	f1c5 0e08 	rsb	lr, r5, #8
 80085a4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80085a8:	fa47 f00e 	asr.w	r0, r7, lr
 80085ac:	4481      	add	r9, r0
 80085ae:	fa00 f00e 	lsl.w	r0, r0, lr
 80085b2:	1a3f      	subs	r7, r7, r0
 80085b4:	f1c5 0007 	rsb	r0, r5, #7
 80085b8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80085bc:	4107      	asrs	r7, r0
 80085be:	2f00      	cmp	r7, #0
 80085c0:	dd3c      	ble.n	800863c <__kernel_rem_pio2f+0x1c4>
 80085c2:	f04f 0e00 	mov.w	lr, #0
 80085c6:	f109 0901 	add.w	r9, r9, #1
 80085ca:	4671      	mov	r1, lr
 80085cc:	4576      	cmp	r6, lr
 80085ce:	dc67      	bgt.n	80086a0 <__kernel_rem_pio2f+0x228>
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	dd03      	ble.n	80085dc <__kernel_rem_pio2f+0x164>
 80085d4:	2d01      	cmp	r5, #1
 80085d6:	d074      	beq.n	80086c2 <__kernel_rem_pio2f+0x24a>
 80085d8:	2d02      	cmp	r5, #2
 80085da:	d07b      	beq.n	80086d4 <__kernel_rem_pio2f+0x25c>
 80085dc:	2f02      	cmp	r7, #2
 80085de:	d12d      	bne.n	800863c <__kernel_rem_pio2f+0x1c4>
 80085e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80085e4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80085e8:	b341      	cbz	r1, 800863c <__kernel_rem_pio2f+0x1c4>
 80085ea:	4628      	mov	r0, r5
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	f000 f9b5 	bl	800895c <scalbnf>
 80085f2:	9a07      	ldr	r2, [sp, #28]
 80085f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80085f8:	e020      	b.n	800863c <__kernel_rem_pio2f+0x1c4>
 80085fa:	ee60 7a28 	vmul.f32	s15, s0, s17
 80085fe:	3f01      	subs	r7, #1
 8008600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008608:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800860c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008610:	ecac 0a01 	vstmia	ip!, {s0}
 8008614:	ed90 0a00 	vldr	s0, [r0]
 8008618:	ee37 0a80 	vadd.f32	s0, s15, s0
 800861c:	e79e      	b.n	800855c <__kernel_rem_pio2f+0xe4>
 800861e:	d105      	bne.n	800862c <__kernel_rem_pio2f+0x1b4>
 8008620:	1e70      	subs	r0, r6, #1
 8008622:	ab08      	add	r3, sp, #32
 8008624:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008628:	11ff      	asrs	r7, r7, #7
 800862a:	e7c8      	b.n	80085be <__kernel_rem_pio2f+0x146>
 800862c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008630:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008638:	da30      	bge.n	800869c <__kernel_rem_pio2f+0x224>
 800863a:	2700      	movs	r7, #0
 800863c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008644:	f040 809a 	bne.w	800877c <__kernel_rem_pio2f+0x304>
 8008648:	1e74      	subs	r4, r6, #1
 800864a:	46a4      	mov	ip, r4
 800864c:	2100      	movs	r1, #0
 800864e:	45d4      	cmp	ip, sl
 8008650:	da47      	bge.n	80086e2 <__kernel_rem_pio2f+0x26a>
 8008652:	2900      	cmp	r1, #0
 8008654:	d063      	beq.n	800871e <__kernel_rem_pio2f+0x2a6>
 8008656:	ab08      	add	r3, sp, #32
 8008658:	3d08      	subs	r5, #8
 800865a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d07f      	beq.n	8008762 <__kernel_rem_pio2f+0x2ea>
 8008662:	4628      	mov	r0, r5
 8008664:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008668:	f000 f978 	bl	800895c <scalbnf>
 800866c:	1c63      	adds	r3, r4, #1
 800866e:	aa44      	add	r2, sp, #272	; 0x110
 8008670:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008774 <__kernel_rem_pio2f+0x2fc>
 8008674:	0099      	lsls	r1, r3, #2
 8008676:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800867a:	4623      	mov	r3, r4
 800867c:	2b00      	cmp	r3, #0
 800867e:	f280 80ad 	bge.w	80087dc <__kernel_rem_pio2f+0x364>
 8008682:	4623      	mov	r3, r4
 8008684:	2b00      	cmp	r3, #0
 8008686:	f2c0 80cb 	blt.w	8008820 <__kernel_rem_pio2f+0x3a8>
 800868a:	aa44      	add	r2, sp, #272	; 0x110
 800868c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008690:	4e36      	ldr	r6, [pc, #216]	; (800876c <__kernel_rem_pio2f+0x2f4>)
 8008692:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008778 <__kernel_rem_pio2f+0x300>
 8008696:	2000      	movs	r0, #0
 8008698:	1ae2      	subs	r2, r4, r3
 800869a:	e0b6      	b.n	800880a <__kernel_rem_pio2f+0x392>
 800869c:	2702      	movs	r7, #2
 800869e:	e790      	b.n	80085c2 <__kernel_rem_pio2f+0x14a>
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	b949      	cbnz	r1, 80086b8 <__kernel_rem_pio2f+0x240>
 80086a4:	b118      	cbz	r0, 80086ae <__kernel_rem_pio2f+0x236>
 80086a6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80086aa:	6020      	str	r0, [r4, #0]
 80086ac:	2001      	movs	r0, #1
 80086ae:	f10e 0e01 	add.w	lr, lr, #1
 80086b2:	3404      	adds	r4, #4
 80086b4:	4601      	mov	r1, r0
 80086b6:	e789      	b.n	80085cc <__kernel_rem_pio2f+0x154>
 80086b8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80086bc:	6020      	str	r0, [r4, #0]
 80086be:	4608      	mov	r0, r1
 80086c0:	e7f5      	b.n	80086ae <__kernel_rem_pio2f+0x236>
 80086c2:	1e74      	subs	r4, r6, #1
 80086c4:	ab08      	add	r3, sp, #32
 80086c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80086ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80086ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80086d2:	e783      	b.n	80085dc <__kernel_rem_pio2f+0x164>
 80086d4:	1e74      	subs	r4, r6, #1
 80086d6:	ab08      	add	r3, sp, #32
 80086d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80086dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80086e0:	e7f5      	b.n	80086ce <__kernel_rem_pio2f+0x256>
 80086e2:	ab08      	add	r3, sp, #32
 80086e4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80086e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086ec:	4301      	orrs	r1, r0
 80086ee:	e7ae      	b.n	800864e <__kernel_rem_pio2f+0x1d6>
 80086f0:	3001      	adds	r0, #1
 80086f2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 80086f6:	2f00      	cmp	r7, #0
 80086f8:	d0fa      	beq.n	80086f0 <__kernel_rem_pio2f+0x278>
 80086fa:	9b06      	ldr	r3, [sp, #24]
 80086fc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008700:	eb0d 0403 	add.w	r4, sp, r3
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	18f7      	adds	r7, r6, r3
 8008708:	ab1c      	add	r3, sp, #112	; 0x70
 800870a:	f106 0c01 	add.w	ip, r6, #1
 800870e:	3c4c      	subs	r4, #76	; 0x4c
 8008710:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008714:	4430      	add	r0, r6
 8008716:	4560      	cmp	r0, ip
 8008718:	da04      	bge.n	8008724 <__kernel_rem_pio2f+0x2ac>
 800871a:	4606      	mov	r6, r0
 800871c:	e711      	b.n	8008542 <__kernel_rem_pio2f+0xca>
 800871e:	9c05      	ldr	r4, [sp, #20]
 8008720:	2001      	movs	r0, #1
 8008722:	e7e6      	b.n	80086f2 <__kernel_rem_pio2f+0x27a>
 8008724:	9b04      	ldr	r3, [sp, #16]
 8008726:	f8dd e008 	ldr.w	lr, [sp, #8]
 800872a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800872e:	9306      	str	r3, [sp, #24]
 8008730:	ee07 3a90 	vmov	s15, r3
 8008734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008738:	2600      	movs	r6, #0
 800873a:	ece7 7a01 	vstmia	r7!, {s15}
 800873e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008778 <__kernel_rem_pio2f+0x300>
 8008742:	46b9      	mov	r9, r7
 8008744:	455e      	cmp	r6, fp
 8008746:	dd04      	ble.n	8008752 <__kernel_rem_pio2f+0x2da>
 8008748:	ece4 7a01 	vstmia	r4!, {s15}
 800874c:	f10c 0c01 	add.w	ip, ip, #1
 8008750:	e7e1      	b.n	8008716 <__kernel_rem_pio2f+0x29e>
 8008752:	ecfe 6a01 	vldmia	lr!, {s13}
 8008756:	ed39 7a01 	vldmdb	r9!, {s14}
 800875a:	3601      	adds	r6, #1
 800875c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008760:	e7f0      	b.n	8008744 <__kernel_rem_pio2f+0x2cc>
 8008762:	3c01      	subs	r4, #1
 8008764:	e777      	b.n	8008656 <__kernel_rem_pio2f+0x1de>
 8008766:	bf00      	nop
 8008768:	08009004 	.word	0x08009004
 800876c:	08008fd8 	.word	0x08008fd8
 8008770:	43800000 	.word	0x43800000
 8008774:	3b800000 	.word	0x3b800000
 8008778:	00000000 	.word	0x00000000
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	eeb0 0a48 	vmov.f32	s0, s16
 8008782:	1a98      	subs	r0, r3, r2
 8008784:	f000 f8ea 	bl	800895c <scalbnf>
 8008788:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008770 <__kernel_rem_pio2f+0x2f8>
 800878c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008794:	db19      	blt.n	80087ca <__kernel_rem_pio2f+0x352>
 8008796:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008774 <__kernel_rem_pio2f+0x2fc>
 800879a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800879e:	aa08      	add	r2, sp, #32
 80087a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087a4:	1c74      	adds	r4, r6, #1
 80087a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087aa:	3508      	adds	r5, #8
 80087ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80087b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80087b8:	ee10 3a10 	vmov	r3, s0
 80087bc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80087c0:	ee17 3a90 	vmov	r3, s15
 80087c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80087c8:	e74b      	b.n	8008662 <__kernel_rem_pio2f+0x1ea>
 80087ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80087ce:	aa08      	add	r2, sp, #32
 80087d0:	ee10 3a10 	vmov	r3, s0
 80087d4:	4634      	mov	r4, r6
 80087d6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80087da:	e742      	b.n	8008662 <__kernel_rem_pio2f+0x1ea>
 80087dc:	a808      	add	r0, sp, #32
 80087de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80087e2:	9001      	str	r0, [sp, #4]
 80087e4:	ee07 0a90 	vmov	s15, r0
 80087e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087ec:	3b01      	subs	r3, #1
 80087ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80087f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80087f6:	ed62 7a01 	vstmdb	r2!, {s15}
 80087fa:	e73f      	b.n	800867c <__kernel_rem_pio2f+0x204>
 80087fc:	ecf6 6a01 	vldmia	r6!, {s13}
 8008800:	ecb5 7a01 	vldmia	r5!, {s14}
 8008804:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008808:	3001      	adds	r0, #1
 800880a:	4550      	cmp	r0, sl
 800880c:	dc01      	bgt.n	8008812 <__kernel_rem_pio2f+0x39a>
 800880e:	4290      	cmp	r0, r2
 8008810:	ddf4      	ble.n	80087fc <__kernel_rem_pio2f+0x384>
 8008812:	a858      	add	r0, sp, #352	; 0x160
 8008814:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008818:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800881c:	3b01      	subs	r3, #1
 800881e:	e731      	b.n	8008684 <__kernel_rem_pio2f+0x20c>
 8008820:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008822:	2b02      	cmp	r3, #2
 8008824:	dc09      	bgt.n	800883a <__kernel_rem_pio2f+0x3c2>
 8008826:	2b00      	cmp	r3, #0
 8008828:	dc2b      	bgt.n	8008882 <__kernel_rem_pio2f+0x40a>
 800882a:	d044      	beq.n	80088b6 <__kernel_rem_pio2f+0x43e>
 800882c:	f009 0007 	and.w	r0, r9, #7
 8008830:	b059      	add	sp, #356	; 0x164
 8008832:	ecbd 8b04 	vpop	{d8-d9}
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800883c:	2b03      	cmp	r3, #3
 800883e:	d1f5      	bne.n	800882c <__kernel_rem_pio2f+0x3b4>
 8008840:	aa30      	add	r2, sp, #192	; 0xc0
 8008842:	1f0b      	subs	r3, r1, #4
 8008844:	4413      	add	r3, r2
 8008846:	461a      	mov	r2, r3
 8008848:	4620      	mov	r0, r4
 800884a:	2800      	cmp	r0, #0
 800884c:	f1a2 0204 	sub.w	r2, r2, #4
 8008850:	dc52      	bgt.n	80088f8 <__kernel_rem_pio2f+0x480>
 8008852:	4622      	mov	r2, r4
 8008854:	2a01      	cmp	r2, #1
 8008856:	f1a3 0304 	sub.w	r3, r3, #4
 800885a:	dc5d      	bgt.n	8008918 <__kernel_rem_pio2f+0x4a0>
 800885c:	ab30      	add	r3, sp, #192	; 0xc0
 800885e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008778 <__kernel_rem_pio2f+0x300>
 8008862:	440b      	add	r3, r1
 8008864:	2c01      	cmp	r4, #1
 8008866:	dc67      	bgt.n	8008938 <__kernel_rem_pio2f+0x4c0>
 8008868:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800886c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008870:	2f00      	cmp	r7, #0
 8008872:	d167      	bne.n	8008944 <__kernel_rem_pio2f+0x4cc>
 8008874:	edc8 6a00 	vstr	s13, [r8]
 8008878:	ed88 7a01 	vstr	s14, [r8, #4]
 800887c:	edc8 7a02 	vstr	s15, [r8, #8]
 8008880:	e7d4      	b.n	800882c <__kernel_rem_pio2f+0x3b4>
 8008882:	ab30      	add	r3, sp, #192	; 0xc0
 8008884:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8008778 <__kernel_rem_pio2f+0x300>
 8008888:	440b      	add	r3, r1
 800888a:	4622      	mov	r2, r4
 800888c:	2a00      	cmp	r2, #0
 800888e:	da24      	bge.n	80088da <__kernel_rem_pio2f+0x462>
 8008890:	b34f      	cbz	r7, 80088e6 <__kernel_rem_pio2f+0x46e>
 8008892:	eef1 7a47 	vneg.f32	s15, s14
 8008896:	edc8 7a00 	vstr	s15, [r8]
 800889a:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800889e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088a2:	aa31      	add	r2, sp, #196	; 0xc4
 80088a4:	2301      	movs	r3, #1
 80088a6:	429c      	cmp	r4, r3
 80088a8:	da20      	bge.n	80088ec <__kernel_rem_pio2f+0x474>
 80088aa:	b10f      	cbz	r7, 80088b0 <__kernel_rem_pio2f+0x438>
 80088ac:	eef1 7a67 	vneg.f32	s15, s15
 80088b0:	edc8 7a01 	vstr	s15, [r8, #4]
 80088b4:	e7ba      	b.n	800882c <__kernel_rem_pio2f+0x3b4>
 80088b6:	ab30      	add	r3, sp, #192	; 0xc0
 80088b8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8008778 <__kernel_rem_pio2f+0x300>
 80088bc:	440b      	add	r3, r1
 80088be:	2c00      	cmp	r4, #0
 80088c0:	da05      	bge.n	80088ce <__kernel_rem_pio2f+0x456>
 80088c2:	b10f      	cbz	r7, 80088c8 <__kernel_rem_pio2f+0x450>
 80088c4:	eef1 7a67 	vneg.f32	s15, s15
 80088c8:	edc8 7a00 	vstr	s15, [r8]
 80088cc:	e7ae      	b.n	800882c <__kernel_rem_pio2f+0x3b4>
 80088ce:	ed33 7a01 	vldmdb	r3!, {s14}
 80088d2:	3c01      	subs	r4, #1
 80088d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088d8:	e7f1      	b.n	80088be <__kernel_rem_pio2f+0x446>
 80088da:	ed73 7a01 	vldmdb	r3!, {s15}
 80088de:	3a01      	subs	r2, #1
 80088e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088e4:	e7d2      	b.n	800888c <__kernel_rem_pio2f+0x414>
 80088e6:	eef0 7a47 	vmov.f32	s15, s14
 80088ea:	e7d4      	b.n	8008896 <__kernel_rem_pio2f+0x41e>
 80088ec:	ecb2 7a01 	vldmia	r2!, {s14}
 80088f0:	3301      	adds	r3, #1
 80088f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088f6:	e7d6      	b.n	80088a6 <__kernel_rem_pio2f+0x42e>
 80088f8:	edd2 7a00 	vldr	s15, [r2]
 80088fc:	edd2 6a01 	vldr	s13, [r2, #4]
 8008900:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008904:	3801      	subs	r0, #1
 8008906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800890a:	ed82 7a00 	vstr	s14, [r2]
 800890e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008912:	edc2 7a01 	vstr	s15, [r2, #4]
 8008916:	e798      	b.n	800884a <__kernel_rem_pio2f+0x3d2>
 8008918:	edd3 7a00 	vldr	s15, [r3]
 800891c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008920:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008924:	3a01      	subs	r2, #1
 8008926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800892a:	ed83 7a00 	vstr	s14, [r3]
 800892e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008932:	edc3 7a01 	vstr	s15, [r3, #4]
 8008936:	e78d      	b.n	8008854 <__kernel_rem_pio2f+0x3dc>
 8008938:	ed33 7a01 	vldmdb	r3!, {s14}
 800893c:	3c01      	subs	r4, #1
 800893e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008942:	e78f      	b.n	8008864 <__kernel_rem_pio2f+0x3ec>
 8008944:	eef1 6a66 	vneg.f32	s13, s13
 8008948:	eeb1 7a47 	vneg.f32	s14, s14
 800894c:	edc8 6a00 	vstr	s13, [r8]
 8008950:	ed88 7a01 	vstr	s14, [r8, #4]
 8008954:	eef1 7a67 	vneg.f32	s15, s15
 8008958:	e790      	b.n	800887c <__kernel_rem_pio2f+0x404>
 800895a:	bf00      	nop

0800895c <scalbnf>:
 800895c:	ee10 3a10 	vmov	r3, s0
 8008960:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008964:	d02b      	beq.n	80089be <scalbnf+0x62>
 8008966:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800896a:	d302      	bcc.n	8008972 <scalbnf+0x16>
 800896c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008970:	4770      	bx	lr
 8008972:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008976:	d123      	bne.n	80089c0 <scalbnf+0x64>
 8008978:	4b24      	ldr	r3, [pc, #144]	; (8008a0c <scalbnf+0xb0>)
 800897a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8008a10 <scalbnf+0xb4>
 800897e:	4298      	cmp	r0, r3
 8008980:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008984:	db17      	blt.n	80089b6 <scalbnf+0x5a>
 8008986:	ee10 3a10 	vmov	r3, s0
 800898a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800898e:	3a19      	subs	r2, #25
 8008990:	f24c 3150 	movw	r1, #50000	; 0xc350
 8008994:	4288      	cmp	r0, r1
 8008996:	dd15      	ble.n	80089c4 <scalbnf+0x68>
 8008998:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008a14 <scalbnf+0xb8>
 800899c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008a18 <scalbnf+0xbc>
 80089a0:	ee10 3a10 	vmov	r3, s0
 80089a4:	eeb0 7a67 	vmov.f32	s14, s15
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bfb8      	it	lt
 80089ac:	eef0 7a66 	vmovlt.f32	s15, s13
 80089b0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80089b4:	4770      	bx	lr
 80089b6:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008a1c <scalbnf+0xc0>
 80089ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80089be:	4770      	bx	lr
 80089c0:	0dd2      	lsrs	r2, r2, #23
 80089c2:	e7e5      	b.n	8008990 <scalbnf+0x34>
 80089c4:	4410      	add	r0, r2
 80089c6:	28fe      	cmp	r0, #254	; 0xfe
 80089c8:	dce6      	bgt.n	8008998 <scalbnf+0x3c>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	dd06      	ble.n	80089dc <scalbnf+0x80>
 80089ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089d2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80089d6:	ee00 3a10 	vmov	s0, r3
 80089da:	4770      	bx	lr
 80089dc:	f110 0f16 	cmn.w	r0, #22
 80089e0:	da09      	bge.n	80089f6 <scalbnf+0x9a>
 80089e2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008a1c <scalbnf+0xc0>
 80089e6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008a20 <scalbnf+0xc4>
 80089ea:	ee10 3a10 	vmov	r3, s0
 80089ee:	eeb0 7a67 	vmov.f32	s14, s15
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	e7d9      	b.n	80089aa <scalbnf+0x4e>
 80089f6:	3019      	adds	r0, #25
 80089f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80089fc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008a00:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008a24 <scalbnf+0xc8>
 8008a04:	ee07 3a90 	vmov	s15, r3
 8008a08:	e7d7      	b.n	80089ba <scalbnf+0x5e>
 8008a0a:	bf00      	nop
 8008a0c:	ffff3cb0 	.word	0xffff3cb0
 8008a10:	4c000000 	.word	0x4c000000
 8008a14:	7149f2ca 	.word	0x7149f2ca
 8008a18:	f149f2ca 	.word	0xf149f2ca
 8008a1c:	0da24260 	.word	0x0da24260
 8008a20:	8da24260 	.word	0x8da24260
 8008a24:	33000000 	.word	0x33000000

08008a28 <floorf>:
 8008a28:	ee10 3a10 	vmov	r3, s0
 8008a2c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008a30:	3a7f      	subs	r2, #127	; 0x7f
 8008a32:	2a16      	cmp	r2, #22
 8008a34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a38:	dc2a      	bgt.n	8008a90 <floorf+0x68>
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	da11      	bge.n	8008a62 <floorf+0x3a>
 8008a3e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008aa0 <floorf+0x78>
 8008a42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4e:	dd05      	ble.n	8008a5c <floorf+0x34>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	da23      	bge.n	8008a9c <floorf+0x74>
 8008a54:	4a13      	ldr	r2, [pc, #76]	; (8008aa4 <floorf+0x7c>)
 8008a56:	2900      	cmp	r1, #0
 8008a58:	bf18      	it	ne
 8008a5a:	4613      	movne	r3, r2
 8008a5c:	ee00 3a10 	vmov	s0, r3
 8008a60:	4770      	bx	lr
 8008a62:	4911      	ldr	r1, [pc, #68]	; (8008aa8 <floorf+0x80>)
 8008a64:	4111      	asrs	r1, r2
 8008a66:	420b      	tst	r3, r1
 8008a68:	d0fa      	beq.n	8008a60 <floorf+0x38>
 8008a6a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008aa0 <floorf+0x78>
 8008a6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7a:	ddef      	ble.n	8008a5c <floorf+0x34>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bfbe      	ittt	lt
 8008a80:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008a84:	fa40 f202 	asrlt.w	r2, r0, r2
 8008a88:	189b      	addlt	r3, r3, r2
 8008a8a:	ea23 0301 	bic.w	r3, r3, r1
 8008a8e:	e7e5      	b.n	8008a5c <floorf+0x34>
 8008a90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008a94:	d3e4      	bcc.n	8008a60 <floorf+0x38>
 8008a96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a9a:	4770      	bx	lr
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	e7dd      	b.n	8008a5c <floorf+0x34>
 8008aa0:	7149f2ca 	.word	0x7149f2ca
 8008aa4:	bf800000 	.word	0xbf800000
 8008aa8:	007fffff 	.word	0x007fffff

08008aac <_init>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_fini>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr
